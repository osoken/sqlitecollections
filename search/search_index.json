{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Macro Syntax Error Line 6 in Markdown file: expected token 'end of statement block', got 'string' include - markdown \"../README.md\"","title":"Overview"},{"location":"#macro-syntax-error","text":"Line 6 in Markdown file: expected token 'end of statement block', got 'string' include - markdown \"../README.md\"","title":"Macro Syntax Error"},{"location":"benchmark/","text":"py36 py37 py38 py39 py310 dict list set timing subject builtin sqlitecollections ratio class clear 0.00391 0.00552 1.41127 BenchmarkClear __contains__ 0.00371 0.00423 1.13905 BenchmarkContains copy 0.00434 0.00845 1.94784 BenchmarkCopy __delitem__ 0.00388 0.00611 1.57393 BenchmarkDelitem get 0.00403 0.00473 1.17265 BenchmarkGet get (unsuccessful search) 0.00402 0.00417 1.03882 BenchmarkGetDefault __getitem__ 0.00416 0.00411 0.98748 BenchmarkGetitem __init__ 0.00394 0.04269 10.83606 BenchmarkInit items 0.00415 0.01169 2.81898 BenchmarkItems __iter__ 0.00406 0.00814 2.00519 BenchmarkIter keys 0.0041 0.00842 2.05125 BenchmarkKeys __len__ 0.00385 0.00391 1.01574 BenchmarkLen __contains__ (unsuccessful search) 0.00384 0.00389 1.01241 BenchmarkNotContains pop 0.00389 0.00658 1.69084 BenchmarkPop pop (unsuccessful search) 0.00395 0.00512 1.2943 BenchmarkPopDefault popitem 0.00382 0.00652 1.70526 BenchmarkPopitem setdefault 0.00405 0.00553 1.36426 BenchmarkSetdefault setdefault (unsuccessful search) 0.00412 0.0056 1.35763 BenchmarkSetdefaultAddItem __setitem__ (add new item) 0.00393 0.00647 1.64556 BenchmarkSetitemAddNewItem __setitem__ (replace) 0.00398 0.00635 1.59791 BenchmarkSetitemReplace update 0.00389 0.0066 1.69533 BenchmarkUpdate update (many) 0.00464 0.56723 122.3416 BenchmarkUpdateMany values 0.00387 0.00815 2.1084 BenchmarkValues approximate memory usage subject builtin sqlitecollections ratio class clear 0.0 0.0 1.0 BenchmarkClear __contains__ 0.0 0.0 1.0 BenchmarkContains copy 0.05469 0.0 0.0 BenchmarkCopy __delitem__ 0.0 0.0 1.0 BenchmarkDelitem get 0.0 0.0 1.0 BenchmarkGet get (unsuccessful search) 0.0 0.0 1.0 BenchmarkGetDefault __getitem__ 0.0 0.0 1.0 BenchmarkGetitem __init__ 0.00781 0.01562 2.0 BenchmarkInit items 0.23828 0.26172 1.09836 BenchmarkItems __iter__ 0.0 0.0 1.0 BenchmarkIter keys 0.0 0.0 1.0 BenchmarkKeys __len__ 0.0 0.0 1.0 BenchmarkLen __contains__ (unsuccessful search) 0.0 0.0 1.0 BenchmarkNotContains pop 0.0 0.0 1.0 BenchmarkPop pop (unsuccessful search) 0.0 0.0 1.0 BenchmarkPopDefault popitem 0.0 0.0 1.0 BenchmarkPopitem setdefault 0.0 0.0 1.0 BenchmarkSetdefault setdefault (unsuccessful search) 0.0 0.0 1.0 BenchmarkSetdefaultAddItem __setitem__ (add new item) 0.0 0.0 1.0 BenchmarkSetitemAddNewItem __setitem__ (replace) 0.0 0.0 1.0 BenchmarkSetitemReplace update 0.0 0.0 1.0 BenchmarkUpdate update (many) 0.14844 0.0 0.0 BenchmarkUpdateMany values 0.0 0.0 1.0 BenchmarkValues timing subject builtin sqlitecollections ratio class __add__ 0.00414 0.00912 2.20163 BenchmarkAdd append 0.00376 0.00593 1.57946 BenchmarkAppend clear 0.00371 0.00609 1.6387 BenchmarkClear __contains__ 0.00371 0.00393 1.06085 BenchmarkContains copy 0.00378 0.00806 2.1323 BenchmarkCopy count 0.00372 0.00386 1.03808 BenchmarkCount __init__ 0.00358 0.01949 5.45104 BenchmarkCreateWithInitialData __delitem__ 0.00392 0.08765 22.36844 BenchmarkDelitem __delitem__ (slice) 0.00361 0.16846 46.67056 BenchmarkDelitemSlice __delitem__ (slice with skip) 0.00368 0.16637 45.24193 BenchmarkDelitemSliceSkip extend 0.00388 0.0059 1.51891 BenchmarkExtend __getitem__ 0.00398 0.00404 1.01299 BenchmarkGetitem __getitem__ (slice) 0.00372 0.08552 22.9692 BenchmarkGetitemSlice __getitem__ (slice with skip) 0.00352 0.01009 2.86372 BenchmarkGetitemSliceSkip __iadd__ 0.00378 0.00599 1.58521 BenchmarkIadd __imult__ 0.00395 0.22854 57.92156 BenchmarkImult index 0.00374 0.00394 1.05128 BenchmarkIndex index (unsuccessful search) 0.00389 0.00416 1.07012 BenchmarkIndexUnsuccessfulSearch insert 0.00388 0.14994 38.68042 BenchmarkInsert __len__ 0.00379 0.00381 1.00464 BenchmarkLen __mult__ 0.0036 0.22812 63.36 BenchmarkMult __contains__ (unsuccessful search) 0.00369 0.004 1.08608 BenchmarkNotContains pop 0.00374 0.07997 21.36755 BenchmarkPop remove 0.0039 0.11148 28.58825 BenchmarkRemove __setitem__ 0.0039 0.00604 1.54723 BenchmarkSetitem __setitem__ (slice) 0.00366 0.15408 42.10073 BenchmarkSetitemSlice __setitem__ (slice with skip) 0.00374 0.0145 3.87251 BenchmarkSetitemSliceSkip sort (balanced) 0.00398 0.33144 83.32439 BenchmarkSortBalanced sort (fastest) 0.00386 0.32927 85.30726 BenchmarkSortFastest sort (memory_saving) 0.00391 3.40285 871.01716 BenchmarkSortMemorySaving approximate memory usage subject builtin sqlitecollections ratio class __add__ 0.0 0.0 1.0 BenchmarkAdd append 0.0 0.0 1.0 BenchmarkAppend clear 0.0 0.0 1.0 BenchmarkClear __contains__ 0.0 0.0 1.0 BenchmarkContains copy 0.0 0.0 1.0 BenchmarkCopy count 0.0 0.0 1.0 BenchmarkCount __init__ 0.0 0.07422 inf BenchmarkCreateWithInitialData __delitem__ 0.0 0.0 1.0 BenchmarkDelitem __delitem__ (slice) 0.0 0.0 1.0 BenchmarkDelitemSlice __delitem__ (slice with skip) 0.0 0.0 1.0 BenchmarkDelitemSliceSkip extend 0.0 0.0 1.0 BenchmarkExtend __getitem__ 0.0 0.0 1.0 BenchmarkGetitem __getitem__ (slice) 0.0 0.00391 inf BenchmarkGetitemSlice __getitem__ (slice with skip) 0.0 0.00391 inf BenchmarkGetitemSliceSkip __iadd__ 0.0 0.0 1.0 BenchmarkIadd __imult__ 0.0 0.0 1.0 BenchmarkImult index 0.0 0.0 1.0 BenchmarkIndex index (unsuccessful search) 0.0 0.0 1.0 BenchmarkIndexUnsuccessfulSearch insert 0.0 0.0 1.0 BenchmarkInsert __len__ 0.0 0.00391 inf BenchmarkLen __mult__ 0.0 0.0 1.0 BenchmarkMult __contains__ (unsuccessful search) 0.0 0.00391 inf BenchmarkNotContains pop 0.0 0.0 1.0 BenchmarkPop remove 0.0 0.00391 inf BenchmarkRemove __setitem__ 0.0 0.0 1.0 BenchmarkSetitem __setitem__ (slice) 0.0 0.00391 inf BenchmarkSetitemSlice __setitem__ (slice with skip) 0.00391 0.0 0.0 BenchmarkSetitemSliceSkip sort (balanced) 0.0 0.13672 inf BenchmarkSortBalanced sort (fastest) 0.0 0.13281 inf BenchmarkSortFastest sort (memory_saving) 0.0 0.0 1.0 BenchmarkSortMemorySaving timing subject builtin sqlitecollections ratio class add (existing item) 0.00354 0.00472 1.33411 BenchmarkAddExistingItem add (new item) 0.00382 0.00564 1.47798 BenchmarkAddNewItem __and__ 0.00358 0.009 2.51341 BenchmarkAnd clear 0.00374 0.00526 1.40746 BenchmarkClear __contains__ 0.00356 0.00371 1.04177 BenchmarkContains copy 0.00368 0.00711 1.93244 BenchmarkCopy difference 0.00368 0.00712 1.93851 BenchmarkDifference discard 0.00354 0.00535 1.5129 BenchmarkDiscard discard (no changes) 0.0038 0.00506 1.33161 BenchmarkDiscardNoChanges __ge__ 0.0038 0.00375 0.98817 BenchmarkGe __ge__ (not greater than or equals to) 0.00351 0.00409 1.16386 BenchmarkGeNot __gt__ 0.00372 0.0145 3.90262 BenchmarkGt __gt__ (not greater than) 0.00377 0.03129 8.28997 BenchmarkGtNot __iand__ 0.00357 0.00737 2.06558 BenchmarkIand __init__ 0.00357 0.01578 4.418 BenchmarkInit intersection 0.00376 0.00953 2.53263 BenchmarkIntersection intersection_update 0.00419 0.00719 1.71627 BenchmarkIntersectionUpdate __ior__ 0.00389 0.00751 1.92782 BenchmarkIor isdisjoint 0.00358 0.00356 0.99433 BenchmarkIsdisjoint isdisjoint (not disjoint) 0.00357 0.00374 1.04868 BenchmarkIsdisjointNot issubset 0.00381 0.029 7.60843 BenchmarkIssubset issubset (not subset) 0.00362 0.00939 2.59632 BenchmarkIssubsetNot issuperset 0.00356 0.02413 6.78288 BenchmarkIssuperset issuperset (not superset) 0.00354 0.00405 1.14404 BenchmarkIssupersetNot __ixor__ 0.00366 0.1896 51.76161 BenchmarkIxor __le__ 0.00354 0.00443 1.25016 BenchmarkLe __le__ (not less than or equals to) 0.00368 0.00408 1.10694 BenchmarkLeNot __len__ 0.0038 0.0036 0.94721 BenchmarkLen __lt__ 0.00374 0.00445 1.18714 BenchmarkLt __lt__ (not less than) 0.00375 0.00375 1.00018 BenchmarkLtNot __contains__ (unsuccessful search) 0.00387 0.00375 0.96722 BenchmarkNotContains __or__ 0.00364 0.01007 2.76967 BenchmarkOr pop 0.00385 0.00563 1.46284 BenchmarkPop remove 0.00362 0.00575 1.58715 BenchmarkRemove __sub__ 0.00365 0.00715 1.95629 BenchmarkSub symmetric_difference 0.00361 0.04201 11.6436 BenchmarkSymmetricDifference symmetric_difference_update 0.00395 0.03992 10.10783 BenchmarkSymmetricDifferenceUpdate union 0.00392 0.01023 2.60973 BenchmarkUnion update 0.00383 0.00716 1.87055 BenchmarkUpdate __xor__ 0.00352 0.04144 11.75671 BenchmarkXor approximate memory usage subject builtin sqlitecollections ratio class add (existing item) 0.01562 0.00391 0.25 BenchmarkAddExistingItem add (new item) 0.0 0.0 1.0 BenchmarkAddNewItem __and__ 0.0 0.0 1.0 BenchmarkAnd clear 0.0 0.0 1.0 BenchmarkClear __contains__ 0.0 0.0 1.0 BenchmarkContains copy 0.0 0.0 1.0 BenchmarkCopy difference 0.0 0.0 1.0 BenchmarkDifference discard 0.0 0.0 1.0 BenchmarkDiscard discard (no changes) 0.0 0.0 1.0 BenchmarkDiscardNoChanges __ge__ 0.0 0.0 1.0 BenchmarkGe __ge__ (not greater than or equals to) 0.0 0.0 1.0 BenchmarkGeNot __gt__ 0.0 0.0 1.0 BenchmarkGt __gt__ (not greater than) 0.0 0.0 1.0 BenchmarkGtNot __iand__ 0.0 0.0 1.0 BenchmarkIand __init__ 0.0 0.00781 inf BenchmarkInit intersection 0.0 0.0 1.0 BenchmarkIntersection intersection_update 0.0 0.0 1.0 BenchmarkIntersectionUpdate __ior__ 0.0 0.0 1.0 BenchmarkIor isdisjoint 0.0 0.0 1.0 BenchmarkIsdisjoint isdisjoint (not disjoint) 0.0 0.0 1.0 BenchmarkIsdisjointNot issubset 0.0 0.0 1.0 BenchmarkIssubset issubset (not subset) 0.0 0.0 1.0 BenchmarkIssubsetNot issuperset 0.0 0.0 1.0 BenchmarkIssuperset issuperset (not superset) 0.0 0.0 1.0 BenchmarkIssupersetNot __ixor__ 0.0 0.0 1.0 BenchmarkIxor __le__ 0.0 0.0 1.0 BenchmarkLe __le__ (not less than or equals to) 0.0 0.0 1.0 BenchmarkLeNot __len__ 0.0 0.0 1.0 BenchmarkLen __lt__ 0.0 0.0 1.0 BenchmarkLt __lt__ (not less than) 0.0 0.0 1.0 BenchmarkLtNot __contains__ (unsuccessful search) 0.0 0.0 1.0 BenchmarkNotContains __or__ 0.0 0.0 1.0 BenchmarkOr pop 0.0 0.0 1.0 BenchmarkPop remove 0.0 0.0 1.0 BenchmarkRemove __sub__ 0.0 0.0 1.0 BenchmarkSub symmetric_difference 0.0 0.0 1.0 BenchmarkSymmetricDifference symmetric_difference_update 0.0 0.0 1.0 BenchmarkSymmetricDifferenceUpdate union 0.0 0.0 1.0 BenchmarkUnion update 0.0 0.0 1.0 BenchmarkUpdate __xor__ 0.0 0.0 1.0 BenchmarkXor dict list set timing subject builtin sqlitecollections ratio class clear 0.00367 0.00691 1.87955 BenchmarkClear __contains__ 0.00369 0.00383 1.03797 BenchmarkContains copy 0.0038 0.00921 2.4212 BenchmarkCopy __delitem__ 0.00364 0.00601 1.65226 BenchmarkDelitem get 0.00352 0.00378 1.07159 BenchmarkGet get (unsuccessful search) 0.00356 0.00382 1.07377 BenchmarkGetDefault __getitem__ 0.00365 0.00383 1.0498 BenchmarkGetitem __init__ 0.00389 0.04382 11.26927 BenchmarkInit items 0.00398 0.01224 3.07247 BenchmarkItems __iter__ 0.00366 0.00824 2.25197 BenchmarkIter keys 0.00375 0.00837 2.23448 BenchmarkKeys __len__ 0.00387 0.00382 0.98733 BenchmarkLen __contains__ (unsuccessful search) 0.00371 0.00386 1.04157 BenchmarkNotContains pop 0.00392 0.00698 1.77823 BenchmarkPop pop (unsuccessful search) 0.00395 0.00565 1.42935 BenchmarkPopDefault popitem 0.00397 0.00736 1.85462 BenchmarkPopitem setdefault 0.00387 0.00547 1.41434 BenchmarkSetdefault setdefault (unsuccessful search) 0.00382 0.00593 1.5511 BenchmarkSetdefaultAddItem __setitem__ (add new item) 0.00379 0.00689 1.81874 BenchmarkSetitemAddNewItem __setitem__ (replace) 0.00384 0.00642 1.67208 BenchmarkSetitemReplace update 0.00394 0.00638 1.61989 BenchmarkUpdate update (many) 0.00456 0.56238 123.41597 BenchmarkUpdateMany values 0.00362 0.00815 2.24966 BenchmarkValues approximate memory usage subject builtin sqlitecollections ratio class clear 0.00391 0.0 0.0 BenchmarkClear __contains__ 0.0 0.0 1.0 BenchmarkContains copy 0.05469 0.0 0.0 BenchmarkCopy __delitem__ 0.0 0.0 1.0 BenchmarkDelitem get 0.0 0.0 1.0 BenchmarkGet get (unsuccessful search) 0.0 0.0 1.0 BenchmarkGetDefault __getitem__ 0.0 0.0 1.0 BenchmarkGetitem __init__ 0.0 0.0 1.0 BenchmarkInit items 0.125 0.24219 1.9375 BenchmarkItems __iter__ 0.0 0.125 inf BenchmarkIter keys 0.0 0.03516 inf BenchmarkKeys __len__ 0.0 0.0 1.0 BenchmarkLen __contains__ (unsuccessful search) 0.0 0.0 1.0 BenchmarkNotContains pop 0.0 0.0 1.0 BenchmarkPop pop (unsuccessful search) 0.00391 0.0 0.0 BenchmarkPopDefault popitem 0.0 0.0 1.0 BenchmarkPopitem setdefault 0.00391 0.0 0.0 BenchmarkSetdefault setdefault (unsuccessful search) 0.0 0.0 1.0 BenchmarkSetdefaultAddItem __setitem__ (add new item) 0.00391 0.0 0.0 BenchmarkSetitemAddNewItem __setitem__ (replace) 0.0 0.0 1.0 BenchmarkSetitemReplace update 0.0 0.0 1.0 BenchmarkUpdate update (many) 0.14062 0.0 0.0 BenchmarkUpdateMany values 0.125 0.0 0.0 BenchmarkValues timing subject builtin sqlitecollections ratio class __add__ 0.00362 0.00943 2.60504 BenchmarkAdd append 0.00385 0.00611 1.58807 BenchmarkAppend clear 0.00367 0.00635 1.73083 BenchmarkClear __contains__ 0.00367 0.00372 1.01342 BenchmarkContains copy 0.00374 0.00817 2.18394 BenchmarkCopy count 0.00383 0.00387 1.00867 BenchmarkCount __init__ 0.00377 0.02164 5.74369 BenchmarkCreateWithInitialData __delitem__ 0.00376 0.07856 20.90863 BenchmarkDelitem __delitem__ (slice) 0.00345 0.15006 43.46357 BenchmarkDelitemSlice __delitem__ (slice with skip) 0.0038 0.15007 39.53421 BenchmarkDelitemSliceSkip extend 0.00386 0.00635 1.64415 BenchmarkExtend __getitem__ 0.00383 0.0039 1.01766 BenchmarkGetitem __getitem__ (slice) 0.00382 0.08754 22.90724 BenchmarkGetitemSlice __getitem__ (slice with skip) 0.00388 0.01164 3.00095 BenchmarkGetitemSliceSkip __iadd__ 0.00385 0.0065 1.68707 BenchmarkIadd __imult__ 0.00382 0.23182 60.65777 BenchmarkImult index 0.00355 0.00395 1.11355 BenchmarkIndex index (unsuccessful search) 0.00359 0.00387 1.07886 BenchmarkIndexUnsuccessfulSearch insert 0.00363 0.14841 40.88405 BenchmarkInsert __len__ 0.00391 0.0039 0.99783 BenchmarkLen __mult__ 0.00362 0.23467 64.8889 BenchmarkMult __contains__ (unsuccessful search) 0.00368 0.00384 1.04395 BenchmarkNotContains pop 0.00385 0.07928 20.60491 BenchmarkPop remove 0.00355 0.11074 31.19068 BenchmarkRemove __setitem__ 0.00361 0.00614 1.69835 BenchmarkSetitem __setitem__ (slice) 0.00359 0.15799 43.97751 BenchmarkSetitemSlice __setitem__ (slice with skip) 0.00363 0.01513 4.16763 BenchmarkSetitemSliceSkip sort (balanced) 0.00373 0.32882 88.04625 BenchmarkSortBalanced sort (fastest) 0.00358 0.33496 93.62373 BenchmarkSortFastest sort (memory_saving) 0.00368 3.4192 928.04368 BenchmarkSortMemorySaving approximate memory usage subject builtin sqlitecollections ratio class __add__ 0.0 0.0 1.0 BenchmarkAdd append 0.0 0.0 1.0 BenchmarkAppend clear 0.0 0.0 1.0 BenchmarkClear __contains__ 0.0 0.0 1.0 BenchmarkContains copy 0.0 0.0 1.0 BenchmarkCopy count 0.0 0.0 1.0 BenchmarkCount __init__ 0.0 0.01562 inf BenchmarkCreateWithInitialData __delitem__ 0.0 0.0 1.0 BenchmarkDelitem __delitem__ (slice) 0.0 0.0 1.0 BenchmarkDelitemSlice __delitem__ (slice with skip) 0.0 0.0 1.0 BenchmarkDelitemSliceSkip extend 0.0 0.0 1.0 BenchmarkExtend __getitem__ 0.0 0.0 1.0 BenchmarkGetitem __getitem__ (slice) 0.0 0.0 1.0 BenchmarkGetitemSlice __getitem__ (slice with skip) 0.0 0.0 1.0 BenchmarkGetitemSliceSkip __iadd__ 0.0 0.0 1.0 BenchmarkIadd __imult__ 0.0 0.0 1.0 BenchmarkImult index 0.0 0.0 1.0 BenchmarkIndex index (unsuccessful search) 0.0 0.0 1.0 BenchmarkIndexUnsuccessfulSearch insert 0.0 0.0 1.0 BenchmarkInsert __len__ 0.0 0.0 1.0 BenchmarkLen __mult__ 0.0 0.0 1.0 BenchmarkMult __contains__ (unsuccessful search) 0.0 0.0 1.0 BenchmarkNotContains pop 0.0 0.0 1.0 BenchmarkPop remove 0.0 0.0 1.0 BenchmarkRemove __setitem__ 0.0 0.0 1.0 BenchmarkSetitem __setitem__ (slice) 0.0 0.0 1.0 BenchmarkSetitemSlice __setitem__ (slice with skip) 0.0 0.0 1.0 BenchmarkSetitemSliceSkip sort (balanced) 0.0 0.0 1.0 BenchmarkSortBalanced sort (fastest) 0.0 0.18359 inf BenchmarkSortFastest sort (memory_saving) 0.0 0.0 1.0 BenchmarkSortMemorySaving timing subject builtin sqlitecollections ratio class add (existing item) 0.00376 0.0051 1.3576 BenchmarkAddExistingItem add (new item) 0.00383 0.00631 1.64937 BenchmarkAddNewItem __and__ 0.00371 0.01153 3.10635 BenchmarkAnd clear 0.00369 0.00816 2.20961 BenchmarkClear __contains__ 0.00369 0.00389 1.05298 BenchmarkContains copy 0.00377 0.00812 2.15565 BenchmarkCopy difference 0.00379 0.0079 2.08219 BenchmarkDifference discard 0.00366 0.00634 1.73374 BenchmarkDiscard discard (no changes) 0.00383 0.0051 1.3309 BenchmarkDiscardNoChanges __ge__ 0.00357 0.00374 1.04763 BenchmarkGe __ge__ (not greater than or equals to) 0.00371 0.00443 1.19471 BenchmarkGeNot __gt__ 0.00369 0.00711 1.92565 BenchmarkGt __gt__ (not greater than) 0.0036 0.03163 8.77844 BenchmarkGtNot __iand__ 0.00363 0.00737 2.02872 BenchmarkIand __init__ 0.00351 0.01588 4.5213 BenchmarkInit intersection 0.00394 0.01011 2.56318 BenchmarkIntersection intersection_update 0.00361 0.00748 2.07564 BenchmarkIntersectionUpdate __ior__ 0.0037 0.00743 2.01185 BenchmarkIor isdisjoint 0.00357 0.00379 1.06074 BenchmarkIsdisjoint isdisjoint (not disjoint) 0.00368 0.00369 1.00232 BenchmarkIsdisjointNot issubset 0.00375 0.03046 8.1288 BenchmarkIssubset issubset (not subset) 0.00371 0.00964 2.59681 BenchmarkIssubsetNot issuperset 0.00371 0.0242 6.52618 BenchmarkIssuperset issuperset (not superset) 0.00371 0.00451 1.21691 BenchmarkIssupersetNot __ixor__ 0.00361 0.05951 16.47229 BenchmarkIxor __le__ 0.00412 0.00492 1.19431 BenchmarkLe __le__ (not less than or equals to) 0.00365 0.0037 1.01398 BenchmarkLeNot __len__ 0.00376 0.00368 0.97935 BenchmarkLen __lt__ 0.00363 0.00477 1.31679 BenchmarkLt __lt__ (not less than) 0.00371 0.00368 0.99257 BenchmarkLtNot __contains__ (unsuccessful search) 0.00343 0.00371 1.082 BenchmarkNotContains __or__ 0.00356 0.01135 3.18471 BenchmarkOr pop 0.0035 0.00631 1.80561 BenchmarkPop remove 0.00354 0.00643 1.81947 BenchmarkRemove __sub__ 0.00343 0.00833 2.43026 BenchmarkSub symmetric_difference 0.00351 0.04321 12.30169 BenchmarkSymmetricDifference symmetric_difference_update 0.00355 0.04043 11.38015 BenchmarkSymmetricDifferenceUpdate union 0.00353 0.01054 2.98905 BenchmarkUnion update 0.00359 0.0077 2.14217 BenchmarkUpdate __xor__ 0.00369 0.04236 11.48279 BenchmarkXor approximate memory usage subject builtin sqlitecollections ratio class add (existing item) 0.0 0.00391 inf BenchmarkAddExistingItem add (new item) 0.0 0.0 1.0 BenchmarkAddNewItem __and__ 0.0 0.00391 inf BenchmarkAnd clear 0.0 0.0 1.0 BenchmarkClear __contains__ 0.0 0.0 1.0 BenchmarkContains copy 0.0 0.0 1.0 BenchmarkCopy difference 0.0 0.0 1.0 BenchmarkDifference discard 0.0 0.0 1.0 BenchmarkDiscard discard (no changes) 0.0 0.0 1.0 BenchmarkDiscardNoChanges __ge__ 0.0 0.0 1.0 BenchmarkGe __ge__ (not greater than or equals to) 0.0 0.0 1.0 BenchmarkGeNot __gt__ 0.0 0.0 1.0 BenchmarkGt __gt__ (not greater than) 0.0 0.0 1.0 BenchmarkGtNot __iand__ 0.0 0.0 1.0 BenchmarkIand __init__ 0.0 0.0 1.0 BenchmarkInit intersection 0.0 0.0 1.0 BenchmarkIntersection intersection_update 0.0 0.0 1.0 BenchmarkIntersectionUpdate __ior__ 0.0 0.0 1.0 BenchmarkIor isdisjoint 0.0 0.0 1.0 BenchmarkIsdisjoint isdisjoint (not disjoint) 0.0 0.0 1.0 BenchmarkIsdisjointNot issubset 0.0 0.0 1.0 BenchmarkIssubset issubset (not subset) 0.0 0.0 1.0 BenchmarkIssubsetNot issuperset 0.0 0.0 1.0 BenchmarkIssuperset issuperset (not superset) 0.0 0.0 1.0 BenchmarkIssupersetNot __ixor__ 0.0 0.0 1.0 BenchmarkIxor __le__ 0.0 0.0 1.0 BenchmarkLe __le__ (not less than or equals to) 0.0 0.0 1.0 BenchmarkLeNot __len__ 0.0 0.0 1.0 BenchmarkLen __lt__ 0.0 0.0 1.0 BenchmarkLt __lt__ (not less than) 0.0 0.0 1.0 BenchmarkLtNot __contains__ (unsuccessful search) 0.0 0.0 1.0 BenchmarkNotContains __or__ 0.0 0.0 1.0 BenchmarkOr pop 0.0 0.0 1.0 BenchmarkPop remove 0.0 0.0 1.0 BenchmarkRemove __sub__ 0.0 0.0 1.0 BenchmarkSub symmetric_difference 0.0 0.0 1.0 BenchmarkSymmetricDifference symmetric_difference_update 0.0 0.0 1.0 BenchmarkSymmetricDifferenceUpdate union 0.0 0.0 1.0 BenchmarkUnion update 0.0 0.0 1.0 BenchmarkUpdate __xor__ 0.0 0.0 1.0 BenchmarkXor dict list set timing subject builtin sqlitecollections ratio class clear 0.00521 0.00801 1.53765 BenchmarkClear __contains__ 0.00516 0.00497 0.9626 BenchmarkContains copy 0.00524 0.01062 2.02539 BenchmarkCopy __delitem__ 0.0053 0.00826 1.55987 BenchmarkDelitem get 0.00496 0.00578 1.16664 BenchmarkGet get (unsuccessful search) 0.00524 0.00527 1.00631 BenchmarkGetDefault __getitem__ 0.00533 0.00547 1.02779 BenchmarkGetitem __init__ 0.00558 0.04062 7.28429 BenchmarkInit items 0.0067 0.01255 1.87358 BenchmarkItems __iter__ 0.0058 0.00995 1.71435 BenchmarkIter keys 0.00597 0.00928 1.55504 BenchmarkKeys __len__ 0.00558 0.00531 0.95139 BenchmarkLen __contains__ (unsuccessful search) 0.00557 0.00603 1.08363 BenchmarkNotContains pop 0.00589 0.0088 1.49457 BenchmarkPop pop (unsuccessful search) 0.00588 0.00714 1.21385 BenchmarkPopDefault popitem 0.00546 0.00939 1.71911 BenchmarkPopitem reversed 0.00503 0.00863 1.71648 BenchmarkReversed setdefault 0.00642 0.00748 1.16399 BenchmarkSetdefault setdefault (unsuccessful search) 0.00528 0.00731 1.38608 BenchmarkSetdefaultAddItem __setitem__ (add new item) 0.00592 0.00927 1.56684 BenchmarkSetitemAddNewItem __setitem__ (replace) 0.00578 0.00877 1.51656 BenchmarkSetitemReplace update 0.00584 0.00903 1.54817 BenchmarkUpdate update (many) 0.00643 0.57739 89.73336 BenchmarkUpdateMany values 0.00534 0.009 1.68614 BenchmarkValues approximate memory usage subject builtin sqlitecollections ratio class clear 0.00391 0.0 0.0 BenchmarkClear __contains__ 0.0 0.0 1.0 BenchmarkContains copy 0.05469 0.0 0.0 BenchmarkCopy __delitem__ 0.0 0.0 1.0 BenchmarkDelitem get 0.0 0.0 1.0 BenchmarkGet get (unsuccessful search) 0.0 0.0 1.0 BenchmarkGetDefault __getitem__ 0.0 0.0 1.0 BenchmarkGetitem __init__ 0.0 0.01172 inf BenchmarkInit items 0.07812 0.21875 2.8 BenchmarkItems __iter__ 0.0 0.08203 inf BenchmarkIter keys 0.125 0.09375 0.75 BenchmarkKeys __len__ 0.0 0.0 1.0 BenchmarkLen __contains__ (unsuccessful search) 0.0 0.0 1.0 BenchmarkNotContains pop 0.0 0.0 1.0 BenchmarkPop pop (unsuccessful search) 0.0 0.0 1.0 BenchmarkPopDefault popitem 0.0 0.0 1.0 BenchmarkPopitem reversed 0.0 0.0 1.0 BenchmarkReversed setdefault 0.0 0.0 1.0 BenchmarkSetdefault setdefault (unsuccessful search) 0.0 0.0 1.0 BenchmarkSetdefaultAddItem __setitem__ (add new item) 0.0 0.0 1.0 BenchmarkSetitemAddNewItem __setitem__ (replace) 0.0 0.0 1.0 BenchmarkSetitemReplace update 0.0 0.0 1.0 BenchmarkUpdate update (many) 0.01953 0.0 0.0 BenchmarkUpdateMany values 0.02344 0.0 0.0 BenchmarkValues timing subject builtin sqlitecollections ratio class __add__ 0.00532 0.01157 2.17386 BenchmarkAdd append 0.00554 0.00812 1.46515 BenchmarkAppend clear 0.00529 0.0079 1.49325 BenchmarkClear __contains__ 0.00523 0.00507 0.96904 BenchmarkContains copy 0.00562 0.01079 1.91862 BenchmarkCopy count 0.0056 0.00518 0.9248 BenchmarkCount __init__ 0.00524 0.02125 4.05713 BenchmarkCreateWithInitialData __delitem__ 0.0055 0.08368 15.22293 BenchmarkDelitem __delitem__ (slice) 0.00537 0.15977 29.72966 BenchmarkDelitemSlice __delitem__ (slice with skip) 0.00566 0.15852 27.9955 BenchmarkDelitemSliceSkip extend 0.00558 0.0083 1.48793 BenchmarkExtend __getitem__ 0.00601 0.00551 0.91653 BenchmarkGetitem __getitem__ (slice) 0.00561 0.09388 16.73879 BenchmarkGetitemSlice __getitem__ (slice with skip) 0.00593 0.01391 2.34411 BenchmarkGetitemSliceSkip __iadd__ 0.00551 0.00893 1.62158 BenchmarkIadd __imult__ 0.00568 0.24043 42.29636 BenchmarkImult index 0.00582 0.00576 0.9899 BenchmarkIndex index (unsuccessful search) 0.0059 0.00579 0.98053 BenchmarkIndexUnsuccessfulSearch insert 0.00515 0.15749 30.58937 BenchmarkInsert __len__ 0.00506 0.00523 1.03493 BenchmarkLen __mult__ 0.00545 0.24435 44.79583 BenchmarkMult __contains__ (unsuccessful search) 0.00576 0.00556 0.96531 BenchmarkNotContains pop 0.00616 0.08428 13.6742 BenchmarkPop remove 0.0052 0.12148 23.35951 BenchmarkRemove __setitem__ 0.00538 0.00861 1.60015 BenchmarkSetitem __setitem__ (slice) 0.00561 0.16115 28.70057 BenchmarkSetitemSlice __setitem__ (slice with skip) 0.00479 0.0172 3.58792 BenchmarkSetitemSliceSkip sort (balanced) 0.00489 0.3458 70.6529 BenchmarkSortBalanced sort (fastest) 0.00562 0.33775 60.04772 BenchmarkSortFastest sort (memory_saving) 0.00501 3.46464 691.81022 BenchmarkSortMemorySaving approximate memory usage subject builtin sqlitecollections ratio class __add__ 0.0 0.0 1.0 BenchmarkAdd append 0.0 0.0 1.0 BenchmarkAppend clear 0.0 0.0 1.0 BenchmarkClear __contains__ 0.0 0.0 1.0 BenchmarkContains copy 0.0 0.0 1.0 BenchmarkCopy count 0.0 0.0 1.0 BenchmarkCount __init__ 0.0 0.0 1.0 BenchmarkCreateWithInitialData __delitem__ 0.0 0.0 1.0 BenchmarkDelitem __delitem__ (slice) 0.0 0.0 1.0 BenchmarkDelitemSlice __delitem__ (slice with skip) 0.0 0.0 1.0 BenchmarkDelitemSliceSkip extend 0.0 0.0 1.0 BenchmarkExtend __getitem__ 0.0 0.0 1.0 BenchmarkGetitem __getitem__ (slice) 0.0 0.0 1.0 BenchmarkGetitemSlice __getitem__ (slice with skip) 0.0 0.0 1.0 BenchmarkGetitemSliceSkip __iadd__ 0.0 0.0 1.0 BenchmarkIadd __imult__ 0.0 0.0 1.0 BenchmarkImult index 0.0 0.0 1.0 BenchmarkIndex index (unsuccessful search) 0.0 0.0 1.0 BenchmarkIndexUnsuccessfulSearch insert 0.0 0.0 1.0 BenchmarkInsert __len__ 0.0 0.0 1.0 BenchmarkLen __mult__ 0.0 0.0 1.0 BenchmarkMult __contains__ (unsuccessful search) 0.0 0.0 1.0 BenchmarkNotContains pop 0.0 0.0 1.0 BenchmarkPop remove 0.0 0.0 1.0 BenchmarkRemove __setitem__ 0.0 0.0 1.0 BenchmarkSetitem __setitem__ (slice) 0.0 0.0 1.0 BenchmarkSetitemSlice __setitem__ (slice with skip) 0.0 0.0 1.0 BenchmarkSetitemSliceSkip sort (balanced) 0.0 0.0 1.0 BenchmarkSortBalanced sort (fastest) 0.0 0.0 1.0 BenchmarkSortFastest sort (memory_saving) 0.0 0.0 1.0 BenchmarkSortMemorySaving timing subject builtin sqlitecollections ratio class add (existing item) 0.00481 0.00575 1.1956 BenchmarkAddExistingItem add (new item) 0.00493 0.00738 1.4962 BenchmarkAddNewItem __and__ 0.00505 0.01233 2.44327 BenchmarkAnd clear 0.00516 0.00703 1.3633 BenchmarkClear __contains__ 0.00525 0.00523 0.99614 BenchmarkContains copy 0.00499 0.01003 2.01158 BenchmarkCopy difference 0.00523 0.01102 2.10711 BenchmarkDifference discard 0.00489 0.00741 1.51415 BenchmarkDiscard discard (no changes) 0.00533 0.00709 1.33152 BenchmarkDiscardNoChanges __ge__ 0.00532 0.00526 0.98837 BenchmarkGe __ge__ (not greater than or equals to) 0.00529 0.00535 1.0107 BenchmarkGeNot __gt__ 0.00511 0.02169 4.24721 BenchmarkGt __gt__ (not greater than) 0.00566 0.03191 5.63697 BenchmarkGtNot __iand__ 0.00486 0.00931 1.91289 BenchmarkIand __init__ 0.00507 0.0166 3.27176 BenchmarkInit intersection 0.00551 0.01413 2.56566 BenchmarkIntersection intersection_update 0.00576 0.00957 1.66302 BenchmarkIntersectionUpdate __ior__ 0.00501 0.00942 1.88117 BenchmarkIor isdisjoint 0.00493 0.00575 1.16725 BenchmarkIsdisjoint isdisjoint (not disjoint) 0.00569 0.00543 0.95583 BenchmarkIsdisjointNot issubset 0.00545 0.03195 5.86675 BenchmarkIssubset issubset (not subset) 0.00557 0.01532 2.75057 BenchmarkIssubsetNot issuperset 0.00474 0.02471 5.21361 BenchmarkIssuperset issuperset (not superset) 0.00496 0.00604 1.21635 BenchmarkIssupersetNot __ixor__ 0.00522 0.03955 7.57829 BenchmarkIxor __le__ 0.00573 0.00589 1.02831 BenchmarkLe __le__ (not less than or equals to) 0.00522 0.00505 0.96858 BenchmarkLeNot __len__ 0.00506 0.00443 0.87424 BenchmarkLen __lt__ 0.00491 0.00565 1.14939 BenchmarkLt __lt__ (not less than) 0.00503 0.00474 0.94171 BenchmarkLtNot __contains__ (unsuccessful search) 0.00523 0.00523 0.99925 BenchmarkNotContains __or__ 0.00561 0.01306 2.32993 BenchmarkOr pop 0.00529 0.00778 1.47104 BenchmarkPop remove 0.00499 0.00756 1.51604 BenchmarkRemove __sub__ 0.00539 0.01007 1.86903 BenchmarkSub symmetric_difference 0.00532 0.04303 8.09537 BenchmarkSymmetricDifference symmetric_difference_update 0.00511 0.03921 7.674 BenchmarkSymmetricDifferenceUpdate union 0.00506 0.01243 2.45926 BenchmarkUnion update 0.0049 0.00913 1.8645 BenchmarkUpdate __xor__ 0.00529 0.04223 7.97707 BenchmarkXor approximate memory usage subject builtin sqlitecollections ratio class add (existing item) 0.0 0.0 1.0 BenchmarkAddExistingItem add (new item) 0.0 0.0 1.0 BenchmarkAddNewItem __and__ 0.0 0.0 1.0 BenchmarkAnd clear 0.0 0.0 1.0 BenchmarkClear __contains__ 0.0 0.0 1.0 BenchmarkContains copy 0.0 0.0 1.0 BenchmarkCopy difference 0.0 0.0 1.0 BenchmarkDifference discard 0.0 0.0 1.0 BenchmarkDiscard discard (no changes) 0.0 0.0 1.0 BenchmarkDiscardNoChanges __ge__ 0.0 0.0 1.0 BenchmarkGe __ge__ (not greater than or equals to) 0.0 0.0 1.0 BenchmarkGeNot __gt__ 0.0 0.0 1.0 BenchmarkGt __gt__ (not greater than) 0.0 0.0 1.0 BenchmarkGtNot __iand__ 0.0 0.0 1.0 BenchmarkIand __init__ 0.0 0.05469 inf BenchmarkInit intersection 0.0 0.0 1.0 BenchmarkIntersection intersection_update 0.0 0.0 1.0 BenchmarkIntersectionUpdate __ior__ 0.0 0.0 1.0 BenchmarkIor isdisjoint 0.0 0.0 1.0 BenchmarkIsdisjoint isdisjoint (not disjoint) 0.0 0.0 1.0 BenchmarkIsdisjointNot issubset 0.0 0.0 1.0 BenchmarkIssubset issubset (not subset) 0.0 0.0 1.0 BenchmarkIssubsetNot issuperset 0.0 0.0 1.0 BenchmarkIssuperset issuperset (not superset) 0.0 0.0 1.0 BenchmarkIssupersetNot __ixor__ 0.0 0.0 1.0 BenchmarkIxor __le__ 0.0 0.0 1.0 BenchmarkLe __le__ (not less than or equals to) 0.0 0.0 1.0 BenchmarkLeNot __len__ 0.0 0.0 1.0 BenchmarkLen __lt__ 0.0 0.0 1.0 BenchmarkLt __lt__ (not less than) 0.0 0.0 1.0 BenchmarkLtNot __contains__ (unsuccessful search) 0.0 0.0 1.0 BenchmarkNotContains __or__ 0.0 0.0 1.0 BenchmarkOr pop 0.0 0.0 1.0 BenchmarkPop remove 0.0 0.0 1.0 BenchmarkRemove __sub__ 0.0 0.0 1.0 BenchmarkSub symmetric_difference 0.0 0.0 1.0 BenchmarkSymmetricDifference symmetric_difference_update 0.0 0.0 1.0 BenchmarkSymmetricDifferenceUpdate union 0.0 0.0 1.0 BenchmarkUnion update 0.0 0.0 1.0 BenchmarkUpdate __xor__ 0.0 0.0 1.0 BenchmarkXor dict list set timing subject builtin sqlitecollections ratio class clear 0.00404 0.00665 1.64693 BenchmarkClear __contains__ 0.00397 0.00412 1.03597 BenchmarkContains copy 0.00393 0.00883 2.24387 BenchmarkCopy __delitem__ 0.00391 0.00642 1.64177 BenchmarkDelitem get 0.00381 0.00422 1.10963 BenchmarkGet get (unsuccessful search) 0.00408 0.00416 1.02128 BenchmarkGetDefault __getitem__ 0.00408 0.00407 0.99702 BenchmarkGetitem __init__ 0.00408 0.03845 9.41793 BenchmarkInit __ior__ 0.00415 0.00698 1.68105 BenchmarkIor __ior__ (many) 0.00525 0.55852 106.4524 BenchmarkIorMany items 0.00435 0.01049 2.4117 BenchmarkItems __iter__ 0.00378 0.0077 2.03845 BenchmarkIter keys 0.00399 0.00782 1.96085 BenchmarkKeys __len__ 0.00381 0.00403 1.05614 BenchmarkLen __contains__ (unsuccessful search) 0.00418 0.00417 0.99836 BenchmarkNotContains __or__ 0.00429 0.01132 2.64027 BenchmarkOr __or__ (many) 0.00554 0.56439 101.85498 BenchmarkOrMany pop 0.00446 0.00754 1.68908 BenchmarkPop pop (unsuccessful search) 0.00446 0.00599 1.34425 BenchmarkPopDefault popitem 0.00444 0.00777 1.75082 BenchmarkPopitem reversed 0.00395 0.00762 1.9307 BenchmarkReversed setdefault 0.00439 0.00604 1.37404 BenchmarkSetdefault setdefault (unsuccessful search) 0.00425 0.00623 1.46848 BenchmarkSetdefaultAddItem __setitem__ (add new item) 0.00426 0.00723 1.69723 BenchmarkSetitemAddNewItem __setitem__ (replace) 0.00431 0.00729 1.68979 BenchmarkSetitemReplace update 0.00444 0.00723 1.62792 BenchmarkUpdate update (many) 0.00535 0.55885 104.5231 BenchmarkUpdateMany values 0.00436 0.00789 1.81157 BenchmarkValues approximate memory usage subject builtin sqlitecollections ratio class clear 0.0 0.0 1.0 BenchmarkClear __contains__ 0.0 0.0 1.0 BenchmarkContains copy 0.0 0.0 1.0 BenchmarkCopy __delitem__ 0.0 0.0 1.0 BenchmarkDelitem get 0.0 0.0 1.0 BenchmarkGet get (unsuccessful search) 0.0 0.0 1.0 BenchmarkGetDefault __getitem__ 0.0 0.0 1.0 BenchmarkGetitem __init__ 0.0 0.0 1.0 BenchmarkInit __ior__ 0.0 0.0 1.0 BenchmarkIor __ior__ (many) 0.17969 0.0 0.0 BenchmarkIorMany items 0.0 0.17188 inf BenchmarkItems __iter__ 0.0 0.0 1.0 BenchmarkIter keys 0.0 0.0 1.0 BenchmarkKeys __len__ 0.0 0.0 1.0 BenchmarkLen __contains__ (unsuccessful search) 0.0 0.0 1.0 BenchmarkNotContains __or__ 0.0 0.0 1.0 BenchmarkOr __or__ (many) 0.0 0.0 1.0 BenchmarkOrMany pop 0.0 0.0 1.0 BenchmarkPop pop (unsuccessful search) 0.0 0.0 1.0 BenchmarkPopDefault popitem 0.0 0.0 1.0 BenchmarkPopitem reversed 0.0 0.0 1.0 BenchmarkReversed setdefault 0.0 0.0 1.0 BenchmarkSetdefault setdefault (unsuccessful search) 0.0 0.0 1.0 BenchmarkSetdefaultAddItem __setitem__ (add new item) 0.0 0.0 1.0 BenchmarkSetitemAddNewItem __setitem__ (replace) 0.0 0.0 1.0 BenchmarkSetitemReplace update 0.0 0.0 1.0 BenchmarkUpdate update (many) 0.0 0.0 1.0 BenchmarkUpdateMany values 0.0 0.0 1.0 BenchmarkValues timing subject builtin sqlitecollections ratio class __add__ 0.00423 0.00967 2.28968 BenchmarkAdd append 0.00407 0.00658 1.61538 BenchmarkAppend clear 0.00408 0.00656 1.60742 BenchmarkClear __contains__ 0.00399 0.00412 1.03278 BenchmarkContains copy 0.00404 0.00911 2.25452 BenchmarkCopy count 0.00396 0.00411 1.03603 BenchmarkCount __init__ 0.00391 0.01937 4.95083 BenchmarkCreateWithInitialData __delitem__ 0.00406 0.08031 19.78619 BenchmarkDelitem __delitem__ (slice) 0.00381 0.15115 39.62802 BenchmarkDelitemSlice __delitem__ (slice with skip) 0.00381 0.15214 39.91421 BenchmarkDelitemSliceSkip extend 0.00409 0.00684 1.67145 BenchmarkExtend __getitem__ 0.00404 0.00417 1.02984 BenchmarkGetitem __getitem__ (slice) 0.00385 0.08573 22.28991 BenchmarkGetitemSlice __getitem__ (slice with skip) 0.00389 0.0117 3.00993 BenchmarkGetitemSliceSkip __iadd__ 0.00389 0.00667 1.71539 BenchmarkIadd __imult__ 0.00414 0.22942 55.35269 BenchmarkImult index 0.00387 0.00414 1.07057 BenchmarkIndex index (unsuccessful search) 0.0039 0.00418 1.07193 BenchmarkIndexUnsuccessfulSearch insert 0.00402 0.14891 37.01124 BenchmarkInsert __len__ 0.00397 0.00423 1.06645 BenchmarkLen __mult__ 0.00406 0.23117 56.91445 BenchmarkMult __contains__ (unsuccessful search) 0.00403 0.00405 1.00496 BenchmarkNotContains pop 0.00418 0.07908 18.91765 BenchmarkPop remove 0.00401 0.11244 28.046 BenchmarkRemove __setitem__ 0.00404 0.00672 1.66376 BenchmarkSetitem __setitem__ (slice) 0.00402 0.15336 38.18834 BenchmarkSetitemSlice __setitem__ (slice with skip) 0.00403 0.01528 3.78836 BenchmarkSetitemSliceSkip sort (balanced) 0.0041 0.33064 80.58365 BenchmarkSortBalanced sort (fastest) 0.00381 0.33542 87.93598 BenchmarkSortFastest sort (memory_saving) 0.00389 3.81063 978.5303 BenchmarkSortMemorySaving approximate memory usage subject builtin sqlitecollections ratio class __add__ 0.0 0.0 1.0 BenchmarkAdd append 0.0 0.0 1.0 BenchmarkAppend clear 0.0 0.0 1.0 BenchmarkClear __contains__ 0.0 0.0 1.0 BenchmarkContains copy 0.0 0.0 1.0 BenchmarkCopy count 0.0 0.0 1.0 BenchmarkCount __init__ 0.0 0.0 1.0 BenchmarkCreateWithInitialData __delitem__ 0.0 0.00391 inf BenchmarkDelitem __delitem__ (slice) 0.0 0.0 1.0 BenchmarkDelitemSlice __delitem__ (slice with skip) 0.0 0.0 1.0 BenchmarkDelitemSliceSkip extend 0.0 0.0 1.0 BenchmarkExtend __getitem__ 0.0 0.0 1.0 BenchmarkGetitem __getitem__ (slice) 0.0 0.00391 inf BenchmarkGetitemSlice __getitem__ (slice with skip) 0.0 0.0 1.0 BenchmarkGetitemSliceSkip __iadd__ 0.0 0.0 1.0 BenchmarkIadd __imult__ 0.0 0.0 1.0 BenchmarkImult index 0.0 0.0 1.0 BenchmarkIndex index (unsuccessful search) 0.0 0.0 1.0 BenchmarkIndexUnsuccessfulSearch insert 0.0 0.0 1.0 BenchmarkInsert __len__ 0.0 0.0 1.0 BenchmarkLen __mult__ 0.0 0.0 1.0 BenchmarkMult __contains__ (unsuccessful search) 0.0 0.0 1.0 BenchmarkNotContains pop 0.0 0.00391 inf BenchmarkPop remove 0.0 0.0 1.0 BenchmarkRemove __setitem__ 0.0 0.0 1.0 BenchmarkSetitem __setitem__ (slice) 0.0 0.00391 inf BenchmarkSetitemSlice __setitem__ (slice with skip) 0.00391 0.0 0.0 BenchmarkSetitemSliceSkip sort (balanced) 0.0 0.14844 inf BenchmarkSortBalanced sort (fastest) 0.0 0.12109 inf BenchmarkSortFastest sort (memory_saving) 0.0 0.0 1.0 BenchmarkSortMemorySaving timing subject builtin sqlitecollections ratio class add (existing item) 0.00385 0.00523 1.35907 BenchmarkAddExistingItem add (new item) 0.00398 0.00619 1.55276 BenchmarkAddNewItem __and__ 0.00398 0.01021 2.56567 BenchmarkAnd clear 0.00398 0.00626 1.57144 BenchmarkClear __contains__ 0.00383 0.00395 1.03163 BenchmarkContains copy 0.00388 0.0083 2.13694 BenchmarkCopy difference 0.00407 0.00864 2.1211 BenchmarkDifference discard 0.00409 0.0063 1.5423 BenchmarkDiscard discard (no changes) 0.00409 0.00559 1.36741 BenchmarkDiscardNoChanges __ge__ 0.00402 0.00407 1.01408 BenchmarkGe __ge__ (not greater than or equals to) 0.00407 0.00541 1.33047 BenchmarkGeNot __gt__ 0.00399 0.00686 1.7193 BenchmarkGt __gt__ (not greater than) 0.00413 0.03044 7.37432 BenchmarkGtNot __iand__ 0.00393 0.0082 2.08362 BenchmarkIand __init__ 0.00391 0.01693 4.33146 BenchmarkInit intersection 0.0039 0.01157 2.96776 BenchmarkIntersection intersection_update 0.00397 0.00807 2.03442 BenchmarkIntersectionUpdate __ior__ 0.00401 0.00845 2.1086 BenchmarkIor isdisjoint 0.00399 0.00414 1.03775 BenchmarkIsdisjoint isdisjoint (not disjoint) 0.00393 0.00396 1.00683 BenchmarkIsdisjointNot issubset 0.00385 0.24371 63.23318 BenchmarkIssubset issubset (not subset) 0.00373 0.01037 2.78076 BenchmarkIssubsetNot issuperset 0.00363 0.02318 6.38303 BenchmarkIssuperset issuperset (not superset) 0.00343 0.00489 1.4268 BenchmarkIssupersetNot __ixor__ 0.00383 0.03861 10.07799 BenchmarkIxor __le__ 0.00382 0.00468 1.22421 BenchmarkLe __le__ (not less than or equals to) 0.00389 0.00391 1.00585 BenchmarkLeNot __len__ 0.00391 0.00398 1.01796 BenchmarkLen __lt__ 0.00392 0.00467 1.19204 BenchmarkLt __lt__ (not less than) 0.00385 0.00385 1.00091 BenchmarkLtNot __contains__ (unsuccessful search) 0.00362 0.00362 0.99803 BenchmarkNotContains __or__ 0.00357 0.00989 2.77409 BenchmarkOr pop 0.00369 0.00615 1.66773 BenchmarkPop remove 0.0038 0.00622 1.63805 BenchmarkRemove __sub__ 0.0039 0.00784 2.01217 BenchmarkSub symmetric_difference 0.00389 0.04154 10.6854 BenchmarkSymmetricDifference symmetric_difference_update 0.00406 0.03925 9.67214 BenchmarkSymmetricDifferenceUpdate union 0.00391 0.0105 2.68421 BenchmarkUnion update 0.00378 0.00761 2.01376 BenchmarkUpdate __xor__ 0.00374 0.04125 11.03852 BenchmarkXor approximate memory usage subject builtin sqlitecollections ratio class add (existing item) 0.0 0.0 1.0 BenchmarkAddExistingItem add (new item) 0.0 0.0 1.0 BenchmarkAddNewItem __and__ 0.0 0.0 1.0 BenchmarkAnd clear 0.0 0.0 1.0 BenchmarkClear __contains__ 0.0 0.0 1.0 BenchmarkContains copy 0.0 0.0 1.0 BenchmarkCopy difference 0.0 0.0 1.0 BenchmarkDifference discard 0.0 0.0 1.0 BenchmarkDiscard discard (no changes) 0.0 0.0 1.0 BenchmarkDiscardNoChanges __ge__ 0.0 0.0 1.0 BenchmarkGe __ge__ (not greater than or equals to) 0.0 0.0 1.0 BenchmarkGeNot __gt__ 0.0 0.0 1.0 BenchmarkGt __gt__ (not greater than) 0.0 0.0 1.0 BenchmarkGtNot __iand__ 0.0 0.0 1.0 BenchmarkIand __init__ 0.0 0.0 1.0 BenchmarkInit intersection 0.0 0.0 1.0 BenchmarkIntersection intersection_update 0.0 0.0 1.0 BenchmarkIntersectionUpdate __ior__ 0.0 0.0 1.0 BenchmarkIor isdisjoint 0.0 0.0 1.0 BenchmarkIsdisjoint isdisjoint (not disjoint) 0.0 0.0 1.0 BenchmarkIsdisjointNot issubset 0.0 0.0 1.0 BenchmarkIssubset issubset (not subset) 0.0 0.0 1.0 BenchmarkIssubsetNot issuperset 0.0 0.0 1.0 BenchmarkIssuperset issuperset (not superset) 0.0 0.0 1.0 BenchmarkIssupersetNot __ixor__ 0.0 0.0 1.0 BenchmarkIxor __le__ 0.0 0.0 1.0 BenchmarkLe __le__ (not less than or equals to) 0.0 0.0 1.0 BenchmarkLeNot __len__ 0.0 0.0 1.0 BenchmarkLen __lt__ 0.0 0.0 1.0 BenchmarkLt __lt__ (not less than) 0.0 0.0 1.0 BenchmarkLtNot __contains__ (unsuccessful search) 0.0 0.0 1.0 BenchmarkNotContains __or__ 0.0 0.0 1.0 BenchmarkOr pop 0.0 0.0 1.0 BenchmarkPop remove 0.0 0.0 1.0 BenchmarkRemove __sub__ 0.0 0.0 1.0 BenchmarkSub symmetric_difference 0.0 0.0 1.0 BenchmarkSymmetricDifference symmetric_difference_update 0.0 0.0 1.0 BenchmarkSymmetricDifferenceUpdate union 0.0 0.0 1.0 BenchmarkUnion update 0.0 0.0 1.0 BenchmarkUpdate __xor__ 0.0 0.0 1.0 BenchmarkXor dict list set timing subject builtin sqlitecollections ratio class clear 0.00531 0.01109 2.08844 BenchmarkClear __contains__ 0.00544 0.00521 0.95839 BenchmarkContains copy 0.00535 0.01091 2.04024 BenchmarkCopy __delitem__ 0.00541 0.00819 1.51498 BenchmarkDelitem get 0.00531 0.00519 0.97774 BenchmarkGet get (unsuccessful search) 0.00532 0.00519 0.97454 BenchmarkGetDefault __getitem__ 0.00551 0.00528 0.95865 BenchmarkGetitem __init__ 0.00542 0.04226 7.7981 BenchmarkInit __ior__ 0.00544 0.00878 1.61614 BenchmarkIor __ior__ (many) 0.00645 0.58448 90.65093 BenchmarkIorMany items 0.00572 0.01213 2.12073 BenchmarkItems __iter__ 0.00569 0.00904 1.58849 BenchmarkIter keys 0.0054 0.00938 1.73633 BenchmarkKeys __len__ 0.00543 0.00516 0.9499 BenchmarkLen __contains__ (unsuccessful search) 0.00548 0.00527 0.96069 BenchmarkNotContains __or__ 0.00558 0.01836 3.28914 BenchmarkOr __or__ (many) 0.00678 0.58302 86.04085 BenchmarkOrMany pop 0.00567 0.0086 1.5171 BenchmarkPop pop (unsuccessful search) 0.00557 0.00765 1.37279 BenchmarkPopDefault popitem 0.00553 0.00948 1.71464 BenchmarkPopitem reversed 0.00564 0.009 1.59549 BenchmarkReversed setdefault 0.00548 0.00752 1.37302 BenchmarkSetdefault setdefault (unsuccessful search) 0.0055 0.00722 1.31398 BenchmarkSetdefaultAddItem __setitem__ (add new item) 0.00556 0.00883 1.58795 BenchmarkSetitemAddNewItem __setitem__ (replace) 0.00548 0.00853 1.55619 BenchmarkSetitemReplace update 0.00557 0.01017 1.8265 BenchmarkUpdate update (many) 0.00649 0.5791 89.29681 BenchmarkUpdateMany values 0.00531 0.00873 1.6438 BenchmarkValues approximate memory usage subject builtin sqlitecollections ratio class clear 0.0 0.0 1.0 BenchmarkClear __contains__ 0.0 0.0 1.0 BenchmarkContains copy 0.0 0.0 1.0 BenchmarkCopy __delitem__ 0.0 0.0 1.0 BenchmarkDelitem get 0.0 0.0 1.0 BenchmarkGet get (unsuccessful search) 0.0 0.0 1.0 BenchmarkGetDefault __getitem__ 0.0 0.0 1.0 BenchmarkGetitem __init__ 0.0 0.00391 inf BenchmarkInit __ior__ 0.0 0.0 1.0 BenchmarkIor __ior__ (many) 0.18359 0.0 0.0 BenchmarkIorMany items 0.0 0.3125 inf BenchmarkItems __iter__ 0.0 0.0 1.0 BenchmarkIter keys 0.0 0.0 1.0 BenchmarkKeys __len__ 0.0 0.0 1.0 BenchmarkLen __contains__ (unsuccessful search) 0.0 0.0 1.0 BenchmarkNotContains __or__ 0.0 0.0 1.0 BenchmarkOr __or__ (many) 0.0 0.0 1.0 BenchmarkOrMany pop 0.0 0.0 1.0 BenchmarkPop pop (unsuccessful search) 0.0 0.0 1.0 BenchmarkPopDefault popitem 0.0 0.0 1.0 BenchmarkPopitem reversed 0.0 0.0 1.0 BenchmarkReversed setdefault 0.0 0.0 1.0 BenchmarkSetdefault setdefault (unsuccessful search) 0.0 0.0 1.0 BenchmarkSetdefaultAddItem __setitem__ (add new item) 0.0 0.0 1.0 BenchmarkSetitemAddNewItem __setitem__ (replace) 0.0 0.0 1.0 BenchmarkSetitemReplace update 0.0 0.0 1.0 BenchmarkUpdate update (many) 0.0 0.0 1.0 BenchmarkUpdateMany values 0.0 0.0 1.0 BenchmarkValues timing subject builtin sqlitecollections ratio class __add__ 0.00511 0.01221 2.38705 BenchmarkAdd append 0.00521 0.00832 1.59789 BenchmarkAppend clear 0.0052 0.00852 1.63876 BenchmarkClear __contains__ 0.00517 0.00511 0.98786 BenchmarkContains copy 0.00524 0.01175 2.24096 BenchmarkCopy count 0.00527 0.00505 0.95821 BenchmarkCount __init__ 0.00539 0.02147 3.98655 BenchmarkCreateWithInitialData __delitem__ 0.00545 0.0842 15.43589 BenchmarkDelitem __delitem__ (slice) 0.0053 0.15852 29.92407 BenchmarkDelitemSlice __delitem__ (slice with skip) 0.00526 0.16221 30.8519 BenchmarkDelitemSliceSkip extend 0.0053 0.00874 1.64825 BenchmarkExtend __getitem__ 0.00539 0.00514 0.95462 BenchmarkGetitem __getitem__ (slice) 0.0054 0.09562 17.71155 BenchmarkGetitemSlice __getitem__ (slice with skip) 0.00535 0.01951 3.64366 BenchmarkGetitemSliceSkip __iadd__ 0.00553 0.00805 1.45633 BenchmarkIadd __imult__ 0.00538 0.24447 45.41683 BenchmarkImult index 0.00543 0.00537 0.98854 BenchmarkIndex index (unsuccessful search) 0.00524 0.00534 1.01886 BenchmarkIndexUnsuccessfulSearch insert 0.0054 0.15788 29.23786 BenchmarkInsert __len__ 0.00541 0.00525 0.97129 BenchmarkLen __mult__ 0.00552 0.24363 44.14093 BenchmarkMult __contains__ (unsuccessful search) 0.00548 0.00515 0.94052 BenchmarkNotContains pop 0.00542 0.0845 15.60237 BenchmarkPop remove 0.0053 0.11804 22.2783 BenchmarkRemove __setitem__ 0.00548 0.0087 1.58804 BenchmarkSetitem __setitem__ (slice) 0.00547 0.16226 29.67931 BenchmarkSetitemSlice __setitem__ (slice with skip) 0.00545 0.01756 3.21838 BenchmarkSetitemSliceSkip sort (balanced) 0.00543 0.33967 62.57391 BenchmarkSortBalanced sort (fastest) 0.00535 0.33961 63.48299 BenchmarkSortFastest sort (memory_saving) 0.00532 3.45905 650.05335 BenchmarkSortMemorySaving approximate memory usage subject builtin sqlitecollections ratio class __add__ 0.0 0.0 1.0 BenchmarkAdd append 0.0 0.0 1.0 BenchmarkAppend clear 0.0 0.0 1.0 BenchmarkClear __contains__ 0.0 0.0 1.0 BenchmarkContains copy 0.0 0.0 1.0 BenchmarkCopy count 0.0 0.0 1.0 BenchmarkCount __init__ 0.0 0.0 1.0 BenchmarkCreateWithInitialData __delitem__ 0.0 0.00391 inf BenchmarkDelitem __delitem__ (slice) 0.0 0.0 1.0 BenchmarkDelitemSlice __delitem__ (slice with skip) 0.0 0.0 1.0 BenchmarkDelitemSliceSkip extend 0.0 0.0 1.0 BenchmarkExtend __getitem__ 0.0 0.0 1.0 BenchmarkGetitem __getitem__ (slice) 0.0 0.00391 inf BenchmarkGetitemSlice __getitem__ (slice with skip) 0.0 0.0 1.0 BenchmarkGetitemSliceSkip __iadd__ 0.0 0.0 1.0 BenchmarkIadd __imult__ 0.0 0.0 1.0 BenchmarkImult index 0.0 0.0 1.0 BenchmarkIndex index (unsuccessful search) 0.0 0.0 1.0 BenchmarkIndexUnsuccessfulSearch insert 0.0 0.00391 inf BenchmarkInsert __len__ 0.0 0.0 1.0 BenchmarkLen __mult__ 0.0 0.0 1.0 BenchmarkMult __contains__ (unsuccessful search) 0.0 0.0 1.0 BenchmarkNotContains pop 0.0 0.00391 inf BenchmarkPop remove 0.0 0.0 1.0 BenchmarkRemove __setitem__ 0.0 0.0 1.0 BenchmarkSetitem __setitem__ (slice) 0.0 0.00391 inf BenchmarkSetitemSlice __setitem__ (slice with skip) 0.0 0.0 1.0 BenchmarkSetitemSliceSkip sort (balanced) 0.0 0.14844 inf BenchmarkSortBalanced sort (fastest) 0.0 0.12891 inf BenchmarkSortFastest sort (memory_saving) 0.0 0.0 1.0 BenchmarkSortMemorySaving timing subject builtin sqlitecollections ratio class add (existing item) 0.00488 0.00632 1.29466 BenchmarkAddExistingItem add (new item) 0.00517 0.00762 1.47355 BenchmarkAddNewItem __and__ 0.00509 0.0353 6.9337 BenchmarkAnd clear 0.00502 0.00887 1.76624 BenchmarkClear __contains__ 0.00513 0.00475 0.92545 BenchmarkContains copy 0.00507 0.01118 2.203 BenchmarkCopy difference 0.00495 0.0136 2.7441 BenchmarkDifference discard 0.00499 0.00785 1.57292 BenchmarkDiscard discard (no changes) 0.00482 0.00628 1.30298 BenchmarkDiscardNoChanges __ge__ 0.00517 0.00495 0.957 BenchmarkGe __ge__ (not greater than or equals to) 0.00506 0.00519 1.02504 BenchmarkGeNot __gt__ 0.00504 0.00893 1.77378 BenchmarkGt __gt__ (not greater than) 0.00508 0.03041 5.98109 BenchmarkGtNot __iand__ 0.00519 0.01072 2.06458 BenchmarkIand __init__ 0.00492 0.01866 3.79667 BenchmarkInit intersection 0.00509 0.01428 2.80746 BenchmarkIntersection intersection_update 0.0052 0.01135 2.18147 BenchmarkIntersectionUpdate __ior__ 0.0051 0.01082 2.1238 BenchmarkIor isdisjoint 0.00507 0.00501 0.98858 BenchmarkIsdisjoint isdisjoint (not disjoint) 0.00504 0.00484 0.95929 BenchmarkIsdisjointNot issubset 0.00503 0.26361 52.43356 BenchmarkIssubset issubset (not subset) 0.00496 0.01265 2.54761 BenchmarkIssubsetNot issuperset 0.00512 0.02375 4.63585 BenchmarkIssuperset issuperset (not superset) 0.00497 0.0051 1.02613 BenchmarkIssupersetNot __ixor__ 0.00503 0.04197 8.34248 BenchmarkIxor __le__ 0.00494 0.00551 1.11537 BenchmarkLe __le__ (not less than or equals to) 0.00517 0.00489 0.94716 BenchmarkLeNot __len__ 0.00521 0.00485 0.93152 BenchmarkLen __lt__ 0.0051 0.00541 1.0615 BenchmarkLt __lt__ (not less than) 0.00497 0.00486 0.97734 BenchmarkLtNot __contains__ (unsuccessful search) 0.00514 0.00493 0.95896 BenchmarkNotContains __or__ 0.00512 0.01625 3.1725 BenchmarkOr pop 0.00527 0.008 1.51952 BenchmarkPop remove 0.00505 0.01034 2.04813 BenchmarkRemove __sub__ 0.00507 0.01062 2.09627 BenchmarkSub symmetric_difference 0.00484 0.04529 9.35336 BenchmarkSymmetricDifference symmetric_difference_update 0.00509 0.03932 7.7301 BenchmarkSymmetricDifferenceUpdate union 0.00509 0.01272 2.49875 BenchmarkUnion update 0.00515 0.00963 1.87033 BenchmarkUpdate __xor__ 0.00519 0.04231 8.15139 BenchmarkXor approximate memory usage subject builtin sqlitecollections ratio class add (existing item) 0.0 0.00391 inf BenchmarkAddExistingItem add (new item) 0.0 0.0 1.0 BenchmarkAddNewItem __and__ 0.0 0.0 1.0 BenchmarkAnd clear 0.0 0.0 1.0 BenchmarkClear __contains__ 0.0 0.0 1.0 BenchmarkContains copy 0.0 0.0 1.0 BenchmarkCopy difference 0.0 0.0 1.0 BenchmarkDifference discard 0.0 0.0 1.0 BenchmarkDiscard discard (no changes) 0.0 0.0 1.0 BenchmarkDiscardNoChanges __ge__ 0.0 0.0 1.0 BenchmarkGe __ge__ (not greater than or equals to) 0.0 0.0 1.0 BenchmarkGeNot __gt__ 0.0 0.0 1.0 BenchmarkGt __gt__ (not greater than) 0.0 0.0 1.0 BenchmarkGtNot __iand__ 0.0 0.0 1.0 BenchmarkIand __init__ 0.0 0.0 1.0 BenchmarkInit intersection 0.0 0.0 1.0 BenchmarkIntersection intersection_update 0.0 0.0 1.0 BenchmarkIntersectionUpdate __ior__ 0.0 0.0 1.0 BenchmarkIor isdisjoint 0.0 0.0 1.0 BenchmarkIsdisjoint isdisjoint (not disjoint) 0.0 0.0 1.0 BenchmarkIsdisjointNot issubset 0.0 0.0 1.0 BenchmarkIssubset issubset (not subset) 0.0 0.0 1.0 BenchmarkIssubsetNot issuperset 0.0 0.0 1.0 BenchmarkIssuperset issuperset (not superset) 0.0 0.0 1.0 BenchmarkIssupersetNot __ixor__ 0.0 0.0 1.0 BenchmarkIxor __le__ 0.0 0.0 1.0 BenchmarkLe __le__ (not less than or equals to) 0.0 0.0 1.0 BenchmarkLeNot __len__ 0.0 0.0 1.0 BenchmarkLen __lt__ 0.0 0.0 1.0 BenchmarkLt __lt__ (not less than) 0.0 0.0 1.0 BenchmarkLtNot __contains__ (unsuccessful search) 0.0 0.0 1.0 BenchmarkNotContains __or__ 0.0 0.0 1.0 BenchmarkOr pop 0.0 0.0 1.0 BenchmarkPop remove 0.0 0.0 1.0 BenchmarkRemove __sub__ 0.0 0.0 1.0 BenchmarkSub symmetric_difference 0.0 0.0 1.0 BenchmarkSymmetricDifference symmetric_difference_update 0.0 0.0 1.0 BenchmarkSymmetricDifferenceUpdate union 0.0 0.0 1.0 BenchmarkUnion update 0.0 0.0 1.0 BenchmarkUpdate __xor__ 0.0 0.0 1.0 BenchmarkXor","title":"Benchmark"},{"location":"development/","text":"Development Tests, type checking and linting locally To run tests, type checking and linting locally, you'll need to have python 3.6 , 3.7 , 3.8 , 3.9 and 3.10 installed. We use tox to run tests and type checking on all the supported python versions. You can set up the development environment with the following commands: git clone git@github.com:osoken/sqlitecollections.git cd sqlitecollections python -m venv .venv source ./.venv/bin/activate pip install -e .[dev] Then, run tests is as easy as: tox After a while, you'll see the following message at the bottom of the long logs from pytest and others. __________________ summary __________________ lint: commands succeeded py36: commands succeeded py37: commands succeeded py38: commands succeeded py39: commands succeeded py310: commands succeeded congratulations :) Building documents We use mkdocs to build the documentation. To set up the environment for building the document, run the following commands: git clone git@github.com:osoken/sqlitecollections.git cd sqlitecollections python -m venv .venv source ./.venv/bin/activate pip install -e .[docs] Then, building the documentation can be done by the following command: mkdocs build The output will be located in site directory in your current directory. During development, you can also run mkdoc 's builtin development server with hot-reloading enabled with the following command: mkdocs serve In that case, you can check the result on http://127.0.0.1:8000 . Benchmarks We have our own benchmark package. Setup the benchmark package To setup, run the following commands: pip install docs/scbenchmarker Run all benchmarks and render the results Benchmarking is done in two steps: Step 1: Run all benchmarks python -m scbenchmarker --prefix=[prefix] benchmarking Step 2: Render the results to markdown: python -m scbenchmarker --prefix=[prefix] render Results are stored in docs/benchmark_results/[prefix]/ . You can check the results on http://127.0.0.1:8000/benchmark/ . Verbose mode python -m scbenchmarker --verbose --prefix=[prefix] benchmarking An example output is as follows: benchmark_dict.py::BenchmarkSetitemAddNewItem: {'subject': '`__setitem__` (add new item)', 'one': {'name': '`dict`', 'timing': 0.0026721060276031494, 'memory': 0.00390625}, 'another': {'name': '`sqlitecollections.Dict`', 'timing': 0.006042510271072388, 'memory': 0.00390625}, 'ratio': {'timing': 2.2613287828598834, 'memory': 1.0}} Run individual benchmarks You can also run individual benchmarks. python -m scbenchmarker --prefix=[prefix] benchmarking [benchmark script]::[benchmark name] This command runs only a single benchmark. Together with the verbose mode, this is convenient for improving a single method and checking benchmarks frequently. Compatibility policy We aim to implement containers that are as compatible as possible with the built-in containers, but we have a few implementations that intentionally behave differently. Normal behavior will be compatible, but in case of errors it may be different. The constructor arguments are not compatible, as they require arguments specific to this package's container, such as sqlite3 DB file paths and serialization methods. copy method in each container behaves similarly to deep copy, since it copies the table containing serialized elements. Dict 's item order is guaranteed to be insertion order not only for python 3.7 and upper but for all versions. Dict.fromkeys class method is not provided. Any member in the container cannot be mutated directly. If you want to mutate any member, mutate it via temporary variable then write it back. import sqlitecollections as sc x = sc . Dict ({ \"a\" : []}) # create {\"a\": []} x [ \"a\" ] . append ( \"b\" ) # try to mutate the empty list print ( x [ \"a\" ]) # not [\"b\"] but [] temp = x [ \"a\" ] # temporarily substitute the list to a variable temp . append ( \"b\" ) # mutate the temporary variable x [ \"a\" ] = temp # then, write it back print ( x [ \"a\" ]) # now, we get [\"b\"]","title":"Development"},{"location":"development/#development","text":"","title":"Development"},{"location":"development/#tests-type-checking-and-linting-locally","text":"To run tests, type checking and linting locally, you'll need to have python 3.6 , 3.7 , 3.8 , 3.9 and 3.10 installed. We use tox to run tests and type checking on all the supported python versions. You can set up the development environment with the following commands: git clone git@github.com:osoken/sqlitecollections.git cd sqlitecollections python -m venv .venv source ./.venv/bin/activate pip install -e .[dev] Then, run tests is as easy as: tox After a while, you'll see the following message at the bottom of the long logs from pytest and others. __________________ summary __________________ lint: commands succeeded py36: commands succeeded py37: commands succeeded py38: commands succeeded py39: commands succeeded py310: commands succeeded congratulations :)","title":"Tests, type checking and linting locally"},{"location":"development/#building-documents","text":"We use mkdocs to build the documentation. To set up the environment for building the document, run the following commands: git clone git@github.com:osoken/sqlitecollections.git cd sqlitecollections python -m venv .venv source ./.venv/bin/activate pip install -e .[docs] Then, building the documentation can be done by the following command: mkdocs build The output will be located in site directory in your current directory. During development, you can also run mkdoc 's builtin development server with hot-reloading enabled with the following command: mkdocs serve In that case, you can check the result on http://127.0.0.1:8000 .","title":"Building documents"},{"location":"development/#benchmarks","text":"We have our own benchmark package.","title":"Benchmarks"},{"location":"development/#setup-the-benchmark-package","text":"To setup, run the following commands: pip install docs/scbenchmarker","title":"Setup the benchmark package"},{"location":"development/#run-all-benchmarks-and-render-the-results","text":"Benchmarking is done in two steps: Step 1: Run all benchmarks python -m scbenchmarker --prefix=[prefix] benchmarking Step 2: Render the results to markdown: python -m scbenchmarker --prefix=[prefix] render Results are stored in docs/benchmark_results/[prefix]/ . You can check the results on http://127.0.0.1:8000/benchmark/ .","title":"Run all benchmarks and render the results"},{"location":"development/#verbose-mode","text":"python -m scbenchmarker --verbose --prefix=[prefix] benchmarking An example output is as follows: benchmark_dict.py::BenchmarkSetitemAddNewItem: {'subject': '`__setitem__` (add new item)', 'one': {'name': '`dict`', 'timing': 0.0026721060276031494, 'memory': 0.00390625}, 'another': {'name': '`sqlitecollections.Dict`', 'timing': 0.006042510271072388, 'memory': 0.00390625}, 'ratio': {'timing': 2.2613287828598834, 'memory': 1.0}}","title":"Verbose mode"},{"location":"development/#run-individual-benchmarks","text":"You can also run individual benchmarks. python -m scbenchmarker --prefix=[prefix] benchmarking [benchmark script]::[benchmark name] This command runs only a single benchmark. Together with the verbose mode, this is convenient for improving a single method and checking benchmarks frequently.","title":"Run individual benchmarks"},{"location":"development/#compatibility-policy","text":"We aim to implement containers that are as compatible as possible with the built-in containers, but we have a few implementations that intentionally behave differently. Normal behavior will be compatible, but in case of errors it may be different. The constructor arguments are not compatible, as they require arguments specific to this package's container, such as sqlite3 DB file paths and serialization methods. copy method in each container behaves similarly to deep copy, since it copies the table containing serialized elements. Dict 's item order is guaranteed to be insertion order not only for python 3.7 and upper but for all versions. Dict.fromkeys class method is not provided. Any member in the container cannot be mutated directly. If you want to mutate any member, mutate it via temporary variable then write it back. import sqlitecollections as sc x = sc . Dict ({ \"a\" : []}) # create {\"a\": []} x [ \"a\" ] . append ( \"b\" ) # try to mutate the empty list print ( x [ \"a\" ]) # not [\"b\"] but [] temp = x [ \"a\" ] # temporarily substitute the list to a variable temp . append ( \"b\" ) # mutate the temporary variable x [ \"a\" ] = temp # then, write it back print ( x [ \"a\" ]) # now, we get [\"b\"]","title":"Compatibility policy"},{"location":"install/","text":"Install pip install sqlitecollections","title":"Install"},{"location":"install/#install","text":"pip install sqlitecollections","title":"Install"},{"location":"benchmark_results/py310/dict/","text":"timing | subject | `builtin` | `sqlitecollections` | ratio | class | | :------ | --------: | ------------------: | ----: | :---- | | `clear` | 0.00531 | 0.01109 | 2.08844 | `BenchmarkClear` | | `__contains__` | 0.00544 | 0.00521 | 0.95839 | `BenchmarkContains` | | `copy` | 0.00535 | 0.01091 | 2.04024 | `BenchmarkCopy` | | `__delitem__` | 0.00541 | 0.00819 | 1.51498 | `BenchmarkDelitem` | | `get` | 0.00531 | 0.00519 | 0.97774 | `BenchmarkGet` | | `get (unsuccessful search)` | 0.00532 | 0.00519 | 0.97454 | `BenchmarkGetDefault` | | `__getitem__` | 0.00551 | 0.00528 | 0.95865 | `BenchmarkGetitem` | | `__init__` | 0.00542 | 0.04226 | 7.7981 | `BenchmarkInit` | | `__ior__` | 0.00544 | 0.00878 | 1.61614 | `BenchmarkIor` | | `__ior__` (many) | 0.00645 | 0.58448 | 90.65093 | `BenchmarkIorMany` | | `items` | 0.00572 | 0.01213 | 2.12073 | `BenchmarkItems` | | `__iter__` | 0.00569 | 0.00904 | 1.58849 | `BenchmarkIter` | | `keys` | 0.0054 | 0.00938 | 1.73633 | `BenchmarkKeys` | | `__len__` | 0.00543 | 0.00516 | 0.9499 | `BenchmarkLen` | | `__contains__` (unsuccessful search) | 0.00548 | 0.00527 | 0.96069 | `BenchmarkNotContains` | | `__or__` | 0.00558 | 0.01836 | 3.28914 | `BenchmarkOr` | | `__or__` (many) | 0.00678 | 0.58302 | 86.04085 | `BenchmarkOrMany` | | `pop` | 0.00567 | 0.0086 | 1.5171 | `BenchmarkPop` | | `pop (unsuccessful search)` | 0.00557 | 0.00765 | 1.37279 | `BenchmarkPopDefault` | | `popitem` | 0.00553 | 0.00948 | 1.71464 | `BenchmarkPopitem` | | `reversed` | 0.00564 | 0.009 | 1.59549 | `BenchmarkReversed` | | `setdefault` | 0.00548 | 0.00752 | 1.37302 | `BenchmarkSetdefault` | | `setdefault (unsuccessful search)` | 0.0055 | 0.00722 | 1.31398 | `BenchmarkSetdefaultAddItem` | | `__setitem__` (add new item) | 0.00556 | 0.00883 | 1.58795 | `BenchmarkSetitemAddNewItem` | | `__setitem__` (replace) | 0.00548 | 0.00853 | 1.55619 | `BenchmarkSetitemReplace` | | `update` | 0.00557 | 0.01017 | 1.8265 | `BenchmarkUpdate` | | `update` (many) | 0.00649 | 0.5791 | 89.29681 | `BenchmarkUpdateMany` | | `values` | 0.00531 | 0.00873 | 1.6438 | `BenchmarkValues` | approximate memory usage | subject | `builtin` | `sqlitecollections` | ratio | class | | :------ | --------: | ------------------: | ----: | :---- | | `clear` | 0.0 | 0.0 | 1.0 | `BenchmarkClear` | | `__contains__` | 0.0 | 0.0 | 1.0 | `BenchmarkContains` | | `copy` | 0.0 | 0.0 | 1.0 | `BenchmarkCopy` | | `__delitem__` | 0.0 | 0.0 | 1.0 | `BenchmarkDelitem` | | `get` | 0.0 | 0.0 | 1.0 | `BenchmarkGet` | | `get (unsuccessful search)` | 0.0 | 0.0 | 1.0 | `BenchmarkGetDefault` | | `__getitem__` | 0.0 | 0.0 | 1.0 | `BenchmarkGetitem` | | `__init__` | 0.0 | 0.00391 | inf | `BenchmarkInit` | | `__ior__` | 0.0 | 0.0 | 1.0 | `BenchmarkIor` | | `__ior__` (many) | 0.18359 | 0.0 | 0.0 | `BenchmarkIorMany` | | `items` | 0.0 | 0.3125 | inf | `BenchmarkItems` | | `__iter__` | 0.0 | 0.0 | 1.0 | `BenchmarkIter` | | `keys` | 0.0 | 0.0 | 1.0 | `BenchmarkKeys` | | `__len__` | 0.0 | 0.0 | 1.0 | `BenchmarkLen` | | `__contains__` (unsuccessful search) | 0.0 | 0.0 | 1.0 | `BenchmarkNotContains` | | `__or__` | 0.0 | 0.0 | 1.0 | `BenchmarkOr` | | `__or__` (many) | 0.0 | 0.0 | 1.0 | `BenchmarkOrMany` | | `pop` | 0.0 | 0.0 | 1.0 | `BenchmarkPop` | | `pop (unsuccessful search)` | 0.0 | 0.0 | 1.0 | `BenchmarkPopDefault` | | `popitem` | 0.0 | 0.0 | 1.0 | `BenchmarkPopitem` | | `reversed` | 0.0 | 0.0 | 1.0 | `BenchmarkReversed` | | `setdefault` | 0.0 | 0.0 | 1.0 | `BenchmarkSetdefault` | | `setdefault (unsuccessful search)` | 0.0 | 0.0 | 1.0 | `BenchmarkSetdefaultAddItem` | | `__setitem__` (add new item) | 0.0 | 0.0 | 1.0 | `BenchmarkSetitemAddNewItem` | | `__setitem__` (replace) | 0.0 | 0.0 | 1.0 | `BenchmarkSetitemReplace` | | `update` | 0.0 | 0.0 | 1.0 | `BenchmarkUpdate` | | `update` (many) | 0.0 | 0.0 | 1.0 | `BenchmarkUpdateMany` | | `values` | 0.0 | 0.0 | 1.0 | `BenchmarkValues` |","title":"Dict"},{"location":"benchmark_results/py310/list/","text":"timing | subject | `builtin` | `sqlitecollections` | ratio | class | | :------ | --------: | ------------------: | ----: | :---- | | `__add__` | 0.00511 | 0.01221 | 2.38705 | `BenchmarkAdd` | | `append` | 0.00521 | 0.00832 | 1.59789 | `BenchmarkAppend` | | `clear` | 0.0052 | 0.00852 | 1.63876 | `BenchmarkClear` | | `__contains__` | 0.00517 | 0.00511 | 0.98786 | `BenchmarkContains` | | `copy` | 0.00524 | 0.01175 | 2.24096 | `BenchmarkCopy` | | `count` | 0.00527 | 0.00505 | 0.95821 | `BenchmarkCount` | | `__init__` | 0.00539 | 0.02147 | 3.98655 | `BenchmarkCreateWithInitialData` | | `__delitem__` | 0.00545 | 0.0842 | 15.43589 | `BenchmarkDelitem` | | `__delitem__` (slice) | 0.0053 | 0.15852 | 29.92407 | `BenchmarkDelitemSlice` | | `__delitem__` (slice with skip) | 0.00526 | 0.16221 | 30.8519 | `BenchmarkDelitemSliceSkip` | | `extend` | 0.0053 | 0.00874 | 1.64825 | `BenchmarkExtend` | | `__getitem__` | 0.00539 | 0.00514 | 0.95462 | `BenchmarkGetitem` | | `__getitem__` (slice) | 0.0054 | 0.09562 | 17.71155 | `BenchmarkGetitemSlice` | | `__getitem__` (slice with skip) | 0.00535 | 0.01951 | 3.64366 | `BenchmarkGetitemSliceSkip` | | `__iadd__` | 0.00553 | 0.00805 | 1.45633 | `BenchmarkIadd` | | `__imult__` | 0.00538 | 0.24447 | 45.41683 | `BenchmarkImult` | | `index` | 0.00543 | 0.00537 | 0.98854 | `BenchmarkIndex` | | `index` (unsuccessful search) | 0.00524 | 0.00534 | 1.01886 | `BenchmarkIndexUnsuccessfulSearch` | | `insert` | 0.0054 | 0.15788 | 29.23786 | `BenchmarkInsert` | | `__len__` | 0.00541 | 0.00525 | 0.97129 | `BenchmarkLen` | | `__mult__` | 0.00552 | 0.24363 | 44.14093 | `BenchmarkMult` | | `__contains__` (unsuccessful search) | 0.00548 | 0.00515 | 0.94052 | `BenchmarkNotContains` | | `pop` | 0.00542 | 0.0845 | 15.60237 | `BenchmarkPop` | | `remove` | 0.0053 | 0.11804 | 22.2783 | `BenchmarkRemove` | | `__setitem__` | 0.00548 | 0.0087 | 1.58804 | `BenchmarkSetitem` | | `__setitem__` (slice) | 0.00547 | 0.16226 | 29.67931 | `BenchmarkSetitemSlice` | | `__setitem__` (slice with skip) | 0.00545 | 0.01756 | 3.21838 | `BenchmarkSetitemSliceSkip` | | `sort` (balanced) | 0.00543 | 0.33967 | 62.57391 | `BenchmarkSortBalanced` | | `sort` (fastest) | 0.00535 | 0.33961 | 63.48299 | `BenchmarkSortFastest` | | `sort` (memory_saving) | 0.00532 | 3.45905 | 650.05335 | `BenchmarkSortMemorySaving` | approximate memory usage | subject | `builtin` | `sqlitecollections` | ratio | class | | :------ | --------: | ------------------: | ----: | :---- | | `__add__` | 0.0 | 0.0 | 1.0 | `BenchmarkAdd` | | `append` | 0.0 | 0.0 | 1.0 | `BenchmarkAppend` | | `clear` | 0.0 | 0.0 | 1.0 | `BenchmarkClear` | | `__contains__` | 0.0 | 0.0 | 1.0 | `BenchmarkContains` | | `copy` | 0.0 | 0.0 | 1.0 | `BenchmarkCopy` | | `count` | 0.0 | 0.0 | 1.0 | `BenchmarkCount` | | `__init__` | 0.0 | 0.0 | 1.0 | `BenchmarkCreateWithInitialData` | | `__delitem__` | 0.0 | 0.00391 | inf | `BenchmarkDelitem` | | `__delitem__` (slice) | 0.0 | 0.0 | 1.0 | `BenchmarkDelitemSlice` | | `__delitem__` (slice with skip) | 0.0 | 0.0 | 1.0 | `BenchmarkDelitemSliceSkip` | | `extend` | 0.0 | 0.0 | 1.0 | `BenchmarkExtend` | | `__getitem__` | 0.0 | 0.0 | 1.0 | `BenchmarkGetitem` | | `__getitem__` (slice) | 0.0 | 0.00391 | inf | `BenchmarkGetitemSlice` | | `__getitem__` (slice with skip) | 0.0 | 0.0 | 1.0 | `BenchmarkGetitemSliceSkip` | | `__iadd__` | 0.0 | 0.0 | 1.0 | `BenchmarkIadd` | | `__imult__` | 0.0 | 0.0 | 1.0 | `BenchmarkImult` | | `index` | 0.0 | 0.0 | 1.0 | `BenchmarkIndex` | | `index` (unsuccessful search) | 0.0 | 0.0 | 1.0 | `BenchmarkIndexUnsuccessfulSearch` | | `insert` | 0.0 | 0.00391 | inf | `BenchmarkInsert` | | `__len__` | 0.0 | 0.0 | 1.0 | `BenchmarkLen` | | `__mult__` | 0.0 | 0.0 | 1.0 | `BenchmarkMult` | | `__contains__` (unsuccessful search) | 0.0 | 0.0 | 1.0 | `BenchmarkNotContains` | | `pop` | 0.0 | 0.00391 | inf | `BenchmarkPop` | | `remove` | 0.0 | 0.0 | 1.0 | `BenchmarkRemove` | | `__setitem__` | 0.0 | 0.0 | 1.0 | `BenchmarkSetitem` | | `__setitem__` (slice) | 0.0 | 0.00391 | inf | `BenchmarkSetitemSlice` | | `__setitem__` (slice with skip) | 0.0 | 0.0 | 1.0 | `BenchmarkSetitemSliceSkip` | | `sort` (balanced) | 0.0 | 0.14844 | inf | `BenchmarkSortBalanced` | | `sort` (fastest) | 0.0 | 0.12891 | inf | `BenchmarkSortFastest` | | `sort` (memory_saving) | 0.0 | 0.0 | 1.0 | `BenchmarkSortMemorySaving` |","title":"List"},{"location":"benchmark_results/py310/set/","text":"timing | subject | `builtin` | `sqlitecollections` | ratio | class | | :------ | --------: | ------------------: | ----: | :---- | | `add (existing item)` | 0.00488 | 0.00632 | 1.29466 | `BenchmarkAddExistingItem` | | `add (new item)` | 0.00517 | 0.00762 | 1.47355 | `BenchmarkAddNewItem` | | `__and__` | 0.00509 | 0.0353 | 6.9337 | `BenchmarkAnd` | | `clear` | 0.00502 | 0.00887 | 1.76624 | `BenchmarkClear` | | `__contains__` | 0.00513 | 0.00475 | 0.92545 | `BenchmarkContains` | | `copy` | 0.00507 | 0.01118 | 2.203 | `BenchmarkCopy` | | `difference` | 0.00495 | 0.0136 | 2.7441 | `BenchmarkDifference` | | `discard` | 0.00499 | 0.00785 | 1.57292 | `BenchmarkDiscard` | | `discard (no changes)` | 0.00482 | 0.00628 | 1.30298 | `BenchmarkDiscardNoChanges` | | `__ge__` | 0.00517 | 0.00495 | 0.957 | `BenchmarkGe` | | `__ge__` (not greater than or equals to) | 0.00506 | 0.00519 | 1.02504 | `BenchmarkGeNot` | | `__gt__` | 0.00504 | 0.00893 | 1.77378 | `BenchmarkGt` | | `__gt__` (not greater than) | 0.00508 | 0.03041 | 5.98109 | `BenchmarkGtNot` | | `__iand__` | 0.00519 | 0.01072 | 2.06458 | `BenchmarkIand` | | `__init__` | 0.00492 | 0.01866 | 3.79667 | `BenchmarkInit` | | `intersection` | 0.00509 | 0.01428 | 2.80746 | `BenchmarkIntersection` | | `intersection_update` | 0.0052 | 0.01135 | 2.18147 | `BenchmarkIntersectionUpdate` | | `__ior__` | 0.0051 | 0.01082 | 2.1238 | `BenchmarkIor` | | `isdisjoint` | 0.00507 | 0.00501 | 0.98858 | `BenchmarkIsdisjoint` | | `isdisjoint` (not disjoint) | 0.00504 | 0.00484 | 0.95929 | `BenchmarkIsdisjointNot` | | `issubset` | 0.00503 | 0.26361 | 52.43356 | `BenchmarkIssubset` | | `issubset` (not subset) | 0.00496 | 0.01265 | 2.54761 | `BenchmarkIssubsetNot` | | `issuperset` | 0.00512 | 0.02375 | 4.63585 | `BenchmarkIssuperset` | | `issuperset` (not superset) | 0.00497 | 0.0051 | 1.02613 | `BenchmarkIssupersetNot` | | `__ixor__` | 0.00503 | 0.04197 | 8.34248 | `BenchmarkIxor` | | `__le__` | 0.00494 | 0.00551 | 1.11537 | `BenchmarkLe` | | `__le__` (not less than or equals to) | 0.00517 | 0.00489 | 0.94716 | `BenchmarkLeNot` | | `__len__` | 0.00521 | 0.00485 | 0.93152 | `BenchmarkLen` | | `__lt__` | 0.0051 | 0.00541 | 1.0615 | `BenchmarkLt` | | `__lt__` (not less than) | 0.00497 | 0.00486 | 0.97734 | `BenchmarkLtNot` | | `__contains__` (unsuccessful search) | 0.00514 | 0.00493 | 0.95896 | `BenchmarkNotContains` | | `__or__` | 0.00512 | 0.01625 | 3.1725 | `BenchmarkOr` | | `pop` | 0.00527 | 0.008 | 1.51952 | `BenchmarkPop` | | `remove` | 0.00505 | 0.01034 | 2.04813 | `BenchmarkRemove` | | `__sub__` | 0.00507 | 0.01062 | 2.09627 | `BenchmarkSub` | | `symmetric_difference` | 0.00484 | 0.04529 | 9.35336 | `BenchmarkSymmetricDifference` | | `symmetric_difference_update` | 0.00509 | 0.03932 | 7.7301 | `BenchmarkSymmetricDifferenceUpdate` | | `union` | 0.00509 | 0.01272 | 2.49875 | `BenchmarkUnion` | | `update` | 0.00515 | 0.00963 | 1.87033 | `BenchmarkUpdate` | | `__xor__` | 0.00519 | 0.04231 | 8.15139 | `BenchmarkXor` | approximate memory usage | subject | `builtin` | `sqlitecollections` | ratio | class | | :------ | --------: | ------------------: | ----: | :---- | | `add (existing item)` | 0.0 | 0.00391 | inf | `BenchmarkAddExistingItem` | | `add (new item)` | 0.0 | 0.0 | 1.0 | `BenchmarkAddNewItem` | | `__and__` | 0.0 | 0.0 | 1.0 | `BenchmarkAnd` | | `clear` | 0.0 | 0.0 | 1.0 | `BenchmarkClear` | | `__contains__` | 0.0 | 0.0 | 1.0 | `BenchmarkContains` | | `copy` | 0.0 | 0.0 | 1.0 | `BenchmarkCopy` | | `difference` | 0.0 | 0.0 | 1.0 | `BenchmarkDifference` | | `discard` | 0.0 | 0.0 | 1.0 | `BenchmarkDiscard` | | `discard (no changes)` | 0.0 | 0.0 | 1.0 | `BenchmarkDiscardNoChanges` | | `__ge__` | 0.0 | 0.0 | 1.0 | `BenchmarkGe` | | `__ge__` (not greater than or equals to) | 0.0 | 0.0 | 1.0 | `BenchmarkGeNot` | | `__gt__` | 0.0 | 0.0 | 1.0 | `BenchmarkGt` | | `__gt__` (not greater than) | 0.0 | 0.0 | 1.0 | `BenchmarkGtNot` | | `__iand__` | 0.0 | 0.0 | 1.0 | `BenchmarkIand` | | `__init__` | 0.0 | 0.0 | 1.0 | `BenchmarkInit` | | `intersection` | 0.0 | 0.0 | 1.0 | `BenchmarkIntersection` | | `intersection_update` | 0.0 | 0.0 | 1.0 | `BenchmarkIntersectionUpdate` | | `__ior__` | 0.0 | 0.0 | 1.0 | `BenchmarkIor` | | `isdisjoint` | 0.0 | 0.0 | 1.0 | `BenchmarkIsdisjoint` | | `isdisjoint` (not disjoint) | 0.0 | 0.0 | 1.0 | `BenchmarkIsdisjointNot` | | `issubset` | 0.0 | 0.0 | 1.0 | `BenchmarkIssubset` | | `issubset` (not subset) | 0.0 | 0.0 | 1.0 | `BenchmarkIssubsetNot` | | `issuperset` | 0.0 | 0.0 | 1.0 | `BenchmarkIssuperset` | | `issuperset` (not superset) | 0.0 | 0.0 | 1.0 | `BenchmarkIssupersetNot` | | `__ixor__` | 0.0 | 0.0 | 1.0 | `BenchmarkIxor` | | `__le__` | 0.0 | 0.0 | 1.0 | `BenchmarkLe` | | `__le__` (not less than or equals to) | 0.0 | 0.0 | 1.0 | `BenchmarkLeNot` | | `__len__` | 0.0 | 0.0 | 1.0 | `BenchmarkLen` | | `__lt__` | 0.0 | 0.0 | 1.0 | `BenchmarkLt` | | `__lt__` (not less than) | 0.0 | 0.0 | 1.0 | `BenchmarkLtNot` | | `__contains__` (unsuccessful search) | 0.0 | 0.0 | 1.0 | `BenchmarkNotContains` | | `__or__` | 0.0 | 0.0 | 1.0 | `BenchmarkOr` | | `pop` | 0.0 | 0.0 | 1.0 | `BenchmarkPop` | | `remove` | 0.0 | 0.0 | 1.0 | `BenchmarkRemove` | | `__sub__` | 0.0 | 0.0 | 1.0 | `BenchmarkSub` | | `symmetric_difference` | 0.0 | 0.0 | 1.0 | `BenchmarkSymmetricDifference` | | `symmetric_difference_update` | 0.0 | 0.0 | 1.0 | `BenchmarkSymmetricDifferenceUpdate` | | `union` | 0.0 | 0.0 | 1.0 | `BenchmarkUnion` | | `update` | 0.0 | 0.0 | 1.0 | `BenchmarkUpdate` | | `__xor__` | 0.0 | 0.0 | 1.0 | `BenchmarkXor` |","title":"Set"},{"location":"benchmark_results/py36/dict/","text":"timing | subject | `builtin` | `sqlitecollections` | ratio | class | | :------ | --------: | ------------------: | ----: | :---- | | `clear` | 0.00391 | 0.00552 | 1.41127 | `BenchmarkClear` | | `__contains__` | 0.00371 | 0.00423 | 1.13905 | `BenchmarkContains` | | `copy` | 0.00434 | 0.00845 | 1.94784 | `BenchmarkCopy` | | `__delitem__` | 0.00388 | 0.00611 | 1.57393 | `BenchmarkDelitem` | | `get` | 0.00403 | 0.00473 | 1.17265 | `BenchmarkGet` | | `get (unsuccessful search)` | 0.00402 | 0.00417 | 1.03882 | `BenchmarkGetDefault` | | `__getitem__` | 0.00416 | 0.00411 | 0.98748 | `BenchmarkGetitem` | | `__init__` | 0.00394 | 0.04269 | 10.83606 | `BenchmarkInit` | | `items` | 0.00415 | 0.01169 | 2.81898 | `BenchmarkItems` | | `__iter__` | 0.00406 | 0.00814 | 2.00519 | `BenchmarkIter` | | `keys` | 0.0041 | 0.00842 | 2.05125 | `BenchmarkKeys` | | `__len__` | 0.00385 | 0.00391 | 1.01574 | `BenchmarkLen` | | `__contains__` (unsuccessful search) | 0.00384 | 0.00389 | 1.01241 | `BenchmarkNotContains` | | `pop` | 0.00389 | 0.00658 | 1.69084 | `BenchmarkPop` | | `pop (unsuccessful search)` | 0.00395 | 0.00512 | 1.2943 | `BenchmarkPopDefault` | | `popitem` | 0.00382 | 0.00652 | 1.70526 | `BenchmarkPopitem` | | `setdefault` | 0.00405 | 0.00553 | 1.36426 | `BenchmarkSetdefault` | | `setdefault (unsuccessful search)` | 0.00412 | 0.0056 | 1.35763 | `BenchmarkSetdefaultAddItem` | | `__setitem__` (add new item) | 0.00393 | 0.00647 | 1.64556 | `BenchmarkSetitemAddNewItem` | | `__setitem__` (replace) | 0.00398 | 0.00635 | 1.59791 | `BenchmarkSetitemReplace` | | `update` | 0.00389 | 0.0066 | 1.69533 | `BenchmarkUpdate` | | `update` (many) | 0.00464 | 0.56723 | 122.3416 | `BenchmarkUpdateMany` | | `values` | 0.00387 | 0.00815 | 2.1084 | `BenchmarkValues` | approximate memory usage | subject | `builtin` | `sqlitecollections` | ratio | class | | :------ | --------: | ------------------: | ----: | :---- | | `clear` | 0.0 | 0.0 | 1.0 | `BenchmarkClear` | | `__contains__` | 0.0 | 0.0 | 1.0 | `BenchmarkContains` | | `copy` | 0.05469 | 0.0 | 0.0 | `BenchmarkCopy` | | `__delitem__` | 0.0 | 0.0 | 1.0 | `BenchmarkDelitem` | | `get` | 0.0 | 0.0 | 1.0 | `BenchmarkGet` | | `get (unsuccessful search)` | 0.0 | 0.0 | 1.0 | `BenchmarkGetDefault` | | `__getitem__` | 0.0 | 0.0 | 1.0 | `BenchmarkGetitem` | | `__init__` | 0.00781 | 0.01562 | 2.0 | `BenchmarkInit` | | `items` | 0.23828 | 0.26172 | 1.09836 | `BenchmarkItems` | | `__iter__` | 0.0 | 0.0 | 1.0 | `BenchmarkIter` | | `keys` | 0.0 | 0.0 | 1.0 | `BenchmarkKeys` | | `__len__` | 0.0 | 0.0 | 1.0 | `BenchmarkLen` | | `__contains__` (unsuccessful search) | 0.0 | 0.0 | 1.0 | `BenchmarkNotContains` | | `pop` | 0.0 | 0.0 | 1.0 | `BenchmarkPop` | | `pop (unsuccessful search)` | 0.0 | 0.0 | 1.0 | `BenchmarkPopDefault` | | `popitem` | 0.0 | 0.0 | 1.0 | `BenchmarkPopitem` | | `setdefault` | 0.0 | 0.0 | 1.0 | `BenchmarkSetdefault` | | `setdefault (unsuccessful search)` | 0.0 | 0.0 | 1.0 | `BenchmarkSetdefaultAddItem` | | `__setitem__` (add new item) | 0.0 | 0.0 | 1.0 | `BenchmarkSetitemAddNewItem` | | `__setitem__` (replace) | 0.0 | 0.0 | 1.0 | `BenchmarkSetitemReplace` | | `update` | 0.0 | 0.0 | 1.0 | `BenchmarkUpdate` | | `update` (many) | 0.14844 | 0.0 | 0.0 | `BenchmarkUpdateMany` | | `values` | 0.0 | 0.0 | 1.0 | `BenchmarkValues` |","title":"Dict"},{"location":"benchmark_results/py36/list/","text":"timing | subject | `builtin` | `sqlitecollections` | ratio | class | | :------ | --------: | ------------------: | ----: | :---- | | `__add__` | 0.00414 | 0.00912 | 2.20163 | `BenchmarkAdd` | | `append` | 0.00376 | 0.00593 | 1.57946 | `BenchmarkAppend` | | `clear` | 0.00371 | 0.00609 | 1.6387 | `BenchmarkClear` | | `__contains__` | 0.00371 | 0.00393 | 1.06085 | `BenchmarkContains` | | `copy` | 0.00378 | 0.00806 | 2.1323 | `BenchmarkCopy` | | `count` | 0.00372 | 0.00386 | 1.03808 | `BenchmarkCount` | | `__init__` | 0.00358 | 0.01949 | 5.45104 | `BenchmarkCreateWithInitialData` | | `__delitem__` | 0.00392 | 0.08765 | 22.36844 | `BenchmarkDelitem` | | `__delitem__` (slice) | 0.00361 | 0.16846 | 46.67056 | `BenchmarkDelitemSlice` | | `__delitem__` (slice with skip) | 0.00368 | 0.16637 | 45.24193 | `BenchmarkDelitemSliceSkip` | | `extend` | 0.00388 | 0.0059 | 1.51891 | `BenchmarkExtend` | | `__getitem__` | 0.00398 | 0.00404 | 1.01299 | `BenchmarkGetitem` | | `__getitem__` (slice) | 0.00372 | 0.08552 | 22.9692 | `BenchmarkGetitemSlice` | | `__getitem__` (slice with skip) | 0.00352 | 0.01009 | 2.86372 | `BenchmarkGetitemSliceSkip` | | `__iadd__` | 0.00378 | 0.00599 | 1.58521 | `BenchmarkIadd` | | `__imult__` | 0.00395 | 0.22854 | 57.92156 | `BenchmarkImult` | | `index` | 0.00374 | 0.00394 | 1.05128 | `BenchmarkIndex` | | `index` (unsuccessful search) | 0.00389 | 0.00416 | 1.07012 | `BenchmarkIndexUnsuccessfulSearch` | | `insert` | 0.00388 | 0.14994 | 38.68042 | `BenchmarkInsert` | | `__len__` | 0.00379 | 0.00381 | 1.00464 | `BenchmarkLen` | | `__mult__` | 0.0036 | 0.22812 | 63.36 | `BenchmarkMult` | | `__contains__` (unsuccessful search) | 0.00369 | 0.004 | 1.08608 | `BenchmarkNotContains` | | `pop` | 0.00374 | 0.07997 | 21.36755 | `BenchmarkPop` | | `remove` | 0.0039 | 0.11148 | 28.58825 | `BenchmarkRemove` | | `__setitem__` | 0.0039 | 0.00604 | 1.54723 | `BenchmarkSetitem` | | `__setitem__` (slice) | 0.00366 | 0.15408 | 42.10073 | `BenchmarkSetitemSlice` | | `__setitem__` (slice with skip) | 0.00374 | 0.0145 | 3.87251 | `BenchmarkSetitemSliceSkip` | | `sort` (balanced) | 0.00398 | 0.33144 | 83.32439 | `BenchmarkSortBalanced` | | `sort` (fastest) | 0.00386 | 0.32927 | 85.30726 | `BenchmarkSortFastest` | | `sort` (memory_saving) | 0.00391 | 3.40285 | 871.01716 | `BenchmarkSortMemorySaving` | approximate memory usage | subject | `builtin` | `sqlitecollections` | ratio | class | | :------ | --------: | ------------------: | ----: | :---- | | `__add__` | 0.0 | 0.0 | 1.0 | `BenchmarkAdd` | | `append` | 0.0 | 0.0 | 1.0 | `BenchmarkAppend` | | `clear` | 0.0 | 0.0 | 1.0 | `BenchmarkClear` | | `__contains__` | 0.0 | 0.0 | 1.0 | `BenchmarkContains` | | `copy` | 0.0 | 0.0 | 1.0 | `BenchmarkCopy` | | `count` | 0.0 | 0.0 | 1.0 | `BenchmarkCount` | | `__init__` | 0.0 | 0.07422 | inf | `BenchmarkCreateWithInitialData` | | `__delitem__` | 0.0 | 0.0 | 1.0 | `BenchmarkDelitem` | | `__delitem__` (slice) | 0.0 | 0.0 | 1.0 | `BenchmarkDelitemSlice` | | `__delitem__` (slice with skip) | 0.0 | 0.0 | 1.0 | `BenchmarkDelitemSliceSkip` | | `extend` | 0.0 | 0.0 | 1.0 | `BenchmarkExtend` | | `__getitem__` | 0.0 | 0.0 | 1.0 | `BenchmarkGetitem` | | `__getitem__` (slice) | 0.0 | 0.00391 | inf | `BenchmarkGetitemSlice` | | `__getitem__` (slice with skip) | 0.0 | 0.00391 | inf | `BenchmarkGetitemSliceSkip` | | `__iadd__` | 0.0 | 0.0 | 1.0 | `BenchmarkIadd` | | `__imult__` | 0.0 | 0.0 | 1.0 | `BenchmarkImult` | | `index` | 0.0 | 0.0 | 1.0 | `BenchmarkIndex` | | `index` (unsuccessful search) | 0.0 | 0.0 | 1.0 | `BenchmarkIndexUnsuccessfulSearch` | | `insert` | 0.0 | 0.0 | 1.0 | `BenchmarkInsert` | | `__len__` | 0.0 | 0.00391 | inf | `BenchmarkLen` | | `__mult__` | 0.0 | 0.0 | 1.0 | `BenchmarkMult` | | `__contains__` (unsuccessful search) | 0.0 | 0.00391 | inf | `BenchmarkNotContains` | | `pop` | 0.0 | 0.0 | 1.0 | `BenchmarkPop` | | `remove` | 0.0 | 0.00391 | inf | `BenchmarkRemove` | | `__setitem__` | 0.0 | 0.0 | 1.0 | `BenchmarkSetitem` | | `__setitem__` (slice) | 0.0 | 0.00391 | inf | `BenchmarkSetitemSlice` | | `__setitem__` (slice with skip) | 0.00391 | 0.0 | 0.0 | `BenchmarkSetitemSliceSkip` | | `sort` (balanced) | 0.0 | 0.13672 | inf | `BenchmarkSortBalanced` | | `sort` (fastest) | 0.0 | 0.13281 | inf | `BenchmarkSortFastest` | | `sort` (memory_saving) | 0.0 | 0.0 | 1.0 | `BenchmarkSortMemorySaving` |","title":"List"},{"location":"benchmark_results/py36/set/","text":"timing | subject | `builtin` | `sqlitecollections` | ratio | class | | :------ | --------: | ------------------: | ----: | :---- | | `add (existing item)` | 0.00354 | 0.00472 | 1.33411 | `BenchmarkAddExistingItem` | | `add (new item)` | 0.00382 | 0.00564 | 1.47798 | `BenchmarkAddNewItem` | | `__and__` | 0.00358 | 0.009 | 2.51341 | `BenchmarkAnd` | | `clear` | 0.00374 | 0.00526 | 1.40746 | `BenchmarkClear` | | `__contains__` | 0.00356 | 0.00371 | 1.04177 | `BenchmarkContains` | | `copy` | 0.00368 | 0.00711 | 1.93244 | `BenchmarkCopy` | | `difference` | 0.00368 | 0.00712 | 1.93851 | `BenchmarkDifference` | | `discard` | 0.00354 | 0.00535 | 1.5129 | `BenchmarkDiscard` | | `discard (no changes)` | 0.0038 | 0.00506 | 1.33161 | `BenchmarkDiscardNoChanges` | | `__ge__` | 0.0038 | 0.00375 | 0.98817 | `BenchmarkGe` | | `__ge__` (not greater than or equals to) | 0.00351 | 0.00409 | 1.16386 | `BenchmarkGeNot` | | `__gt__` | 0.00372 | 0.0145 | 3.90262 | `BenchmarkGt` | | `__gt__` (not greater than) | 0.00377 | 0.03129 | 8.28997 | `BenchmarkGtNot` | | `__iand__` | 0.00357 | 0.00737 | 2.06558 | `BenchmarkIand` | | `__init__` | 0.00357 | 0.01578 | 4.418 | `BenchmarkInit` | | `intersection` | 0.00376 | 0.00953 | 2.53263 | `BenchmarkIntersection` | | `intersection_update` | 0.00419 | 0.00719 | 1.71627 | `BenchmarkIntersectionUpdate` | | `__ior__` | 0.00389 | 0.00751 | 1.92782 | `BenchmarkIor` | | `isdisjoint` | 0.00358 | 0.00356 | 0.99433 | `BenchmarkIsdisjoint` | | `isdisjoint` (not disjoint) | 0.00357 | 0.00374 | 1.04868 | `BenchmarkIsdisjointNot` | | `issubset` | 0.00381 | 0.029 | 7.60843 | `BenchmarkIssubset` | | `issubset` (not subset) | 0.00362 | 0.00939 | 2.59632 | `BenchmarkIssubsetNot` | | `issuperset` | 0.00356 | 0.02413 | 6.78288 | `BenchmarkIssuperset` | | `issuperset` (not superset) | 0.00354 | 0.00405 | 1.14404 | `BenchmarkIssupersetNot` | | `__ixor__` | 0.00366 | 0.1896 | 51.76161 | `BenchmarkIxor` | | `__le__` | 0.00354 | 0.00443 | 1.25016 | `BenchmarkLe` | | `__le__` (not less than or equals to) | 0.00368 | 0.00408 | 1.10694 | `BenchmarkLeNot` | | `__len__` | 0.0038 | 0.0036 | 0.94721 | `BenchmarkLen` | | `__lt__` | 0.00374 | 0.00445 | 1.18714 | `BenchmarkLt` | | `__lt__` (not less than) | 0.00375 | 0.00375 | 1.00018 | `BenchmarkLtNot` | | `__contains__` (unsuccessful search) | 0.00387 | 0.00375 | 0.96722 | `BenchmarkNotContains` | | `__or__` | 0.00364 | 0.01007 | 2.76967 | `BenchmarkOr` | | `pop` | 0.00385 | 0.00563 | 1.46284 | `BenchmarkPop` | | `remove` | 0.00362 | 0.00575 | 1.58715 | `BenchmarkRemove` | | `__sub__` | 0.00365 | 0.00715 | 1.95629 | `BenchmarkSub` | | `symmetric_difference` | 0.00361 | 0.04201 | 11.6436 | `BenchmarkSymmetricDifference` | | `symmetric_difference_update` | 0.00395 | 0.03992 | 10.10783 | `BenchmarkSymmetricDifferenceUpdate` | | `union` | 0.00392 | 0.01023 | 2.60973 | `BenchmarkUnion` | | `update` | 0.00383 | 0.00716 | 1.87055 | `BenchmarkUpdate` | | `__xor__` | 0.00352 | 0.04144 | 11.75671 | `BenchmarkXor` | approximate memory usage | subject | `builtin` | `sqlitecollections` | ratio | class | | :------ | --------: | ------------------: | ----: | :---- | | `add (existing item)` | 0.01562 | 0.00391 | 0.25 | `BenchmarkAddExistingItem` | | `add (new item)` | 0.0 | 0.0 | 1.0 | `BenchmarkAddNewItem` | | `__and__` | 0.0 | 0.0 | 1.0 | `BenchmarkAnd` | | `clear` | 0.0 | 0.0 | 1.0 | `BenchmarkClear` | | `__contains__` | 0.0 | 0.0 | 1.0 | `BenchmarkContains` | | `copy` | 0.0 | 0.0 | 1.0 | `BenchmarkCopy` | | `difference` | 0.0 | 0.0 | 1.0 | `BenchmarkDifference` | | `discard` | 0.0 | 0.0 | 1.0 | `BenchmarkDiscard` | | `discard (no changes)` | 0.0 | 0.0 | 1.0 | `BenchmarkDiscardNoChanges` | | `__ge__` | 0.0 | 0.0 | 1.0 | `BenchmarkGe` | | `__ge__` (not greater than or equals to) | 0.0 | 0.0 | 1.0 | `BenchmarkGeNot` | | `__gt__` | 0.0 | 0.0 | 1.0 | `BenchmarkGt` | | `__gt__` (not greater than) | 0.0 | 0.0 | 1.0 | `BenchmarkGtNot` | | `__iand__` | 0.0 | 0.0 | 1.0 | `BenchmarkIand` | | `__init__` | 0.0 | 0.00781 | inf | `BenchmarkInit` | | `intersection` | 0.0 | 0.0 | 1.0 | `BenchmarkIntersection` | | `intersection_update` | 0.0 | 0.0 | 1.0 | `BenchmarkIntersectionUpdate` | | `__ior__` | 0.0 | 0.0 | 1.0 | `BenchmarkIor` | | `isdisjoint` | 0.0 | 0.0 | 1.0 | `BenchmarkIsdisjoint` | | `isdisjoint` (not disjoint) | 0.0 | 0.0 | 1.0 | `BenchmarkIsdisjointNot` | | `issubset` | 0.0 | 0.0 | 1.0 | `BenchmarkIssubset` | | `issubset` (not subset) | 0.0 | 0.0 | 1.0 | `BenchmarkIssubsetNot` | | `issuperset` | 0.0 | 0.0 | 1.0 | `BenchmarkIssuperset` | | `issuperset` (not superset) | 0.0 | 0.0 | 1.0 | `BenchmarkIssupersetNot` | | `__ixor__` | 0.0 | 0.0 | 1.0 | `BenchmarkIxor` | | `__le__` | 0.0 | 0.0 | 1.0 | `BenchmarkLe` | | `__le__` (not less than or equals to) | 0.0 | 0.0 | 1.0 | `BenchmarkLeNot` | | `__len__` | 0.0 | 0.0 | 1.0 | `BenchmarkLen` | | `__lt__` | 0.0 | 0.0 | 1.0 | `BenchmarkLt` | | `__lt__` (not less than) | 0.0 | 0.0 | 1.0 | `BenchmarkLtNot` | | `__contains__` (unsuccessful search) | 0.0 | 0.0 | 1.0 | `BenchmarkNotContains` | | `__or__` | 0.0 | 0.0 | 1.0 | `BenchmarkOr` | | `pop` | 0.0 | 0.0 | 1.0 | `BenchmarkPop` | | `remove` | 0.0 | 0.0 | 1.0 | `BenchmarkRemove` | | `__sub__` | 0.0 | 0.0 | 1.0 | `BenchmarkSub` | | `symmetric_difference` | 0.0 | 0.0 | 1.0 | `BenchmarkSymmetricDifference` | | `symmetric_difference_update` | 0.0 | 0.0 | 1.0 | `BenchmarkSymmetricDifferenceUpdate` | | `union` | 0.0 | 0.0 | 1.0 | `BenchmarkUnion` | | `update` | 0.0 | 0.0 | 1.0 | `BenchmarkUpdate` | | `__xor__` | 0.0 | 0.0 | 1.0 | `BenchmarkXor` |","title":"Set"},{"location":"benchmark_results/py37/dict/","text":"timing | subject | `builtin` | `sqlitecollections` | ratio | class | | :------ | --------: | ------------------: | ----: | :---- | | `clear` | 0.00367 | 0.00691 | 1.87955 | `BenchmarkClear` | | `__contains__` | 0.00369 | 0.00383 | 1.03797 | `BenchmarkContains` | | `copy` | 0.0038 | 0.00921 | 2.4212 | `BenchmarkCopy` | | `__delitem__` | 0.00364 | 0.00601 | 1.65226 | `BenchmarkDelitem` | | `get` | 0.00352 | 0.00378 | 1.07159 | `BenchmarkGet` | | `get (unsuccessful search)` | 0.00356 | 0.00382 | 1.07377 | `BenchmarkGetDefault` | | `__getitem__` | 0.00365 | 0.00383 | 1.0498 | `BenchmarkGetitem` | | `__init__` | 0.00389 | 0.04382 | 11.26927 | `BenchmarkInit` | | `items` | 0.00398 | 0.01224 | 3.07247 | `BenchmarkItems` | | `__iter__` | 0.00366 | 0.00824 | 2.25197 | `BenchmarkIter` | | `keys` | 0.00375 | 0.00837 | 2.23448 | `BenchmarkKeys` | | `__len__` | 0.00387 | 0.00382 | 0.98733 | `BenchmarkLen` | | `__contains__` (unsuccessful search) | 0.00371 | 0.00386 | 1.04157 | `BenchmarkNotContains` | | `pop` | 0.00392 | 0.00698 | 1.77823 | `BenchmarkPop` | | `pop (unsuccessful search)` | 0.00395 | 0.00565 | 1.42935 | `BenchmarkPopDefault` | | `popitem` | 0.00397 | 0.00736 | 1.85462 | `BenchmarkPopitem` | | `setdefault` | 0.00387 | 0.00547 | 1.41434 | `BenchmarkSetdefault` | | `setdefault (unsuccessful search)` | 0.00382 | 0.00593 | 1.5511 | `BenchmarkSetdefaultAddItem` | | `__setitem__` (add new item) | 0.00379 | 0.00689 | 1.81874 | `BenchmarkSetitemAddNewItem` | | `__setitem__` (replace) | 0.00384 | 0.00642 | 1.67208 | `BenchmarkSetitemReplace` | | `update` | 0.00394 | 0.00638 | 1.61989 | `BenchmarkUpdate` | | `update` (many) | 0.00456 | 0.56238 | 123.41597 | `BenchmarkUpdateMany` | | `values` | 0.00362 | 0.00815 | 2.24966 | `BenchmarkValues` | approximate memory usage | subject | `builtin` | `sqlitecollections` | ratio | class | | :------ | --------: | ------------------: | ----: | :---- | | `clear` | 0.00391 | 0.0 | 0.0 | `BenchmarkClear` | | `__contains__` | 0.0 | 0.0 | 1.0 | `BenchmarkContains` | | `copy` | 0.05469 | 0.0 | 0.0 | `BenchmarkCopy` | | `__delitem__` | 0.0 | 0.0 | 1.0 | `BenchmarkDelitem` | | `get` | 0.0 | 0.0 | 1.0 | `BenchmarkGet` | | `get (unsuccessful search)` | 0.0 | 0.0 | 1.0 | `BenchmarkGetDefault` | | `__getitem__` | 0.0 | 0.0 | 1.0 | `BenchmarkGetitem` | | `__init__` | 0.0 | 0.0 | 1.0 | `BenchmarkInit` | | `items` | 0.125 | 0.24219 | 1.9375 | `BenchmarkItems` | | `__iter__` | 0.0 | 0.125 | inf | `BenchmarkIter` | | `keys` | 0.0 | 0.03516 | inf | `BenchmarkKeys` | | `__len__` | 0.0 | 0.0 | 1.0 | `BenchmarkLen` | | `__contains__` (unsuccessful search) | 0.0 | 0.0 | 1.0 | `BenchmarkNotContains` | | `pop` | 0.0 | 0.0 | 1.0 | `BenchmarkPop` | | `pop (unsuccessful search)` | 0.00391 | 0.0 | 0.0 | `BenchmarkPopDefault` | | `popitem` | 0.0 | 0.0 | 1.0 | `BenchmarkPopitem` | | `setdefault` | 0.00391 | 0.0 | 0.0 | `BenchmarkSetdefault` | | `setdefault (unsuccessful search)` | 0.0 | 0.0 | 1.0 | `BenchmarkSetdefaultAddItem` | | `__setitem__` (add new item) | 0.00391 | 0.0 | 0.0 | `BenchmarkSetitemAddNewItem` | | `__setitem__` (replace) | 0.0 | 0.0 | 1.0 | `BenchmarkSetitemReplace` | | `update` | 0.0 | 0.0 | 1.0 | `BenchmarkUpdate` | | `update` (many) | 0.14062 | 0.0 | 0.0 | `BenchmarkUpdateMany` | | `values` | 0.125 | 0.0 | 0.0 | `BenchmarkValues` |","title":"Dict"},{"location":"benchmark_results/py37/list/","text":"timing | subject | `builtin` | `sqlitecollections` | ratio | class | | :------ | --------: | ------------------: | ----: | :---- | | `__add__` | 0.00362 | 0.00943 | 2.60504 | `BenchmarkAdd` | | `append` | 0.00385 | 0.00611 | 1.58807 | `BenchmarkAppend` | | `clear` | 0.00367 | 0.00635 | 1.73083 | `BenchmarkClear` | | `__contains__` | 0.00367 | 0.00372 | 1.01342 | `BenchmarkContains` | | `copy` | 0.00374 | 0.00817 | 2.18394 | `BenchmarkCopy` | | `count` | 0.00383 | 0.00387 | 1.00867 | `BenchmarkCount` | | `__init__` | 0.00377 | 0.02164 | 5.74369 | `BenchmarkCreateWithInitialData` | | `__delitem__` | 0.00376 | 0.07856 | 20.90863 | `BenchmarkDelitem` | | `__delitem__` (slice) | 0.00345 | 0.15006 | 43.46357 | `BenchmarkDelitemSlice` | | `__delitem__` (slice with skip) | 0.0038 | 0.15007 | 39.53421 | `BenchmarkDelitemSliceSkip` | | `extend` | 0.00386 | 0.00635 | 1.64415 | `BenchmarkExtend` | | `__getitem__` | 0.00383 | 0.0039 | 1.01766 | `BenchmarkGetitem` | | `__getitem__` (slice) | 0.00382 | 0.08754 | 22.90724 | `BenchmarkGetitemSlice` | | `__getitem__` (slice with skip) | 0.00388 | 0.01164 | 3.00095 | `BenchmarkGetitemSliceSkip` | | `__iadd__` | 0.00385 | 0.0065 | 1.68707 | `BenchmarkIadd` | | `__imult__` | 0.00382 | 0.23182 | 60.65777 | `BenchmarkImult` | | `index` | 0.00355 | 0.00395 | 1.11355 | `BenchmarkIndex` | | `index` (unsuccessful search) | 0.00359 | 0.00387 | 1.07886 | `BenchmarkIndexUnsuccessfulSearch` | | `insert` | 0.00363 | 0.14841 | 40.88405 | `BenchmarkInsert` | | `__len__` | 0.00391 | 0.0039 | 0.99783 | `BenchmarkLen` | | `__mult__` | 0.00362 | 0.23467 | 64.8889 | `BenchmarkMult` | | `__contains__` (unsuccessful search) | 0.00368 | 0.00384 | 1.04395 | `BenchmarkNotContains` | | `pop` | 0.00385 | 0.07928 | 20.60491 | `BenchmarkPop` | | `remove` | 0.00355 | 0.11074 | 31.19068 | `BenchmarkRemove` | | `__setitem__` | 0.00361 | 0.00614 | 1.69835 | `BenchmarkSetitem` | | `__setitem__` (slice) | 0.00359 | 0.15799 | 43.97751 | `BenchmarkSetitemSlice` | | `__setitem__` (slice with skip) | 0.00363 | 0.01513 | 4.16763 | `BenchmarkSetitemSliceSkip` | | `sort` (balanced) | 0.00373 | 0.32882 | 88.04625 | `BenchmarkSortBalanced` | | `sort` (fastest) | 0.00358 | 0.33496 | 93.62373 | `BenchmarkSortFastest` | | `sort` (memory_saving) | 0.00368 | 3.4192 | 928.04368 | `BenchmarkSortMemorySaving` | approximate memory usage | subject | `builtin` | `sqlitecollections` | ratio | class | | :------ | --------: | ------------------: | ----: | :---- | | `__add__` | 0.0 | 0.0 | 1.0 | `BenchmarkAdd` | | `append` | 0.0 | 0.0 | 1.0 | `BenchmarkAppend` | | `clear` | 0.0 | 0.0 | 1.0 | `BenchmarkClear` | | `__contains__` | 0.0 | 0.0 | 1.0 | `BenchmarkContains` | | `copy` | 0.0 | 0.0 | 1.0 | `BenchmarkCopy` | | `count` | 0.0 | 0.0 | 1.0 | `BenchmarkCount` | | `__init__` | 0.0 | 0.01562 | inf | `BenchmarkCreateWithInitialData` | | `__delitem__` | 0.0 | 0.0 | 1.0 | `BenchmarkDelitem` | | `__delitem__` (slice) | 0.0 | 0.0 | 1.0 | `BenchmarkDelitemSlice` | | `__delitem__` (slice with skip) | 0.0 | 0.0 | 1.0 | `BenchmarkDelitemSliceSkip` | | `extend` | 0.0 | 0.0 | 1.0 | `BenchmarkExtend` | | `__getitem__` | 0.0 | 0.0 | 1.0 | `BenchmarkGetitem` | | `__getitem__` (slice) | 0.0 | 0.0 | 1.0 | `BenchmarkGetitemSlice` | | `__getitem__` (slice with skip) | 0.0 | 0.0 | 1.0 | `BenchmarkGetitemSliceSkip` | | `__iadd__` | 0.0 | 0.0 | 1.0 | `BenchmarkIadd` | | `__imult__` | 0.0 | 0.0 | 1.0 | `BenchmarkImult` | | `index` | 0.0 | 0.0 | 1.0 | `BenchmarkIndex` | | `index` (unsuccessful search) | 0.0 | 0.0 | 1.0 | `BenchmarkIndexUnsuccessfulSearch` | | `insert` | 0.0 | 0.0 | 1.0 | `BenchmarkInsert` | | `__len__` | 0.0 | 0.0 | 1.0 | `BenchmarkLen` | | `__mult__` | 0.0 | 0.0 | 1.0 | `BenchmarkMult` | | `__contains__` (unsuccessful search) | 0.0 | 0.0 | 1.0 | `BenchmarkNotContains` | | `pop` | 0.0 | 0.0 | 1.0 | `BenchmarkPop` | | `remove` | 0.0 | 0.0 | 1.0 | `BenchmarkRemove` | | `__setitem__` | 0.0 | 0.0 | 1.0 | `BenchmarkSetitem` | | `__setitem__` (slice) | 0.0 | 0.0 | 1.0 | `BenchmarkSetitemSlice` | | `__setitem__` (slice with skip) | 0.0 | 0.0 | 1.0 | `BenchmarkSetitemSliceSkip` | | `sort` (balanced) | 0.0 | 0.0 | 1.0 | `BenchmarkSortBalanced` | | `sort` (fastest) | 0.0 | 0.18359 | inf | `BenchmarkSortFastest` | | `sort` (memory_saving) | 0.0 | 0.0 | 1.0 | `BenchmarkSortMemorySaving` |","title":"List"},{"location":"benchmark_results/py37/set/","text":"timing | subject | `builtin` | `sqlitecollections` | ratio | class | | :------ | --------: | ------------------: | ----: | :---- | | `add (existing item)` | 0.00376 | 0.0051 | 1.3576 | `BenchmarkAddExistingItem` | | `add (new item)` | 0.00383 | 0.00631 | 1.64937 | `BenchmarkAddNewItem` | | `__and__` | 0.00371 | 0.01153 | 3.10635 | `BenchmarkAnd` | | `clear` | 0.00369 | 0.00816 | 2.20961 | `BenchmarkClear` | | `__contains__` | 0.00369 | 0.00389 | 1.05298 | `BenchmarkContains` | | `copy` | 0.00377 | 0.00812 | 2.15565 | `BenchmarkCopy` | | `difference` | 0.00379 | 0.0079 | 2.08219 | `BenchmarkDifference` | | `discard` | 0.00366 | 0.00634 | 1.73374 | `BenchmarkDiscard` | | `discard (no changes)` | 0.00383 | 0.0051 | 1.3309 | `BenchmarkDiscardNoChanges` | | `__ge__` | 0.00357 | 0.00374 | 1.04763 | `BenchmarkGe` | | `__ge__` (not greater than or equals to) | 0.00371 | 0.00443 | 1.19471 | `BenchmarkGeNot` | | `__gt__` | 0.00369 | 0.00711 | 1.92565 | `BenchmarkGt` | | `__gt__` (not greater than) | 0.0036 | 0.03163 | 8.77844 | `BenchmarkGtNot` | | `__iand__` | 0.00363 | 0.00737 | 2.02872 | `BenchmarkIand` | | `__init__` | 0.00351 | 0.01588 | 4.5213 | `BenchmarkInit` | | `intersection` | 0.00394 | 0.01011 | 2.56318 | `BenchmarkIntersection` | | `intersection_update` | 0.00361 | 0.00748 | 2.07564 | `BenchmarkIntersectionUpdate` | | `__ior__` | 0.0037 | 0.00743 | 2.01185 | `BenchmarkIor` | | `isdisjoint` | 0.00357 | 0.00379 | 1.06074 | `BenchmarkIsdisjoint` | | `isdisjoint` (not disjoint) | 0.00368 | 0.00369 | 1.00232 | `BenchmarkIsdisjointNot` | | `issubset` | 0.00375 | 0.03046 | 8.1288 | `BenchmarkIssubset` | | `issubset` (not subset) | 0.00371 | 0.00964 | 2.59681 | `BenchmarkIssubsetNot` | | `issuperset` | 0.00371 | 0.0242 | 6.52618 | `BenchmarkIssuperset` | | `issuperset` (not superset) | 0.00371 | 0.00451 | 1.21691 | `BenchmarkIssupersetNot` | | `__ixor__` | 0.00361 | 0.05951 | 16.47229 | `BenchmarkIxor` | | `__le__` | 0.00412 | 0.00492 | 1.19431 | `BenchmarkLe` | | `__le__` (not less than or equals to) | 0.00365 | 0.0037 | 1.01398 | `BenchmarkLeNot` | | `__len__` | 0.00376 | 0.00368 | 0.97935 | `BenchmarkLen` | | `__lt__` | 0.00363 | 0.00477 | 1.31679 | `BenchmarkLt` | | `__lt__` (not less than) | 0.00371 | 0.00368 | 0.99257 | `BenchmarkLtNot` | | `__contains__` (unsuccessful search) | 0.00343 | 0.00371 | 1.082 | `BenchmarkNotContains` | | `__or__` | 0.00356 | 0.01135 | 3.18471 | `BenchmarkOr` | | `pop` | 0.0035 | 0.00631 | 1.80561 | `BenchmarkPop` | | `remove` | 0.00354 | 0.00643 | 1.81947 | `BenchmarkRemove` | | `__sub__` | 0.00343 | 0.00833 | 2.43026 | `BenchmarkSub` | | `symmetric_difference` | 0.00351 | 0.04321 | 12.30169 | `BenchmarkSymmetricDifference` | | `symmetric_difference_update` | 0.00355 | 0.04043 | 11.38015 | `BenchmarkSymmetricDifferenceUpdate` | | `union` | 0.00353 | 0.01054 | 2.98905 | `BenchmarkUnion` | | `update` | 0.00359 | 0.0077 | 2.14217 | `BenchmarkUpdate` | | `__xor__` | 0.00369 | 0.04236 | 11.48279 | `BenchmarkXor` | approximate memory usage | subject | `builtin` | `sqlitecollections` | ratio | class | | :------ | --------: | ------------------: | ----: | :---- | | `add (existing item)` | 0.0 | 0.00391 | inf | `BenchmarkAddExistingItem` | | `add (new item)` | 0.0 | 0.0 | 1.0 | `BenchmarkAddNewItem` | | `__and__` | 0.0 | 0.00391 | inf | `BenchmarkAnd` | | `clear` | 0.0 | 0.0 | 1.0 | `BenchmarkClear` | | `__contains__` | 0.0 | 0.0 | 1.0 | `BenchmarkContains` | | `copy` | 0.0 | 0.0 | 1.0 | `BenchmarkCopy` | | `difference` | 0.0 | 0.0 | 1.0 | `BenchmarkDifference` | | `discard` | 0.0 | 0.0 | 1.0 | `BenchmarkDiscard` | | `discard (no changes)` | 0.0 | 0.0 | 1.0 | `BenchmarkDiscardNoChanges` | | `__ge__` | 0.0 | 0.0 | 1.0 | `BenchmarkGe` | | `__ge__` (not greater than or equals to) | 0.0 | 0.0 | 1.0 | `BenchmarkGeNot` | | `__gt__` | 0.0 | 0.0 | 1.0 | `BenchmarkGt` | | `__gt__` (not greater than) | 0.0 | 0.0 | 1.0 | `BenchmarkGtNot` | | `__iand__` | 0.0 | 0.0 | 1.0 | `BenchmarkIand` | | `__init__` | 0.0 | 0.0 | 1.0 | `BenchmarkInit` | | `intersection` | 0.0 | 0.0 | 1.0 | `BenchmarkIntersection` | | `intersection_update` | 0.0 | 0.0 | 1.0 | `BenchmarkIntersectionUpdate` | | `__ior__` | 0.0 | 0.0 | 1.0 | `BenchmarkIor` | | `isdisjoint` | 0.0 | 0.0 | 1.0 | `BenchmarkIsdisjoint` | | `isdisjoint` (not disjoint) | 0.0 | 0.0 | 1.0 | `BenchmarkIsdisjointNot` | | `issubset` | 0.0 | 0.0 | 1.0 | `BenchmarkIssubset` | | `issubset` (not subset) | 0.0 | 0.0 | 1.0 | `BenchmarkIssubsetNot` | | `issuperset` | 0.0 | 0.0 | 1.0 | `BenchmarkIssuperset` | | `issuperset` (not superset) | 0.0 | 0.0 | 1.0 | `BenchmarkIssupersetNot` | | `__ixor__` | 0.0 | 0.0 | 1.0 | `BenchmarkIxor` | | `__le__` | 0.0 | 0.0 | 1.0 | `BenchmarkLe` | | `__le__` (not less than or equals to) | 0.0 | 0.0 | 1.0 | `BenchmarkLeNot` | | `__len__` | 0.0 | 0.0 | 1.0 | `BenchmarkLen` | | `__lt__` | 0.0 | 0.0 | 1.0 | `BenchmarkLt` | | `__lt__` (not less than) | 0.0 | 0.0 | 1.0 | `BenchmarkLtNot` | | `__contains__` (unsuccessful search) | 0.0 | 0.0 | 1.0 | `BenchmarkNotContains` | | `__or__` | 0.0 | 0.0 | 1.0 | `BenchmarkOr` | | `pop` | 0.0 | 0.0 | 1.0 | `BenchmarkPop` | | `remove` | 0.0 | 0.0 | 1.0 | `BenchmarkRemove` | | `__sub__` | 0.0 | 0.0 | 1.0 | `BenchmarkSub` | | `symmetric_difference` | 0.0 | 0.0 | 1.0 | `BenchmarkSymmetricDifference` | | `symmetric_difference_update` | 0.0 | 0.0 | 1.0 | `BenchmarkSymmetricDifferenceUpdate` | | `union` | 0.0 | 0.0 | 1.0 | `BenchmarkUnion` | | `update` | 0.0 | 0.0 | 1.0 | `BenchmarkUpdate` | | `__xor__` | 0.0 | 0.0 | 1.0 | `BenchmarkXor` |","title":"Set"},{"location":"benchmark_results/py38/dict/","text":"timing | subject | `builtin` | `sqlitecollections` | ratio | class | | :------ | --------: | ------------------: | ----: | :---- | | `clear` | 0.00521 | 0.00801 | 1.53765 | `BenchmarkClear` | | `__contains__` | 0.00516 | 0.00497 | 0.9626 | `BenchmarkContains` | | `copy` | 0.00524 | 0.01062 | 2.02539 | `BenchmarkCopy` | | `__delitem__` | 0.0053 | 0.00826 | 1.55987 | `BenchmarkDelitem` | | `get` | 0.00496 | 0.00578 | 1.16664 | `BenchmarkGet` | | `get (unsuccessful search)` | 0.00524 | 0.00527 | 1.00631 | `BenchmarkGetDefault` | | `__getitem__` | 0.00533 | 0.00547 | 1.02779 | `BenchmarkGetitem` | | `__init__` | 0.00558 | 0.04062 | 7.28429 | `BenchmarkInit` | | `items` | 0.0067 | 0.01255 | 1.87358 | `BenchmarkItems` | | `__iter__` | 0.0058 | 0.00995 | 1.71435 | `BenchmarkIter` | | `keys` | 0.00597 | 0.00928 | 1.55504 | `BenchmarkKeys` | | `__len__` | 0.00558 | 0.00531 | 0.95139 | `BenchmarkLen` | | `__contains__` (unsuccessful search) | 0.00557 | 0.00603 | 1.08363 | `BenchmarkNotContains` | | `pop` | 0.00589 | 0.0088 | 1.49457 | `BenchmarkPop` | | `pop (unsuccessful search)` | 0.00588 | 0.00714 | 1.21385 | `BenchmarkPopDefault` | | `popitem` | 0.00546 | 0.00939 | 1.71911 | `BenchmarkPopitem` | | `reversed` | 0.00503 | 0.00863 | 1.71648 | `BenchmarkReversed` | | `setdefault` | 0.00642 | 0.00748 | 1.16399 | `BenchmarkSetdefault` | | `setdefault (unsuccessful search)` | 0.00528 | 0.00731 | 1.38608 | `BenchmarkSetdefaultAddItem` | | `__setitem__` (add new item) | 0.00592 | 0.00927 | 1.56684 | `BenchmarkSetitemAddNewItem` | | `__setitem__` (replace) | 0.00578 | 0.00877 | 1.51656 | `BenchmarkSetitemReplace` | | `update` | 0.00584 | 0.00903 | 1.54817 | `BenchmarkUpdate` | | `update` (many) | 0.00643 | 0.57739 | 89.73336 | `BenchmarkUpdateMany` | | `values` | 0.00534 | 0.009 | 1.68614 | `BenchmarkValues` | approximate memory usage | subject | `builtin` | `sqlitecollections` | ratio | class | | :------ | --------: | ------------------: | ----: | :---- | | `clear` | 0.00391 | 0.0 | 0.0 | `BenchmarkClear` | | `__contains__` | 0.0 | 0.0 | 1.0 | `BenchmarkContains` | | `copy` | 0.05469 | 0.0 | 0.0 | `BenchmarkCopy` | | `__delitem__` | 0.0 | 0.0 | 1.0 | `BenchmarkDelitem` | | `get` | 0.0 | 0.0 | 1.0 | `BenchmarkGet` | | `get (unsuccessful search)` | 0.0 | 0.0 | 1.0 | `BenchmarkGetDefault` | | `__getitem__` | 0.0 | 0.0 | 1.0 | `BenchmarkGetitem` | | `__init__` | 0.0 | 0.01172 | inf | `BenchmarkInit` | | `items` | 0.07812 | 0.21875 | 2.8 | `BenchmarkItems` | | `__iter__` | 0.0 | 0.08203 | inf | `BenchmarkIter` | | `keys` | 0.125 | 0.09375 | 0.75 | `BenchmarkKeys` | | `__len__` | 0.0 | 0.0 | 1.0 | `BenchmarkLen` | | `__contains__` (unsuccessful search) | 0.0 | 0.0 | 1.0 | `BenchmarkNotContains` | | `pop` | 0.0 | 0.0 | 1.0 | `BenchmarkPop` | | `pop (unsuccessful search)` | 0.0 | 0.0 | 1.0 | `BenchmarkPopDefault` | | `popitem` | 0.0 | 0.0 | 1.0 | `BenchmarkPopitem` | | `reversed` | 0.0 | 0.0 | 1.0 | `BenchmarkReversed` | | `setdefault` | 0.0 | 0.0 | 1.0 | `BenchmarkSetdefault` | | `setdefault (unsuccessful search)` | 0.0 | 0.0 | 1.0 | `BenchmarkSetdefaultAddItem` | | `__setitem__` (add new item) | 0.0 | 0.0 | 1.0 | `BenchmarkSetitemAddNewItem` | | `__setitem__` (replace) | 0.0 | 0.0 | 1.0 | `BenchmarkSetitemReplace` | | `update` | 0.0 | 0.0 | 1.0 | `BenchmarkUpdate` | | `update` (many) | 0.01953 | 0.0 | 0.0 | `BenchmarkUpdateMany` | | `values` | 0.02344 | 0.0 | 0.0 | `BenchmarkValues` |","title":"Dict"},{"location":"benchmark_results/py38/list/","text":"timing | subject | `builtin` | `sqlitecollections` | ratio | class | | :------ | --------: | ------------------: | ----: | :---- | | `__add__` | 0.00532 | 0.01157 | 2.17386 | `BenchmarkAdd` | | `append` | 0.00554 | 0.00812 | 1.46515 | `BenchmarkAppend` | | `clear` | 0.00529 | 0.0079 | 1.49325 | `BenchmarkClear` | | `__contains__` | 0.00523 | 0.00507 | 0.96904 | `BenchmarkContains` | | `copy` | 0.00562 | 0.01079 | 1.91862 | `BenchmarkCopy` | | `count` | 0.0056 | 0.00518 | 0.9248 | `BenchmarkCount` | | `__init__` | 0.00524 | 0.02125 | 4.05713 | `BenchmarkCreateWithInitialData` | | `__delitem__` | 0.0055 | 0.08368 | 15.22293 | `BenchmarkDelitem` | | `__delitem__` (slice) | 0.00537 | 0.15977 | 29.72966 | `BenchmarkDelitemSlice` | | `__delitem__` (slice with skip) | 0.00566 | 0.15852 | 27.9955 | `BenchmarkDelitemSliceSkip` | | `extend` | 0.00558 | 0.0083 | 1.48793 | `BenchmarkExtend` | | `__getitem__` | 0.00601 | 0.00551 | 0.91653 | `BenchmarkGetitem` | | `__getitem__` (slice) | 0.00561 | 0.09388 | 16.73879 | `BenchmarkGetitemSlice` | | `__getitem__` (slice with skip) | 0.00593 | 0.01391 | 2.34411 | `BenchmarkGetitemSliceSkip` | | `__iadd__` | 0.00551 | 0.00893 | 1.62158 | `BenchmarkIadd` | | `__imult__` | 0.00568 | 0.24043 | 42.29636 | `BenchmarkImult` | | `index` | 0.00582 | 0.00576 | 0.9899 | `BenchmarkIndex` | | `index` (unsuccessful search) | 0.0059 | 0.00579 | 0.98053 | `BenchmarkIndexUnsuccessfulSearch` | | `insert` | 0.00515 | 0.15749 | 30.58937 | `BenchmarkInsert` | | `__len__` | 0.00506 | 0.00523 | 1.03493 | `BenchmarkLen` | | `__mult__` | 0.00545 | 0.24435 | 44.79583 | `BenchmarkMult` | | `__contains__` (unsuccessful search) | 0.00576 | 0.00556 | 0.96531 | `BenchmarkNotContains` | | `pop` | 0.00616 | 0.08428 | 13.6742 | `BenchmarkPop` | | `remove` | 0.0052 | 0.12148 | 23.35951 | `BenchmarkRemove` | | `__setitem__` | 0.00538 | 0.00861 | 1.60015 | `BenchmarkSetitem` | | `__setitem__` (slice) | 0.00561 | 0.16115 | 28.70057 | `BenchmarkSetitemSlice` | | `__setitem__` (slice with skip) | 0.00479 | 0.0172 | 3.58792 | `BenchmarkSetitemSliceSkip` | | `sort` (balanced) | 0.00489 | 0.3458 | 70.6529 | `BenchmarkSortBalanced` | | `sort` (fastest) | 0.00562 | 0.33775 | 60.04772 | `BenchmarkSortFastest` | | `sort` (memory_saving) | 0.00501 | 3.46464 | 691.81022 | `BenchmarkSortMemorySaving` | approximate memory usage | subject | `builtin` | `sqlitecollections` | ratio | class | | :------ | --------: | ------------------: | ----: | :---- | | `__add__` | 0.0 | 0.0 | 1.0 | `BenchmarkAdd` | | `append` | 0.0 | 0.0 | 1.0 | `BenchmarkAppend` | | `clear` | 0.0 | 0.0 | 1.0 | `BenchmarkClear` | | `__contains__` | 0.0 | 0.0 | 1.0 | `BenchmarkContains` | | `copy` | 0.0 | 0.0 | 1.0 | `BenchmarkCopy` | | `count` | 0.0 | 0.0 | 1.0 | `BenchmarkCount` | | `__init__` | 0.0 | 0.0 | 1.0 | `BenchmarkCreateWithInitialData` | | `__delitem__` | 0.0 | 0.0 | 1.0 | `BenchmarkDelitem` | | `__delitem__` (slice) | 0.0 | 0.0 | 1.0 | `BenchmarkDelitemSlice` | | `__delitem__` (slice with skip) | 0.0 | 0.0 | 1.0 | `BenchmarkDelitemSliceSkip` | | `extend` | 0.0 | 0.0 | 1.0 | `BenchmarkExtend` | | `__getitem__` | 0.0 | 0.0 | 1.0 | `BenchmarkGetitem` | | `__getitem__` (slice) | 0.0 | 0.0 | 1.0 | `BenchmarkGetitemSlice` | | `__getitem__` (slice with skip) | 0.0 | 0.0 | 1.0 | `BenchmarkGetitemSliceSkip` | | `__iadd__` | 0.0 | 0.0 | 1.0 | `BenchmarkIadd` | | `__imult__` | 0.0 | 0.0 | 1.0 | `BenchmarkImult` | | `index` | 0.0 | 0.0 | 1.0 | `BenchmarkIndex` | | `index` (unsuccessful search) | 0.0 | 0.0 | 1.0 | `BenchmarkIndexUnsuccessfulSearch` | | `insert` | 0.0 | 0.0 | 1.0 | `BenchmarkInsert` | | `__len__` | 0.0 | 0.0 | 1.0 | `BenchmarkLen` | | `__mult__` | 0.0 | 0.0 | 1.0 | `BenchmarkMult` | | `__contains__` (unsuccessful search) | 0.0 | 0.0 | 1.0 | `BenchmarkNotContains` | | `pop` | 0.0 | 0.0 | 1.0 | `BenchmarkPop` | | `remove` | 0.0 | 0.0 | 1.0 | `BenchmarkRemove` | | `__setitem__` | 0.0 | 0.0 | 1.0 | `BenchmarkSetitem` | | `__setitem__` (slice) | 0.0 | 0.0 | 1.0 | `BenchmarkSetitemSlice` | | `__setitem__` (slice with skip) | 0.0 | 0.0 | 1.0 | `BenchmarkSetitemSliceSkip` | | `sort` (balanced) | 0.0 | 0.0 | 1.0 | `BenchmarkSortBalanced` | | `sort` (fastest) | 0.0 | 0.0 | 1.0 | `BenchmarkSortFastest` | | `sort` (memory_saving) | 0.0 | 0.0 | 1.0 | `BenchmarkSortMemorySaving` |","title":"List"},{"location":"benchmark_results/py38/set/","text":"timing | subject | `builtin` | `sqlitecollections` | ratio | class | | :------ | --------: | ------------------: | ----: | :---- | | `add (existing item)` | 0.00481 | 0.00575 | 1.1956 | `BenchmarkAddExistingItem` | | `add (new item)` | 0.00493 | 0.00738 | 1.4962 | `BenchmarkAddNewItem` | | `__and__` | 0.00505 | 0.01233 | 2.44327 | `BenchmarkAnd` | | `clear` | 0.00516 | 0.00703 | 1.3633 | `BenchmarkClear` | | `__contains__` | 0.00525 | 0.00523 | 0.99614 | `BenchmarkContains` | | `copy` | 0.00499 | 0.01003 | 2.01158 | `BenchmarkCopy` | | `difference` | 0.00523 | 0.01102 | 2.10711 | `BenchmarkDifference` | | `discard` | 0.00489 | 0.00741 | 1.51415 | `BenchmarkDiscard` | | `discard (no changes)` | 0.00533 | 0.00709 | 1.33152 | `BenchmarkDiscardNoChanges` | | `__ge__` | 0.00532 | 0.00526 | 0.98837 | `BenchmarkGe` | | `__ge__` (not greater than or equals to) | 0.00529 | 0.00535 | 1.0107 | `BenchmarkGeNot` | | `__gt__` | 0.00511 | 0.02169 | 4.24721 | `BenchmarkGt` | | `__gt__` (not greater than) | 0.00566 | 0.03191 | 5.63697 | `BenchmarkGtNot` | | `__iand__` | 0.00486 | 0.00931 | 1.91289 | `BenchmarkIand` | | `__init__` | 0.00507 | 0.0166 | 3.27176 | `BenchmarkInit` | | `intersection` | 0.00551 | 0.01413 | 2.56566 | `BenchmarkIntersection` | | `intersection_update` | 0.00576 | 0.00957 | 1.66302 | `BenchmarkIntersectionUpdate` | | `__ior__` | 0.00501 | 0.00942 | 1.88117 | `BenchmarkIor` | | `isdisjoint` | 0.00493 | 0.00575 | 1.16725 | `BenchmarkIsdisjoint` | | `isdisjoint` (not disjoint) | 0.00569 | 0.00543 | 0.95583 | `BenchmarkIsdisjointNot` | | `issubset` | 0.00545 | 0.03195 | 5.86675 | `BenchmarkIssubset` | | `issubset` (not subset) | 0.00557 | 0.01532 | 2.75057 | `BenchmarkIssubsetNot` | | `issuperset` | 0.00474 | 0.02471 | 5.21361 | `BenchmarkIssuperset` | | `issuperset` (not superset) | 0.00496 | 0.00604 | 1.21635 | `BenchmarkIssupersetNot` | | `__ixor__` | 0.00522 | 0.03955 | 7.57829 | `BenchmarkIxor` | | `__le__` | 0.00573 | 0.00589 | 1.02831 | `BenchmarkLe` | | `__le__` (not less than or equals to) | 0.00522 | 0.00505 | 0.96858 | `BenchmarkLeNot` | | `__len__` | 0.00506 | 0.00443 | 0.87424 | `BenchmarkLen` | | `__lt__` | 0.00491 | 0.00565 | 1.14939 | `BenchmarkLt` | | `__lt__` (not less than) | 0.00503 | 0.00474 | 0.94171 | `BenchmarkLtNot` | | `__contains__` (unsuccessful search) | 0.00523 | 0.00523 | 0.99925 | `BenchmarkNotContains` | | `__or__` | 0.00561 | 0.01306 | 2.32993 | `BenchmarkOr` | | `pop` | 0.00529 | 0.00778 | 1.47104 | `BenchmarkPop` | | `remove` | 0.00499 | 0.00756 | 1.51604 | `BenchmarkRemove` | | `__sub__` | 0.00539 | 0.01007 | 1.86903 | `BenchmarkSub` | | `symmetric_difference` | 0.00532 | 0.04303 | 8.09537 | `BenchmarkSymmetricDifference` | | `symmetric_difference_update` | 0.00511 | 0.03921 | 7.674 | `BenchmarkSymmetricDifferenceUpdate` | | `union` | 0.00506 | 0.01243 | 2.45926 | `BenchmarkUnion` | | `update` | 0.0049 | 0.00913 | 1.8645 | `BenchmarkUpdate` | | `__xor__` | 0.00529 | 0.04223 | 7.97707 | `BenchmarkXor` | approximate memory usage | subject | `builtin` | `sqlitecollections` | ratio | class | | :------ | --------: | ------------------: | ----: | :---- | | `add (existing item)` | 0.0 | 0.0 | 1.0 | `BenchmarkAddExistingItem` | | `add (new item)` | 0.0 | 0.0 | 1.0 | `BenchmarkAddNewItem` | | `__and__` | 0.0 | 0.0 | 1.0 | `BenchmarkAnd` | | `clear` | 0.0 | 0.0 | 1.0 | `BenchmarkClear` | | `__contains__` | 0.0 | 0.0 | 1.0 | `BenchmarkContains` | | `copy` | 0.0 | 0.0 | 1.0 | `BenchmarkCopy` | | `difference` | 0.0 | 0.0 | 1.0 | `BenchmarkDifference` | | `discard` | 0.0 | 0.0 | 1.0 | `BenchmarkDiscard` | | `discard (no changes)` | 0.0 | 0.0 | 1.0 | `BenchmarkDiscardNoChanges` | | `__ge__` | 0.0 | 0.0 | 1.0 | `BenchmarkGe` | | `__ge__` (not greater than or equals to) | 0.0 | 0.0 | 1.0 | `BenchmarkGeNot` | | `__gt__` | 0.0 | 0.0 | 1.0 | `BenchmarkGt` | | `__gt__` (not greater than) | 0.0 | 0.0 | 1.0 | `BenchmarkGtNot` | | `__iand__` | 0.0 | 0.0 | 1.0 | `BenchmarkIand` | | `__init__` | 0.0 | 0.05469 | inf | `BenchmarkInit` | | `intersection` | 0.0 | 0.0 | 1.0 | `BenchmarkIntersection` | | `intersection_update` | 0.0 | 0.0 | 1.0 | `BenchmarkIntersectionUpdate` | | `__ior__` | 0.0 | 0.0 | 1.0 | `BenchmarkIor` | | `isdisjoint` | 0.0 | 0.0 | 1.0 | `BenchmarkIsdisjoint` | | `isdisjoint` (not disjoint) | 0.0 | 0.0 | 1.0 | `BenchmarkIsdisjointNot` | | `issubset` | 0.0 | 0.0 | 1.0 | `BenchmarkIssubset` | | `issubset` (not subset) | 0.0 | 0.0 | 1.0 | `BenchmarkIssubsetNot` | | `issuperset` | 0.0 | 0.0 | 1.0 | `BenchmarkIssuperset` | | `issuperset` (not superset) | 0.0 | 0.0 | 1.0 | `BenchmarkIssupersetNot` | | `__ixor__` | 0.0 | 0.0 | 1.0 | `BenchmarkIxor` | | `__le__` | 0.0 | 0.0 | 1.0 | `BenchmarkLe` | | `__le__` (not less than or equals to) | 0.0 | 0.0 | 1.0 | `BenchmarkLeNot` | | `__len__` | 0.0 | 0.0 | 1.0 | `BenchmarkLen` | | `__lt__` | 0.0 | 0.0 | 1.0 | `BenchmarkLt` | | `__lt__` (not less than) | 0.0 | 0.0 | 1.0 | `BenchmarkLtNot` | | `__contains__` (unsuccessful search) | 0.0 | 0.0 | 1.0 | `BenchmarkNotContains` | | `__or__` | 0.0 | 0.0 | 1.0 | `BenchmarkOr` | | `pop` | 0.0 | 0.0 | 1.0 | `BenchmarkPop` | | `remove` | 0.0 | 0.0 | 1.0 | `BenchmarkRemove` | | `__sub__` | 0.0 | 0.0 | 1.0 | `BenchmarkSub` | | `symmetric_difference` | 0.0 | 0.0 | 1.0 | `BenchmarkSymmetricDifference` | | `symmetric_difference_update` | 0.0 | 0.0 | 1.0 | `BenchmarkSymmetricDifferenceUpdate` | | `union` | 0.0 | 0.0 | 1.0 | `BenchmarkUnion` | | `update` | 0.0 | 0.0 | 1.0 | `BenchmarkUpdate` | | `__xor__` | 0.0 | 0.0 | 1.0 | `BenchmarkXor` |","title":"Set"},{"location":"benchmark_results/py39/dict/","text":"timing | subject | `builtin` | `sqlitecollections` | ratio | class | | :------ | --------: | ------------------: | ----: | :---- | | `clear` | 0.00404 | 0.00665 | 1.64693 | `BenchmarkClear` | | `__contains__` | 0.00397 | 0.00412 | 1.03597 | `BenchmarkContains` | | `copy` | 0.00393 | 0.00883 | 2.24387 | `BenchmarkCopy` | | `__delitem__` | 0.00391 | 0.00642 | 1.64177 | `BenchmarkDelitem` | | `get` | 0.00381 | 0.00422 | 1.10963 | `BenchmarkGet` | | `get (unsuccessful search)` | 0.00408 | 0.00416 | 1.02128 | `BenchmarkGetDefault` | | `__getitem__` | 0.00408 | 0.00407 | 0.99702 | `BenchmarkGetitem` | | `__init__` | 0.00408 | 0.03845 | 9.41793 | `BenchmarkInit` | | `__ior__` | 0.00415 | 0.00698 | 1.68105 | `BenchmarkIor` | | `__ior__` (many) | 0.00525 | 0.55852 | 106.4524 | `BenchmarkIorMany` | | `items` | 0.00435 | 0.01049 | 2.4117 | `BenchmarkItems` | | `__iter__` | 0.00378 | 0.0077 | 2.03845 | `BenchmarkIter` | | `keys` | 0.00399 | 0.00782 | 1.96085 | `BenchmarkKeys` | | `__len__` | 0.00381 | 0.00403 | 1.05614 | `BenchmarkLen` | | `__contains__` (unsuccessful search) | 0.00418 | 0.00417 | 0.99836 | `BenchmarkNotContains` | | `__or__` | 0.00429 | 0.01132 | 2.64027 | `BenchmarkOr` | | `__or__` (many) | 0.00554 | 0.56439 | 101.85498 | `BenchmarkOrMany` | | `pop` | 0.00446 | 0.00754 | 1.68908 | `BenchmarkPop` | | `pop (unsuccessful search)` | 0.00446 | 0.00599 | 1.34425 | `BenchmarkPopDefault` | | `popitem` | 0.00444 | 0.00777 | 1.75082 | `BenchmarkPopitem` | | `reversed` | 0.00395 | 0.00762 | 1.9307 | `BenchmarkReversed` | | `setdefault` | 0.00439 | 0.00604 | 1.37404 | `BenchmarkSetdefault` | | `setdefault (unsuccessful search)` | 0.00425 | 0.00623 | 1.46848 | `BenchmarkSetdefaultAddItem` | | `__setitem__` (add new item) | 0.00426 | 0.00723 | 1.69723 | `BenchmarkSetitemAddNewItem` | | `__setitem__` (replace) | 0.00431 | 0.00729 | 1.68979 | `BenchmarkSetitemReplace` | | `update` | 0.00444 | 0.00723 | 1.62792 | `BenchmarkUpdate` | | `update` (many) | 0.00535 | 0.55885 | 104.5231 | `BenchmarkUpdateMany` | | `values` | 0.00436 | 0.00789 | 1.81157 | `BenchmarkValues` | approximate memory usage | subject | `builtin` | `sqlitecollections` | ratio | class | | :------ | --------: | ------------------: | ----: | :---- | | `clear` | 0.0 | 0.0 | 1.0 | `BenchmarkClear` | | `__contains__` | 0.0 | 0.0 | 1.0 | `BenchmarkContains` | | `copy` | 0.0 | 0.0 | 1.0 | `BenchmarkCopy` | | `__delitem__` | 0.0 | 0.0 | 1.0 | `BenchmarkDelitem` | | `get` | 0.0 | 0.0 | 1.0 | `BenchmarkGet` | | `get (unsuccessful search)` | 0.0 | 0.0 | 1.0 | `BenchmarkGetDefault` | | `__getitem__` | 0.0 | 0.0 | 1.0 | `BenchmarkGetitem` | | `__init__` | 0.0 | 0.0 | 1.0 | `BenchmarkInit` | | `__ior__` | 0.0 | 0.0 | 1.0 | `BenchmarkIor` | | `__ior__` (many) | 0.17969 | 0.0 | 0.0 | `BenchmarkIorMany` | | `items` | 0.0 | 0.17188 | inf | `BenchmarkItems` | | `__iter__` | 0.0 | 0.0 | 1.0 | `BenchmarkIter` | | `keys` | 0.0 | 0.0 | 1.0 | `BenchmarkKeys` | | `__len__` | 0.0 | 0.0 | 1.0 | `BenchmarkLen` | | `__contains__` (unsuccessful search) | 0.0 | 0.0 | 1.0 | `BenchmarkNotContains` | | `__or__` | 0.0 | 0.0 | 1.0 | `BenchmarkOr` | | `__or__` (many) | 0.0 | 0.0 | 1.0 | `BenchmarkOrMany` | | `pop` | 0.0 | 0.0 | 1.0 | `BenchmarkPop` | | `pop (unsuccessful search)` | 0.0 | 0.0 | 1.0 | `BenchmarkPopDefault` | | `popitem` | 0.0 | 0.0 | 1.0 | `BenchmarkPopitem` | | `reversed` | 0.0 | 0.0 | 1.0 | `BenchmarkReversed` | | `setdefault` | 0.0 | 0.0 | 1.0 | `BenchmarkSetdefault` | | `setdefault (unsuccessful search)` | 0.0 | 0.0 | 1.0 | `BenchmarkSetdefaultAddItem` | | `__setitem__` (add new item) | 0.0 | 0.0 | 1.0 | `BenchmarkSetitemAddNewItem` | | `__setitem__` (replace) | 0.0 | 0.0 | 1.0 | `BenchmarkSetitemReplace` | | `update` | 0.0 | 0.0 | 1.0 | `BenchmarkUpdate` | | `update` (many) | 0.0 | 0.0 | 1.0 | `BenchmarkUpdateMany` | | `values` | 0.0 | 0.0 | 1.0 | `BenchmarkValues` |","title":"Dict"},{"location":"benchmark_results/py39/list/","text":"timing | subject | `builtin` | `sqlitecollections` | ratio | class | | :------ | --------: | ------------------: | ----: | :---- | | `__add__` | 0.00423 | 0.00967 | 2.28968 | `BenchmarkAdd` | | `append` | 0.00407 | 0.00658 | 1.61538 | `BenchmarkAppend` | | `clear` | 0.00408 | 0.00656 | 1.60742 | `BenchmarkClear` | | `__contains__` | 0.00399 | 0.00412 | 1.03278 | `BenchmarkContains` | | `copy` | 0.00404 | 0.00911 | 2.25452 | `BenchmarkCopy` | | `count` | 0.00396 | 0.00411 | 1.03603 | `BenchmarkCount` | | `__init__` | 0.00391 | 0.01937 | 4.95083 | `BenchmarkCreateWithInitialData` | | `__delitem__` | 0.00406 | 0.08031 | 19.78619 | `BenchmarkDelitem` | | `__delitem__` (slice) | 0.00381 | 0.15115 | 39.62802 | `BenchmarkDelitemSlice` | | `__delitem__` (slice with skip) | 0.00381 | 0.15214 | 39.91421 | `BenchmarkDelitemSliceSkip` | | `extend` | 0.00409 | 0.00684 | 1.67145 | `BenchmarkExtend` | | `__getitem__` | 0.00404 | 0.00417 | 1.02984 | `BenchmarkGetitem` | | `__getitem__` (slice) | 0.00385 | 0.08573 | 22.28991 | `BenchmarkGetitemSlice` | | `__getitem__` (slice with skip) | 0.00389 | 0.0117 | 3.00993 | `BenchmarkGetitemSliceSkip` | | `__iadd__` | 0.00389 | 0.00667 | 1.71539 | `BenchmarkIadd` | | `__imult__` | 0.00414 | 0.22942 | 55.35269 | `BenchmarkImult` | | `index` | 0.00387 | 0.00414 | 1.07057 | `BenchmarkIndex` | | `index` (unsuccessful search) | 0.0039 | 0.00418 | 1.07193 | `BenchmarkIndexUnsuccessfulSearch` | | `insert` | 0.00402 | 0.14891 | 37.01124 | `BenchmarkInsert` | | `__len__` | 0.00397 | 0.00423 | 1.06645 | `BenchmarkLen` | | `__mult__` | 0.00406 | 0.23117 | 56.91445 | `BenchmarkMult` | | `__contains__` (unsuccessful search) | 0.00403 | 0.00405 | 1.00496 | `BenchmarkNotContains` | | `pop` | 0.00418 | 0.07908 | 18.91765 | `BenchmarkPop` | | `remove` | 0.00401 | 0.11244 | 28.046 | `BenchmarkRemove` | | `__setitem__` | 0.00404 | 0.00672 | 1.66376 | `BenchmarkSetitem` | | `__setitem__` (slice) | 0.00402 | 0.15336 | 38.18834 | `BenchmarkSetitemSlice` | | `__setitem__` (slice with skip) | 0.00403 | 0.01528 | 3.78836 | `BenchmarkSetitemSliceSkip` | | `sort` (balanced) | 0.0041 | 0.33064 | 80.58365 | `BenchmarkSortBalanced` | | `sort` (fastest) | 0.00381 | 0.33542 | 87.93598 | `BenchmarkSortFastest` | | `sort` (memory_saving) | 0.00389 | 3.81063 | 978.5303 | `BenchmarkSortMemorySaving` | approximate memory usage | subject | `builtin` | `sqlitecollections` | ratio | class | | :------ | --------: | ------------------: | ----: | :---- | | `__add__` | 0.0 | 0.0 | 1.0 | `BenchmarkAdd` | | `append` | 0.0 | 0.0 | 1.0 | `BenchmarkAppend` | | `clear` | 0.0 | 0.0 | 1.0 | `BenchmarkClear` | | `__contains__` | 0.0 | 0.0 | 1.0 | `BenchmarkContains` | | `copy` | 0.0 | 0.0 | 1.0 | `BenchmarkCopy` | | `count` | 0.0 | 0.0 | 1.0 | `BenchmarkCount` | | `__init__` | 0.0 | 0.0 | 1.0 | `BenchmarkCreateWithInitialData` | | `__delitem__` | 0.0 | 0.00391 | inf | `BenchmarkDelitem` | | `__delitem__` (slice) | 0.0 | 0.0 | 1.0 | `BenchmarkDelitemSlice` | | `__delitem__` (slice with skip) | 0.0 | 0.0 | 1.0 | `BenchmarkDelitemSliceSkip` | | `extend` | 0.0 | 0.0 | 1.0 | `BenchmarkExtend` | | `__getitem__` | 0.0 | 0.0 | 1.0 | `BenchmarkGetitem` | | `__getitem__` (slice) | 0.0 | 0.00391 | inf | `BenchmarkGetitemSlice` | | `__getitem__` (slice with skip) | 0.0 | 0.0 | 1.0 | `BenchmarkGetitemSliceSkip` | | `__iadd__` | 0.0 | 0.0 | 1.0 | `BenchmarkIadd` | | `__imult__` | 0.0 | 0.0 | 1.0 | `BenchmarkImult` | | `index` | 0.0 | 0.0 | 1.0 | `BenchmarkIndex` | | `index` (unsuccessful search) | 0.0 | 0.0 | 1.0 | `BenchmarkIndexUnsuccessfulSearch` | | `insert` | 0.0 | 0.0 | 1.0 | `BenchmarkInsert` | | `__len__` | 0.0 | 0.0 | 1.0 | `BenchmarkLen` | | `__mult__` | 0.0 | 0.0 | 1.0 | `BenchmarkMult` | | `__contains__` (unsuccessful search) | 0.0 | 0.0 | 1.0 | `BenchmarkNotContains` | | `pop` | 0.0 | 0.00391 | inf | `BenchmarkPop` | | `remove` | 0.0 | 0.0 | 1.0 | `BenchmarkRemove` | | `__setitem__` | 0.0 | 0.0 | 1.0 | `BenchmarkSetitem` | | `__setitem__` (slice) | 0.0 | 0.00391 | inf | `BenchmarkSetitemSlice` | | `__setitem__` (slice with skip) | 0.00391 | 0.0 | 0.0 | `BenchmarkSetitemSliceSkip` | | `sort` (balanced) | 0.0 | 0.14844 | inf | `BenchmarkSortBalanced` | | `sort` (fastest) | 0.0 | 0.12109 | inf | `BenchmarkSortFastest` | | `sort` (memory_saving) | 0.0 | 0.0 | 1.0 | `BenchmarkSortMemorySaving` |","title":"List"},{"location":"benchmark_results/py39/set/","text":"timing | subject | `builtin` | `sqlitecollections` | ratio | class | | :------ | --------: | ------------------: | ----: | :---- | | `add (existing item)` | 0.00385 | 0.00523 | 1.35907 | `BenchmarkAddExistingItem` | | `add (new item)` | 0.00398 | 0.00619 | 1.55276 | `BenchmarkAddNewItem` | | `__and__` | 0.00398 | 0.01021 | 2.56567 | `BenchmarkAnd` | | `clear` | 0.00398 | 0.00626 | 1.57144 | `BenchmarkClear` | | `__contains__` | 0.00383 | 0.00395 | 1.03163 | `BenchmarkContains` | | `copy` | 0.00388 | 0.0083 | 2.13694 | `BenchmarkCopy` | | `difference` | 0.00407 | 0.00864 | 2.1211 | `BenchmarkDifference` | | `discard` | 0.00409 | 0.0063 | 1.5423 | `BenchmarkDiscard` | | `discard (no changes)` | 0.00409 | 0.00559 | 1.36741 | `BenchmarkDiscardNoChanges` | | `__ge__` | 0.00402 | 0.00407 | 1.01408 | `BenchmarkGe` | | `__ge__` (not greater than or equals to) | 0.00407 | 0.00541 | 1.33047 | `BenchmarkGeNot` | | `__gt__` | 0.00399 | 0.00686 | 1.7193 | `BenchmarkGt` | | `__gt__` (not greater than) | 0.00413 | 0.03044 | 7.37432 | `BenchmarkGtNot` | | `__iand__` | 0.00393 | 0.0082 | 2.08362 | `BenchmarkIand` | | `__init__` | 0.00391 | 0.01693 | 4.33146 | `BenchmarkInit` | | `intersection` | 0.0039 | 0.01157 | 2.96776 | `BenchmarkIntersection` | | `intersection_update` | 0.00397 | 0.00807 | 2.03442 | `BenchmarkIntersectionUpdate` | | `__ior__` | 0.00401 | 0.00845 | 2.1086 | `BenchmarkIor` | | `isdisjoint` | 0.00399 | 0.00414 | 1.03775 | `BenchmarkIsdisjoint` | | `isdisjoint` (not disjoint) | 0.00393 | 0.00396 | 1.00683 | `BenchmarkIsdisjointNot` | | `issubset` | 0.00385 | 0.24371 | 63.23318 | `BenchmarkIssubset` | | `issubset` (not subset) | 0.00373 | 0.01037 | 2.78076 | `BenchmarkIssubsetNot` | | `issuperset` | 0.00363 | 0.02318 | 6.38303 | `BenchmarkIssuperset` | | `issuperset` (not superset) | 0.00343 | 0.00489 | 1.4268 | `BenchmarkIssupersetNot` | | `__ixor__` | 0.00383 | 0.03861 | 10.07799 | `BenchmarkIxor` | | `__le__` | 0.00382 | 0.00468 | 1.22421 | `BenchmarkLe` | | `__le__` (not less than or equals to) | 0.00389 | 0.00391 | 1.00585 | `BenchmarkLeNot` | | `__len__` | 0.00391 | 0.00398 | 1.01796 | `BenchmarkLen` | | `__lt__` | 0.00392 | 0.00467 | 1.19204 | `BenchmarkLt` | | `__lt__` (not less than) | 0.00385 | 0.00385 | 1.00091 | `BenchmarkLtNot` | | `__contains__` (unsuccessful search) | 0.00362 | 0.00362 | 0.99803 | `BenchmarkNotContains` | | `__or__` | 0.00357 | 0.00989 | 2.77409 | `BenchmarkOr` | | `pop` | 0.00369 | 0.00615 | 1.66773 | `BenchmarkPop` | | `remove` | 0.0038 | 0.00622 | 1.63805 | `BenchmarkRemove` | | `__sub__` | 0.0039 | 0.00784 | 2.01217 | `BenchmarkSub` | | `symmetric_difference` | 0.00389 | 0.04154 | 10.6854 | `BenchmarkSymmetricDifference` | | `symmetric_difference_update` | 0.00406 | 0.03925 | 9.67214 | `BenchmarkSymmetricDifferenceUpdate` | | `union` | 0.00391 | 0.0105 | 2.68421 | `BenchmarkUnion` | | `update` | 0.00378 | 0.00761 | 2.01376 | `BenchmarkUpdate` | | `__xor__` | 0.00374 | 0.04125 | 11.03852 | `BenchmarkXor` | approximate memory usage | subject | `builtin` | `sqlitecollections` | ratio | class | | :------ | --------: | ------------------: | ----: | :---- | | `add (existing item)` | 0.0 | 0.0 | 1.0 | `BenchmarkAddExistingItem` | | `add (new item)` | 0.0 | 0.0 | 1.0 | `BenchmarkAddNewItem` | | `__and__` | 0.0 | 0.0 | 1.0 | `BenchmarkAnd` | | `clear` | 0.0 | 0.0 | 1.0 | `BenchmarkClear` | | `__contains__` | 0.0 | 0.0 | 1.0 | `BenchmarkContains` | | `copy` | 0.0 | 0.0 | 1.0 | `BenchmarkCopy` | | `difference` | 0.0 | 0.0 | 1.0 | `BenchmarkDifference` | | `discard` | 0.0 | 0.0 | 1.0 | `BenchmarkDiscard` | | `discard (no changes)` | 0.0 | 0.0 | 1.0 | `BenchmarkDiscardNoChanges` | | `__ge__` | 0.0 | 0.0 | 1.0 | `BenchmarkGe` | | `__ge__` (not greater than or equals to) | 0.0 | 0.0 | 1.0 | `BenchmarkGeNot` | | `__gt__` | 0.0 | 0.0 | 1.0 | `BenchmarkGt` | | `__gt__` (not greater than) | 0.0 | 0.0 | 1.0 | `BenchmarkGtNot` | | `__iand__` | 0.0 | 0.0 | 1.0 | `BenchmarkIand` | | `__init__` | 0.0 | 0.0 | 1.0 | `BenchmarkInit` | | `intersection` | 0.0 | 0.0 | 1.0 | `BenchmarkIntersection` | | `intersection_update` | 0.0 | 0.0 | 1.0 | `BenchmarkIntersectionUpdate` | | `__ior__` | 0.0 | 0.0 | 1.0 | `BenchmarkIor` | | `isdisjoint` | 0.0 | 0.0 | 1.0 | `BenchmarkIsdisjoint` | | `isdisjoint` (not disjoint) | 0.0 | 0.0 | 1.0 | `BenchmarkIsdisjointNot` | | `issubset` | 0.0 | 0.0 | 1.0 | `BenchmarkIssubset` | | `issubset` (not subset) | 0.0 | 0.0 | 1.0 | `BenchmarkIssubsetNot` | | `issuperset` | 0.0 | 0.0 | 1.0 | `BenchmarkIssuperset` | | `issuperset` (not superset) | 0.0 | 0.0 | 1.0 | `BenchmarkIssupersetNot` | | `__ixor__` | 0.0 | 0.0 | 1.0 | `BenchmarkIxor` | | `__le__` | 0.0 | 0.0 | 1.0 | `BenchmarkLe` | | `__le__` (not less than or equals to) | 0.0 | 0.0 | 1.0 | `BenchmarkLeNot` | | `__len__` | 0.0 | 0.0 | 1.0 | `BenchmarkLen` | | `__lt__` | 0.0 | 0.0 | 1.0 | `BenchmarkLt` | | `__lt__` (not less than) | 0.0 | 0.0 | 1.0 | `BenchmarkLtNot` | | `__contains__` (unsuccessful search) | 0.0 | 0.0 | 1.0 | `BenchmarkNotContains` | | `__or__` | 0.0 | 0.0 | 1.0 | `BenchmarkOr` | | `pop` | 0.0 | 0.0 | 1.0 | `BenchmarkPop` | | `remove` | 0.0 | 0.0 | 1.0 | `BenchmarkRemove` | | `__sub__` | 0.0 | 0.0 | 1.0 | `BenchmarkSub` | | `symmetric_difference` | 0.0 | 0.0 | 1.0 | `BenchmarkSymmetricDifference` | | `symmetric_difference_update` | 0.0 | 0.0 | 1.0 | `BenchmarkSymmetricDifferenceUpdate` | | `union` | 0.0 | 0.0 | 1.0 | `BenchmarkUnion` | | `update` | 0.0 | 0.0 | 1.0 | `BenchmarkUpdate` | | `__xor__` | 0.0 | 0.0 | 1.0 | `BenchmarkXor` |","title":"Set"},{"location":"usage/common/","text":"Common features PicklingStrategy PicklingStrategy specifies the way how pickle serializes the sqlitecollection containers. Currently following two methods are supported: PicklingStrategy.whole_table The resulting pickle contains all the records in the collection. It dumps all the records into temporary sqlite3 database file when it is loaded. PicklingStrategy.only_file_name The resulting pickle contains only the file path of the sqlite3 database file. The file path is a relative path returned by os.path.relpath , so it must be loaded with the same structure. MetadataItem MetadataItem(...) Constructor for MetadataItem. Instances of this class are not supposed to be created directly by the user. Arguments: table_name : str ; table name. container_type : str ; container type name. schema_version : str ; schema version. table_name Read-only property for the table name. Return value: str : The table name. container_type Read-only property for the container type. Return value: str : The container type. schema_version Read-only property for the schema version Return value: str : The schema version. MetadataReader MetadataReader(...) Constructor for MetadataReader class which can iterate over all records in the given connection. Arguments: connection : str or sqlite3.Connection ; Connection to sqlite3 to get metadata. If connection is a str , it will be used as the sqlite3 database file name. You can pass a sqlite3.Connection directly. len(metadata_reader) Return the number of records in the metadata table read by metadata_reader . It coincides the number of collections in the sqlite3 database connected by metadata_reader._connection . Return value: int : The number of items in the metadata table. obj in metadata_reader Return whether if obj is in metadata_reader Arguments: obj : object ; object to be checked the membership. Return value: bool : Boolean value whether if metadata_item is in the metadata table. iter(metadata_reader) Return an iterator over the MetadataItem 's in metadata_reader It coincides the records of metadata table in the sqlite3 database connected by metadata_reader._connection . Return value: Iterator[MetadataItem] : an iterator over the MetadataItem 's in metadata_reader","title":"common features"},{"location":"usage/common/#common-features","text":"","title":"Common features"},{"location":"usage/common/#picklingstrategy","text":"PicklingStrategy specifies the way how pickle serializes the sqlitecollection containers. Currently following two methods are supported:","title":"PicklingStrategy"},{"location":"usage/common/#picklingstrategywhole_table","text":"The resulting pickle contains all the records in the collection. It dumps all the records into temporary sqlite3 database file when it is loaded.","title":"PicklingStrategy.whole_table"},{"location":"usage/common/#picklingstrategyonly_file_name","text":"The resulting pickle contains only the file path of the sqlite3 database file. The file path is a relative path returned by os.path.relpath , so it must be loaded with the same structure.","title":"PicklingStrategy.only_file_name"},{"location":"usage/common/#metadataitem","text":"","title":"MetadataItem"},{"location":"usage/common/#metadataitem_1","text":"Constructor for MetadataItem. Instances of this class are not supposed to be created directly by the user.","title":"MetadataItem(...)"},{"location":"usage/common/#arguments","text":"table_name : str ; table name. container_type : str ; container type name. schema_version : str ; schema version.","title":"Arguments:"},{"location":"usage/common/#table_name","text":"Read-only property for the table name.","title":"table_name"},{"location":"usage/common/#return-value","text":"str : The table name.","title":"Return value:"},{"location":"usage/common/#container_type","text":"Read-only property for the container type.","title":"container_type"},{"location":"usage/common/#return-value_1","text":"str : The container type.","title":"Return value:"},{"location":"usage/common/#schema_version","text":"Read-only property for the schema version","title":"schema_version"},{"location":"usage/common/#return-value_2","text":"str : The schema version.","title":"Return value:"},{"location":"usage/common/#metadatareader","text":"","title":"MetadataReader"},{"location":"usage/common/#metadatareader_1","text":"Constructor for MetadataReader class which can iterate over all records in the given connection.","title":"MetadataReader(...)"},{"location":"usage/common/#arguments_1","text":"connection : str or sqlite3.Connection ; Connection to sqlite3 to get metadata. If connection is a str , it will be used as the sqlite3 database file name. You can pass a sqlite3.Connection directly.","title":"Arguments:"},{"location":"usage/common/#lenmetadata_reader","text":"Return the number of records in the metadata table read by metadata_reader . It coincides the number of collections in the sqlite3 database connected by metadata_reader._connection .","title":"len(metadata_reader)"},{"location":"usage/common/#return-value_3","text":"int : The number of items in the metadata table.","title":"Return value:"},{"location":"usage/common/#obj-in-metadata_reader","text":"Return whether if obj is in metadata_reader","title":"obj in metadata_reader"},{"location":"usage/common/#arguments_2","text":"obj : object ; object to be checked the membership.","title":"Arguments:"},{"location":"usage/common/#return-value_4","text":"bool : Boolean value whether if metadata_item is in the metadata table.","title":"Return value:"},{"location":"usage/common/#itermetadata_reader","text":"Return an iterator over the MetadataItem 's in metadata_reader It coincides the records of metadata table in the sqlite3 database connected by metadata_reader._connection .","title":"iter(metadata_reader)"},{"location":"usage/common/#return-value_5","text":"Iterator[MetadataItem] : an iterator over the MetadataItem 's in metadata_reader","title":"Return value:"},{"location":"usage/dict/","text":"Dict Dict is a container compatible with the built-in dict , which serializes keys and values and stores them in a sqlite3 database. It preserves insertion order for all supported python versions. Dict[KT, VT](...) Constructor. Type Parameters: KT : key type VT : value type Arguments: data : Mapping[KT, VT] or Iterable[Tuple[KT, VT]] , optional, positional-only argument, defualt= None ; Initial data. If None or no argument is given, persistent data is used as is if available, otherwise persistent data in the corresponding table is cleared and given data is stored instead. connection : str or sqlite3.Connection , optional, default= None ; If None , temporary file is automatically created. If connection is a str , it will be used as the sqlite3 database file name. You can pass a sqlite3.Connection directly. table_name : str , optional, default= None ; Table name of this container. If None , an auto-generated unique name will be used. Available characters are letters, numbers, and underscores ( _ ). key_serializer : Callable[[KT], bytes] , optional, default= None ; Function to serialize key. If None , pickle.dumps is used. key_deserializer : Callable[[bytes], KT] , optional, default= None ; Function to deserialize key. If None , pickle.loads is used. value_serializer : Callable[[VT], bytes] , optional, default= None ; Function to serialize value. If None , key_serializer is used. value_deserializer : Callable[[bytes], VT] , optional, default= None ; Function to deserialize value. If None , key_deserializer is used. persist : bool , optional, default= True ; If True , table won't be deleted even when the object is deleted. If False , the table is deleted when this object is deleted. pickling_strategy : PicklingStrategy , optional, default= PicklingStrategy.whole_table ; Flag to control pickling method. See PicklingStrategy for more details. len(d) Return the number of items in d: Dict[KT, VT] Return value: int : The number of items in d d[key] Get item of d with key key . Raises a KeyError if key is not in the map. Arguments: key : KT ; Key to retrieve corresponding value Return value: VT : Item of d with key key d[key] = value Set d[key] to value . Arguments: key : KT ; Key to be set value : VT ; Value to be set Return value: None del d[key] Delete d[key] . Arguments: key : KT ; Key to be deleted Return value: None key in d Return whether if key is in d Arguments: key : KT ; Key to be checked Return value: bool : True if key is in d and False otherwise. key not in d Return whether if key is not in d Arguments: key : KT ; Key to be checked Return value: bool : True if key is not in d and False otherwise. iter(d) Return an iterator over the keys of d Return value: Iterator[KT] : an iterator over the keys of d clear() Remove all items from the dictionary Return value: None copy() Return a copy of the dictionary. The actual behavior is to create a table with a unique table name and copy the keys and the values to the new table. Therefore, unlike the built-in dict copy, the behavior is similar to deep copy. Be aware that the copied dictionary is volatile. Return value: Dict[KT, VT] : A volatile copy of the dictionary. get(key[, default]) Return the value for key if key is in the dictionary, else default . If default is not given, it defaults to None , so that this method never raises a KeyError . Arguments: key : KT ; Key to retrieve corresponding value if exists. default : VT , optional, default= None ; Default value in case that key is not in the dictionary Return value: VT : Item of the dictionary with key key if key is in the dictionary, default otherwise. items() Return a new view of the dictionary\u2019s items (key-value pairs). Return value: ItemsView : View object of the dictionary's items keys() Return a new view of the dictionary's keys. Return value: KeysView[KT] : View object of the dictionary's keys. pop(key[, default]) If key is in the dictionary, remove it and return its value, else return default . If default is not given and key is not in the dictionary, a KeyError is raised. Arguments: key : KT ; Key to retrieve corresponding value if exists. default : VT , optional, default= None ; Default value in case that key is not in the dictionary Return value: VT : Item of the dictionary with key key if key is in the dictionary, default otherwise. popitem() Remove and return a key-value pair from the dictionary. Pairs are returned in LIFO order. If the dictionary is empty, raises a KeyError . Return value: Tuple[KT, VT] : Key-value pair that were last inserted into the dictionary reversed(d) Return a reverse iterator over the keys of the dictionary. (provided only python version 3.8 and above) Return value: Iterator[KT] : Reverse iterator over the keys of the dictionary setdefault(key[, default]) If key is in the dictionary, return its value. If not, insert key with a value of default and return default . Arguments: key : KT ; Key to retrieve or set the value default : VT , optional, default= None ; Value to be set if key is not in the dictionary Return value: VT : Item of the dictionary with key key if key is in the dictionary, default otherwise. update([other, **kwargs]) Update the dictionary with the key-value pairs from other , overwriting existing keys. Arguments: other : Mapping[KT, VT] or Iterable[Tuple[KT, VT]] , optional; Key-value pairs to be added kwargs : VT , optional; values to be added Return value: None values() Return a new view of the dictionary's values. Return value: ValuesView : View object of the dictionary's values d | other Create a new dictionary with the merged keys and values of d and other , which must both be dictionaries. The values of other take priority when d and other share keys. The return value is volatile by default. (provided only python version 3.9 and above) Arguments: other : Mapping[KT, VT] or Iterable[Tuple[KT, VT]] ; Key-value pairs to be merged Return value: Dict[KT, VT] : A new volatile dictionary object. d |= other Update the dictionary d with keys and values from other . (provided only python version 3.9 and above) Arguments: other : Mapping[KT, VT] or Iterable[Tuple[KT, VT]] ; Key-value pairs to be merged Return value: Dict[KT, VT] : The dictionary object.","title":"Dict"},{"location":"usage/dict/#dict","text":"Dict is a container compatible with the built-in dict , which serializes keys and values and stores them in a sqlite3 database. It preserves insertion order for all supported python versions.","title":"Dict"},{"location":"usage/dict/#dictkt-vt","text":"Constructor.","title":"Dict[KT, VT](...)"},{"location":"usage/dict/#type-parameters","text":"KT : key type VT : value type","title":"Type Parameters:"},{"location":"usage/dict/#arguments","text":"data : Mapping[KT, VT] or Iterable[Tuple[KT, VT]] , optional, positional-only argument, defualt= None ; Initial data. If None or no argument is given, persistent data is used as is if available, otherwise persistent data in the corresponding table is cleared and given data is stored instead. connection : str or sqlite3.Connection , optional, default= None ; If None , temporary file is automatically created. If connection is a str , it will be used as the sqlite3 database file name. You can pass a sqlite3.Connection directly. table_name : str , optional, default= None ; Table name of this container. If None , an auto-generated unique name will be used. Available characters are letters, numbers, and underscores ( _ ). key_serializer : Callable[[KT], bytes] , optional, default= None ; Function to serialize key. If None , pickle.dumps is used. key_deserializer : Callable[[bytes], KT] , optional, default= None ; Function to deserialize key. If None , pickle.loads is used. value_serializer : Callable[[VT], bytes] , optional, default= None ; Function to serialize value. If None , key_serializer is used. value_deserializer : Callable[[bytes], VT] , optional, default= None ; Function to deserialize value. If None , key_deserializer is used. persist : bool , optional, default= True ; If True , table won't be deleted even when the object is deleted. If False , the table is deleted when this object is deleted. pickling_strategy : PicklingStrategy , optional, default= PicklingStrategy.whole_table ; Flag to control pickling method. See PicklingStrategy for more details.","title":"Arguments:"},{"location":"usage/dict/#lend","text":"Return the number of items in d: Dict[KT, VT]","title":"len(d)"},{"location":"usage/dict/#return-value","text":"int : The number of items in d","title":"Return value:"},{"location":"usage/dict/#dkey","text":"Get item of d with key key . Raises a KeyError if key is not in the map.","title":"d[key]"},{"location":"usage/dict/#arguments_1","text":"key : KT ; Key to retrieve corresponding value","title":"Arguments:"},{"location":"usage/dict/#return-value_1","text":"VT : Item of d with key key","title":"Return value:"},{"location":"usage/dict/#dkey-value","text":"Set d[key] to value .","title":"d[key] = value"},{"location":"usage/dict/#arguments_2","text":"key : KT ; Key to be set value : VT ; Value to be set","title":"Arguments:"},{"location":"usage/dict/#return-value_2","text":"None","title":"Return value:"},{"location":"usage/dict/#del-dkey","text":"Delete d[key] .","title":"del d[key]"},{"location":"usage/dict/#arguments_3","text":"key : KT ; Key to be deleted","title":"Arguments:"},{"location":"usage/dict/#return-value_3","text":"None","title":"Return value:"},{"location":"usage/dict/#key-in-d","text":"Return whether if key is in d","title":"key in d"},{"location":"usage/dict/#arguments_4","text":"key : KT ; Key to be checked","title":"Arguments:"},{"location":"usage/dict/#return-value_4","text":"bool : True if key is in d and False otherwise.","title":"Return value:"},{"location":"usage/dict/#key-not-in-d","text":"Return whether if key is not in d","title":"key not in d"},{"location":"usage/dict/#arguments_5","text":"key : KT ; Key to be checked","title":"Arguments:"},{"location":"usage/dict/#return-value_5","text":"bool : True if key is not in d and False otherwise.","title":"Return value:"},{"location":"usage/dict/#iterd","text":"Return an iterator over the keys of d","title":"iter(d)"},{"location":"usage/dict/#return-value_6","text":"Iterator[KT] : an iterator over the keys of d","title":"Return value:"},{"location":"usage/dict/#clear","text":"Remove all items from the dictionary","title":"clear()"},{"location":"usage/dict/#return-value_7","text":"None","title":"Return value:"},{"location":"usage/dict/#copy","text":"Return a copy of the dictionary. The actual behavior is to create a table with a unique table name and copy the keys and the values to the new table. Therefore, unlike the built-in dict copy, the behavior is similar to deep copy. Be aware that the copied dictionary is volatile.","title":"copy()"},{"location":"usage/dict/#return-value_8","text":"Dict[KT, VT] : A volatile copy of the dictionary.","title":"Return value:"},{"location":"usage/dict/#getkey-default","text":"Return the value for key if key is in the dictionary, else default . If default is not given, it defaults to None , so that this method never raises a KeyError .","title":"get(key[, default])"},{"location":"usage/dict/#arguments_6","text":"key : KT ; Key to retrieve corresponding value if exists. default : VT , optional, default= None ; Default value in case that key is not in the dictionary","title":"Arguments:"},{"location":"usage/dict/#return-value_9","text":"VT : Item of the dictionary with key key if key is in the dictionary, default otherwise.","title":"Return value:"},{"location":"usage/dict/#items","text":"Return a new view of the dictionary\u2019s items (key-value pairs).","title":"items()"},{"location":"usage/dict/#return-value_10","text":"ItemsView : View object of the dictionary's items","title":"Return value:"},{"location":"usage/dict/#keys","text":"Return a new view of the dictionary's keys.","title":"keys()"},{"location":"usage/dict/#return-value_11","text":"KeysView[KT] : View object of the dictionary's keys.","title":"Return value:"},{"location":"usage/dict/#popkey-default","text":"If key is in the dictionary, remove it and return its value, else return default . If default is not given and key is not in the dictionary, a KeyError is raised.","title":"pop(key[, default])"},{"location":"usage/dict/#arguments_7","text":"key : KT ; Key to retrieve corresponding value if exists. default : VT , optional, default= None ; Default value in case that key is not in the dictionary","title":"Arguments:"},{"location":"usage/dict/#return-value_12","text":"VT : Item of the dictionary with key key if key is in the dictionary, default otherwise.","title":"Return value:"},{"location":"usage/dict/#popitem","text":"Remove and return a key-value pair from the dictionary. Pairs are returned in LIFO order. If the dictionary is empty, raises a KeyError .","title":"popitem()"},{"location":"usage/dict/#return-value_13","text":"Tuple[KT, VT] : Key-value pair that were last inserted into the dictionary","title":"Return value:"},{"location":"usage/dict/#reversedd","text":"Return a reverse iterator over the keys of the dictionary. (provided only python version 3.8 and above)","title":"reversed(d)"},{"location":"usage/dict/#return-value_14","text":"Iterator[KT] : Reverse iterator over the keys of the dictionary","title":"Return value:"},{"location":"usage/dict/#setdefaultkey-default","text":"If key is in the dictionary, return its value. If not, insert key with a value of default and return default .","title":"setdefault(key[, default])"},{"location":"usage/dict/#arguments_8","text":"key : KT ; Key to retrieve or set the value default : VT , optional, default= None ; Value to be set if key is not in the dictionary","title":"Arguments:"},{"location":"usage/dict/#return-value_15","text":"VT : Item of the dictionary with key key if key is in the dictionary, default otherwise.","title":"Return value:"},{"location":"usage/dict/#updateother-kwargs","text":"Update the dictionary with the key-value pairs from other , overwriting existing keys.","title":"update([other, **kwargs])"},{"location":"usage/dict/#arguments_9","text":"other : Mapping[KT, VT] or Iterable[Tuple[KT, VT]] , optional; Key-value pairs to be added kwargs : VT , optional; values to be added","title":"Arguments:"},{"location":"usage/dict/#return-value_16","text":"None","title":"Return value:"},{"location":"usage/dict/#values","text":"Return a new view of the dictionary's values.","title":"values()"},{"location":"usage/dict/#return-value_17","text":"ValuesView : View object of the dictionary's values","title":"Return value:"},{"location":"usage/dict/#d-other","text":"Create a new dictionary with the merged keys and values of d and other , which must both be dictionaries. The values of other take priority when d and other share keys. The return value is volatile by default. (provided only python version 3.9 and above)","title":"d | other"},{"location":"usage/dict/#arguments_10","text":"other : Mapping[KT, VT] or Iterable[Tuple[KT, VT]] ; Key-value pairs to be merged","title":"Arguments:"},{"location":"usage/dict/#return-value_18","text":"Dict[KT, VT] : A new volatile dictionary object.","title":"Return value:"},{"location":"usage/dict/#d-other_1","text":"Update the dictionary d with keys and values from other . (provided only python version 3.9 and above)","title":"d |= other"},{"location":"usage/dict/#arguments_11","text":"other : Mapping[KT, VT] or Iterable[Tuple[KT, VT]] ; Key-value pairs to be merged","title":"Arguments:"},{"location":"usage/dict/#return-value_19","text":"Dict[KT, VT] : The dictionary object.","title":"Return value:"},{"location":"usage/factory/","text":"factory module factory module contains a factory for each container: ListFactory for List , SetFactory for Set and DictFactory for Dict . They replace constructors of each container that require extra arguments such as connection , serializer , deserializer etc., and allow users to construct a container without specifying those extra arguments. Example Basic usage The results of the following two examples are almost the same (except for the auto-generated table names). Without factory: import sqlite3 import sqlitecollections as sc conn = sqlite3.connect(\"path/to/file.db\") def encode(x: str) -> bytes: return x.encode(\"utf-8\") def decode(x: bytes) -> str: return x.decode(\"utf-8\") l1 = sc.List[str]([\"Alice\", \"Bob\", \"Carol\"], connection=conn, serializer=encode, deserializer=decode) l2 = sc.List[str]([\"Dave\"], connection=conn, serializer=encode, deserializer=decode) l3 = sc.List[str]([\"Erin\"], connection=conn, serializer=encode, deserializer=decode) With factory: import sqlite3 import sqlitecollections as sc conn = sqlite3.connect(\"path/to/file.db\") def encode(x: str) -> bytes: return x.encode(\"utf-8\") def decode(x: bytes) -> str: return x.decode(\"utf-8\") list_ = sc.ListFactory[str](connection=conn, serializer=encode, deserializer=decode) l1 = list_([\"Alice\", \"Bob\", \"Carol\"]) l2 = list_([\"Dave\"]) l3 = list_([\"Erin\"]) Specifying a table name If you want to specify table names of containers from a factory, you can do that as follows: import sqlite3 import sqlitecollections as sc conn = sqlite3.connect(\"path/to/file.db\") def encode(x: str) -> bytes: return x.encode(\"utf-8\") def decode(x: bytes) -> str: return x.decode(\"utf-8\") list_ = sc.ListFactory[str](connection=conn, serializer=encode, deserializer=decode) l1 = list_[\"first_table_name\"]([\"Alice\", \"Bob\", \"Carol\"]) assert l1.table_name == \"first_table_name\" ListFactory ListFactory[T](...) Constructor of ListFactory which constructs List . Type Parameters: T : value type of the List Arguments: connection : str or sqlite3.Connection , optional, default= None ; If None , temporary file is automatically created. If connection is a str , it will be used as the sqlite3 database file name. You can pass a sqlite3.Connection directly. table_name : str , optional, default= None ; Table name of containers from this factory. This argument is assumed not to be specified directly by users. If None , an auto-generated unique name will be used. serializer : Callable[[T], bytes] , optional, default= None ; Function to serialize value. If None , pickle.dumps is used. deserializer : Callable[[bytes], T] , optional, default= None ; Function to deserialize value. If None , pickle.loads is used. list_(data) Construct List[T] with connection, serializer and deserializer preset from ListFactory[T] list_ . Arguments: data : Iterable[T] , optional, defualt= None ; Initial data. Return value: List[T] : connection, serializer and deserializer are the same as those of the factory list_ . create(data) Construct List[T] with connection, serializer and deserializer preset from the factory. Arguments: data : Iterable[T] , optional, defualt= None ; Initial data. Return value: List[T] : connection, serializer and deserializer are the same as those of the factory. f[t] Return a copy of this factory f that creates container with table name t . Arguments: t : str ; the table name Return value: ListFactory[T] : connection, serializer and deserializer are the same as those of this factory and the table name of the List[T] from this return value will be set to t . === DictFactory DictFactory[KT, VT](...) Constructor of DictFactory which constructs Dict . Type Parameters: KT : key type of the Dict VT : value type of the Dict Arguments: connection : str or sqlite3.Connection , optional, default= None ; If None , temporary file is automatically created. If connection is a str , it will be used as the sqlite3 database file name. You can pass a sqlite3.Connection directly. table_name : str , optional, default= None ; Table name of containers from this factory. This argument is assumed not to be specified directly by users. If None , an auto-generated unique name will be used. key_serializer : Callable[[KT], bytes] , optional, default= None ; Function to serialize key. If None , pickle.dumps is used. key_deserializer : Callable[[bytes], KT] , optional, default= None ; Function to deserialize key. If None , pickle.loads is used. value_serializer : Callable[[VT], bytes] , optional, default= None ; Function to serialize value. If None , key_serializer is used. value_deserializer : Callable[[bytes], VT] , optional, default= None ; Function to deserialize value. If None , key_deserializer is used. dict_(data, **kwargs) Construct Dict[KT, VT] with connection, key*serializer, etc., preset from DictFactory[KT, VT] dict* . Arguments: data : Mapping[KT, VT] or Iterable[Tuple[KT, VT]] , optional, defualt= None ; Initial data. **kwargs : VT , optional; Appended to initial data. Return value: Dict[KT, VT] : connection, key*serializers, etc., are the same as those of the factory dict* . create(data, **kwargs) Construct Dict[KT, VT] with connection, key_serializer, etc., preset from the factory. Arguments: data : Mapping[KT, VT] or Iterable[Tuple[KT, VT]] , optional, defualt= None ; Initial data. **kwargs : VT , optional; Appended to initial data. Return value: Dict[KT, VT] : connection, key_serializers, etc., are the same as those of the factory. f[t] Return a copy of this factory f that creates container with table name t . Arguments: t : str ; the table name Return value: DictFactory[KT, VT] : connection, key_serializer, key_deserializer, value_serializer and value_deserializer are the same as those of this factory and the table name of the Dict[KT, VT] from this return value will be set to t . === SetFactory SetFactory[T](...) Constructor of SetFactory which constructs Set . Type Parameters: T : value type of the Set Arguments: connection : str or sqlite3.Connection , optional, default= None ; If None , temporary file is automatically created. If connection is a str , it will be used as the sqlite3 database file name. You can pass a sqlite3.Connection directly. table_name : str , optional, default= None ; Table name of containers from this factory. This argument is assumed not to be specified directly by users. If None , an auto-generated unique name will be used. serializer : Callable[[T], bytes] , optional, default= None ; Function to serialize value. If None , pickle.dumps is used. deserializer : Callable[[bytes], T] , optional, default= None ; Function to deserialize value. If None , pickle.loads is used. set_(data) Construct Set[T] with connection, serializer and deserializer preset from SetFactory[T] set_ . Arguments: data : Iterable[T] , optional, defualt= None ; Initial data. Return value: Set[T] : connection, serializer and deserializer are the same as those of the factory set_ . create(data) Construct Set[T] with connection, serializer and deserializer preset from the factory. Arguments: data : Iterable[T] , optional, defualt= None ; Initial data. Return value: Set[T] : connection, serializer and deserializer are the same as those of the factory. f[t] Return a copy of this factory f that creates container with table name t . Arguments: t : str ; the table name Return value: SetFactory[T] : connection, serializer and deserializer are the same as those of this factory and the table name of the Set[T] from this return value will be set to t . ===","title":"factory"},{"location":"usage/factory/#factory-module","text":"factory module contains a factory for each container: ListFactory for List , SetFactory for Set and DictFactory for Dict . They replace constructors of each container that require extra arguments such as connection , serializer , deserializer etc., and allow users to construct a container without specifying those extra arguments.","title":"factory module"},{"location":"usage/factory/#example","text":"","title":"Example"},{"location":"usage/factory/#basic-usage","text":"The results of the following two examples are almost the same (except for the auto-generated table names). Without factory: import sqlite3 import sqlitecollections as sc conn = sqlite3.connect(\"path/to/file.db\") def encode(x: str) -> bytes: return x.encode(\"utf-8\") def decode(x: bytes) -> str: return x.decode(\"utf-8\") l1 = sc.List[str]([\"Alice\", \"Bob\", \"Carol\"], connection=conn, serializer=encode, deserializer=decode) l2 = sc.List[str]([\"Dave\"], connection=conn, serializer=encode, deserializer=decode) l3 = sc.List[str]([\"Erin\"], connection=conn, serializer=encode, deserializer=decode) With factory: import sqlite3 import sqlitecollections as sc conn = sqlite3.connect(\"path/to/file.db\") def encode(x: str) -> bytes: return x.encode(\"utf-8\") def decode(x: bytes) -> str: return x.decode(\"utf-8\") list_ = sc.ListFactory[str](connection=conn, serializer=encode, deserializer=decode) l1 = list_([\"Alice\", \"Bob\", \"Carol\"]) l2 = list_([\"Dave\"]) l3 = list_([\"Erin\"])","title":"Basic usage"},{"location":"usage/factory/#specifying-a-table-name","text":"If you want to specify table names of containers from a factory, you can do that as follows: import sqlite3 import sqlitecollections as sc conn = sqlite3.connect(\"path/to/file.db\") def encode(x: str) -> bytes: return x.encode(\"utf-8\") def decode(x: bytes) -> str: return x.decode(\"utf-8\") list_ = sc.ListFactory[str](connection=conn, serializer=encode, deserializer=decode) l1 = list_[\"first_table_name\"]([\"Alice\", \"Bob\", \"Carol\"]) assert l1.table_name == \"first_table_name\"","title":"Specifying a table name"},{"location":"usage/factory/#listfactory","text":"","title":"ListFactory"},{"location":"usage/factory/#listfactoryt","text":"Constructor of ListFactory which constructs List .","title":"ListFactory[T](...)"},{"location":"usage/factory/#type-parameters","text":"T : value type of the List","title":"Type Parameters:"},{"location":"usage/factory/#arguments","text":"connection : str or sqlite3.Connection , optional, default= None ; If None , temporary file is automatically created. If connection is a str , it will be used as the sqlite3 database file name. You can pass a sqlite3.Connection directly. table_name : str , optional, default= None ; Table name of containers from this factory. This argument is assumed not to be specified directly by users. If None , an auto-generated unique name will be used. serializer : Callable[[T], bytes] , optional, default= None ; Function to serialize value. If None , pickle.dumps is used. deserializer : Callable[[bytes], T] , optional, default= None ; Function to deserialize value. If None , pickle.loads is used.","title":"Arguments:"},{"location":"usage/factory/#list_data","text":"Construct List[T] with connection, serializer and deserializer preset from ListFactory[T] list_ .","title":"list_(data)"},{"location":"usage/factory/#arguments_1","text":"data : Iterable[T] , optional, defualt= None ; Initial data.","title":"Arguments:"},{"location":"usage/factory/#return-value","text":"List[T] : connection, serializer and deserializer are the same as those of the factory list_ .","title":"Return value:"},{"location":"usage/factory/#createdata","text":"Construct List[T] with connection, serializer and deserializer preset from the factory.","title":"create(data)"},{"location":"usage/factory/#arguments_2","text":"data : Iterable[T] , optional, defualt= None ; Initial data.","title":"Arguments:"},{"location":"usage/factory/#return-value_1","text":"List[T] : connection, serializer and deserializer are the same as those of the factory.","title":"Return value:"},{"location":"usage/factory/#ft","text":"Return a copy of this factory f that creates container with table name t .","title":"f[t]"},{"location":"usage/factory/#arguments_3","text":"t : str ; the table name","title":"Arguments:"},{"location":"usage/factory/#return-value_2","text":"ListFactory[T] : connection, serializer and deserializer are the same as those of this factory and the table name of the List[T] from this return value will be set to t . ===","title":"Return value:"},{"location":"usage/factory/#dictfactory","text":"","title":"DictFactory"},{"location":"usage/factory/#dictfactorykt-vt","text":"Constructor of DictFactory which constructs Dict .","title":"DictFactory[KT, VT](...)"},{"location":"usage/factory/#type-parameters_1","text":"KT : key type of the Dict VT : value type of the Dict","title":"Type Parameters:"},{"location":"usage/factory/#arguments_4","text":"connection : str or sqlite3.Connection , optional, default= None ; If None , temporary file is automatically created. If connection is a str , it will be used as the sqlite3 database file name. You can pass a sqlite3.Connection directly. table_name : str , optional, default= None ; Table name of containers from this factory. This argument is assumed not to be specified directly by users. If None , an auto-generated unique name will be used. key_serializer : Callable[[KT], bytes] , optional, default= None ; Function to serialize key. If None , pickle.dumps is used. key_deserializer : Callable[[bytes], KT] , optional, default= None ; Function to deserialize key. If None , pickle.loads is used. value_serializer : Callable[[VT], bytes] , optional, default= None ; Function to serialize value. If None , key_serializer is used. value_deserializer : Callable[[bytes], VT] , optional, default= None ; Function to deserialize value. If None , key_deserializer is used.","title":"Arguments:"},{"location":"usage/factory/#dict_data-kwargs","text":"Construct Dict[KT, VT] with connection, key*serializer, etc., preset from DictFactory[KT, VT] dict* .","title":"dict_(data, **kwargs)"},{"location":"usage/factory/#arguments_5","text":"data : Mapping[KT, VT] or Iterable[Tuple[KT, VT]] , optional, defualt= None ; Initial data. **kwargs : VT , optional; Appended to initial data.","title":"Arguments:"},{"location":"usage/factory/#return-value_3","text":"Dict[KT, VT] : connection, key*serializers, etc., are the same as those of the factory dict* .","title":"Return value:"},{"location":"usage/factory/#createdata-kwargs","text":"Construct Dict[KT, VT] with connection, key_serializer, etc., preset from the factory.","title":"create(data, **kwargs)"},{"location":"usage/factory/#arguments_6","text":"data : Mapping[KT, VT] or Iterable[Tuple[KT, VT]] , optional, defualt= None ; Initial data. **kwargs : VT , optional; Appended to initial data.","title":"Arguments:"},{"location":"usage/factory/#return-value_4","text":"Dict[KT, VT] : connection, key_serializers, etc., are the same as those of the factory.","title":"Return value:"},{"location":"usage/factory/#ft_1","text":"Return a copy of this factory f that creates container with table name t .","title":"f[t]"},{"location":"usage/factory/#arguments_7","text":"t : str ; the table name","title":"Arguments:"},{"location":"usage/factory/#return-value_5","text":"DictFactory[KT, VT] : connection, key_serializer, key_deserializer, value_serializer and value_deserializer are the same as those of this factory and the table name of the Dict[KT, VT] from this return value will be set to t . ===","title":"Return value:"},{"location":"usage/factory/#setfactory","text":"","title":"SetFactory"},{"location":"usage/factory/#setfactoryt","text":"Constructor of SetFactory which constructs Set .","title":"SetFactory[T](...)"},{"location":"usage/factory/#type-parameters_2","text":"T : value type of the Set","title":"Type Parameters:"},{"location":"usage/factory/#arguments_8","text":"connection : str or sqlite3.Connection , optional, default= None ; If None , temporary file is automatically created. If connection is a str , it will be used as the sqlite3 database file name. You can pass a sqlite3.Connection directly. table_name : str , optional, default= None ; Table name of containers from this factory. This argument is assumed not to be specified directly by users. If None , an auto-generated unique name will be used. serializer : Callable[[T], bytes] , optional, default= None ; Function to serialize value. If None , pickle.dumps is used. deserializer : Callable[[bytes], T] , optional, default= None ; Function to deserialize value. If None , pickle.loads is used.","title":"Arguments:"},{"location":"usage/factory/#set_data","text":"Construct Set[T] with connection, serializer and deserializer preset from SetFactory[T] set_ .","title":"set_(data)"},{"location":"usage/factory/#arguments_9","text":"data : Iterable[T] , optional, defualt= None ; Initial data.","title":"Arguments:"},{"location":"usage/factory/#return-value_6","text":"Set[T] : connection, serializer and deserializer are the same as those of the factory set_ .","title":"Return value:"},{"location":"usage/factory/#createdata_1","text":"Construct Set[T] with connection, serializer and deserializer preset from the factory.","title":"create(data)"},{"location":"usage/factory/#arguments_10","text":"data : Iterable[T] , optional, defualt= None ; Initial data.","title":"Arguments:"},{"location":"usage/factory/#return-value_7","text":"Set[T] : connection, serializer and deserializer are the same as those of the factory.","title":"Return value:"},{"location":"usage/factory/#ft_2","text":"Return a copy of this factory f that creates container with table name t .","title":"f[t]"},{"location":"usage/factory/#arguments_11","text":"t : str ; the table name","title":"Arguments:"},{"location":"usage/factory/#return-value_8","text":"SetFactory[T] : connection, serializer and deserializer are the same as those of this factory and the table name of the Set[T] from this return value will be set to t . ===","title":"Return value:"},{"location":"usage/list/","text":"List List is a container compatible with the built-in list , which serializes values and stores them in a sqlite3 database. List[T](...) Constructor. Type Parameters: T : value type Arguments: data : Iterable[T] , optional, positional-only argument, defualt= None ; Initial data. If None or no argument is given, persistent data is used as is if available, otherwise persistent data in the corresponding table is cleared and given data is stored instead. connection : str or sqlite3.Connection , optional, default= None ; If None , temporary file is automatically created. If connection is a str , it will be used as the sqlite3 database file name. You can pass a sqlite3.Connection directly. table_name : str , optional, default= None ; Table name of this container. If None , an auto-generated unique name will be used. Available characters are letters, numbers, and underscores ( _ ). serializer : Callable[[T], bytes] , optional, default= None ; Function to serialize value. If None , pickle.dumps is used. deserializer : Callable[[bytes], T] , optional, default= None ; Function to deserialize value. If None , pickle.loads is used. persist : bool , optional, default= True ; If True , table won't be deleted even when the object is deleted. If False , the table is deleted when this object is deleted. pickling_strategy : PicklingStrategy , optional, default= PicklingStrategy.whole_table ; Flag to control pickling method. See PicklingStrategy for more details. sorting_strategy : SortingStrategy , optional, defualt= SortingStrategy.balanced ; Flat to control sorting method. See SortingStrategy for more details. x in s True if an item of s is equal to x , else False Arguments: x : object ; an object to be checked Return value: bool : True if x is in s and False otherwise. x not in s False if an item of s is equal to x , else True Arguments: x : object ; an object to be checked Return value: bool : False if x is in s and True otherwise. s + t The concatenation of s and t Arguments: t : Iterable[T] ; An iterable to be concatenated. Return value: List[T] : The concatenation of s and t . s * n or n * s equivalent to adding s to itself n times. Arguments: n : int ; Number of times to repeat. Return value: List[T] : a list of n times s was repeated. s[i] i -th item of s , origin 0 . Arguments: i : int ; Item index. If it is negative, it is equivalent to len(s) + i . Return value: T : i -th item of s , origin 0 . s[i:j] Slice of s from i to j . Arguments: i : int or None ; Item index where the slice starts from. If None , it is treated as 0 . j : int or None ; Item index where the slice stops at. If None , it is treated as len(s) . Return value: List[T] : Slice of s from i to j . s[i:j:k] Slice of s from i to j with step k Arguments: i : int or None ; Item index where the slice starts from. If None , it is treated as 0 . j : int or None ; Item index where the slice stops at. If None , it is treated as len(s) . k : int or None ; Step of the slice. If None , it is treated as 1 . Return value: List[T] : Slice of s from i to j with step k . len(s) Return the number of items in s: List[T] Return value: int : The number of items in s index(x[, i[, j]]]) Return index of the first occurrence of x in the list (at or after index i and before index j ). Raise ValueError if x is not in the list. Arguments: x : T ; Value to retrieve corresponding index if exists. i : int , optional, default= None ; First index to look up the value. If it is None , start from the first element of the list. j : int , optional, default= None ; Index before the last one to look for a value. If None , search to the end. Return value: int : Index of the first occurrence of x in the list. count(x) Return total number of occurrences of x in the list. Arguments: x : T ; Value that counts the number of occurrences. Return value: int : The number of occurrences of x in the list. s[i] = x Replace item i of s by x . Arguments: i : int ; Item index to be set. If it is negative, it is equivalent to len(s) + i x : T ; Value to be set. Return value: None . del s[i] Remove item i of s . Arguments: i : int ; Item index to be removed. If it is negative, it is equivalent to len(s) + i . Return value: None . s[i:j] = t Replace slice of s from i to j by the contents of the iterable t . Arguments: i : int or None ; Item index where the slice starts from. If None , it is treated as 0 . j : int or None ; Item index where the slice stops at. If None , it is treated as len(s) . t : Iterable[T] ; Iterable to be inserted. Return value: None . del s[i:j] Remove slice of s from i to j . Arguments: i : int or None ; Item index where the slice starts from. If None , it is treated as 0 . j : int or None ; Item index where the slice stops at. If None , it is treated as len(s) . Return value: None . s[i:j:k] = t Replace the elements of s[i:j:k] by those ofthe iterable t . The length must be the same. Otherwise, ValueError will be raised. Arguments: i : int or None ; Item index where the slice starts from. If None , it is treated as 0 . j : int or None ; Item index where the slice stops at. If None , it is treated as len(s) . k : int or None ; Step of the slice. If None , it is treated as 1 . t : Iterable[T] ; Iterable to be substituted. The length must be the same as that of the slice. Return value: None . del s[i:j:k] Remove the elements of s[i:j:k] from the list. Arguments: i : int or None ; Item index where the slice starts from. If None , it is treated as 0 . j : int or None ; Item index where the slice stops at. If None , it is treated as len(s) . k : int or None ; Step of the slice. If None , it is treated as 1 . Return value: None . append(x) Append x to the end of the sequence. Arguments: x : T ; Item to be appended. Return value; None . clear() Remove all items from the list. Return value: None . copy() Return a copy of the list. The actual behavior is to create a table with a unique table name and copy the items to the new table. Therefore, unlike the built-in list copy, the behavior is similar to deep copy. Be aware that the copied list is volatile. Return value: List[T] : A volatile copy of the list. extend(t) Concatenate the list and t . Arguments: t : Iterable[T] ; An iterable to be concatenated. Return value: None . s += t Concatenate s and t . Arguments: t : Iterable[T] ; An iterable to be concatenated. Return value: None . s *= n Update s with its contents repeated n times. Arguments: n : int ; Number of times to repeat. Return value: None . insert(i, x) Insert x into the list at the index i . Arguments: i : int ; Index to be inserted. x : T ; Item to be inserted. Return value: None . pop(i) Retrieve the item at i and also remove it from s. Arguments: i : int or None , optional, default= None ; Index to be retrieved and removed. If it is None , it is treated as the last index of the list. Return value: T : i -th item of s , origin 0 . remove(x) Remove the first item of s whose value is equal to x . Arguments: x : T ; Item to be removed. Return value: None . reverse() Reverse the items of the list in place. Return value: None . sort(reverse, key) Sort the items of the list in place. The value of reverse can be either True or False , resulting in descending or ascending order, respectively. key specifies a function of one argument that is used to extract a comparison key from each list element. Arguments: reverse : bool , optional, default= False ; By default, the order is ascending, but if this value is True , the order will be descending. key : Callable[[T], Any] , optional, default= None ; Function to extract a comparison key from each list element. Return value: None . sorting_strategy Read-only property for the sorting strategy. Return value: SortingStrategy : The sorting strategy. SortingStrategy Enum to control the time-memory tradeoffs of the sorting method. SortingStrategy.fastest The fastest but most memory-consuming way. This method dumps all tuples of sort keys (the return value of the key function) and indices into an on-memory list and sorts it then reorders the records with UPDATE statements. If you are sure that you have sufficient memory to hold all the sort keys (and indices), this method is the best. SortingStrategy.balanced The default strategy. This method dumps only the indices into an on-memory list and doesn't cache all the sort keys in contrast with the fastest strategy. If you have a little memory to hold an array of indexes and the cost of computing sort keys is very low, this strategy works well. SortingStrategy.memory_saving This method never caches anything during sorting. This method is very slow due to the frequent use of UPDATE statements and should only be used when memory is very limited.","title":"List"},{"location":"usage/list/#list","text":"List is a container compatible with the built-in list , which serializes values and stores them in a sqlite3 database.","title":"List"},{"location":"usage/list/#listt","text":"Constructor.","title":"List[T](...)"},{"location":"usage/list/#type-parameters","text":"T : value type","title":"Type Parameters:"},{"location":"usage/list/#arguments","text":"data : Iterable[T] , optional, positional-only argument, defualt= None ; Initial data. If None or no argument is given, persistent data is used as is if available, otherwise persistent data in the corresponding table is cleared and given data is stored instead. connection : str or sqlite3.Connection , optional, default= None ; If None , temporary file is automatically created. If connection is a str , it will be used as the sqlite3 database file name. You can pass a sqlite3.Connection directly. table_name : str , optional, default= None ; Table name of this container. If None , an auto-generated unique name will be used. Available characters are letters, numbers, and underscores ( _ ). serializer : Callable[[T], bytes] , optional, default= None ; Function to serialize value. If None , pickle.dumps is used. deserializer : Callable[[bytes], T] , optional, default= None ; Function to deserialize value. If None , pickle.loads is used. persist : bool , optional, default= True ; If True , table won't be deleted even when the object is deleted. If False , the table is deleted when this object is deleted. pickling_strategy : PicklingStrategy , optional, default= PicklingStrategy.whole_table ; Flag to control pickling method. See PicklingStrategy for more details. sorting_strategy : SortingStrategy , optional, defualt= SortingStrategy.balanced ; Flat to control sorting method. See SortingStrategy for more details.","title":"Arguments:"},{"location":"usage/list/#x-in-s","text":"True if an item of s is equal to x , else False","title":"x in s"},{"location":"usage/list/#arguments_1","text":"x : object ; an object to be checked","title":"Arguments:"},{"location":"usage/list/#return-value","text":"bool : True if x is in s and False otherwise.","title":"Return value:"},{"location":"usage/list/#x-not-in-s","text":"False if an item of s is equal to x , else True","title":"x not in s"},{"location":"usage/list/#arguments_2","text":"x : object ; an object to be checked","title":"Arguments:"},{"location":"usage/list/#return-value_1","text":"bool : False if x is in s and True otherwise.","title":"Return value:"},{"location":"usage/list/#s-t","text":"The concatenation of s and t","title":"s + t"},{"location":"usage/list/#arguments_3","text":"t : Iterable[T] ; An iterable to be concatenated.","title":"Arguments:"},{"location":"usage/list/#return-value_2","text":"List[T] : The concatenation of s and t .","title":"Return value:"},{"location":"usage/list/#s-n-or-n-s","text":"equivalent to adding s to itself n times.","title":"s * n or n * s"},{"location":"usage/list/#arguments_4","text":"n : int ; Number of times to repeat.","title":"Arguments:"},{"location":"usage/list/#return-value_3","text":"List[T] : a list of n times s was repeated.","title":"Return value:"},{"location":"usage/list/#si","text":"i -th item of s , origin 0 .","title":"s[i]"},{"location":"usage/list/#arguments_5","text":"i : int ; Item index. If it is negative, it is equivalent to len(s) + i .","title":"Arguments:"},{"location":"usage/list/#return-value_4","text":"T : i -th item of s , origin 0 .","title":"Return value:"},{"location":"usage/list/#sij","text":"Slice of s from i to j .","title":"s[i:j]"},{"location":"usage/list/#arguments_6","text":"i : int or None ; Item index where the slice starts from. If None , it is treated as 0 . j : int or None ; Item index where the slice stops at. If None , it is treated as len(s) .","title":"Arguments:"},{"location":"usage/list/#return-value_5","text":"List[T] : Slice of s from i to j .","title":"Return value:"},{"location":"usage/list/#sijk","text":"Slice of s from i to j with step k","title":"s[i:j:k]"},{"location":"usage/list/#arguments_7","text":"i : int or None ; Item index where the slice starts from. If None , it is treated as 0 . j : int or None ; Item index where the slice stops at. If None , it is treated as len(s) . k : int or None ; Step of the slice. If None , it is treated as 1 .","title":"Arguments:"},{"location":"usage/list/#return-value_6","text":"List[T] : Slice of s from i to j with step k .","title":"Return value:"},{"location":"usage/list/#lens","text":"Return the number of items in s: List[T]","title":"len(s)"},{"location":"usage/list/#return-value_7","text":"int : The number of items in s","title":"Return value:"},{"location":"usage/list/#indexx-i-j","text":"Return index of the first occurrence of x in the list (at or after index i and before index j ). Raise ValueError if x is not in the list.","title":"index(x[, i[, j]]])"},{"location":"usage/list/#arguments_8","text":"x : T ; Value to retrieve corresponding index if exists. i : int , optional, default= None ; First index to look up the value. If it is None , start from the first element of the list. j : int , optional, default= None ; Index before the last one to look for a value. If None , search to the end.","title":"Arguments:"},{"location":"usage/list/#return-value_8","text":"int : Index of the first occurrence of x in the list.","title":"Return value:"},{"location":"usage/list/#countx","text":"Return total number of occurrences of x in the list.","title":"count(x)"},{"location":"usage/list/#arguments_9","text":"x : T ; Value that counts the number of occurrences.","title":"Arguments:"},{"location":"usage/list/#return-value_9","text":"int : The number of occurrences of x in the list.","title":"Return value:"},{"location":"usage/list/#si-x","text":"Replace item i of s by x .","title":"s[i] = x"},{"location":"usage/list/#arguments_10","text":"i : int ; Item index to be set. If it is negative, it is equivalent to len(s) + i x : T ; Value to be set.","title":"Arguments:"},{"location":"usage/list/#return-value_10","text":"None .","title":"Return value:"},{"location":"usage/list/#del-si","text":"Remove item i of s .","title":"del s[i]"},{"location":"usage/list/#arguments_11","text":"i : int ; Item index to be removed. If it is negative, it is equivalent to len(s) + i .","title":"Arguments:"},{"location":"usage/list/#return-value_11","text":"None .","title":"Return value:"},{"location":"usage/list/#sij-t","text":"Replace slice of s from i to j by the contents of the iterable t .","title":"s[i:j] = t"},{"location":"usage/list/#arguments_12","text":"i : int or None ; Item index where the slice starts from. If None , it is treated as 0 . j : int or None ; Item index where the slice stops at. If None , it is treated as len(s) . t : Iterable[T] ; Iterable to be inserted.","title":"Arguments:"},{"location":"usage/list/#return-value_12","text":"None .","title":"Return value:"},{"location":"usage/list/#del-sij","text":"Remove slice of s from i to j .","title":"del s[i:j]"},{"location":"usage/list/#arguments_13","text":"i : int or None ; Item index where the slice starts from. If None , it is treated as 0 . j : int or None ; Item index where the slice stops at. If None , it is treated as len(s) .","title":"Arguments:"},{"location":"usage/list/#return-value_13","text":"None .","title":"Return value:"},{"location":"usage/list/#sijk-t","text":"Replace the elements of s[i:j:k] by those ofthe iterable t . The length must be the same. Otherwise, ValueError will be raised.","title":"s[i:j:k] = t"},{"location":"usage/list/#arguments_14","text":"i : int or None ; Item index where the slice starts from. If None , it is treated as 0 . j : int or None ; Item index where the slice stops at. If None , it is treated as len(s) . k : int or None ; Step of the slice. If None , it is treated as 1 . t : Iterable[T] ; Iterable to be substituted. The length must be the same as that of the slice.","title":"Arguments:"},{"location":"usage/list/#return-value_14","text":"None .","title":"Return value:"},{"location":"usage/list/#del-sijk","text":"Remove the elements of s[i:j:k] from the list.","title":"del s[i:j:k]"},{"location":"usage/list/#arguments_15","text":"i : int or None ; Item index where the slice starts from. If None , it is treated as 0 . j : int or None ; Item index where the slice stops at. If None , it is treated as len(s) . k : int or None ; Step of the slice. If None , it is treated as 1 .","title":"Arguments:"},{"location":"usage/list/#return-value_15","text":"None .","title":"Return value:"},{"location":"usage/list/#appendx","text":"Append x to the end of the sequence.","title":"append(x)"},{"location":"usage/list/#arguments_16","text":"x : T ; Item to be appended.","title":"Arguments:"},{"location":"usage/list/#return-value_16","text":"None .","title":"Return value;"},{"location":"usage/list/#clear","text":"Remove all items from the list.","title":"clear()"},{"location":"usage/list/#return-value_17","text":"None .","title":"Return value:"},{"location":"usage/list/#copy","text":"Return a copy of the list. The actual behavior is to create a table with a unique table name and copy the items to the new table. Therefore, unlike the built-in list copy, the behavior is similar to deep copy. Be aware that the copied list is volatile.","title":"copy()"},{"location":"usage/list/#return-value_18","text":"List[T] : A volatile copy of the list.","title":"Return value:"},{"location":"usage/list/#extendt","text":"Concatenate the list and t .","title":"extend(t)"},{"location":"usage/list/#arguments_17","text":"t : Iterable[T] ; An iterable to be concatenated.","title":"Arguments:"},{"location":"usage/list/#return-value_19","text":"None .","title":"Return value:"},{"location":"usage/list/#s-t_1","text":"Concatenate s and t .","title":"s += t"},{"location":"usage/list/#arguments_18","text":"t : Iterable[T] ; An iterable to be concatenated.","title":"Arguments:"},{"location":"usage/list/#return-value_20","text":"None .","title":"Return value:"},{"location":"usage/list/#s-n","text":"Update s with its contents repeated n times.","title":"s *= n"},{"location":"usage/list/#arguments_19","text":"n : int ; Number of times to repeat.","title":"Arguments:"},{"location":"usage/list/#return-value_21","text":"None .","title":"Return value:"},{"location":"usage/list/#inserti-x","text":"Insert x into the list at the index i .","title":"insert(i, x)"},{"location":"usage/list/#arguments_20","text":"i : int ; Index to be inserted. x : T ; Item to be inserted.","title":"Arguments:"},{"location":"usage/list/#return-value_22","text":"None .","title":"Return value:"},{"location":"usage/list/#popi","text":"Retrieve the item at i and also remove it from s.","title":"pop(i)"},{"location":"usage/list/#arguments_21","text":"i : int or None , optional, default= None ; Index to be retrieved and removed. If it is None , it is treated as the last index of the list.","title":"Arguments:"},{"location":"usage/list/#return-value_23","text":"T : i -th item of s , origin 0 .","title":"Return value:"},{"location":"usage/list/#removex","text":"Remove the first item of s whose value is equal to x .","title":"remove(x)"},{"location":"usage/list/#arguments_22","text":"x : T ; Item to be removed.","title":"Arguments:"},{"location":"usage/list/#return-value_24","text":"None .","title":"Return value:"},{"location":"usage/list/#reverse","text":"Reverse the items of the list in place.","title":"reverse()"},{"location":"usage/list/#return-value_25","text":"None .","title":"Return value:"},{"location":"usage/list/#sortreverse-key","text":"Sort the items of the list in place. The value of reverse can be either True or False , resulting in descending or ascending order, respectively. key specifies a function of one argument that is used to extract a comparison key from each list element.","title":"sort(reverse, key)"},{"location":"usage/list/#arguments_23","text":"reverse : bool , optional, default= False ; By default, the order is ascending, but if this value is True , the order will be descending. key : Callable[[T], Any] , optional, default= None ; Function to extract a comparison key from each list element.","title":"Arguments:"},{"location":"usage/list/#return-value_26","text":"None .","title":"Return value:"},{"location":"usage/list/#sorting_strategy","text":"Read-only property for the sorting strategy.","title":"sorting_strategy"},{"location":"usage/list/#return-value_27","text":"SortingStrategy : The sorting strategy.","title":"Return value:"},{"location":"usage/list/#sortingstrategy","text":"Enum to control the time-memory tradeoffs of the sorting method.","title":"SortingStrategy"},{"location":"usage/list/#sortingstrategyfastest","text":"The fastest but most memory-consuming way. This method dumps all tuples of sort keys (the return value of the key function) and indices into an on-memory list and sorts it then reorders the records with UPDATE statements. If you are sure that you have sufficient memory to hold all the sort keys (and indices), this method is the best.","title":"SortingStrategy.fastest"},{"location":"usage/list/#sortingstrategybalanced","text":"The default strategy. This method dumps only the indices into an on-memory list and doesn't cache all the sort keys in contrast with the fastest strategy. If you have a little memory to hold an array of indexes and the cost of computing sort keys is very low, this strategy works well.","title":"SortingStrategy.balanced"},{"location":"usage/list/#sortingstrategymemory_saving","text":"This method never caches anything during sorting. This method is very slow due to the frequent use of UPDATE statements and should only be used when memory is very limited.","title":"SortingStrategy.memory_saving"},{"location":"usage/set/","text":"Set Set is a container compatible with the built-in set , which serializes values and stores them in a sqlite3 database. Set[T](...) Constructor. Type Parameters: T : value type Arguments: data : Iterable[T] , optional, positional-only argument, defualt= None ; Initial data. If None or no argument is given, persistent data is used as is if available, otherwise persistent data in the corresponding table is cleared and given data is stored instead. connection : str or sqlite3.Connection , optional, default= None ; If None , temporary file is automatically created. If connection is a str , it will be used as the sqlite3 database file name. You can pass a sqlite3.Connection directly. table_name : str , optional, default= None ; Table name of this container. If None , an auto-generated unique name will be used. Available characters are letters, numbers, and underscores ( _ ). serializer : Callable[[T], bytes] , optional, default= None ; Function to serialize value. If None , pickle.dumps is used. deserializer : Callable[[bytes], T] , optional, default= None ; Function to deserialize value. If None , pickle.loads is used. persist : bool , optional, default= True ; If True , table won't be deleted even when the object is deleted. If False , the table is deleted when this object is deleted. pickling_strategy : PicklingStrategy , optional, default= PicklingStrategy.whole_table ; Flag to control pickling method. See PicklingStrategy for more details. len(s) Return the number of items in s: Set[T] Return value: int : The number of items in s x in s True if x is in s , else False Arguments: x : object ; an object to be checked Return value: bool : True if x is in s and False otherwise. x not in s False if x is in s , else True Arguments: x : object ; an object to be checked Return value: bool : False if x is in s and True otherwise. isdisjoint(other) Return True if the set has no elements in common with other . Arguments: other : Iterable[T] ; Iterable to check if disjoint. Return value: bool : True if the set is disjoint with other , False otherwise. issubset(other) Return True if every element in the set is in other . Arguments: other : Iterable[T] ; Iterable to check if this one contains the set. Return value: bool : True if the set is subset of other , False otherwise. s <= other Return True if every element in the set is in other . Argument: other : Iterable[T] ; Iterable to check if this one contains all the elements in the set. Return value: bool : True if the set is subset of other , False otherwise. s < other Return True if every element in the set is in other and s is not equal to other . Arguments: other : Iterable[T] ; Iterable to check if it contains all elements of the set and is not equal to the set. Return value: bool : True if the set is a proper subset of other , False otherwise. issuperset(other) Return True if every element in other is in the set. Arguments: other : Iterable[T] ; Iterable to check if the elements are contained. Return value: bool : True if the set is superset of other , False otherwise. s >= other Return True if every element in other is in the set. Argument: other : Iterable[T] ; Iterable to check if the elements are contained. Return value: bool : True if the set is superset of other , False otherwise. s > other Return True if every element in other is in the set and s is not equal to other . Arguments: other : Iterable[T] ; Iterable to check if it all elements are in the set and is not equal to the set. Return value: bool : True if the set is a proper superset of other , False otherwise. union(*others) Return a new set with elements from the set and all others . Arguments: others : Iterable[T] ; Iterables to take the union. Return value: Set[T] : A new set with elements from the set and all others . s | other Return a new set with elements from s and other . Arguments: other : Iterable[T] ; Iterable to take the union. Return value: Set[T] : A new set with elements from s and other . intersection(*others) Return a new set with elements common to the set and all others . Arguments: others : Iterable[T] ; Iterables to take the intersection. Return value: Set[T] : A new set with elements common to the set and all others . s & other Return a new set with elements common to s and other . Arguments: other : Iterable[T] ; Iterable to take the intersection. Return value: Set[T] : A new set with elements common to s and other . difference(*others) Return a new set with elements in the set that are not in the others . Arguments: others : Iterable[T] ; Iterables to take the difference. Return value: Set[T] : A new set with elements in the set that are not in the others . s - other Return a new set with elements in the set that are not in the other . Arguments: other : Iterable[T] ; Iterable to take the difference. Return value: Set[T] : A new set with elements in the set that are not in the other . symmetric_difference(other) Return a new set with elements in either the set or other but not both. Arguments: other : Iterable[T] ; Iterable to take the symmetric difference. Return value: Set[T] : A new set with elements in either the set or other but not both. s ^ other Return a new set with elements in either the set or other but not both. Arguments: other : Iterable[T] ; Iterable to take the symmetric difference. Return value: Set[T] : A new set with elements in either the set or other but not both. copy() Return a copy of the set. The actual behavior is to create a table with a unique table name and copy the elements to the new table. Therefore, unlike the built-in set copy, the behavior is similar to deep copy. Be aware that the copied set is volatile. Return value: Set[T] : A volatile copy of the set. update(*others) Update the set by adding elements from all others . Arguments: others : Iterable[T] ; Iterables to take the union. Return value: None . s |= other Update the set by adding elements from other . Arguments: other : Iterable[T] ; Iterable to take the union. Return value: None . intersection_update(*others) Update the set by keeping only elements found in the set and all others . Arguments: others : Iterable[T] ; Iterables to take the intersection. Return value: None . s &= other Update the set by keeping only elements found in the set and other . Arguments: other : Iterable[T] ; Iterable to take the intersection. Return value: None . symmetric_difference_update(other) Update the set by keeping only elements found in either the set or other but not both. Arguments: other : Iterable[T] ; Iterable to take the symmetric difference. Return value: None . s ^= other Update the set by keeping only elements found in either the set or other but not both. Arguments: other : Iterable[T] ; Iterable to take the symmetric difference. Return value: None . add(elem) Add an element elem to the set. Arguments: elem : T ; An element to be added. Return value: None . remove(elem) Remove an element elem from the set. Raises KeyError if elem is not contained in the set. Arguemnts: elem : T ; An element to be removed. Return value: None . discard(elem) Remove an element elem from the set if it is present. Arguments: elem : T ; An element to be removed. Return value: None . pop() Remove and return an arbitrary element from the set. Raises KeyError if the set is empty. Return value: T : An element in the set. clear() Remove all elements from the set. Return value: None .","title":"Set"},{"location":"usage/set/#set","text":"Set is a container compatible with the built-in set , which serializes values and stores them in a sqlite3 database.","title":"Set"},{"location":"usage/set/#sett","text":"Constructor.","title":"Set[T](...)"},{"location":"usage/set/#type-parameters","text":"T : value type","title":"Type Parameters:"},{"location":"usage/set/#arguments","text":"data : Iterable[T] , optional, positional-only argument, defualt= None ; Initial data. If None or no argument is given, persistent data is used as is if available, otherwise persistent data in the corresponding table is cleared and given data is stored instead. connection : str or sqlite3.Connection , optional, default= None ; If None , temporary file is automatically created. If connection is a str , it will be used as the sqlite3 database file name. You can pass a sqlite3.Connection directly. table_name : str , optional, default= None ; Table name of this container. If None , an auto-generated unique name will be used. Available characters are letters, numbers, and underscores ( _ ). serializer : Callable[[T], bytes] , optional, default= None ; Function to serialize value. If None , pickle.dumps is used. deserializer : Callable[[bytes], T] , optional, default= None ; Function to deserialize value. If None , pickle.loads is used. persist : bool , optional, default= True ; If True , table won't be deleted even when the object is deleted. If False , the table is deleted when this object is deleted. pickling_strategy : PicklingStrategy , optional, default= PicklingStrategy.whole_table ; Flag to control pickling method. See PicklingStrategy for more details.","title":"Arguments:"},{"location":"usage/set/#lens","text":"Return the number of items in s: Set[T]","title":"len(s)"},{"location":"usage/set/#return-value","text":"int : The number of items in s","title":"Return value:"},{"location":"usage/set/#x-in-s","text":"True if x is in s , else False","title":"x in s"},{"location":"usage/set/#arguments_1","text":"x : object ; an object to be checked","title":"Arguments:"},{"location":"usage/set/#return-value_1","text":"bool : True if x is in s and False otherwise.","title":"Return value:"},{"location":"usage/set/#x-not-in-s","text":"False if x is in s , else True","title":"x not in s"},{"location":"usage/set/#arguments_2","text":"x : object ; an object to be checked","title":"Arguments:"},{"location":"usage/set/#return-value_2","text":"bool : False if x is in s and True otherwise.","title":"Return value:"},{"location":"usage/set/#isdisjointother","text":"Return True if the set has no elements in common with other .","title":"isdisjoint(other)"},{"location":"usage/set/#arguments_3","text":"other : Iterable[T] ; Iterable to check if disjoint.","title":"Arguments:"},{"location":"usage/set/#return-value_3","text":"bool : True if the set is disjoint with other , False otherwise.","title":"Return value:"},{"location":"usage/set/#issubsetother","text":"Return True if every element in the set is in other .","title":"issubset(other)"},{"location":"usage/set/#arguments_4","text":"other : Iterable[T] ; Iterable to check if this one contains the set.","title":"Arguments:"},{"location":"usage/set/#return-value_4","text":"bool : True if the set is subset of other , False otherwise.","title":"Return value:"},{"location":"usage/set/#s-other","text":"Return True if every element in the set is in other .","title":"s &lt;= other"},{"location":"usage/set/#argument","text":"other : Iterable[T] ; Iterable to check if this one contains all the elements in the set.","title":"Argument:"},{"location":"usage/set/#return-value_5","text":"bool : True if the set is subset of other , False otherwise.","title":"Return value:"},{"location":"usage/set/#s-other_1","text":"Return True if every element in the set is in other and s is not equal to other .","title":"s &lt; other"},{"location":"usage/set/#arguments_5","text":"other : Iterable[T] ; Iterable to check if it contains all elements of the set and is not equal to the set.","title":"Arguments:"},{"location":"usage/set/#return-value_6","text":"bool : True if the set is a proper subset of other , False otherwise.","title":"Return value:"},{"location":"usage/set/#issupersetother","text":"Return True if every element in other is in the set.","title":"issuperset(other)"},{"location":"usage/set/#arguments_6","text":"other : Iterable[T] ; Iterable to check if the elements are contained.","title":"Arguments:"},{"location":"usage/set/#return-value_7","text":"bool : True if the set is superset of other , False otherwise.","title":"Return value:"},{"location":"usage/set/#s-other_2","text":"Return True if every element in other is in the set.","title":"s &gt;= other"},{"location":"usage/set/#argument_1","text":"other : Iterable[T] ; Iterable to check if the elements are contained.","title":"Argument:"},{"location":"usage/set/#return-value_8","text":"bool : True if the set is superset of other , False otherwise.","title":"Return value:"},{"location":"usage/set/#s-other_3","text":"Return True if every element in other is in the set and s is not equal to other .","title":"s &gt; other"},{"location":"usage/set/#arguments_7","text":"other : Iterable[T] ; Iterable to check if it all elements are in the set and is not equal to the set.","title":"Arguments:"},{"location":"usage/set/#return-value_9","text":"bool : True if the set is a proper superset of other , False otherwise.","title":"Return value:"},{"location":"usage/set/#unionothers","text":"Return a new set with elements from the set and all others .","title":"union(*others)"},{"location":"usage/set/#arguments_8","text":"others : Iterable[T] ; Iterables to take the union.","title":"Arguments:"},{"location":"usage/set/#return-value_10","text":"Set[T] : A new set with elements from the set and all others .","title":"Return value:"},{"location":"usage/set/#s-other_4","text":"Return a new set with elements from s and other .","title":"s | other"},{"location":"usage/set/#arguments_9","text":"other : Iterable[T] ; Iterable to take the union.","title":"Arguments:"},{"location":"usage/set/#return-value_11","text":"Set[T] : A new set with elements from s and other .","title":"Return value:"},{"location":"usage/set/#intersectionothers","text":"Return a new set with elements common to the set and all others .","title":"intersection(*others)"},{"location":"usage/set/#arguments_10","text":"others : Iterable[T] ; Iterables to take the intersection.","title":"Arguments:"},{"location":"usage/set/#return-value_12","text":"Set[T] : A new set with elements common to the set and all others .","title":"Return value:"},{"location":"usage/set/#s-other_5","text":"Return a new set with elements common to s and other .","title":"s &amp; other"},{"location":"usage/set/#arguments_11","text":"other : Iterable[T] ; Iterable to take the intersection.","title":"Arguments:"},{"location":"usage/set/#return-value_13","text":"Set[T] : A new set with elements common to s and other .","title":"Return value:"},{"location":"usage/set/#differenceothers","text":"Return a new set with elements in the set that are not in the others .","title":"difference(*others)"},{"location":"usage/set/#arguments_12","text":"others : Iterable[T] ; Iterables to take the difference.","title":"Arguments:"},{"location":"usage/set/#return-value_14","text":"Set[T] : A new set with elements in the set that are not in the others .","title":"Return value:"},{"location":"usage/set/#s-other_6","text":"Return a new set with elements in the set that are not in the other .","title":"s - other"},{"location":"usage/set/#arguments_13","text":"other : Iterable[T] ; Iterable to take the difference.","title":"Arguments:"},{"location":"usage/set/#return-value_15","text":"Set[T] : A new set with elements in the set that are not in the other .","title":"Return value:"},{"location":"usage/set/#symmetric_differenceother","text":"Return a new set with elements in either the set or other but not both.","title":"symmetric_difference(other)"},{"location":"usage/set/#arguments_14","text":"other : Iterable[T] ; Iterable to take the symmetric difference.","title":"Arguments:"},{"location":"usage/set/#return-value_16","text":"Set[T] : A new set with elements in either the set or other but not both.","title":"Return value:"},{"location":"usage/set/#s-other_7","text":"Return a new set with elements in either the set or other but not both.","title":"s ^ other"},{"location":"usage/set/#arguments_15","text":"other : Iterable[T] ; Iterable to take the symmetric difference.","title":"Arguments:"},{"location":"usage/set/#return-value_17","text":"Set[T] : A new set with elements in either the set or other but not both.","title":"Return value:"},{"location":"usage/set/#copy","text":"Return a copy of the set. The actual behavior is to create a table with a unique table name and copy the elements to the new table. Therefore, unlike the built-in set copy, the behavior is similar to deep copy. Be aware that the copied set is volatile.","title":"copy()"},{"location":"usage/set/#return-value_18","text":"Set[T] : A volatile copy of the set.","title":"Return value:"},{"location":"usage/set/#updateothers","text":"Update the set by adding elements from all others .","title":"update(*others)"},{"location":"usage/set/#arguments_16","text":"others : Iterable[T] ; Iterables to take the union.","title":"Arguments:"},{"location":"usage/set/#return-value_19","text":"None .","title":"Return value:"},{"location":"usage/set/#s-other_8","text":"Update the set by adding elements from other .","title":"s |= other"},{"location":"usage/set/#arguments_17","text":"other : Iterable[T] ; Iterable to take the union.","title":"Arguments:"},{"location":"usage/set/#return-value_20","text":"None .","title":"Return value:"},{"location":"usage/set/#intersection_updateothers","text":"Update the set by keeping only elements found in the set and all others .","title":"intersection_update(*others)"},{"location":"usage/set/#arguments_18","text":"others : Iterable[T] ; Iterables to take the intersection.","title":"Arguments:"},{"location":"usage/set/#return-value_21","text":"None .","title":"Return value:"},{"location":"usage/set/#s-other_9","text":"Update the set by keeping only elements found in the set and other .","title":"s &amp;= other"},{"location":"usage/set/#arguments_19","text":"other : Iterable[T] ; Iterable to take the intersection.","title":"Arguments:"},{"location":"usage/set/#return-value_22","text":"None .","title":"Return value:"},{"location":"usage/set/#symmetric_difference_updateother","text":"Update the set by keeping only elements found in either the set or other but not both.","title":"symmetric_difference_update(other)"},{"location":"usage/set/#arguments_20","text":"other : Iterable[T] ; Iterable to take the symmetric difference.","title":"Arguments:"},{"location":"usage/set/#return-value_23","text":"None .","title":"Return value:"},{"location":"usage/set/#s-other_10","text":"Update the set by keeping only elements found in either the set or other but not both.","title":"s ^= other"},{"location":"usage/set/#arguments_21","text":"other : Iterable[T] ; Iterable to take the symmetric difference.","title":"Arguments:"},{"location":"usage/set/#return-value_24","text":"None .","title":"Return value:"},{"location":"usage/set/#addelem","text":"Add an element elem to the set.","title":"add(elem)"},{"location":"usage/set/#arguments_22","text":"elem : T ; An element to be added.","title":"Arguments:"},{"location":"usage/set/#return-value_25","text":"None .","title":"Return value:"},{"location":"usage/set/#removeelem","text":"Remove an element elem from the set. Raises KeyError if elem is not contained in the set.","title":"remove(elem)"},{"location":"usage/set/#arguemnts","text":"elem : T ; An element to be removed.","title":"Arguemnts:"},{"location":"usage/set/#return-value_26","text":"None .","title":"Return value:"},{"location":"usage/set/#discardelem","text":"Remove an element elem from the set if it is present.","title":"discard(elem)"},{"location":"usage/set/#arguments_23","text":"elem : T ; An element to be removed.","title":"Arguments:"},{"location":"usage/set/#return-value_27","text":"None .","title":"Return value:"},{"location":"usage/set/#pop","text":"Remove and return an arbitrary element from the set. Raises KeyError if the set is empty.","title":"pop()"},{"location":"usage/set/#return-value_28","text":"T : An element in the set.","title":"Return value:"},{"location":"usage/set/#clear","text":"Remove all elements from the set.","title":"clear()"},{"location":"usage/set/#return-value_29","text":"None .","title":"Return value:"},{"location":"usage/dictview/itemsview/","text":"ItemsView ItemsView is a view object which is returned by dict.items() . It provides a dynamic view on the dictionary's (key, value) tuples, which means when dictionay changes, the view reflects these changes. len(itemsview) Return the number of items in the dictionary d: Dict[KT, VT] where itemsview=d.items() . Return value: int : The number of items in d iter(itemsview) Return an iterator over the (key, value) tuples in the dictionary. The order of the items is guaranteed to be inserted order. Return value: Iterable[Tuple[_KT_co, _VT_co]] : The iterator over the keys in the dictionary. item in itemsview Return whether if item is in the dictionary. Arguments: item : object ; An object to be checked Return value: bool : True if item is in the dictionary and False otherwise. reversed(itemsview) Return a reverse iterator over the (key, value) tuples of the dictionary. (provided only python version 3.8 and above) Return value: Iterator[Tuple[_KT_co, _VT_co]] : The reverse iterator over the (key, value) tuples in the dictonary. itemsview & other Return a set with elements common to itemsview and other . Arguments: other : Iterable[Any] ; Iterable to take the intersection. Return value: Set[Tuple[_KT_co, _VT_co]] : A set with elements common to itemsview and other . other & itemsview Return a set with elements common to itemsview and other . Arguments: other : Iterable[_T] ; Iterable to take the intersection. Return value: Set[_T] : A set with elements common to itemsview and other . itemsview | other Return a new set with elements from itemsview and other . Arguments: other : Iterable[_T] ; Iterable to take the union. Return value: Set[Union[Tuple[_KT_co, _VT_co], _T]] : A new set with elements from itemsview and other . other | itemsview Return a new set with elements from itemsview and other . Arguments: other : Iterable[_T] ; Iterable to take the union. Return value: Set[Union[Tuple[_KT_co, _VT_co], _T]] : A new set with elements from itemsview and other . itemsview - other Return a new set with elements in the itemsview that are not in the other . Arguments: other : Iterable[Any] ; Iterable to take the difference. Return value: Set[Tuple[_KT_co, _VT_co]] : A new set with elements in the set that are not in the other . other - itemsview Return a new set with elements in the other that are not in the itemsview . Arguments: other : Iterable[_T] ; Iterable to take the difference. Return value: Set[_T] : A new set with elements in the other that are not in the itemsview . itemsview ^ other Return a new set with elements in either the itemsview or other but not both. Arguments: other : Iterable[_T] ; Iterable to take the symmetric difference. Return value Set[Union[Tuple[_KT_co, _VT_co], _T]] : A new set with elements in either the itemsview or other but not both. other ^ itemsview Return a new set with elements in either the itemsview or other but not both. Arguments: other : Iterable[_T] ; Iterable to take the symmetric difference. Return value Set[Union[Tuple[_KT_co, _VT_co], _T]] : A new set with elements in either the itemsview or other but not both. itemsview.mapping Return a MappingProxyType that wraps the original dictionary to which the view refers. (provided only python version 3.10 and above) Return value MappingProxyType : A read-only proxy of the original dictionary.","title":"ItemsView"},{"location":"usage/dictview/itemsview/#itemsview","text":"ItemsView is a view object which is returned by dict.items() . It provides a dynamic view on the dictionary's (key, value) tuples, which means when dictionay changes, the view reflects these changes.","title":"ItemsView"},{"location":"usage/dictview/itemsview/#lenitemsview","text":"Return the number of items in the dictionary d: Dict[KT, VT] where itemsview=d.items() .","title":"len(itemsview)"},{"location":"usage/dictview/itemsview/#return-value","text":"int : The number of items in d","title":"Return value:"},{"location":"usage/dictview/itemsview/#iteritemsview","text":"Return an iterator over the (key, value) tuples in the dictionary. The order of the items is guaranteed to be inserted order.","title":"iter(itemsview)"},{"location":"usage/dictview/itemsview/#return-value_1","text":"Iterable[Tuple[_KT_co, _VT_co]] : The iterator over the keys in the dictionary.","title":"Return value:"},{"location":"usage/dictview/itemsview/#item-in-itemsview","text":"Return whether if item is in the dictionary.","title":"item in itemsview"},{"location":"usage/dictview/itemsview/#arguments","text":"item : object ; An object to be checked","title":"Arguments:"},{"location":"usage/dictview/itemsview/#return-value_2","text":"bool : True if item is in the dictionary and False otherwise.","title":"Return value:"},{"location":"usage/dictview/itemsview/#reverseditemsview","text":"Return a reverse iterator over the (key, value) tuples of the dictionary. (provided only python version 3.8 and above)","title":"reversed(itemsview)"},{"location":"usage/dictview/itemsview/#return-value_3","text":"Iterator[Tuple[_KT_co, _VT_co]] : The reverse iterator over the (key, value) tuples in the dictonary.","title":"Return value:"},{"location":"usage/dictview/itemsview/#itemsview-other","text":"Return a set with elements common to itemsview and other .","title":"itemsview &amp; other"},{"location":"usage/dictview/itemsview/#arguments_1","text":"other : Iterable[Any] ; Iterable to take the intersection.","title":"Arguments:"},{"location":"usage/dictview/itemsview/#return-value_4","text":"Set[Tuple[_KT_co, _VT_co]] : A set with elements common to itemsview and other .","title":"Return value:"},{"location":"usage/dictview/itemsview/#other-itemsview","text":"Return a set with elements common to itemsview and other .","title":"other &amp; itemsview"},{"location":"usage/dictview/itemsview/#arguments_2","text":"other : Iterable[_T] ; Iterable to take the intersection.","title":"Arguments:"},{"location":"usage/dictview/itemsview/#return-value_5","text":"Set[_T] : A set with elements common to itemsview and other .","title":"Return value:"},{"location":"usage/dictview/itemsview/#itemsview-other_1","text":"Return a new set with elements from itemsview and other .","title":"itemsview | other"},{"location":"usage/dictview/itemsview/#arguments_3","text":"other : Iterable[_T] ; Iterable to take the union.","title":"Arguments:"},{"location":"usage/dictview/itemsview/#return-value_6","text":"Set[Union[Tuple[_KT_co, _VT_co], _T]] : A new set with elements from itemsview and other .","title":"Return value:"},{"location":"usage/dictview/itemsview/#other-itemsview_1","text":"Return a new set with elements from itemsview and other .","title":"other | itemsview"},{"location":"usage/dictview/itemsview/#arguments_4","text":"other : Iterable[_T] ; Iterable to take the union.","title":"Arguments:"},{"location":"usage/dictview/itemsview/#return-value_7","text":"Set[Union[Tuple[_KT_co, _VT_co], _T]] : A new set with elements from itemsview and other .","title":"Return value:"},{"location":"usage/dictview/itemsview/#itemsview-other_2","text":"Return a new set with elements in the itemsview that are not in the other .","title":"itemsview - other"},{"location":"usage/dictview/itemsview/#arguments_5","text":"other : Iterable[Any] ; Iterable to take the difference.","title":"Arguments:"},{"location":"usage/dictview/itemsview/#return-value_8","text":"Set[Tuple[_KT_co, _VT_co]] : A new set with elements in the set that are not in the other .","title":"Return value:"},{"location":"usage/dictview/itemsview/#other-itemsview_2","text":"Return a new set with elements in the other that are not in the itemsview .","title":"other - itemsview"},{"location":"usage/dictview/itemsview/#arguments_6","text":"other : Iterable[_T] ; Iterable to take the difference.","title":"Arguments:"},{"location":"usage/dictview/itemsview/#return-value_9","text":"Set[_T] : A new set with elements in the other that are not in the itemsview .","title":"Return value:"},{"location":"usage/dictview/itemsview/#itemsview-other_3","text":"Return a new set with elements in either the itemsview or other but not both.","title":"itemsview ^ other"},{"location":"usage/dictview/itemsview/#arguments_7","text":"other : Iterable[_T] ; Iterable to take the symmetric difference.","title":"Arguments:"},{"location":"usage/dictview/itemsview/#return-value_10","text":"Set[Union[Tuple[_KT_co, _VT_co], _T]] : A new set with elements in either the itemsview or other but not both.","title":"Return value"},{"location":"usage/dictview/itemsview/#other-itemsview_3","text":"Return a new set with elements in either the itemsview or other but not both.","title":"other ^ itemsview"},{"location":"usage/dictview/itemsview/#arguments_8","text":"other : Iterable[_T] ; Iterable to take the symmetric difference.","title":"Arguments:"},{"location":"usage/dictview/itemsview/#return-value_11","text":"Set[Union[Tuple[_KT_co, _VT_co], _T]] : A new set with elements in either the itemsview or other but not both.","title":"Return value"},{"location":"usage/dictview/itemsview/#itemsviewmapping","text":"Return a MappingProxyType that wraps the original dictionary to which the view refers. (provided only python version 3.10 and above)","title":"itemsview.mapping"},{"location":"usage/dictview/itemsview/#return-value_12","text":"MappingProxyType : A read-only proxy of the original dictionary.","title":"Return value"},{"location":"usage/dictview/keysview/","text":"KeysView KeysView is a view object which is returned by dict.keys() . It provides a dynamic view on the dictionary's keys, which means when dictionay changes, the view reflects these changes. len(keysview) Return the number of items in the dictionary d: Dict[KT, VT] where keysview=d.keys() . Return value: int : The number of items in d iter(keysview) Return an iterator over the keys in the dictionary. The order of the keys is guaranteed to be inserted order. Return value: Iterator[_KT_co] : The iterator over the keys in the dictonary. key in keysview Return whether if key is in the dictionary. Arguments: key : object ; An object to be checked Return value: bool : True if key is in the dictionary and False otherwise. reversed(keysview) Return a reverse iterator over the keys of the dictionary. (provided only python version 3.8 and above) Return value: Iterator[_KT_co] : The reverse iterator over the keys in the dictonary. keysview & other Return a set with elements common to keysview and other . Arguments: other : Iterable[Any] ; Iterable to take the intersection. Return value: Set[_KT_co] : A set with elements common to keysview and other . other & keysview Return a set with elements common to keysview and other . Arguments: other : Iterable[_T] ; Iterable to take the intersection. Return value: Set[_T] : A set with elements common to keysview and other . keysview | other Return a new set with elements from keysview and other . Arguments: other : Iterable[_T] ; Iterable to take the union. Return value: Set[Union[_KT_co, _T]] : A new set with elements from keysview and other . other | keysview Return a new set with elements from keysview and other . Arguments: other : Iterable[_T] ; Iterable to take the union. Return value: Set[Union[_KT_co, _T]] : A new set with elements from keysview and other . keysview - other Return a new set with elements in the keysview that are not in the other . Arguments: other : Iterable[Any] ; Iterable to take the difference. Return value: Set[_KT_co] : A new set with elements in the set that are not in the other . other - keysview Return a new set with elements in the other that are not in the keysview . Arguments: other : Iterable[_T] ; Iterable to be taken the difference. Return value: Set[_T] : A new set with elements in other that are not in the keysview . keysview ^ other Return a new set with elements in either the keysview or other but not both. Arguments: other : Iterable[_T] ; Iterable to take the symmetric difference. Return value Set[Union[_KT_co, _T]] : A new set with elements in either the keysview or other but not both. other ^ keysview Return a new set with elements in either the keysview or other but not both. Arguments: other : Iterable[_T] ; Iterable to take the symmetric difference. Return value Set[Union[_KT_co, _T]] : A new set with elements in either the keysview or other but not both. keysview.mapping Return a MappingProxyType that wraps the original dictionary to which the view refers. (provided only python version 3.10 and above) Return value MappingProxyType : A read-only proxy of the original dictionary.","title":"KeysView"},{"location":"usage/dictview/keysview/#keysview","text":"KeysView is a view object which is returned by dict.keys() . It provides a dynamic view on the dictionary's keys, which means when dictionay changes, the view reflects these changes.","title":"KeysView"},{"location":"usage/dictview/keysview/#lenkeysview","text":"Return the number of items in the dictionary d: Dict[KT, VT] where keysview=d.keys() .","title":"len(keysview)"},{"location":"usage/dictview/keysview/#return-value","text":"int : The number of items in d","title":"Return value:"},{"location":"usage/dictview/keysview/#iterkeysview","text":"Return an iterator over the keys in the dictionary. The order of the keys is guaranteed to be inserted order.","title":"iter(keysview)"},{"location":"usage/dictview/keysview/#return-value_1","text":"Iterator[_KT_co] : The iterator over the keys in the dictonary.","title":"Return value:"},{"location":"usage/dictview/keysview/#key-in-keysview","text":"Return whether if key is in the dictionary.","title":"key in keysview"},{"location":"usage/dictview/keysview/#arguments","text":"key : object ; An object to be checked","title":"Arguments:"},{"location":"usage/dictview/keysview/#return-value_2","text":"bool : True if key is in the dictionary and False otherwise.","title":"Return value:"},{"location":"usage/dictview/keysview/#reversedkeysview","text":"Return a reverse iterator over the keys of the dictionary. (provided only python version 3.8 and above)","title":"reversed(keysview)"},{"location":"usage/dictview/keysview/#return-value_3","text":"Iterator[_KT_co] : The reverse iterator over the keys in the dictonary.","title":"Return value:"},{"location":"usage/dictview/keysview/#keysview-other","text":"Return a set with elements common to keysview and other .","title":"keysview &amp; other"},{"location":"usage/dictview/keysview/#arguments_1","text":"other : Iterable[Any] ; Iterable to take the intersection.","title":"Arguments:"},{"location":"usage/dictview/keysview/#return-value_4","text":"Set[_KT_co] : A set with elements common to keysview and other .","title":"Return value:"},{"location":"usage/dictview/keysview/#other-keysview","text":"Return a set with elements common to keysview and other .","title":"other &amp; keysview"},{"location":"usage/dictview/keysview/#arguments_2","text":"other : Iterable[_T] ; Iterable to take the intersection.","title":"Arguments:"},{"location":"usage/dictview/keysview/#return-value_5","text":"Set[_T] : A set with elements common to keysview and other .","title":"Return value:"},{"location":"usage/dictview/keysview/#keysview-other_1","text":"Return a new set with elements from keysview and other .","title":"keysview | other"},{"location":"usage/dictview/keysview/#arguments_3","text":"other : Iterable[_T] ; Iterable to take the union.","title":"Arguments:"},{"location":"usage/dictview/keysview/#return-value_6","text":"Set[Union[_KT_co, _T]] : A new set with elements from keysview and other .","title":"Return value:"},{"location":"usage/dictview/keysview/#other-keysview_1","text":"Return a new set with elements from keysview and other .","title":"other | keysview"},{"location":"usage/dictview/keysview/#arguments_4","text":"other : Iterable[_T] ; Iterable to take the union.","title":"Arguments:"},{"location":"usage/dictview/keysview/#return-value_7","text":"Set[Union[_KT_co, _T]] : A new set with elements from keysview and other .","title":"Return value:"},{"location":"usage/dictview/keysview/#keysview-other_2","text":"Return a new set with elements in the keysview that are not in the other .","title":"keysview - other"},{"location":"usage/dictview/keysview/#arguments_5","text":"other : Iterable[Any] ; Iterable to take the difference.","title":"Arguments:"},{"location":"usage/dictview/keysview/#return-value_8","text":"Set[_KT_co] : A new set with elements in the set that are not in the other .","title":"Return value:"},{"location":"usage/dictview/keysview/#other-keysview_2","text":"Return a new set with elements in the other that are not in the keysview .","title":"other - keysview"},{"location":"usage/dictview/keysview/#arguments_6","text":"other : Iterable[_T] ; Iterable to be taken the difference.","title":"Arguments:"},{"location":"usage/dictview/keysview/#return-value_9","text":"Set[_T] : A new set with elements in other that are not in the keysview .","title":"Return value:"},{"location":"usage/dictview/keysview/#keysview-other_3","text":"Return a new set with elements in either the keysview or other but not both.","title":"keysview ^ other"},{"location":"usage/dictview/keysview/#arguments_7","text":"other : Iterable[_T] ; Iterable to take the symmetric difference.","title":"Arguments:"},{"location":"usage/dictview/keysview/#return-value_10","text":"Set[Union[_KT_co, _T]] : A new set with elements in either the keysview or other but not both.","title":"Return value"},{"location":"usage/dictview/keysview/#other-keysview_3","text":"Return a new set with elements in either the keysview or other but not both.","title":"other ^ keysview"},{"location":"usage/dictview/keysview/#arguments_8","text":"other : Iterable[_T] ; Iterable to take the symmetric difference.","title":"Arguments:"},{"location":"usage/dictview/keysview/#return-value_11","text":"Set[Union[_KT_co, _T]] : A new set with elements in either the keysview or other but not both.","title":"Return value"},{"location":"usage/dictview/keysview/#keysviewmapping","text":"Return a MappingProxyType that wraps the original dictionary to which the view refers. (provided only python version 3.10 and above)","title":"keysview.mapping"},{"location":"usage/dictview/keysview/#return-value_12","text":"MappingProxyType : A read-only proxy of the original dictionary.","title":"Return value"},{"location":"usage/dictview/valuesview/","text":"ValuesView ValuesView is a view object which is returned by dict.views() . It provides a dynamic view on the dictionary's values, which means when dictionay changes, the view reflects these changes. len(valuesview) Return the number of items in the dictionay d: Dict[KT, VT] where valuesview=d.values() . Return value: int : The number of items in d iter(valuesview) Return an iterator over the values in the dictionary. The order of the values is guaranteed to be inserted order. Return value: Iterator[_VT_co] : The iterator over the values in the dictionary. value in valuesview Return whether if value is in the dictionary. Arguments: value : object ; An object to be checked Return value: bool : True if value is in the dictionary and False otherwise. reversed(valuesview) Return a reverse iterator over the values of the dictionary. (provided only python version 3.8 and above) Return value: Iterator[_VT_co] : The reverse iterator over the values in the dictonary. valuesview.mapping Return a MappingProxyType that wraps the original dictionary to which the view refers. (provided only python version 3.10 and above) Return value MappingProxyType : A read-only proxy of the original dictionary.","title":"ValuesView"},{"location":"usage/dictview/valuesview/#valuesview","text":"ValuesView is a view object which is returned by dict.views() . It provides a dynamic view on the dictionary's values, which means when dictionay changes, the view reflects these changes.","title":"ValuesView"},{"location":"usage/dictview/valuesview/#lenvaluesview","text":"Return the number of items in the dictionay d: Dict[KT, VT] where valuesview=d.values() .","title":"len(valuesview)"},{"location":"usage/dictview/valuesview/#return-value","text":"int : The number of items in d","title":"Return value:"},{"location":"usage/dictview/valuesview/#itervaluesview","text":"Return an iterator over the values in the dictionary. The order of the values is guaranteed to be inserted order.","title":"iter(valuesview)"},{"location":"usage/dictview/valuesview/#return-value_1","text":"Iterator[_VT_co] : The iterator over the values in the dictionary.","title":"Return value:"},{"location":"usage/dictview/valuesview/#value-in-valuesview","text":"Return whether if value is in the dictionary.","title":"value in valuesview"},{"location":"usage/dictview/valuesview/#arguments","text":"value : object ; An object to be checked","title":"Arguments:"},{"location":"usage/dictview/valuesview/#return-value_2","text":"bool : True if value is in the dictionary and False otherwise.","title":"Return value:"},{"location":"usage/dictview/valuesview/#reversedvaluesview","text":"Return a reverse iterator over the values of the dictionary. (provided only python version 3.8 and above)","title":"reversed(valuesview)"},{"location":"usage/dictview/valuesview/#return-value_3","text":"Iterator[_VT_co] : The reverse iterator over the values in the dictonary.","title":"Return value:"},{"location":"usage/dictview/valuesview/#valuesviewmapping","text":"Return a MappingProxyType that wraps the original dictionary to which the view refers. (provided only python version 3.10 and above)","title":"valuesview.mapping"},{"location":"usage/dictview/valuesview/#return-value_4","text":"MappingProxyType : A read-only proxy of the original dictionary.","title":"Return value"}]}