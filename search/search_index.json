{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Overview Documentation for version: 1.1.0 sqlitecollections is a sort of containers that are backended by sqlite3 DB and are compatible with corresponding built-in collections. Since containers consume disk space instead of RAM, they can handle large amounts of data even in environments with limited RAM. Migrating from existing code using the built-in container is as simple as importing the library and changing the constructor. The elements of the container are automatically serialized and stored in the sqlite3 database, and are automatically read from the sqlite3 database and deserialized when accessed. Current version supports List (mutable sequence), Dict (mutable mapping) and Set (mutable set) and almost all methods are compatible with list, dict and set respectively. Installation pip install sqlitecollections Example import sqlitecollections as sc l = sc . List [ str ]([ \"Alice\" , \"Bob\" , \"Carol\" ]) print ( l [ 2 ]) #> Carol print ( len ( l )) #> 3 l . append ( \"Dave\" ) print ( l . index ( \"Bob\" )) #> 1 print ( l . index ( \"Dave\" )) #> 3 d = sc . Dict [ str , str ]({ \"a\" : \"Alice\" , \"b\" : \"Bob\" }) print ( d [ \"a\" ]) #> Alice d [ \"c\" ] = \"Carol\" print ( list ( d . keys ())) #> ['a', 'b', 'c'] print ( list ( d . values ())) #> ['Alice', 'Bob', 'Carol'] s = sc . Set [ str ]([ \"Alice\" , \"Bob\" , \"Carol\" , \"Dave\" ]) print ( \"Ellen\" in s ) #> False print ( \"Alice\" in s ) #> True print ( list ( s . intersection ([ \"Alice\" , \"Carol\" ]))) #> ['Alice', 'Carol'] In the above example, a temporary file is created every time a container is created, and the elements are written to the sqlite3 database created on the file, thus consuming very little RAM. If you want to reuse the container you created, you can create it by specifying the file path and table name of the sqlite3 database. import sqlitecollections as sc l = sc . List [ str ]([ \"Alice\" , \"Bob\" , \"Carol\" ], connection = \"path/to/file.db\" , table_name = \"list_example\" ) l . append ( \"Dave\" ) exit () When you load it, you can restore the previous state by specifying the same file path and table name. import sqlitecollections as sc l = sc . List [ str ]( connection = \"path/to/file.db\" , table_name = \"list_example\" ) print ( len ( l )) #> 4 print ( list ( l )) #> ['Alice', 'Bob', 'Carol', 'Dave'] Pros and cons for built-in containers Pros Save memory usage. Once the database is built, loading time is almost zero, even for huge data. Cons Each operation has the overhead of serialize/deserialize. Some operations are incompatible and unavailable. For example, directly rewriting the mutable elements of a container.","title":"Overview"},{"location":"#overview","text":"Documentation for version: 1.1.0 sqlitecollections is a sort of containers that are backended by sqlite3 DB and are compatible with corresponding built-in collections. Since containers consume disk space instead of RAM, they can handle large amounts of data even in environments with limited RAM. Migrating from existing code using the built-in container is as simple as importing the library and changing the constructor. The elements of the container are automatically serialized and stored in the sqlite3 database, and are automatically read from the sqlite3 database and deserialized when accessed. Current version supports List (mutable sequence), Dict (mutable mapping) and Set (mutable set) and almost all methods are compatible with list, dict and set respectively.","title":"Overview"},{"location":"#installation","text":"pip install sqlitecollections","title":"Installation"},{"location":"#example","text":"import sqlitecollections as sc l = sc . List [ str ]([ \"Alice\" , \"Bob\" , \"Carol\" ]) print ( l [ 2 ]) #> Carol print ( len ( l )) #> 3 l . append ( \"Dave\" ) print ( l . index ( \"Bob\" )) #> 1 print ( l . index ( \"Dave\" )) #> 3 d = sc . Dict [ str , str ]({ \"a\" : \"Alice\" , \"b\" : \"Bob\" }) print ( d [ \"a\" ]) #> Alice d [ \"c\" ] = \"Carol\" print ( list ( d . keys ())) #> ['a', 'b', 'c'] print ( list ( d . values ())) #> ['Alice', 'Bob', 'Carol'] s = sc . Set [ str ]([ \"Alice\" , \"Bob\" , \"Carol\" , \"Dave\" ]) print ( \"Ellen\" in s ) #> False print ( \"Alice\" in s ) #> True print ( list ( s . intersection ([ \"Alice\" , \"Carol\" ]))) #> ['Alice', 'Carol'] In the above example, a temporary file is created every time a container is created, and the elements are written to the sqlite3 database created on the file, thus consuming very little RAM. If you want to reuse the container you created, you can create it by specifying the file path and table name of the sqlite3 database. import sqlitecollections as sc l = sc . List [ str ]([ \"Alice\" , \"Bob\" , \"Carol\" ], connection = \"path/to/file.db\" , table_name = \"list_example\" ) l . append ( \"Dave\" ) exit () When you load it, you can restore the previous state by specifying the same file path and table name. import sqlitecollections as sc l = sc . List [ str ]( connection = \"path/to/file.db\" , table_name = \"list_example\" ) print ( len ( l )) #> 4 print ( list ( l )) #> ['Alice', 'Bob', 'Carol', 'Dave']","title":"Example"},{"location":"#pros-and-cons-for-built-in-containers","text":"","title":"Pros and cons for built-in containers"},{"location":"#pros","text":"Save memory usage. Once the database is built, loading time is almost zero, even for huge data.","title":"Pros"},{"location":"#cons","text":"Each operation has the overhead of serialize/deserialize. Some operations are incompatible and unavailable. For example, directly rewriting the mutable elements of a container.","title":"Cons"},{"location":"benchmark/","text":"py36 py37 py38 py39 py310 dict list set timing subject builtin sqlitecollections ratio class clear 0.00351 0.00588 1.67461 BenchmarkClear __contains__ 0.00346 0.00362 1.04625 BenchmarkContains copy 0.00355 0.00826 2.32858 BenchmarkCopy __delitem__ 0.00361 0.00674 1.86833 BenchmarkDelitem get 0.00349 0.00367 1.05039 BenchmarkGet get (unsuccessful search) 0.00349 0.00364 1.0427 BenchmarkGetDefault __getitem__ 0.0035 0.00369 1.05243 BenchmarkGetitem __init__ 0.00352 0.04357 12.37935 BenchmarkInit items 0.00387 0.01149 2.96612 BenchmarkItems __iter__ 0.00362 0.00788 2.17843 BenchmarkIter keys 0.00362 0.00813 2.24405 BenchmarkKeys __len__ 0.00366 0.00355 0.96946 BenchmarkLen __contains__ (unsuccessful search) 0.00355 0.00366 1.03187 BenchmarkNotContains pop 0.00359 0.0064 1.78186 BenchmarkPop pop (unsuccessful search) 0.0036 0.00518 1.4402 BenchmarkPopDefault popitem 0.0036 0.0069 1.91446 BenchmarkPopitem setdefault 0.00369 0.00534 1.44891 BenchmarkSetdefault setdefault (unsuccessful search) 0.00356 0.00571 1.60269 BenchmarkSetdefaultAddItem __setitem__ (add new item) 0.00364 0.00664 1.82757 BenchmarkSetitemAddNewItem __setitem__ (replace) 0.00362 0.00675 1.86453 BenchmarkSetitemReplace update 0.00357 0.00653 1.82684 BenchmarkUpdate update (many) 0.00452 0.57035 126.07845 BenchmarkUpdateMany values 0.0036 0.00781 2.16673 BenchmarkValues approximate memory usage subject builtin sqlitecollections ratio class clear 0.0 0.0 1.0 BenchmarkClear __contains__ 0.0 0.0 1.0 BenchmarkContains copy 0.04688 0.0 0.0 BenchmarkCopy __delitem__ 0.0 0.0 1.0 BenchmarkDelitem get 0.0 0.0 1.0 BenchmarkGet get (unsuccessful search) 0.0 0.0 1.0 BenchmarkGetDefault __getitem__ 0.0 0.0 1.0 BenchmarkGetitem __init__ 0.0 0.0 1.0 BenchmarkInit items 0.24219 0.40625 1.67742 BenchmarkItems __iter__ 0.0 0.0 1.0 BenchmarkIter keys 0.0 0.0 1.0 BenchmarkKeys __len__ 0.0 0.0 1.0 BenchmarkLen __contains__ (unsuccessful search) 0.0 0.0 1.0 BenchmarkNotContains pop 0.0 0.0 1.0 BenchmarkPop pop (unsuccessful search) 0.0 0.0 1.0 BenchmarkPopDefault popitem 0.0 0.0 1.0 BenchmarkPopitem setdefault 0.0 0.0 1.0 BenchmarkSetdefault setdefault (unsuccessful search) 0.0 0.0 1.0 BenchmarkSetdefaultAddItem __setitem__ (add new item) 0.0 0.0 1.0 BenchmarkSetitemAddNewItem __setitem__ (replace) 0.0 0.0 1.0 BenchmarkSetitemReplace update 0.0 0.0 1.0 BenchmarkUpdate update (many) 0.0 0.0 1.0 BenchmarkUpdateMany values 0.09375 0.0 0.0 BenchmarkValues timing subject builtin sqlitecollections ratio class __add__ 0.00357 0.00967 2.71074 BenchmarkAdd append 0.00362 0.00632 1.74823 BenchmarkAppend clear 0.00359 0.00637 1.77343 BenchmarkClear __contains__ 0.00359 0.00354 0.98555 BenchmarkContains copy 0.00356 0.00867 2.43914 BenchmarkCopy count 0.00358 0.00368 1.02791 BenchmarkCount __init__ 0.00356 0.02132 5.98038 BenchmarkCreateWithInitialData __delitem__ 0.00359 0.08261 23.04192 BenchmarkDelitem __delitem__ (slice) 0.0036 0.15457 42.94959 BenchmarkDelitemSlice __delitem__ (slice with skip) 0.00356 0.15544 43.62047 BenchmarkDelitemSliceSkip extend 0.0036 0.00621 1.72405 BenchmarkExtend __getitem__ 0.0036 0.00355 0.98582 BenchmarkGetitem __getitem__ (slice) 0.00354 0.08885 25.12971 BenchmarkGetitemSlice __getitem__ (slice with skip) 0.00352 0.01136 3.22449 BenchmarkGetitemSliceSkip __iadd__ 0.00359 0.00608 1.6911 BenchmarkIadd __imult__ 0.00356 0.23477 65.93165 BenchmarkImult index 0.00355 0.00386 1.08473 BenchmarkIndex index (unsuccessful search) 0.00356 0.00391 1.09916 BenchmarkIndexUnsuccessfulSearch insert 0.00369 0.15563 42.23166 BenchmarkInsert __len__ 0.0036 0.00353 0.9815 BenchmarkLen __mult__ 0.00367 0.23882 65.07557 BenchmarkMult __contains__ (unsuccessful search) 0.00362 0.00364 1.00501 BenchmarkNotContains pop 0.00366 0.08025 21.90218 BenchmarkPop remove 0.00363 0.11386 31.32714 BenchmarkRemove __setitem__ 0.00365 0.00621 1.70089 BenchmarkSetitem __setitem__ (slice) 0.00362 0.15878 43.90003 BenchmarkSetitemSlice __setitem__ (slice with skip) 0.00361 0.0149 4.12814 BenchmarkSetitemSliceSkip sort 0.00377 0.07992 21.21334 BenchmarkSort approximate memory usage subject builtin sqlitecollections ratio class __add__ 0.0 0.0 1.0 BenchmarkAdd append 0.0 0.0 1.0 BenchmarkAppend clear 0.0 0.0 1.0 BenchmarkClear __contains__ 0.0 0.0 1.0 BenchmarkContains copy 0.0 0.0 1.0 BenchmarkCopy count 0.0 0.0 1.0 BenchmarkCount __init__ 0.0 0.0 1.0 BenchmarkCreateWithInitialData __delitem__ 0.0 0.0 1.0 BenchmarkDelitem __delitem__ (slice) 0.0 0.0 1.0 BenchmarkDelitemSlice __delitem__ (slice with skip) 0.0 0.0 1.0 BenchmarkDelitemSliceSkip extend 0.0 0.0 1.0 BenchmarkExtend __getitem__ 0.0 0.0 1.0 BenchmarkGetitem __getitem__ (slice) 0.0 0.0 1.0 BenchmarkGetitemSlice __getitem__ (slice with skip) 0.0 0.0 1.0 BenchmarkGetitemSliceSkip __iadd__ 0.0 0.0 1.0 BenchmarkIadd __imult__ 0.0 0.0 1.0 BenchmarkImult index 0.0 0.0 1.0 BenchmarkIndex index (unsuccessful search) 0.0 0.0 1.0 BenchmarkIndexUnsuccessfulSearch insert 0.0 0.0 1.0 BenchmarkInsert __len__ 0.0 0.0 1.0 BenchmarkLen __mult__ 0.0 0.0 1.0 BenchmarkMult __contains__ (unsuccessful search) 0.0 0.0 1.0 BenchmarkNotContains pop 0.0 0.0 1.0 BenchmarkPop remove 0.0 0.0 1.0 BenchmarkRemove __setitem__ 0.0 0.0 1.0 BenchmarkSetitem __setitem__ (slice) 0.0 0.0 1.0 BenchmarkSetitemSlice __setitem__ (slice with skip) 0.0 0.0 1.0 BenchmarkSetitemSliceSkip sort 0.0 0.72656 inf BenchmarkSort timing subject builtin sqlitecollections ratio class add (existing item) 0.00335 0.00472 1.41143 BenchmarkAddExistingItem add (new item) 0.00349 0.00581 1.664 BenchmarkAddNewItem __and__ 0.00343 0.01007 2.93717 BenchmarkAnd clear 0.00345 0.00553 1.60481 BenchmarkClear __contains__ 0.00341 0.00343 1.0074 BenchmarkContains copy 0.0035 0.00759 2.16942 BenchmarkCopy difference 0.00341 0.00754 2.20805 BenchmarkDifference discard 0.0034 0.00576 1.6962 BenchmarkDiscard discard (no changes) 0.00344 0.00468 1.36066 BenchmarkDiscardNoChanges __ge__ 0.00345 0.00344 0.9971 BenchmarkGe __ge__ (not greater than or equals to) 0.0034 0.00398 1.17207 BenchmarkGeNot __gt__ 0.0034 0.02811 8.26569 BenchmarkGt __gt__ (not greater than) 0.00343 0.03201 9.33488 BenchmarkGtNot __iand__ 0.00345 0.00768 2.22594 BenchmarkIand __init__ 0.0035 0.01663 4.74677 BenchmarkInit intersection 0.00345 0.01019 2.94883 BenchmarkIntersection intersection_update 0.00341 0.00776 2.27451 BenchmarkIntersectionUpdate __ior__ 0.00348 0.00783 2.24979 BenchmarkIor isdisjoint 0.00346 0.00348 1.00608 BenchmarkIsdisjoint isdisjoint (not disjoint) 0.00353 0.00362 1.02592 BenchmarkIsdisjointNot issubset 0.00419 0.04505 10.75286 BenchmarkIssubset issubset (not subset) 0.00347 0.01064 3.06594 BenchmarkIssubsetNot issuperset 0.0035 0.02393 6.82814 BenchmarkIssuperset issuperset (not superset) 0.00348 0.00398 1.14334 BenchmarkIssupersetNot __ixor__ 0.00342 0.04003 11.68938 BenchmarkIxor __le__ 0.00341 0.00425 1.24657 BenchmarkLe __le__ (not less than or equals to) 0.00347 0.00345 0.99469 BenchmarkLeNot __len__ 0.00342 0.00343 1.00338 BenchmarkLen __lt__ 0.00345 0.0044 1.27515 BenchmarkLt __lt__ (not less than) 0.00346 0.00345 0.99747 BenchmarkLtNot __contains__ (unsuccessful search) 0.00345 0.00356 1.03234 BenchmarkNotContains __or__ 0.00356 0.0106 2.98133 BenchmarkOr pop 0.0035 0.00585 1.67002 BenchmarkPop remove 0.00345 0.00574 1.66312 BenchmarkRemove __sub__ 0.00346 0.00986 2.8532 BenchmarkSub symmetric_difference 0.00343 0.04261 12.43443 BenchmarkSymmetricDifference symmetric_difference_update 0.00346 0.03974 11.49968 BenchmarkSymmetricDifferenceUpdate union 0.00346 0.01004 2.90204 BenchmarkUnion update 0.00348 0.00754 2.16903 BenchmarkUpdate __xor__ 0.00347 0.04236 12.19846 BenchmarkXor approximate memory usage subject builtin sqlitecollections ratio class add (existing item) 0.0 0.0 1.0 BenchmarkAddExistingItem add (new item) 0.0 0.0 1.0 BenchmarkAddNewItem __and__ 0.0 0.0 1.0 BenchmarkAnd clear 0.0 0.0 1.0 BenchmarkClear __contains__ 0.0 0.0 1.0 BenchmarkContains copy 0.0 0.0 1.0 BenchmarkCopy difference 0.0 0.0 1.0 BenchmarkDifference discard 0.0 0.0 1.0 BenchmarkDiscard discard (no changes) 0.0 0.0 1.0 BenchmarkDiscardNoChanges __ge__ 0.0 0.0 1.0 BenchmarkGe __ge__ (not greater than or equals to) 0.0 0.0 1.0 BenchmarkGeNot __gt__ 0.0 0.0 1.0 BenchmarkGt __gt__ (not greater than) 0.0 0.0 1.0 BenchmarkGtNot __iand__ 0.0 0.0 1.0 BenchmarkIand __init__ 0.0 0.05078 inf BenchmarkInit intersection 0.0 0.0 1.0 BenchmarkIntersection intersection_update 0.0 0.0 1.0 BenchmarkIntersectionUpdate __ior__ 0.0 0.0 1.0 BenchmarkIor isdisjoint 0.0 0.0 1.0 BenchmarkIsdisjoint isdisjoint (not disjoint) 0.0 0.0 1.0 BenchmarkIsdisjointNot issubset 0.0 0.0 1.0 BenchmarkIssubset issubset (not subset) 0.0 0.0 1.0 BenchmarkIssubsetNot issuperset 0.0 0.0 1.0 BenchmarkIssuperset issuperset (not superset) 0.0 0.0 1.0 BenchmarkIssupersetNot __ixor__ 0.0 0.0 1.0 BenchmarkIxor __le__ 0.0 0.0 1.0 BenchmarkLe __le__ (not less than or equals to) 0.0 0.0 1.0 BenchmarkLeNot __len__ 0.0 0.0 1.0 BenchmarkLen __lt__ 0.0 0.0 1.0 BenchmarkLt __lt__ (not less than) 0.0 0.0 1.0 BenchmarkLtNot __contains__ (unsuccessful search) 0.0 0.0 1.0 BenchmarkNotContains __or__ 0.0 0.0 1.0 BenchmarkOr pop 0.0 0.0 1.0 BenchmarkPop remove 0.0 0.0 1.0 BenchmarkRemove __sub__ 0.0 0.0 1.0 BenchmarkSub symmetric_difference 0.0 0.0 1.0 BenchmarkSymmetricDifference symmetric_difference_update 0.0 0.0 1.0 BenchmarkSymmetricDifferenceUpdate union 0.0 0.0 1.0 BenchmarkUnion update 0.0 0.0 1.0 BenchmarkUpdate __xor__ 0.0 0.0 1.0 BenchmarkXor dict list set timing subject builtin sqlitecollections ratio class clear 0.00525 0.00954 1.81764 BenchmarkClear __contains__ 0.00582 0.0058 0.99757 BenchmarkContains copy 0.00454 0.01367 3.01282 BenchmarkCopy __delitem__ 0.00511 0.00931 1.82184 BenchmarkDelitem get 0.00518 0.00519 1.00072 BenchmarkGet get (unsuccessful search) 0.00467 0.00589 1.26093 BenchmarkGetDefault __getitem__ 0.0057 0.00533 0.93595 BenchmarkGetitem __init__ 0.0051 0.07146 14.02149 BenchmarkInit items 0.00735 0.01849 2.51384 BenchmarkItems __iter__ 0.00559 0.01135 2.02917 BenchmarkIter keys 0.00656 0.01117 1.703 BenchmarkKeys __len__ 0.00541 0.00485 0.89684 BenchmarkLen __contains__ (unsuccessful search) 0.00498 0.00518 1.0419 BenchmarkNotContains pop 0.00538 0.01081 2.00773 BenchmarkPop pop (unsuccessful search) 0.00564 0.00997 1.76781 BenchmarkPopDefault popitem 0.00537 0.01138 2.12005 BenchmarkPopitem setdefault 0.00519 0.00731 1.40737 BenchmarkSetdefault setdefault (unsuccessful search) 0.00552 0.0081 1.46676 BenchmarkSetdefaultAddItem __setitem__ (add new item) 0.00567 0.01138 2.00581 BenchmarkSetitemAddNewItem __setitem__ (replace) 0.00507 0.0098 1.93394 BenchmarkSetitemReplace update 0.00511 0.01069 2.09213 BenchmarkUpdate update (many) 0.00648 0.81361 125.60907 BenchmarkUpdateMany values 0.00503 0.01164 2.3124 BenchmarkValues approximate memory usage subject builtin sqlitecollections ratio class clear 0.0 0.0 1.0 BenchmarkClear __contains__ 0.0 0.0 1.0 BenchmarkContains copy 0.0625 0.0 0.0 BenchmarkCopy __delitem__ 0.0 0.0 1.0 BenchmarkDelitem get 0.0 0.0 1.0 BenchmarkGet get (unsuccessful search) 0.0 0.0 1.0 BenchmarkGetDefault __getitem__ 0.0 0.0 1.0 BenchmarkGetitem __init__ 0.0 0.0 1.0 BenchmarkInit items 0.125 0.22656 1.8125 BenchmarkItems __iter__ 0.0 0.0 1.0 BenchmarkIter keys 0.0 0.0 1.0 BenchmarkKeys __len__ 0.0 0.0 1.0 BenchmarkLen __contains__ (unsuccessful search) 0.0 0.0 1.0 BenchmarkNotContains pop 0.0 0.0 1.0 BenchmarkPop pop (unsuccessful search) 0.0 0.0 1.0 BenchmarkPopDefault popitem 0.0 0.0 1.0 BenchmarkPopitem setdefault 0.0 0.0 1.0 BenchmarkSetdefault setdefault (unsuccessful search) 0.0 0.0 1.0 BenchmarkSetdefaultAddItem __setitem__ (add new item) 0.0 0.0 1.0 BenchmarkSetitemAddNewItem __setitem__ (replace) 0.0 0.0 1.0 BenchmarkSetitemReplace update 0.0 0.0 1.0 BenchmarkUpdate update (many) 0.0 0.0 1.0 BenchmarkUpdateMany values 0.0 0.0 1.0 BenchmarkValues timing subject builtin sqlitecollections ratio class __add__ 0.00504 0.0153 3.03485 BenchmarkAdd append 0.00493 0.0089 1.80586 BenchmarkAppend clear 0.00524 0.00906 1.7288 BenchmarkClear __contains__ 0.00513 0.00505 0.98508 BenchmarkContains copy 0.00573 0.01708 2.97868 BenchmarkCopy count 0.00482 0.00501 1.03866 BenchmarkCount __init__ 0.00686 0.03598 5.24782 BenchmarkCreateWithInitialData __delitem__ 0.00487 0.10034 20.59513 BenchmarkDelitem __delitem__ (slice) 0.00462 0.17672 38.2826 BenchmarkDelitemSlice __delitem__ (slice with skip) 0.00428 0.17965 42.00627 BenchmarkDelitemSliceSkip extend 0.00452 0.00995 2.2012 BenchmarkExtend __getitem__ 0.00495 0.00496 1.00293 BenchmarkGetitem __getitem__ (slice) 0.00465 0.11023 23.70874 BenchmarkGetitemSlice __getitem__ (slice with skip) 0.00521 0.01933 3.70814 BenchmarkGetitemSliceSkip __iadd__ 0.00493 0.0088 1.78538 BenchmarkIadd __imult__ 0.00522 0.28341 54.30778 BenchmarkImult index 0.00467 0.00553 1.18327 BenchmarkIndex index (unsuccessful search) 0.0049 0.00547 1.11692 BenchmarkIndexUnsuccessfulSearch insert 0.00482 0.19381 40.19658 BenchmarkInsert __len__ 0.00461 0.00523 1.13305 BenchmarkLen __mult__ 0.0056 0.2889 51.61505 BenchmarkMult __contains__ (unsuccessful search) 0.00469 0.00472 1.00631 BenchmarkNotContains pop 0.00455 0.09792 21.52043 BenchmarkPop remove 0.00434 0.13315 30.69182 BenchmarkRemove __setitem__ 0.00483 0.0088 1.82277 BenchmarkSetitem __setitem__ (slice) 0.00487 0.19026 39.04462 BenchmarkSetitemSlice __setitem__ (slice with skip) 0.00461 0.02036 4.41698 BenchmarkSetitemSliceSkip sort 0.00559 0.10565 18.90563 BenchmarkSort approximate memory usage subject builtin sqlitecollections ratio class __add__ 0.0 0.0 1.0 BenchmarkAdd append 0.0 0.0 1.0 BenchmarkAppend clear 0.0 0.0 1.0 BenchmarkClear __contains__ 0.0 0.0 1.0 BenchmarkContains copy 0.0 0.0 1.0 BenchmarkCopy count 0.0 0.0 1.0 BenchmarkCount __init__ 0.0 0.0 1.0 BenchmarkCreateWithInitialData __delitem__ 0.0 0.0 1.0 BenchmarkDelitem __delitem__ (slice) 0.0 0.0 1.0 BenchmarkDelitemSlice __delitem__ (slice with skip) 0.0 0.0 1.0 BenchmarkDelitemSliceSkip extend 0.0 0.0 1.0 BenchmarkExtend __getitem__ 0.0 0.0 1.0 BenchmarkGetitem __getitem__ (slice) 0.0 0.0 1.0 BenchmarkGetitemSlice __getitem__ (slice with skip) 0.0 0.0 1.0 BenchmarkGetitemSliceSkip __iadd__ 0.0 0.0 1.0 BenchmarkIadd __imult__ 0.0 0.0 1.0 BenchmarkImult index 0.0 0.0 1.0 BenchmarkIndex index (unsuccessful search) 0.0 0.0 1.0 BenchmarkIndexUnsuccessfulSearch insert 0.0 0.0 1.0 BenchmarkInsert __len__ 0.0 0.0 1.0 BenchmarkLen __mult__ 0.0 0.0 1.0 BenchmarkMult __contains__ (unsuccessful search) 0.0 0.0 1.0 BenchmarkNotContains pop 0.0 0.0 1.0 BenchmarkPop remove 0.0 0.0 1.0 BenchmarkRemove __setitem__ 0.0 0.0 1.0 BenchmarkSetitem __setitem__ (slice) 0.0 0.0 1.0 BenchmarkSetitemSlice __setitem__ (slice with skip) 0.0 0.0 1.0 BenchmarkSetitemSliceSkip sort 0.0 0.63672 inf BenchmarkSort timing subject builtin sqlitecollections ratio class add (existing item) 0.00535 0.00778 1.45478 BenchmarkAddExistingItem add (new item) 0.00605 0.00869 1.43777 BenchmarkAddNewItem __and__ 0.00482 0.01843 3.82599 BenchmarkAnd clear 0.00524 0.0093 1.77501 BenchmarkClear __contains__ 0.00497 0.00482 0.96963 BenchmarkContains copy 0.00449 0.01171 2.60553 BenchmarkCopy difference 0.00448 0.01182 2.63692 BenchmarkDifference discard 0.00439 0.00871 1.98344 BenchmarkDiscard discard (no changes) 0.00445 0.00682 1.53308 BenchmarkDiscardNoChanges __ge__ 0.00495 0.0048 0.97062 BenchmarkGe __ge__ (not greater than or equals to) 0.00447 0.00769 1.71946 BenchmarkGeNot __gt__ 0.00445 0.00911 2.04839 BenchmarkGt __gt__ (not greater than) 0.00486 0.03795 7.81518 BenchmarkGtNot __iand__ 0.00453 0.01229 2.71332 BenchmarkIand __init__ 0.00455 0.02421 5.31879 BenchmarkInit intersection 0.00433 0.01592 3.6736 BenchmarkIntersection intersection_update 0.00459 0.01106 2.40925 BenchmarkIntersectionUpdate __ior__ 0.00432 0.01114 2.58234 BenchmarkIor isdisjoint 0.00547 0.0051 0.93301 BenchmarkIsdisjoint isdisjoint (not disjoint) 0.00475 0.0048 1.00936 BenchmarkIsdisjointNot issubset 0.00506 0.03887 7.67745 BenchmarkIssubset issubset (not subset) 0.00446 0.01731 3.88193 BenchmarkIssubsetNot issuperset 0.00565 0.02941 5.20628 BenchmarkIssuperset issuperset (not superset) 0.00494 0.00777 1.57356 BenchmarkIssupersetNot __ixor__ 0.00448 0.05207 11.61876 BenchmarkIxor __le__ 0.00512 0.00612 1.19523 BenchmarkLe __le__ (not less than or equals to) 0.00476 0.00501 1.05148 BenchmarkLeNot __len__ 0.00462 0.00459 0.99432 BenchmarkLen __lt__ 0.00485 0.00657 1.35486 BenchmarkLt __lt__ (not less than) 0.0047 0.00442 0.94235 BenchmarkLtNot __contains__ (unsuccessful search) 0.0045 0.00472 1.04835 BenchmarkNotContains __or__ 0.00491 0.01699 3.46244 BenchmarkOr pop 0.00485 0.00811 1.67127 BenchmarkPop remove 0.00558 0.00941 1.68576 BenchmarkRemove __sub__ 0.00493 0.01443 2.92383 BenchmarkSub symmetric_difference 0.00529 0.06237 11.79452 BenchmarkSymmetricDifference symmetric_difference_update 0.00532 0.05398 10.14396 BenchmarkSymmetricDifferenceUpdate union 0.00496 0.01696 3.42095 BenchmarkUnion update 0.00488 0.0124 2.54344 BenchmarkUpdate __xor__ 0.00586 0.06067 10.35967 BenchmarkXor approximate memory usage subject builtin sqlitecollections ratio class add (existing item) 0.0 0.0 1.0 BenchmarkAddExistingItem add (new item) 0.0 0.0 1.0 BenchmarkAddNewItem __and__ 0.0 0.0 1.0 BenchmarkAnd clear 0.0 0.0 1.0 BenchmarkClear __contains__ 0.0 0.0 1.0 BenchmarkContains copy 0.0 0.0 1.0 BenchmarkCopy difference 0.0 0.0 1.0 BenchmarkDifference discard 0.0 0.0 1.0 BenchmarkDiscard discard (no changes) 0.0 0.0 1.0 BenchmarkDiscardNoChanges __ge__ 0.0 0.0 1.0 BenchmarkGe __ge__ (not greater than or equals to) 0.0 0.0 1.0 BenchmarkGeNot __gt__ 0.0 0.0 1.0 BenchmarkGt __gt__ (not greater than) 0.0 0.0 1.0 BenchmarkGtNot __iand__ 0.0 0.0 1.0 BenchmarkIand __init__ 0.0 0.0 1.0 BenchmarkInit intersection 0.0 0.0 1.0 BenchmarkIntersection intersection_update 0.0 0.0 1.0 BenchmarkIntersectionUpdate __ior__ 0.0 0.0 1.0 BenchmarkIor isdisjoint 0.0 0.0 1.0 BenchmarkIsdisjoint isdisjoint (not disjoint) 0.0 0.0 1.0 BenchmarkIsdisjointNot issubset 0.0 0.0 1.0 BenchmarkIssubset issubset (not subset) 0.0 0.0 1.0 BenchmarkIssubsetNot issuperset 0.0 0.0 1.0 BenchmarkIssuperset issuperset (not superset) 0.0 0.0 1.0 BenchmarkIssupersetNot __ixor__ 0.0 0.0 1.0 BenchmarkIxor __le__ 0.0 0.0 1.0 BenchmarkLe __le__ (not less than or equals to) 0.0 0.0 1.0 BenchmarkLeNot __len__ 0.0 0.0 1.0 BenchmarkLen __lt__ 0.0 0.0 1.0 BenchmarkLt __lt__ (not less than) 0.0 0.0 1.0 BenchmarkLtNot __contains__ (unsuccessful search) 0.0 0.0 1.0 BenchmarkNotContains __or__ 0.0 0.0 1.0 BenchmarkOr pop 0.0 0.0 1.0 BenchmarkPop remove 0.0 0.0 1.0 BenchmarkRemove __sub__ 0.0 0.0 1.0 BenchmarkSub symmetric_difference 0.0 0.0 1.0 BenchmarkSymmetricDifference symmetric_difference_update 0.0 0.0 1.0 BenchmarkSymmetricDifferenceUpdate union 0.0 0.0 1.0 BenchmarkUnion update 0.0 0.0 1.0 BenchmarkUpdate __xor__ 0.0 0.0 1.0 BenchmarkXor dict list set timing subject builtin sqlitecollections ratio class clear 0.00501 0.00852 1.70231 BenchmarkClear __contains__ 0.00487 0.00517 1.06128 BenchmarkContains copy 0.00483 0.01258 2.60526 BenchmarkCopy __delitem__ 0.00491 0.0087 1.77161 BenchmarkDelitem get 0.00532 0.00533 1.00327 BenchmarkGet get (unsuccessful search) 0.005 0.00525 1.0488 BenchmarkGetDefault __getitem__ 0.00484 0.00526 1.08723 BenchmarkGetitem __init__ 0.00501 0.04748 9.48634 BenchmarkInit items 0.00562 0.01318 2.34351 BenchmarkItems __iter__ 0.00502 0.00981 1.95684 BenchmarkIter keys 0.00499 0.01008 2.01975 BenchmarkKeys __len__ 0.00485 0.00505 1.04017 BenchmarkLen __contains__ (unsuccessful search) 0.00524 0.00558 1.06556 BenchmarkNotContains pop 0.00493 0.0101 2.04987 BenchmarkPop pop (unsuccessful search) 0.00514 0.00736 1.43224 BenchmarkPopDefault popitem 0.00516 0.01063 2.06057 BenchmarkPopitem reversed 0.005 0.0098 1.96101 BenchmarkReversed setdefault 0.00499 0.00796 1.59446 BenchmarkSetdefault setdefault (unsuccessful search) 0.00501 0.00773 1.54176 BenchmarkSetdefaultAddItem __setitem__ (add new item) 0.00504 0.00967 1.918 BenchmarkSetitemAddNewItem __setitem__ (replace) 0.00498 0.01043 2.09356 BenchmarkSetitemReplace update 0.00526 0.00886 1.68412 BenchmarkUpdate update (many) 0.00623 0.71898 115.37703 BenchmarkUpdateMany values 0.005 0.00944 1.88828 BenchmarkValues approximate memory usage subject builtin sqlitecollections ratio class clear 0.0 0.0 1.0 BenchmarkClear __contains__ 0.0 0.0 1.0 BenchmarkContains copy 0.00781 0.0 0.0 BenchmarkCopy __delitem__ 0.0 0.0 1.0 BenchmarkDelitem get 0.0 0.0 1.0 BenchmarkGet get (unsuccessful search) 0.0 0.0 1.0 BenchmarkGetDefault __getitem__ 0.0 0.0 1.0 BenchmarkGetitem __init__ 0.0 0.0 1.0 BenchmarkInit items 0.125 0.13672 1.09375 BenchmarkItems __iter__ 0.0 0.0 1.0 BenchmarkIter keys 0.0 0.0 1.0 BenchmarkKeys __len__ 0.0 0.0 1.0 BenchmarkLen __contains__ (unsuccessful search) 0.0 0.0 1.0 BenchmarkNotContains pop 0.0 0.0 1.0 BenchmarkPop pop (unsuccessful search) 0.0 0.0 1.0 BenchmarkPopDefault popitem 0.0 0.0 1.0 BenchmarkPopitem reversed 0.0 0.0 1.0 BenchmarkReversed setdefault 0.0 0.0 1.0 BenchmarkSetdefault setdefault (unsuccessful search) 0.0 0.0 1.0 BenchmarkSetdefaultAddItem __setitem__ (add new item) 0.0 0.0 1.0 BenchmarkSetitemAddNewItem __setitem__ (replace) 0.0 0.0 1.0 BenchmarkSetitemReplace update 0.0 0.0 1.0 BenchmarkUpdate update (many) 0.0 0.0 1.0 BenchmarkUpdateMany values 0.03906 0.0 0.0 BenchmarkValues timing subject builtin sqlitecollections ratio class __add__ 0.00543 0.0131 2.41162 BenchmarkAdd append 0.00538 0.00898 1.67047 BenchmarkAppend clear 0.00496 0.00838 1.6882 BenchmarkClear __contains__ 0.00491 0.00501 1.02032 BenchmarkContains copy 0.00556 0.01141 2.05258 BenchmarkCopy count 0.00501 0.00521 1.04007 BenchmarkCount __init__ 0.00509 0.02412 4.74244 BenchmarkCreateWithInitialData __delitem__ 0.0053 0.1007 18.99423 BenchmarkDelitem __delitem__ (slice) 0.00497 0.19426 39.12509 BenchmarkDelitemSlice __delitem__ (slice with skip) 0.00517 0.19684 38.05483 BenchmarkDelitemSliceSkip extend 0.00553 0.00941 1.70119 BenchmarkExtend __getitem__ 0.00516 0.00526 1.02038 BenchmarkGetitem __getitem__ (slice) 0.00504 0.11186 22.19618 BenchmarkGetitemSlice __getitem__ (slice with skip) 0.00543 0.0166 3.05849 BenchmarkGetitemSliceSkip __iadd__ 0.00503 0.0087 1.7305 BenchmarkIadd __imult__ 0.00497 0.28799 57.94799 BenchmarkImult index 0.00541 0.00563 1.04028 BenchmarkIndex index (unsuccessful search) 0.0053 0.00546 1.03065 BenchmarkIndexUnsuccessfulSearch insert 0.00517 0.19098 36.95485 BenchmarkInsert __len__ 0.00492 0.00488 0.99292 BenchmarkLen __mult__ 0.0051 0.28876 56.61648 BenchmarkMult __contains__ (unsuccessful search) 0.00509 0.00537 1.0546 BenchmarkNotContains pop 0.00499 0.10658 21.33962 BenchmarkPop remove 0.00521 0.14287 27.39694 BenchmarkRemove __setitem__ 0.00521 0.00966 1.85216 BenchmarkSetitem __setitem__ (slice) 0.00497 0.19671 39.56578 BenchmarkSetitemSlice __setitem__ (slice with skip) 0.00515 0.01939 3.76658 BenchmarkSetitemSliceSkip sort 0.00515 0.10919 21.21141 BenchmarkSort approximate memory usage subject builtin sqlitecollections ratio class __add__ 0.0 0.0 1.0 BenchmarkAdd append 0.0 0.0 1.0 BenchmarkAppend clear 0.0 0.0 1.0 BenchmarkClear __contains__ 0.0 0.0 1.0 BenchmarkContains copy 0.0 0.0 1.0 BenchmarkCopy count 0.0 0.0 1.0 BenchmarkCount __init__ 0.0 0.0 1.0 BenchmarkCreateWithInitialData __delitem__ 0.0 0.0 1.0 BenchmarkDelitem __delitem__ (slice) 0.0 0.0 1.0 BenchmarkDelitemSlice __delitem__ (slice with skip) 0.0 0.0 1.0 BenchmarkDelitemSliceSkip extend 0.0 0.0 1.0 BenchmarkExtend __getitem__ 0.0 0.0 1.0 BenchmarkGetitem __getitem__ (slice) 0.0 0.0 1.0 BenchmarkGetitemSlice __getitem__ (slice with skip) 0.0 0.0 1.0 BenchmarkGetitemSliceSkip __iadd__ 0.0 0.0 1.0 BenchmarkIadd __imult__ 0.0 0.0 1.0 BenchmarkImult index 0.0 0.0 1.0 BenchmarkIndex index (unsuccessful search) 0.0 0.0 1.0 BenchmarkIndexUnsuccessfulSearch insert 0.0 0.0 1.0 BenchmarkInsert __len__ 0.0 0.0 1.0 BenchmarkLen __mult__ 0.0 0.0 1.0 BenchmarkMult __contains__ (unsuccessful search) 0.0 0.0 1.0 BenchmarkNotContains pop 0.0 0.0 1.0 BenchmarkPop remove 0.0 0.0 1.0 BenchmarkRemove __setitem__ 0.0 0.0 1.0 BenchmarkSetitem __setitem__ (slice) 0.0 0.0 1.0 BenchmarkSetitemSlice __setitem__ (slice with skip) 0.0 0.0 1.0 BenchmarkSetitemSliceSkip sort 0.0 0.64062 inf BenchmarkSort timing subject builtin sqlitecollections ratio class add (existing item) 0.00519 0.00845 1.6275 BenchmarkAddExistingItem add (new item) 0.00547 0.00914 1.67265 BenchmarkAddNewItem __and__ 0.00531 0.01631 3.0725 BenchmarkAnd clear 0.00537 0.00825 1.53528 BenchmarkClear __contains__ 0.00532 0.00555 1.04394 BenchmarkContains copy 0.0049 0.0149 3.03943 BenchmarkCopy difference 0.00487 0.01115 2.29139 BenchmarkDifference discard 0.00534 0.01209 2.26432 BenchmarkDiscard discard (no changes) 0.00496 0.00649 1.30877 BenchmarkDiscardNoChanges __ge__ 0.00482 0.00475 0.98629 BenchmarkGe __ge__ (not greater than or equals to) 0.00489 0.00565 1.15612 BenchmarkGeNot __gt__ 0.00486 0.02942 6.0583 BenchmarkGt __gt__ (not greater than) 0.00498 0.03741 7.50444 BenchmarkGtNot __iand__ 0.00532 0.01271 2.39178 BenchmarkIand __init__ 0.00483 0.02331 4.82023 BenchmarkInit intersection 0.0055 0.01515 2.75238 BenchmarkIntersection intersection_update 0.00483 0.01056 2.18406 BenchmarkIntersectionUpdate __ior__ 0.00491 0.0103 2.0953 BenchmarkIor isdisjoint 0.00533 0.00542 1.01696 BenchmarkIsdisjoint isdisjoint (not disjoint) 0.00496 0.00542 1.09346 BenchmarkIsdisjointNot issubset 0.00477 0.03613 7.56792 BenchmarkIssubset issubset (not subset) 0.00517 0.01496 2.89434 BenchmarkIssubsetNot issuperset 0.00484 0.02871 5.93344 BenchmarkIssuperset issuperset (not superset) 0.00532 0.00551 1.03627 BenchmarkIssupersetNot __ixor__ 0.00489 0.04727 9.6637 BenchmarkIxor __le__ 0.00508 0.00594 1.17099 BenchmarkLe __le__ (not less than or equals to) 0.00547 0.00475 0.86875 BenchmarkLeNot __len__ 0.00502 0.0047 0.93576 BenchmarkLen __lt__ 0.00519 0.0063 1.21442 BenchmarkLt __lt__ (not less than) 0.00496 0.00507 1.02276 BenchmarkLtNot __contains__ (unsuccessful search) 0.00504 0.00538 1.06694 BenchmarkNotContains __or__ 0.00518 0.01557 3.00347 BenchmarkOr pop 0.00496 0.00812 1.63744 BenchmarkPop remove 0.00502 0.0081 1.61403 BenchmarkRemove __sub__ 0.00489 0.0117 2.3948 BenchmarkSub symmetric_difference 0.00487 0.05431 11.14427 BenchmarkSymmetricDifference symmetric_difference_update 0.00493 0.0465 9.43349 BenchmarkSymmetricDifferenceUpdate union 0.00503 0.01485 2.95387 BenchmarkUnion update 0.00533 0.01109 2.08293 BenchmarkUpdate __xor__ 0.00488 0.05067 10.3911 BenchmarkXor approximate memory usage subject builtin sqlitecollections ratio class add (existing item) 0.0 0.0 1.0 BenchmarkAddExistingItem add (new item) 0.0 0.0 1.0 BenchmarkAddNewItem __and__ 0.0 0.0 1.0 BenchmarkAnd clear 0.0 0.0 1.0 BenchmarkClear __contains__ 0.0 0.0 1.0 BenchmarkContains copy 0.0 0.0 1.0 BenchmarkCopy difference 0.0 0.0 1.0 BenchmarkDifference discard 0.0 0.0 1.0 BenchmarkDiscard discard (no changes) 0.0 0.0 1.0 BenchmarkDiscardNoChanges __ge__ 0.0 0.0 1.0 BenchmarkGe __ge__ (not greater than or equals to) 0.0 0.0 1.0 BenchmarkGeNot __gt__ 0.0 0.0 1.0 BenchmarkGt __gt__ (not greater than) 0.0 0.0 1.0 BenchmarkGtNot __iand__ 0.0 0.0 1.0 BenchmarkIand __init__ 0.0 0.0 1.0 BenchmarkInit intersection 0.0 0.0 1.0 BenchmarkIntersection intersection_update 0.0 0.0 1.0 BenchmarkIntersectionUpdate __ior__ 0.0 0.0 1.0 BenchmarkIor isdisjoint 0.0 0.0 1.0 BenchmarkIsdisjoint isdisjoint (not disjoint) 0.0 0.0 1.0 BenchmarkIsdisjointNot issubset 0.0 0.0 1.0 BenchmarkIssubset issubset (not subset) 0.0 0.0 1.0 BenchmarkIssubsetNot issuperset 0.0 0.0 1.0 BenchmarkIssuperset issuperset (not superset) 0.0 0.0 1.0 BenchmarkIssupersetNot __ixor__ 0.0 0.0 1.0 BenchmarkIxor __le__ 0.0 0.0 1.0 BenchmarkLe __le__ (not less than or equals to) 0.0 0.0 1.0 BenchmarkLeNot __len__ 0.0 0.0 1.0 BenchmarkLen __lt__ 0.0 0.0 1.0 BenchmarkLt __lt__ (not less than) 0.0 0.0 1.0 BenchmarkLtNot __contains__ (unsuccessful search) 0.0 0.0 1.0 BenchmarkNotContains __or__ 0.0 0.0 1.0 BenchmarkOr pop 0.0 0.0 1.0 BenchmarkPop remove 0.0 0.0 1.0 BenchmarkRemove __sub__ 0.0 0.0 1.0 BenchmarkSub symmetric_difference 0.0 0.0 1.0 BenchmarkSymmetricDifference symmetric_difference_update 0.0 0.0 1.0 BenchmarkSymmetricDifferenceUpdate union 0.0 0.0 1.0 BenchmarkUnion update 0.0 0.0 1.0 BenchmarkUpdate __xor__ 0.0 0.0 1.0 BenchmarkXor dict list set timing subject builtin sqlitecollections ratio class clear 0.00496 0.01012 2.03949 BenchmarkClear __contains__ 0.00479 0.00516 1.07716 BenchmarkContains copy 0.0051 0.01302 2.55507 BenchmarkCopy __delitem__ 0.00492 0.00996 2.02524 BenchmarkDelitem get 0.00476 0.00515 1.08068 BenchmarkGet get (unsuccessful search) 0.0048 0.00505 1.05169 BenchmarkGetDefault __getitem__ 0.00504 0.00497 0.98671 BenchmarkGetitem __init__ 0.00504 0.05045 10.01674 BenchmarkInit __ior__ 0.0048 0.00998 2.07846 BenchmarkIor __ior__ (many) 0.00653 0.70038 107.29851 BenchmarkIorMany items 0.00575 0.01341 2.33086 BenchmarkItems __iter__ 0.00508 0.00965 1.90041 BenchmarkIter keys 0.00516 0.0095 1.8394 BenchmarkKeys __len__ 0.00553 0.00554 1.00103 BenchmarkLen __contains__ (unsuccessful search) 0.00506 0.00527 1.04127 BenchmarkNotContains __or__ 0.00489 0.01622 3.31924 BenchmarkOr __or__ (many) 0.00667 0.7026 105.31907 BenchmarkOrMany pop 0.0048 0.0095 1.97888 BenchmarkPop pop (unsuccessful search) 0.00489 0.00783 1.60061 BenchmarkPopDefault popitem 0.00495 0.01026 2.07428 BenchmarkPopitem reversed 0.00488 0.00918 1.87923 BenchmarkReversed setdefault 0.00495 0.00707 1.4274 BenchmarkSetdefault setdefault (unsuccessful search) 0.00492 0.00781 1.58572 BenchmarkSetdefaultAddItem __setitem__ (add new item) 0.00529 0.00952 1.79881 BenchmarkSetitemAddNewItem __setitem__ (replace) 0.00477 0.00987 2.06941 BenchmarkSetitemReplace update 0.00492 0.01133 2.30002 BenchmarkUpdate update (many) 0.00615 0.68205 110.89405 BenchmarkUpdateMany values 0.00461 0.00906 1.96481 BenchmarkValues approximate memory usage subject builtin sqlitecollections ratio class clear 0.0 0.0 1.0 BenchmarkClear __contains__ 0.0 0.0 1.0 BenchmarkContains copy 0.0 0.0 1.0 BenchmarkCopy __delitem__ 0.0 0.0 1.0 BenchmarkDelitem get 0.0 0.0 1.0 BenchmarkGet get (unsuccessful search) 0.0 0.0 1.0 BenchmarkGetDefault __getitem__ 0.0 0.0 1.0 BenchmarkGetitem __init__ 0.0 0.0 1.0 BenchmarkInit __ior__ 0.0 0.0 1.0 BenchmarkIor __ior__ (many) 0.1875 0.0 0.0 BenchmarkIorMany items 0.0 0.10938 inf BenchmarkItems __iter__ 0.0 0.0 1.0 BenchmarkIter keys 0.0 0.0 1.0 BenchmarkKeys __len__ 0.0 0.0 1.0 BenchmarkLen __contains__ (unsuccessful search) 0.0 0.0 1.0 BenchmarkNotContains __or__ 0.0 0.0 1.0 BenchmarkOr __or__ (many) 0.0 0.0 1.0 BenchmarkOrMany pop 0.0 0.0 1.0 BenchmarkPop pop (unsuccessful search) 0.0 0.0 1.0 BenchmarkPopDefault popitem 0.0 0.0 1.0 BenchmarkPopitem reversed 0.0 0.0 1.0 BenchmarkReversed setdefault 0.0 0.0 1.0 BenchmarkSetdefault setdefault (unsuccessful search) 0.0 0.0 1.0 BenchmarkSetdefaultAddItem __setitem__ (add new item) 0.0 0.0 1.0 BenchmarkSetitemAddNewItem __setitem__ (replace) 0.0 0.0 1.0 BenchmarkSetitemReplace update 0.0 0.0 1.0 BenchmarkUpdate update (many) 0.0 0.0 1.0 BenchmarkUpdateMany values 0.0 0.0 1.0 BenchmarkValues timing subject builtin sqlitecollections ratio class __add__ 0.0049 0.01576 3.21855 BenchmarkAdd append 0.00503 0.01029 2.04612 BenchmarkAppend clear 0.00498 0.00953 1.91485 BenchmarkClear __contains__ 0.00497 0.00477 0.96146 BenchmarkContains copy 0.00532 0.01235 2.32129 BenchmarkCopy count 0.00496 0.00497 1.00193 BenchmarkCount __init__ 0.00476 0.02663 5.59576 BenchmarkCreateWithInitialData __delitem__ 0.0049 0.10109 20.61522 BenchmarkDelitem __delitem__ (slice) 0.00495 0.18794 37.95795 BenchmarkDelitemSlice __delitem__ (slice with skip) 0.00483 0.18828 39.00872 BenchmarkDelitemSliceSkip extend 0.00481 0.00929 1.92966 BenchmarkExtend __getitem__ 0.00497 0.00497 0.99986 BenchmarkGetitem __getitem__ (slice) 0.00489 0.11183 22.86324 BenchmarkGetitemSlice __getitem__ (slice with skip) 0.0049 0.0183 3.73217 BenchmarkGetitemSliceSkip __iadd__ 0.00505 0.00963 1.90513 BenchmarkIadd __imult__ 0.00481 0.28712 59.70839 BenchmarkImult index 0.00511 0.00533 1.04249 BenchmarkIndex index (unsuccessful search) 0.00497 0.00558 1.12245 BenchmarkIndexUnsuccessfulSearch insert 0.00486 0.18802 38.68118 BenchmarkInsert __len__ 0.00474 0.00492 1.03874 BenchmarkLen __mult__ 0.00499 0.2899 58.12857 BenchmarkMult __contains__ (unsuccessful search) 0.00484 0.00507 1.04667 BenchmarkNotContains pop 0.00478 0.10286 21.50896 BenchmarkPop remove 0.00478 0.14037 29.38014 BenchmarkRemove __setitem__ 0.00512 0.00924 1.80414 BenchmarkSetitem __setitem__ (slice) 0.00494 0.19334 39.16712 BenchmarkSetitemSlice __setitem__ (slice with skip) 0.00532 0.02013 3.78614 BenchmarkSetitemSliceSkip sort 0.00502 0.10697 21.29843 BenchmarkSort approximate memory usage subject builtin sqlitecollections ratio class __add__ 0.0 0.0 1.0 BenchmarkAdd append 0.0 0.0 1.0 BenchmarkAppend clear 0.0 0.0 1.0 BenchmarkClear __contains__ 0.0 0.0 1.0 BenchmarkContains copy 0.0 0.0 1.0 BenchmarkCopy count 0.0 0.0 1.0 BenchmarkCount __init__ 0.0 0.0 1.0 BenchmarkCreateWithInitialData __delitem__ 0.0 0.0 1.0 BenchmarkDelitem __delitem__ (slice) 0.0 0.0 1.0 BenchmarkDelitemSlice __delitem__ (slice with skip) 0.0 0.0 1.0 BenchmarkDelitemSliceSkip extend 0.0 0.0 1.0 BenchmarkExtend __getitem__ 0.0 0.0 1.0 BenchmarkGetitem __getitem__ (slice) 0.0 0.0 1.0 BenchmarkGetitemSlice __getitem__ (slice with skip) 0.0 0.0 1.0 BenchmarkGetitemSliceSkip __iadd__ 0.0 0.0 1.0 BenchmarkIadd __imult__ 0.0 0.0 1.0 BenchmarkImult index 0.0 0.0 1.0 BenchmarkIndex index (unsuccessful search) 0.0 0.0 1.0 BenchmarkIndexUnsuccessfulSearch insert 0.0 0.0 1.0 BenchmarkInsert __len__ 0.0 0.0 1.0 BenchmarkLen __mult__ 0.0 0.0 1.0 BenchmarkMult __contains__ (unsuccessful search) 0.0 0.0 1.0 BenchmarkNotContains pop 0.0 0.0 1.0 BenchmarkPop remove 0.0 0.0 1.0 BenchmarkRemove __setitem__ 0.0 0.0 1.0 BenchmarkSetitem __setitem__ (slice) 0.0 0.0 1.0 BenchmarkSetitemSlice __setitem__ (slice with skip) 0.0 0.0 1.0 BenchmarkSetitemSliceSkip sort 0.0 0.59766 inf BenchmarkSort timing subject builtin sqlitecollections ratio class add (existing item) 0.00501 0.00762 1.52154 BenchmarkAddExistingItem add (new item) 0.00499 0.00889 1.78055 BenchmarkAddNewItem __and__ 0.00497 0.01481 2.9781 BenchmarkAnd clear 0.00528 0.00877 1.66066 BenchmarkClear __contains__ 0.00506 0.00541 1.06853 BenchmarkContains copy 0.00507 0.01173 2.31439 BenchmarkCopy difference 0.00539 0.01221 2.26508 BenchmarkDifference discard 0.00469 0.00898 1.91285 BenchmarkDiscard discard (no changes) 0.00478 0.00679 1.4212 BenchmarkDiscardNoChanges __ge__ 0.00468 0.0047 1.00284 BenchmarkGe __ge__ (not greater than or equals to) 0.00472 0.00473 1.00179 BenchmarkGeNot __gt__ 0.0054 0.01641 3.03689 BenchmarkGt __gt__ (not greater than) 0.00493 0.03902 7.90989 BenchmarkGtNot __iand__ 0.00487 0.01136 2.33433 BenchmarkIand __init__ 0.00495 0.03383 6.84045 BenchmarkInit intersection 0.00465 0.01577 3.39441 BenchmarkIntersection intersection_update 0.00479 0.01391 2.90207 BenchmarkIntersectionUpdate __ior__ 0.0047 0.01163 2.47287 BenchmarkIor isdisjoint 0.00474 0.0052 1.09685 BenchmarkIsdisjoint isdisjoint (not disjoint) 0.00473 0.00472 0.99917 BenchmarkIsdisjointNot issubset 0.00469 0.03922 8.36946 BenchmarkIssubset issubset (not subset) 0.00471 0.01726 3.66228 BenchmarkIssubsetNot issuperset 0.00471 0.02855 6.06248 BenchmarkIssuperset issuperset (not superset) 0.00472 0.00488 1.03433 BenchmarkIssupersetNot __ixor__ 0.00515 0.04934 9.58294 BenchmarkIxor __le__ 0.00482 0.00686 1.42472 BenchmarkLe __le__ (not less than or equals to) 0.00489 0.00492 1.00454 BenchmarkLeNot __len__ 0.00482 0.00464 0.96345 BenchmarkLen __lt__ 0.00459 0.00549 1.19705 BenchmarkLt __lt__ (not less than) 0.00495 0.00505 1.02079 BenchmarkLtNot __contains__ (unsuccessful search) 0.00471 0.0051 1.08271 BenchmarkNotContains __or__ 0.00494 0.01661 3.36437 BenchmarkOr pop 0.00494 0.00902 1.82541 BenchmarkPop remove 0.00527 0.00972 1.8464 BenchmarkRemove __sub__ 0.00508 0.01217 2.39536 BenchmarkSub symmetric_difference 0.00491 0.05393 10.98568 BenchmarkSymmetricDifference symmetric_difference_update 0.00506 0.04967 9.81881 BenchmarkSymmetricDifferenceUpdate union 0.00545 0.01674 3.07461 BenchmarkUnion update 0.00531 0.01088 2.04688 BenchmarkUpdate __xor__ 0.00496 0.05334 10.74413 BenchmarkXor approximate memory usage subject builtin sqlitecollections ratio class add (existing item) 0.0 0.0 1.0 BenchmarkAddExistingItem add (new item) 0.0 0.0 1.0 BenchmarkAddNewItem __and__ 0.0 0.0 1.0 BenchmarkAnd clear 0.0 0.0 1.0 BenchmarkClear __contains__ 0.0 0.0 1.0 BenchmarkContains copy 0.0 0.0 1.0 BenchmarkCopy difference 0.0 0.0 1.0 BenchmarkDifference discard 0.0 0.0 1.0 BenchmarkDiscard discard (no changes) 0.0 0.0 1.0 BenchmarkDiscardNoChanges __ge__ 0.0 0.0 1.0 BenchmarkGe __ge__ (not greater than or equals to) 0.0 0.0 1.0 BenchmarkGeNot __gt__ 0.0 0.0 1.0 BenchmarkGt __gt__ (not greater than) 0.0 0.0 1.0 BenchmarkGtNot __iand__ 0.0 0.0 1.0 BenchmarkIand __init__ 0.0 0.0 1.0 BenchmarkInit intersection 0.0 0.0 1.0 BenchmarkIntersection intersection_update 0.0 0.0 1.0 BenchmarkIntersectionUpdate __ior__ 0.0 0.0 1.0 BenchmarkIor isdisjoint 0.0 0.0 1.0 BenchmarkIsdisjoint isdisjoint (not disjoint) 0.0 0.0 1.0 BenchmarkIsdisjointNot issubset 0.0 0.0 1.0 BenchmarkIssubset issubset (not subset) 0.0 0.0 1.0 BenchmarkIssubsetNot issuperset 0.0 0.0 1.0 BenchmarkIssuperset issuperset (not superset) 0.0 0.0 1.0 BenchmarkIssupersetNot __ixor__ 0.0 0.0 1.0 BenchmarkIxor __le__ 0.0 0.0 1.0 BenchmarkLe __le__ (not less than or equals to) 0.0 0.0 1.0 BenchmarkLeNot __len__ 0.0 0.0 1.0 BenchmarkLen __lt__ 0.0 0.0 1.0 BenchmarkLt __lt__ (not less than) 0.0 0.0 1.0 BenchmarkLtNot __contains__ (unsuccessful search) 0.0 0.0 1.0 BenchmarkNotContains __or__ 0.0 0.0 1.0 BenchmarkOr pop 0.0 0.0 1.0 BenchmarkPop remove 0.0 0.0 1.0 BenchmarkRemove __sub__ 0.0 0.0 1.0 BenchmarkSub symmetric_difference 0.0 0.0 1.0 BenchmarkSymmetricDifference symmetric_difference_update 0.0 0.0 1.0 BenchmarkSymmetricDifferenceUpdate union 0.0 0.0 1.0 BenchmarkUnion update 0.0 0.0 1.0 BenchmarkUpdate __xor__ 0.0 0.0 1.0 BenchmarkXor dict list set timing subject builtin sqlitecollections ratio class clear 0.00382 0.00691 1.80946 BenchmarkClear __contains__ 0.00382 0.00397 1.03971 BenchmarkContains copy 0.00373 0.00918 2.46086 BenchmarkCopy __delitem__ 0.00393 0.00749 1.90295 BenchmarkDelitem get 0.00385 0.00405 1.05257 BenchmarkGet get (unsuccessful search) 0.00373 0.00389 1.04049 BenchmarkGetDefault __getitem__ 0.00367 0.00392 1.07021 BenchmarkGetitem __init__ 0.00386 0.03616 9.37397 BenchmarkInit __ior__ 0.00389 0.00706 1.81455 BenchmarkIor __ior__ (many) 0.00475 0.51862 109.19204 BenchmarkIorMany items 0.00427 0.01003 2.3505 BenchmarkItems __iter__ 0.00396 0.00769 1.94242 BenchmarkIter keys 0.00388 0.00757 1.9542 BenchmarkKeys __len__ 0.00388 0.00392 1.01028 BenchmarkLen __contains__ (unsuccessful search) 0.00387 0.00401 1.03741 BenchmarkNotContains __or__ 0.0037 0.01054 2.8484 BenchmarkOr __or__ (many) 0.005 0.52349 104.69309 BenchmarkOrMany pop 0.0039 0.00701 1.79681 BenchmarkPop pop (unsuccessful search) 0.00389 0.00541 1.3909 BenchmarkPopDefault popitem 0.00415 0.00723 1.74075 BenchmarkPopitem reversed 0.00391 0.00725 1.8532 BenchmarkReversed setdefault 0.00385 0.00548 1.42352 BenchmarkSetdefault setdefault (unsuccessful search) 0.0038 0.00588 1.54866 BenchmarkSetdefaultAddItem __setitem__ (add new item) 0.00385 0.00712 1.84947 BenchmarkSetitemAddNewItem __setitem__ (replace) 0.00383 0.0072 1.88085 BenchmarkSetitemReplace update 0.00387 0.00704 1.81935 BenchmarkUpdate update (many) 0.00467 0.5201 111.2694 BenchmarkUpdateMany values 0.00392 0.00717 1.82739 BenchmarkValues approximate memory usage subject builtin sqlitecollections ratio class clear 0.0 0.0 1.0 BenchmarkClear __contains__ 0.0 0.0 1.0 BenchmarkContains copy 0.0 0.0 1.0 BenchmarkCopy __delitem__ 0.0 0.0 1.0 BenchmarkDelitem get 0.0 0.0 1.0 BenchmarkGet get (unsuccessful search) 0.0 0.0 1.0 BenchmarkGetDefault __getitem__ 0.0 0.0 1.0 BenchmarkGetitem __init__ 0.0 0.0 1.0 BenchmarkInit __ior__ 0.0 0.0 1.0 BenchmarkIor __ior__ (many) 0.18359 0.0 0.0 BenchmarkIorMany items 0.0 0.21094 inf BenchmarkItems __iter__ 0.0 0.0 1.0 BenchmarkIter keys 0.0 0.0 1.0 BenchmarkKeys __len__ 0.0 0.0 1.0 BenchmarkLen __contains__ (unsuccessful search) 0.0 0.0 1.0 BenchmarkNotContains __or__ 0.0 0.0 1.0 BenchmarkOr __or__ (many) 0.0 0.0 1.0 BenchmarkOrMany pop 0.0 0.0 1.0 BenchmarkPop pop (unsuccessful search) 0.0 0.0 1.0 BenchmarkPopDefault popitem 0.0 0.0 1.0 BenchmarkPopitem reversed 0.0 0.0 1.0 BenchmarkReversed setdefault 0.0 0.0 1.0 BenchmarkSetdefault setdefault (unsuccessful search) 0.0 0.00391 inf BenchmarkSetdefaultAddItem __setitem__ (add new item) 0.0 0.0 1.0 BenchmarkSetitemAddNewItem __setitem__ (replace) 0.0 0.0 1.0 BenchmarkSetitemReplace update 0.0 0.0 1.0 BenchmarkUpdate update (many) 0.0 0.0 1.0 BenchmarkUpdateMany values 0.0 0.0 1.0 BenchmarkValues timing subject builtin sqlitecollections ratio class __add__ 0.00383 0.00945 2.46614 BenchmarkAdd append 0.00392 0.00662 1.6897 BenchmarkAppend clear 0.00403 0.00682 1.69002 BenchmarkClear __contains__ 0.00387 0.00382 0.9876 BenchmarkContains copy 0.00397 0.00956 2.40578 BenchmarkCopy count 0.00409 0.00405 0.98823 BenchmarkCount __init__ 0.00379 0.01818 4.80039 BenchmarkCreateWithInitialData __delitem__ 0.00399 0.07852 19.66666 BenchmarkDelitem __delitem__ (slice) 0.00391 0.14885 38.06318 BenchmarkDelitemSlice __delitem__ (slice with skip) 0.00401 0.14574 36.35798 BenchmarkDelitemSliceSkip extend 0.00396 0.00644 1.62793 BenchmarkExtend __getitem__ 0.00381 0.00436 1.14621 BenchmarkGetitem __getitem__ (slice) 0.0039 0.08197 20.99444 BenchmarkGetitemSlice __getitem__ (slice with skip) 0.00395 0.01207 3.05413 BenchmarkGetitemSliceSkip __iadd__ 0.00406 0.0067 1.64857 BenchmarkIadd __imult__ 0.00383 0.2183 57.04169 BenchmarkImult index 0.00392 0.00436 1.11044 BenchmarkIndex index (unsuccessful search) 0.004 0.0042 1.04855 BenchmarkIndexUnsuccessfulSearch insert 0.00398 0.14059 35.33812 BenchmarkInsert __len__ 0.00411 0.00404 0.98506 BenchmarkLen __mult__ 0.00381 0.21339 56.01496 BenchmarkMult __contains__ (unsuccessful search) 0.00385 0.004 1.03899 BenchmarkNotContains pop 0.00429 0.0819 19.10547 BenchmarkPop remove 0.00434 0.10914 25.16626 BenchmarkRemove __setitem__ 0.00401 0.00685 1.70559 BenchmarkSetitem __setitem__ (slice) 0.00393 0.14486 36.85745 BenchmarkSetitemSlice __setitem__ (slice with skip) 0.0039 0.01489 3.81553 BenchmarkSetitemSliceSkip sort 0.00392 0.0802 20.4343 BenchmarkSort approximate memory usage subject builtin sqlitecollections ratio class __add__ 0.0 0.0 1.0 BenchmarkAdd append 0.0 0.0 1.0 BenchmarkAppend clear 0.0 0.0 1.0 BenchmarkClear __contains__ 0.0 0.0 1.0 BenchmarkContains copy 0.0 0.0 1.0 BenchmarkCopy count 0.0 0.0 1.0 BenchmarkCount __init__ 0.0 0.0 1.0 BenchmarkCreateWithInitialData __delitem__ 0.0 0.0 1.0 BenchmarkDelitem __delitem__ (slice) 0.0 0.0 1.0 BenchmarkDelitemSlice __delitem__ (slice with skip) 0.0 0.0 1.0 BenchmarkDelitemSliceSkip extend 0.0 0.0 1.0 BenchmarkExtend __getitem__ 0.0 0.0 1.0 BenchmarkGetitem __getitem__ (slice) 0.0 0.0 1.0 BenchmarkGetitemSlice __getitem__ (slice with skip) 0.0 0.0 1.0 BenchmarkGetitemSliceSkip __iadd__ 0.0 0.0 1.0 BenchmarkIadd __imult__ 0.0 0.0 1.0 BenchmarkImult index 0.0 0.0 1.0 BenchmarkIndex index (unsuccessful search) 0.0 0.0 1.0 BenchmarkIndexUnsuccessfulSearch insert 0.0 0.0 1.0 BenchmarkInsert __len__ 0.0 0.0 1.0 BenchmarkLen __mult__ 0.0 0.0 1.0 BenchmarkMult __contains__ (unsuccessful search) 0.0 0.0 1.0 BenchmarkNotContains pop 0.0 0.0 1.0 BenchmarkPop remove 0.0 0.0 1.0 BenchmarkRemove __setitem__ 0.0 0.0 1.0 BenchmarkSetitem __setitem__ (slice) 0.0 0.0 1.0 BenchmarkSetitemSlice __setitem__ (slice with skip) 0.0 0.0 1.0 BenchmarkSetitemSliceSkip sort 0.0 0.64062 inf BenchmarkSort timing subject builtin sqlitecollections ratio class add (existing item) 0.00453 0.00595 1.31307 BenchmarkAddExistingItem add (new item) 0.00435 0.00661 1.5199 BenchmarkAddNewItem __and__ 0.00425 0.03145 7.40125 BenchmarkAnd clear 0.00418 0.00635 1.52012 BenchmarkClear __contains__ 0.00376 0.00386 1.02796 BenchmarkContains copy 0.00377 0.00844 2.23919 BenchmarkCopy difference 0.00377 0.0083 2.20324 BenchmarkDifference discard 0.00374 0.0065 1.73849 BenchmarkDiscard discard (no changes) 0.00388 0.00533 1.37291 BenchmarkDiscardNoChanges __ge__ 0.0038 0.00376 0.98946 BenchmarkGe __ge__ (not greater than or equals to) 0.00371 0.00428 1.15455 BenchmarkGeNot __gt__ 0.00387 0.00676 1.7483 BenchmarkGt __gt__ (not greater than) 0.00378 0.02762 7.31208 BenchmarkGtNot __iand__ 0.00373 0.00848 2.27434 BenchmarkIand __init__ 0.00374 0.02595 6.92953 BenchmarkInit intersection 0.00394 0.01114 2.82902 BenchmarkIntersection intersection_update 0.0039 0.00885 2.26753 BenchmarkIntersectionUpdate __ior__ 0.00393 0.00891 2.26625 BenchmarkIor isdisjoint 0.00431 0.00396 0.91924 BenchmarkIsdisjoint isdisjoint (not disjoint) 0.00377 0.0037 0.98008 BenchmarkIsdisjointNot issubset 0.00376 0.0277 7.37234 BenchmarkIssubset issubset (not subset) 0.00385 0.01143 2.967 BenchmarkIssubsetNot issuperset 0.00405 0.0225 5.56117 BenchmarkIssuperset issuperset (not superset) 0.00402 0.00434 1.08004 BenchmarkIssupersetNot __ixor__ 0.00383 0.03693 9.63778 BenchmarkIxor __le__ 0.0039 0.0047 1.20476 BenchmarkLe __le__ (not less than or equals to) 0.00403 0.00383 0.95248 BenchmarkLeNot __len__ 0.00377 0.00383 1.01734 BenchmarkLen __lt__ 0.00372 0.00471 1.26432 BenchmarkLt __lt__ (not less than) 0.00376 0.00377 1.00219 BenchmarkLtNot __contains__ (unsuccessful search) 0.00371 0.00385 1.03584 BenchmarkNotContains __or__ 0.00404 0.01103 2.73406 BenchmarkOr pop 0.00387 0.00694 1.79261 BenchmarkPop remove 0.00391 0.00631 1.61534 BenchmarkRemove __sub__ 0.00378 0.00911 2.40742 BenchmarkSub symmetric_difference 0.00412 0.03788 9.20085 BenchmarkSymmetricDifference symmetric_difference_update 0.0038 0.03633 9.55031 BenchmarkSymmetricDifferenceUpdate union 0.00387 0.01147 2.96538 BenchmarkUnion update 0.00388 0.00871 2.24277 BenchmarkUpdate __xor__ 0.00387 0.03841 9.91658 BenchmarkXor approximate memory usage subject builtin sqlitecollections ratio class add (existing item) 0.0 0.0 1.0 BenchmarkAddExistingItem add (new item) 0.0 0.0 1.0 BenchmarkAddNewItem __and__ 0.0 0.0 1.0 BenchmarkAnd clear 0.0 0.0 1.0 BenchmarkClear __contains__ 0.0 0.0 1.0 BenchmarkContains copy 0.0 0.0 1.0 BenchmarkCopy difference 0.0 0.0 1.0 BenchmarkDifference discard 0.0 0.0 1.0 BenchmarkDiscard discard (no changes) 0.0 0.0 1.0 BenchmarkDiscardNoChanges __ge__ 0.0 0.0 1.0 BenchmarkGe __ge__ (not greater than or equals to) 0.0 0.0 1.0 BenchmarkGeNot __gt__ 0.0 0.0 1.0 BenchmarkGt __gt__ (not greater than) 0.0 0.0 1.0 BenchmarkGtNot __iand__ 0.0 0.0 1.0 BenchmarkIand __init__ 0.0 0.0 1.0 BenchmarkInit intersection 0.0 0.0 1.0 BenchmarkIntersection intersection_update 0.0 0.0 1.0 BenchmarkIntersectionUpdate __ior__ 0.0 0.0 1.0 BenchmarkIor isdisjoint 0.0 0.0 1.0 BenchmarkIsdisjoint isdisjoint (not disjoint) 0.0 0.0 1.0 BenchmarkIsdisjointNot issubset 0.0 0.0 1.0 BenchmarkIssubset issubset (not subset) 0.0 0.0 1.0 BenchmarkIssubsetNot issuperset 0.0 0.0 1.0 BenchmarkIssuperset issuperset (not superset) 0.0 0.0 1.0 BenchmarkIssupersetNot __ixor__ 0.0 0.0 1.0 BenchmarkIxor __le__ 0.0 0.0 1.0 BenchmarkLe __le__ (not less than or equals to) 0.0 0.0 1.0 BenchmarkLeNot __len__ 0.0 0.0 1.0 BenchmarkLen __lt__ 0.0 0.0 1.0 BenchmarkLt __lt__ (not less than) 0.0 0.0 1.0 BenchmarkLtNot __contains__ (unsuccessful search) 0.0 0.0 1.0 BenchmarkNotContains __or__ 0.0 0.0 1.0 BenchmarkOr pop 0.0 0.0 1.0 BenchmarkPop remove 0.0 0.0 1.0 BenchmarkRemove __sub__ 0.0 0.0 1.0 BenchmarkSub symmetric_difference 0.0 0.0 1.0 BenchmarkSymmetricDifference symmetric_difference_update 0.0 0.0 1.0 BenchmarkSymmetricDifferenceUpdate union 0.0 0.0 1.0 BenchmarkUnion update 0.0 0.0 1.0 BenchmarkUpdate __xor__ 0.0 0.0 1.0 BenchmarkXor","title":"Benchmark"},{"location":"development/","text":"Development Tests, type checking and linting locally To run tests, type checking and linting locally, you'll need to have python 3.6 , 3.7 , 3.8 , 3.9 and 3.10 installed. We use tox to run tests and type checking on all the supported python versions. You can set up the development environment with the following commands: git clone git@github.com:osoken/sqlitecollections.git cd sqlitecollections python -m venv .venv source ./.venv/bin/activate pip install -e .[dev] Then, run tests is as easy as: tox After a while, you'll see the following message at the bottom of the long logs from pytest and others. __________________ summary __________________ lint: commands succeeded py36: commands succeeded py37: commands succeeded py38: commands succeeded py39: commands succeeded py310: commands succeeded congratulations :) Building documents We use mkdocs to build the documentation. To set up the environment for building the document, run the following commands: git clone git@github.com:osoken/sqlitecollections.git cd sqlitecollections python -m venv .venv source ./.venv/bin/activate pip install -e .[docs] Then, building the documentation can be done by the following command: mkdocs build The output will be located in site directory in your current directory. During development, you can also run mkdoc 's builtin development server with hot-reloading enabled with the following command: mkdocs serve In that case, you can check the result on http://127.0.0.1:8000 . Benchmarks We have our own benchmark package. Setup the benchmark package To setup, run the following commands: pip install docs/scbenchmarker Run all benchmarks and render the results Benchmarking is done in two steps: Step 1: Run all benchmarks python -m scbenchmarker --prefix=[prefix] benchmarking Step 2: Render the results to markdown: python -m scbenchmarker --prefix=[prefix] render Results are stored in docs/benchmark_results/[prefix]/ . You can check the results on http://127.0.0.1:8000/benchmark/ . Verbose mode python -m scbenchmarker --verbose --prefix=[prefix] benchmarking An example output is as follows: benchmark_dict.py::BenchmarkSetitemAddNewItem: {'subject': '`__setitem__` (add new item)', 'one': {'name': '`dict`', 'timing': 0.0026721060276031494, 'memory': 0.00390625}, 'another': {'name': '`sqlitecollections.Dict`', 'timing': 0.006042510271072388, 'memory': 0.00390625}, 'ratio': {'timing': 2.2613287828598834, 'memory': 1.0}} Run individual benchmarks You can also run individual benchmarks. python -m scbenchmarker --prefix=[prefix] benchmarking [benchmark script]::[benchmark name] This command runs only a single benchmark. Together with the verbose mode, this is convenient for improving a single method and checking benchmarks frequently. Compatibility policy We aim to implement containers that are as compatible as possible with the built-in containers, but we have a few implementations that intentionally behave differently. Normal behavior will be compatible, but in case of errors it may be different. The constructor arguments are not compatible, as they require arguments specific to this package's container, such as sqlite3 DB file paths and serialization methods. copy method in each container behaves similarly to deep copy, since it copies the table containing serialized elements. Dict 's item order is guaranteed to be insertion order not only for python 3.7 and upper but for all versions. Dict.fromkeys class method is not provided. Any member in the container cannot be mutated directly. If you want to mutate any member, mutate it via temporary variable then write it back. import sqlitecollections as sc x = sc . Dict ({ \"a\" : []}) # create {\"a\": []} x [ \"a\" ] . append ( \"b\" ) # try to mutate the empty list print ( x [ \"a\" ]) # not [\"b\"] but [] temp = x [ \"a\" ] # temporarily substitute the list to a variable temp . append ( \"b\" ) # mutate the temporary variable x [ \"a\" ] = temp # then, write it back print ( x [ \"a\" ]) # now, we get [\"b\"]","title":"Development"},{"location":"development/#development","text":"","title":"Development"},{"location":"development/#tests-type-checking-and-linting-locally","text":"To run tests, type checking and linting locally, you'll need to have python 3.6 , 3.7 , 3.8 , 3.9 and 3.10 installed. We use tox to run tests and type checking on all the supported python versions. You can set up the development environment with the following commands: git clone git@github.com:osoken/sqlitecollections.git cd sqlitecollections python -m venv .venv source ./.venv/bin/activate pip install -e .[dev] Then, run tests is as easy as: tox After a while, you'll see the following message at the bottom of the long logs from pytest and others. __________________ summary __________________ lint: commands succeeded py36: commands succeeded py37: commands succeeded py38: commands succeeded py39: commands succeeded py310: commands succeeded congratulations :)","title":"Tests, type checking and linting locally"},{"location":"development/#building-documents","text":"We use mkdocs to build the documentation. To set up the environment for building the document, run the following commands: git clone git@github.com:osoken/sqlitecollections.git cd sqlitecollections python -m venv .venv source ./.venv/bin/activate pip install -e .[docs] Then, building the documentation can be done by the following command: mkdocs build The output will be located in site directory in your current directory. During development, you can also run mkdoc 's builtin development server with hot-reloading enabled with the following command: mkdocs serve In that case, you can check the result on http://127.0.0.1:8000 .","title":"Building documents"},{"location":"development/#benchmarks","text":"We have our own benchmark package.","title":"Benchmarks"},{"location":"development/#setup-the-benchmark-package","text":"To setup, run the following commands: pip install docs/scbenchmarker","title":"Setup the benchmark package"},{"location":"development/#run-all-benchmarks-and-render-the-results","text":"Benchmarking is done in two steps: Step 1: Run all benchmarks python -m scbenchmarker --prefix=[prefix] benchmarking Step 2: Render the results to markdown: python -m scbenchmarker --prefix=[prefix] render Results are stored in docs/benchmark_results/[prefix]/ . You can check the results on http://127.0.0.1:8000/benchmark/ .","title":"Run all benchmarks and render the results"},{"location":"development/#verbose-mode","text":"python -m scbenchmarker --verbose --prefix=[prefix] benchmarking An example output is as follows: benchmark_dict.py::BenchmarkSetitemAddNewItem: {'subject': '`__setitem__` (add new item)', 'one': {'name': '`dict`', 'timing': 0.0026721060276031494, 'memory': 0.00390625}, 'another': {'name': '`sqlitecollections.Dict`', 'timing': 0.006042510271072388, 'memory': 0.00390625}, 'ratio': {'timing': 2.2613287828598834, 'memory': 1.0}}","title":"Verbose mode"},{"location":"development/#run-individual-benchmarks","text":"You can also run individual benchmarks. python -m scbenchmarker --prefix=[prefix] benchmarking [benchmark script]::[benchmark name] This command runs only a single benchmark. Together with the verbose mode, this is convenient for improving a single method and checking benchmarks frequently.","title":"Run individual benchmarks"},{"location":"development/#compatibility-policy","text":"We aim to implement containers that are as compatible as possible with the built-in containers, but we have a few implementations that intentionally behave differently. Normal behavior will be compatible, but in case of errors it may be different. The constructor arguments are not compatible, as they require arguments specific to this package's container, such as sqlite3 DB file paths and serialization methods. copy method in each container behaves similarly to deep copy, since it copies the table containing serialized elements. Dict 's item order is guaranteed to be insertion order not only for python 3.7 and upper but for all versions. Dict.fromkeys class method is not provided. Any member in the container cannot be mutated directly. If you want to mutate any member, mutate it via temporary variable then write it back. import sqlitecollections as sc x = sc . Dict ({ \"a\" : []}) # create {\"a\": []} x [ \"a\" ] . append ( \"b\" ) # try to mutate the empty list print ( x [ \"a\" ]) # not [\"b\"] but [] temp = x [ \"a\" ] # temporarily substitute the list to a variable temp . append ( \"b\" ) # mutate the temporary variable x [ \"a\" ] = temp # then, write it back print ( x [ \"a\" ]) # now, we get [\"b\"]","title":"Compatibility policy"},{"location":"install/","text":"Install pip install sqlitecollections","title":"Install"},{"location":"install/#install","text":"pip install sqlitecollections","title":"Install"},{"location":"benchmark_results/py310/dict/","text":"timing | subject | `builtin` | `sqlitecollections` | ratio | class | | :------ | --------: | ------------------: | ----: | :---- | | `clear` | 0.00382 | 0.00691 | 1.80946 | `BenchmarkClear` | | `__contains__` | 0.00382 | 0.00397 | 1.03971 | `BenchmarkContains` | | `copy` | 0.00373 | 0.00918 | 2.46086 | `BenchmarkCopy` | | `__delitem__` | 0.00393 | 0.00749 | 1.90295 | `BenchmarkDelitem` | | `get` | 0.00385 | 0.00405 | 1.05257 | `BenchmarkGet` | | `get (unsuccessful search)` | 0.00373 | 0.00389 | 1.04049 | `BenchmarkGetDefault` | | `__getitem__` | 0.00367 | 0.00392 | 1.07021 | `BenchmarkGetitem` | | `__init__` | 0.00386 | 0.03616 | 9.37397 | `BenchmarkInit` | | `__ior__` | 0.00389 | 0.00706 | 1.81455 | `BenchmarkIor` | | `__ior__` (many) | 0.00475 | 0.51862 | 109.19204 | `BenchmarkIorMany` | | `items` | 0.00427 | 0.01003 | 2.3505 | `BenchmarkItems` | | `__iter__` | 0.00396 | 0.00769 | 1.94242 | `BenchmarkIter` | | `keys` | 0.00388 | 0.00757 | 1.9542 | `BenchmarkKeys` | | `__len__` | 0.00388 | 0.00392 | 1.01028 | `BenchmarkLen` | | `__contains__` (unsuccessful search) | 0.00387 | 0.00401 | 1.03741 | `BenchmarkNotContains` | | `__or__` | 0.0037 | 0.01054 | 2.8484 | `BenchmarkOr` | | `__or__` (many) | 0.005 | 0.52349 | 104.69309 | `BenchmarkOrMany` | | `pop` | 0.0039 | 0.00701 | 1.79681 | `BenchmarkPop` | | `pop (unsuccessful search)` | 0.00389 | 0.00541 | 1.3909 | `BenchmarkPopDefault` | | `popitem` | 0.00415 | 0.00723 | 1.74075 | `BenchmarkPopitem` | | `reversed` | 0.00391 | 0.00725 | 1.8532 | `BenchmarkReversed` | | `setdefault` | 0.00385 | 0.00548 | 1.42352 | `BenchmarkSetdefault` | | `setdefault (unsuccessful search)` | 0.0038 | 0.00588 | 1.54866 | `BenchmarkSetdefaultAddItem` | | `__setitem__` (add new item) | 0.00385 | 0.00712 | 1.84947 | `BenchmarkSetitemAddNewItem` | | `__setitem__` (replace) | 0.00383 | 0.0072 | 1.88085 | `BenchmarkSetitemReplace` | | `update` | 0.00387 | 0.00704 | 1.81935 | `BenchmarkUpdate` | | `update` (many) | 0.00467 | 0.5201 | 111.2694 | `BenchmarkUpdateMany` | | `values` | 0.00392 | 0.00717 | 1.82739 | `BenchmarkValues` | approximate memory usage | subject | `builtin` | `sqlitecollections` | ratio | class | | :------ | --------: | ------------------: | ----: | :---- | | `clear` | 0.0 | 0.0 | 1.0 | `BenchmarkClear` | | `__contains__` | 0.0 | 0.0 | 1.0 | `BenchmarkContains` | | `copy` | 0.0 | 0.0 | 1.0 | `BenchmarkCopy` | | `__delitem__` | 0.0 | 0.0 | 1.0 | `BenchmarkDelitem` | | `get` | 0.0 | 0.0 | 1.0 | `BenchmarkGet` | | `get (unsuccessful search)` | 0.0 | 0.0 | 1.0 | `BenchmarkGetDefault` | | `__getitem__` | 0.0 | 0.0 | 1.0 | `BenchmarkGetitem` | | `__init__` | 0.0 | 0.0 | 1.0 | `BenchmarkInit` | | `__ior__` | 0.0 | 0.0 | 1.0 | `BenchmarkIor` | | `__ior__` (many) | 0.18359 | 0.0 | 0.0 | `BenchmarkIorMany` | | `items` | 0.0 | 0.21094 | inf | `BenchmarkItems` | | `__iter__` | 0.0 | 0.0 | 1.0 | `BenchmarkIter` | | `keys` | 0.0 | 0.0 | 1.0 | `BenchmarkKeys` | | `__len__` | 0.0 | 0.0 | 1.0 | `BenchmarkLen` | | `__contains__` (unsuccessful search) | 0.0 | 0.0 | 1.0 | `BenchmarkNotContains` | | `__or__` | 0.0 | 0.0 | 1.0 | `BenchmarkOr` | | `__or__` (many) | 0.0 | 0.0 | 1.0 | `BenchmarkOrMany` | | `pop` | 0.0 | 0.0 | 1.0 | `BenchmarkPop` | | `pop (unsuccessful search)` | 0.0 | 0.0 | 1.0 | `BenchmarkPopDefault` | | `popitem` | 0.0 | 0.0 | 1.0 | `BenchmarkPopitem` | | `reversed` | 0.0 | 0.0 | 1.0 | `BenchmarkReversed` | | `setdefault` | 0.0 | 0.0 | 1.0 | `BenchmarkSetdefault` | | `setdefault (unsuccessful search)` | 0.0 | 0.00391 | inf | `BenchmarkSetdefaultAddItem` | | `__setitem__` (add new item) | 0.0 | 0.0 | 1.0 | `BenchmarkSetitemAddNewItem` | | `__setitem__` (replace) | 0.0 | 0.0 | 1.0 | `BenchmarkSetitemReplace` | | `update` | 0.0 | 0.0 | 1.0 | `BenchmarkUpdate` | | `update` (many) | 0.0 | 0.0 | 1.0 | `BenchmarkUpdateMany` | | `values` | 0.0 | 0.0 | 1.0 | `BenchmarkValues` |","title":"Dict"},{"location":"benchmark_results/py310/list/","text":"timing | subject | `builtin` | `sqlitecollections` | ratio | class | | :------ | --------: | ------------------: | ----: | :---- | | `__add__` | 0.00383 | 0.00945 | 2.46614 | `BenchmarkAdd` | | `append` | 0.00392 | 0.00662 | 1.6897 | `BenchmarkAppend` | | `clear` | 0.00403 | 0.00682 | 1.69002 | `BenchmarkClear` | | `__contains__` | 0.00387 | 0.00382 | 0.9876 | `BenchmarkContains` | | `copy` | 0.00397 | 0.00956 | 2.40578 | `BenchmarkCopy` | | `count` | 0.00409 | 0.00405 | 0.98823 | `BenchmarkCount` | | `__init__` | 0.00379 | 0.01818 | 4.80039 | `BenchmarkCreateWithInitialData` | | `__delitem__` | 0.00399 | 0.07852 | 19.66666 | `BenchmarkDelitem` | | `__delitem__` (slice) | 0.00391 | 0.14885 | 38.06318 | `BenchmarkDelitemSlice` | | `__delitem__` (slice with skip) | 0.00401 | 0.14574 | 36.35798 | `BenchmarkDelitemSliceSkip` | | `extend` | 0.00396 | 0.00644 | 1.62793 | `BenchmarkExtend` | | `__getitem__` | 0.00381 | 0.00436 | 1.14621 | `BenchmarkGetitem` | | `__getitem__` (slice) | 0.0039 | 0.08197 | 20.99444 | `BenchmarkGetitemSlice` | | `__getitem__` (slice with skip) | 0.00395 | 0.01207 | 3.05413 | `BenchmarkGetitemSliceSkip` | | `__iadd__` | 0.00406 | 0.0067 | 1.64857 | `BenchmarkIadd` | | `__imult__` | 0.00383 | 0.2183 | 57.04169 | `BenchmarkImult` | | `index` | 0.00392 | 0.00436 | 1.11044 | `BenchmarkIndex` | | `index` (unsuccessful search) | 0.004 | 0.0042 | 1.04855 | `BenchmarkIndexUnsuccessfulSearch` | | `insert` | 0.00398 | 0.14059 | 35.33812 | `BenchmarkInsert` | | `__len__` | 0.00411 | 0.00404 | 0.98506 | `BenchmarkLen` | | `__mult__` | 0.00381 | 0.21339 | 56.01496 | `BenchmarkMult` | | `__contains__` (unsuccessful search) | 0.00385 | 0.004 | 1.03899 | `BenchmarkNotContains` | | `pop` | 0.00429 | 0.0819 | 19.10547 | `BenchmarkPop` | | `remove` | 0.00434 | 0.10914 | 25.16626 | `BenchmarkRemove` | | `__setitem__` | 0.00401 | 0.00685 | 1.70559 | `BenchmarkSetitem` | | `__setitem__` (slice) | 0.00393 | 0.14486 | 36.85745 | `BenchmarkSetitemSlice` | | `__setitem__` (slice with skip) | 0.0039 | 0.01489 | 3.81553 | `BenchmarkSetitemSliceSkip` | | `sort` | 0.00392 | 0.0802 | 20.4343 | `BenchmarkSort` | approximate memory usage | subject | `builtin` | `sqlitecollections` | ratio | class | | :------ | --------: | ------------------: | ----: | :---- | | `__add__` | 0.0 | 0.0 | 1.0 | `BenchmarkAdd` | | `append` | 0.0 | 0.0 | 1.0 | `BenchmarkAppend` | | `clear` | 0.0 | 0.0 | 1.0 | `BenchmarkClear` | | `__contains__` | 0.0 | 0.0 | 1.0 | `BenchmarkContains` | | `copy` | 0.0 | 0.0 | 1.0 | `BenchmarkCopy` | | `count` | 0.0 | 0.0 | 1.0 | `BenchmarkCount` | | `__init__` | 0.0 | 0.0 | 1.0 | `BenchmarkCreateWithInitialData` | | `__delitem__` | 0.0 | 0.0 | 1.0 | `BenchmarkDelitem` | | `__delitem__` (slice) | 0.0 | 0.0 | 1.0 | `BenchmarkDelitemSlice` | | `__delitem__` (slice with skip) | 0.0 | 0.0 | 1.0 | `BenchmarkDelitemSliceSkip` | | `extend` | 0.0 | 0.0 | 1.0 | `BenchmarkExtend` | | `__getitem__` | 0.0 | 0.0 | 1.0 | `BenchmarkGetitem` | | `__getitem__` (slice) | 0.0 | 0.0 | 1.0 | `BenchmarkGetitemSlice` | | `__getitem__` (slice with skip) | 0.0 | 0.0 | 1.0 | `BenchmarkGetitemSliceSkip` | | `__iadd__` | 0.0 | 0.0 | 1.0 | `BenchmarkIadd` | | `__imult__` | 0.0 | 0.0 | 1.0 | `BenchmarkImult` | | `index` | 0.0 | 0.0 | 1.0 | `BenchmarkIndex` | | `index` (unsuccessful search) | 0.0 | 0.0 | 1.0 | `BenchmarkIndexUnsuccessfulSearch` | | `insert` | 0.0 | 0.0 | 1.0 | `BenchmarkInsert` | | `__len__` | 0.0 | 0.0 | 1.0 | `BenchmarkLen` | | `__mult__` | 0.0 | 0.0 | 1.0 | `BenchmarkMult` | | `__contains__` (unsuccessful search) | 0.0 | 0.0 | 1.0 | `BenchmarkNotContains` | | `pop` | 0.0 | 0.0 | 1.0 | `BenchmarkPop` | | `remove` | 0.0 | 0.0 | 1.0 | `BenchmarkRemove` | | `__setitem__` | 0.0 | 0.0 | 1.0 | `BenchmarkSetitem` | | `__setitem__` (slice) | 0.0 | 0.0 | 1.0 | `BenchmarkSetitemSlice` | | `__setitem__` (slice with skip) | 0.0 | 0.0 | 1.0 | `BenchmarkSetitemSliceSkip` | | `sort` | 0.0 | 0.64062 | inf | `BenchmarkSort` |","title":"List"},{"location":"benchmark_results/py310/set/","text":"timing | subject | `builtin` | `sqlitecollections` | ratio | class | | :------ | --------: | ------------------: | ----: | :---- | | `add (existing item)` | 0.00453 | 0.00595 | 1.31307 | `BenchmarkAddExistingItem` | | `add (new item)` | 0.00435 | 0.00661 | 1.5199 | `BenchmarkAddNewItem` | | `__and__` | 0.00425 | 0.03145 | 7.40125 | `BenchmarkAnd` | | `clear` | 0.00418 | 0.00635 | 1.52012 | `BenchmarkClear` | | `__contains__` | 0.00376 | 0.00386 | 1.02796 | `BenchmarkContains` | | `copy` | 0.00377 | 0.00844 | 2.23919 | `BenchmarkCopy` | | `difference` | 0.00377 | 0.0083 | 2.20324 | `BenchmarkDifference` | | `discard` | 0.00374 | 0.0065 | 1.73849 | `BenchmarkDiscard` | | `discard (no changes)` | 0.00388 | 0.00533 | 1.37291 | `BenchmarkDiscardNoChanges` | | `__ge__` | 0.0038 | 0.00376 | 0.98946 | `BenchmarkGe` | | `__ge__` (not greater than or equals to) | 0.00371 | 0.00428 | 1.15455 | `BenchmarkGeNot` | | `__gt__` | 0.00387 | 0.00676 | 1.7483 | `BenchmarkGt` | | `__gt__` (not greater than) | 0.00378 | 0.02762 | 7.31208 | `BenchmarkGtNot` | | `__iand__` | 0.00373 | 0.00848 | 2.27434 | `BenchmarkIand` | | `__init__` | 0.00374 | 0.02595 | 6.92953 | `BenchmarkInit` | | `intersection` | 0.00394 | 0.01114 | 2.82902 | `BenchmarkIntersection` | | `intersection_update` | 0.0039 | 0.00885 | 2.26753 | `BenchmarkIntersectionUpdate` | | `__ior__` | 0.00393 | 0.00891 | 2.26625 | `BenchmarkIor` | | `isdisjoint` | 0.00431 | 0.00396 | 0.91924 | `BenchmarkIsdisjoint` | | `isdisjoint` (not disjoint) | 0.00377 | 0.0037 | 0.98008 | `BenchmarkIsdisjointNot` | | `issubset` | 0.00376 | 0.0277 | 7.37234 | `BenchmarkIssubset` | | `issubset` (not subset) | 0.00385 | 0.01143 | 2.967 | `BenchmarkIssubsetNot` | | `issuperset` | 0.00405 | 0.0225 | 5.56117 | `BenchmarkIssuperset` | | `issuperset` (not superset) | 0.00402 | 0.00434 | 1.08004 | `BenchmarkIssupersetNot` | | `__ixor__` | 0.00383 | 0.03693 | 9.63778 | `BenchmarkIxor` | | `__le__` | 0.0039 | 0.0047 | 1.20476 | `BenchmarkLe` | | `__le__` (not less than or equals to) | 0.00403 | 0.00383 | 0.95248 | `BenchmarkLeNot` | | `__len__` | 0.00377 | 0.00383 | 1.01734 | `BenchmarkLen` | | `__lt__` | 0.00372 | 0.00471 | 1.26432 | `BenchmarkLt` | | `__lt__` (not less than) | 0.00376 | 0.00377 | 1.00219 | `BenchmarkLtNot` | | `__contains__` (unsuccessful search) | 0.00371 | 0.00385 | 1.03584 | `BenchmarkNotContains` | | `__or__` | 0.00404 | 0.01103 | 2.73406 | `BenchmarkOr` | | `pop` | 0.00387 | 0.00694 | 1.79261 | `BenchmarkPop` | | `remove` | 0.00391 | 0.00631 | 1.61534 | `BenchmarkRemove` | | `__sub__` | 0.00378 | 0.00911 | 2.40742 | `BenchmarkSub` | | `symmetric_difference` | 0.00412 | 0.03788 | 9.20085 | `BenchmarkSymmetricDifference` | | `symmetric_difference_update` | 0.0038 | 0.03633 | 9.55031 | `BenchmarkSymmetricDifferenceUpdate` | | `union` | 0.00387 | 0.01147 | 2.96538 | `BenchmarkUnion` | | `update` | 0.00388 | 0.00871 | 2.24277 | `BenchmarkUpdate` | | `__xor__` | 0.00387 | 0.03841 | 9.91658 | `BenchmarkXor` | approximate memory usage | subject | `builtin` | `sqlitecollections` | ratio | class | | :------ | --------: | ------------------: | ----: | :---- | | `add (existing item)` | 0.0 | 0.0 | 1.0 | `BenchmarkAddExistingItem` | | `add (new item)` | 0.0 | 0.0 | 1.0 | `BenchmarkAddNewItem` | | `__and__` | 0.0 | 0.0 | 1.0 | `BenchmarkAnd` | | `clear` | 0.0 | 0.0 | 1.0 | `BenchmarkClear` | | `__contains__` | 0.0 | 0.0 | 1.0 | `BenchmarkContains` | | `copy` | 0.0 | 0.0 | 1.0 | `BenchmarkCopy` | | `difference` | 0.0 | 0.0 | 1.0 | `BenchmarkDifference` | | `discard` | 0.0 | 0.0 | 1.0 | `BenchmarkDiscard` | | `discard (no changes)` | 0.0 | 0.0 | 1.0 | `BenchmarkDiscardNoChanges` | | `__ge__` | 0.0 | 0.0 | 1.0 | `BenchmarkGe` | | `__ge__` (not greater than or equals to) | 0.0 | 0.0 | 1.0 | `BenchmarkGeNot` | | `__gt__` | 0.0 | 0.0 | 1.0 | `BenchmarkGt` | | `__gt__` (not greater than) | 0.0 | 0.0 | 1.0 | `BenchmarkGtNot` | | `__iand__` | 0.0 | 0.0 | 1.0 | `BenchmarkIand` | | `__init__` | 0.0 | 0.0 | 1.0 | `BenchmarkInit` | | `intersection` | 0.0 | 0.0 | 1.0 | `BenchmarkIntersection` | | `intersection_update` | 0.0 | 0.0 | 1.0 | `BenchmarkIntersectionUpdate` | | `__ior__` | 0.0 | 0.0 | 1.0 | `BenchmarkIor` | | `isdisjoint` | 0.0 | 0.0 | 1.0 | `BenchmarkIsdisjoint` | | `isdisjoint` (not disjoint) | 0.0 | 0.0 | 1.0 | `BenchmarkIsdisjointNot` | | `issubset` | 0.0 | 0.0 | 1.0 | `BenchmarkIssubset` | | `issubset` (not subset) | 0.0 | 0.0 | 1.0 | `BenchmarkIssubsetNot` | | `issuperset` | 0.0 | 0.0 | 1.0 | `BenchmarkIssuperset` | | `issuperset` (not superset) | 0.0 | 0.0 | 1.0 | `BenchmarkIssupersetNot` | | `__ixor__` | 0.0 | 0.0 | 1.0 | `BenchmarkIxor` | | `__le__` | 0.0 | 0.0 | 1.0 | `BenchmarkLe` | | `__le__` (not less than or equals to) | 0.0 | 0.0 | 1.0 | `BenchmarkLeNot` | | `__len__` | 0.0 | 0.0 | 1.0 | `BenchmarkLen` | | `__lt__` | 0.0 | 0.0 | 1.0 | `BenchmarkLt` | | `__lt__` (not less than) | 0.0 | 0.0 | 1.0 | `BenchmarkLtNot` | | `__contains__` (unsuccessful search) | 0.0 | 0.0 | 1.0 | `BenchmarkNotContains` | | `__or__` | 0.0 | 0.0 | 1.0 | `BenchmarkOr` | | `pop` | 0.0 | 0.0 | 1.0 | `BenchmarkPop` | | `remove` | 0.0 | 0.0 | 1.0 | `BenchmarkRemove` | | `__sub__` | 0.0 | 0.0 | 1.0 | `BenchmarkSub` | | `symmetric_difference` | 0.0 | 0.0 | 1.0 | `BenchmarkSymmetricDifference` | | `symmetric_difference_update` | 0.0 | 0.0 | 1.0 | `BenchmarkSymmetricDifferenceUpdate` | | `union` | 0.0 | 0.0 | 1.0 | `BenchmarkUnion` | | `update` | 0.0 | 0.0 | 1.0 | `BenchmarkUpdate` | | `__xor__` | 0.0 | 0.0 | 1.0 | `BenchmarkXor` |","title":"Set"},{"location":"benchmark_results/py36/dict/","text":"timing | subject | `builtin` | `sqlitecollections` | ratio | class | | :------ | --------: | ------------------: | ----: | :---- | | `clear` | 0.00351 | 0.00588 | 1.67461 | `BenchmarkClear` | | `__contains__` | 0.00346 | 0.00362 | 1.04625 | `BenchmarkContains` | | `copy` | 0.00355 | 0.00826 | 2.32858 | `BenchmarkCopy` | | `__delitem__` | 0.00361 | 0.00674 | 1.86833 | `BenchmarkDelitem` | | `get` | 0.00349 | 0.00367 | 1.05039 | `BenchmarkGet` | | `get (unsuccessful search)` | 0.00349 | 0.00364 | 1.0427 | `BenchmarkGetDefault` | | `__getitem__` | 0.0035 | 0.00369 | 1.05243 | `BenchmarkGetitem` | | `__init__` | 0.00352 | 0.04357 | 12.37935 | `BenchmarkInit` | | `items` | 0.00387 | 0.01149 | 2.96612 | `BenchmarkItems` | | `__iter__` | 0.00362 | 0.00788 | 2.17843 | `BenchmarkIter` | | `keys` | 0.00362 | 0.00813 | 2.24405 | `BenchmarkKeys` | | `__len__` | 0.00366 | 0.00355 | 0.96946 | `BenchmarkLen` | | `__contains__` (unsuccessful search) | 0.00355 | 0.00366 | 1.03187 | `BenchmarkNotContains` | | `pop` | 0.00359 | 0.0064 | 1.78186 | `BenchmarkPop` | | `pop (unsuccessful search)` | 0.0036 | 0.00518 | 1.4402 | `BenchmarkPopDefault` | | `popitem` | 0.0036 | 0.0069 | 1.91446 | `BenchmarkPopitem` | | `setdefault` | 0.00369 | 0.00534 | 1.44891 | `BenchmarkSetdefault` | | `setdefault (unsuccessful search)` | 0.00356 | 0.00571 | 1.60269 | `BenchmarkSetdefaultAddItem` | | `__setitem__` (add new item) | 0.00364 | 0.00664 | 1.82757 | `BenchmarkSetitemAddNewItem` | | `__setitem__` (replace) | 0.00362 | 0.00675 | 1.86453 | `BenchmarkSetitemReplace` | | `update` | 0.00357 | 0.00653 | 1.82684 | `BenchmarkUpdate` | | `update` (many) | 0.00452 | 0.57035 | 126.07845 | `BenchmarkUpdateMany` | | `values` | 0.0036 | 0.00781 | 2.16673 | `BenchmarkValues` | approximate memory usage | subject | `builtin` | `sqlitecollections` | ratio | class | | :------ | --------: | ------------------: | ----: | :---- | | `clear` | 0.0 | 0.0 | 1.0 | `BenchmarkClear` | | `__contains__` | 0.0 | 0.0 | 1.0 | `BenchmarkContains` | | `copy` | 0.04688 | 0.0 | 0.0 | `BenchmarkCopy` | | `__delitem__` | 0.0 | 0.0 | 1.0 | `BenchmarkDelitem` | | `get` | 0.0 | 0.0 | 1.0 | `BenchmarkGet` | | `get (unsuccessful search)` | 0.0 | 0.0 | 1.0 | `BenchmarkGetDefault` | | `__getitem__` | 0.0 | 0.0 | 1.0 | `BenchmarkGetitem` | | `__init__` | 0.0 | 0.0 | 1.0 | `BenchmarkInit` | | `items` | 0.24219 | 0.40625 | 1.67742 | `BenchmarkItems` | | `__iter__` | 0.0 | 0.0 | 1.0 | `BenchmarkIter` | | `keys` | 0.0 | 0.0 | 1.0 | `BenchmarkKeys` | | `__len__` | 0.0 | 0.0 | 1.0 | `BenchmarkLen` | | `__contains__` (unsuccessful search) | 0.0 | 0.0 | 1.0 | `BenchmarkNotContains` | | `pop` | 0.0 | 0.0 | 1.0 | `BenchmarkPop` | | `pop (unsuccessful search)` | 0.0 | 0.0 | 1.0 | `BenchmarkPopDefault` | | `popitem` | 0.0 | 0.0 | 1.0 | `BenchmarkPopitem` | | `setdefault` | 0.0 | 0.0 | 1.0 | `BenchmarkSetdefault` | | `setdefault (unsuccessful search)` | 0.0 | 0.0 | 1.0 | `BenchmarkSetdefaultAddItem` | | `__setitem__` (add new item) | 0.0 | 0.0 | 1.0 | `BenchmarkSetitemAddNewItem` | | `__setitem__` (replace) | 0.0 | 0.0 | 1.0 | `BenchmarkSetitemReplace` | | `update` | 0.0 | 0.0 | 1.0 | `BenchmarkUpdate` | | `update` (many) | 0.0 | 0.0 | 1.0 | `BenchmarkUpdateMany` | | `values` | 0.09375 | 0.0 | 0.0 | `BenchmarkValues` |","title":"Dict"},{"location":"benchmark_results/py36/list/","text":"timing | subject | `builtin` | `sqlitecollections` | ratio | class | | :------ | --------: | ------------------: | ----: | :---- | | `__add__` | 0.00357 | 0.00967 | 2.71074 | `BenchmarkAdd` | | `append` | 0.00362 | 0.00632 | 1.74823 | `BenchmarkAppend` | | `clear` | 0.00359 | 0.00637 | 1.77343 | `BenchmarkClear` | | `__contains__` | 0.00359 | 0.00354 | 0.98555 | `BenchmarkContains` | | `copy` | 0.00356 | 0.00867 | 2.43914 | `BenchmarkCopy` | | `count` | 0.00358 | 0.00368 | 1.02791 | `BenchmarkCount` | | `__init__` | 0.00356 | 0.02132 | 5.98038 | `BenchmarkCreateWithInitialData` | | `__delitem__` | 0.00359 | 0.08261 | 23.04192 | `BenchmarkDelitem` | | `__delitem__` (slice) | 0.0036 | 0.15457 | 42.94959 | `BenchmarkDelitemSlice` | | `__delitem__` (slice with skip) | 0.00356 | 0.15544 | 43.62047 | `BenchmarkDelitemSliceSkip` | | `extend` | 0.0036 | 0.00621 | 1.72405 | `BenchmarkExtend` | | `__getitem__` | 0.0036 | 0.00355 | 0.98582 | `BenchmarkGetitem` | | `__getitem__` (slice) | 0.00354 | 0.08885 | 25.12971 | `BenchmarkGetitemSlice` | | `__getitem__` (slice with skip) | 0.00352 | 0.01136 | 3.22449 | `BenchmarkGetitemSliceSkip` | | `__iadd__` | 0.00359 | 0.00608 | 1.6911 | `BenchmarkIadd` | | `__imult__` | 0.00356 | 0.23477 | 65.93165 | `BenchmarkImult` | | `index` | 0.00355 | 0.00386 | 1.08473 | `BenchmarkIndex` | | `index` (unsuccessful search) | 0.00356 | 0.00391 | 1.09916 | `BenchmarkIndexUnsuccessfulSearch` | | `insert` | 0.00369 | 0.15563 | 42.23166 | `BenchmarkInsert` | | `__len__` | 0.0036 | 0.00353 | 0.9815 | `BenchmarkLen` | | `__mult__` | 0.00367 | 0.23882 | 65.07557 | `BenchmarkMult` | | `__contains__` (unsuccessful search) | 0.00362 | 0.00364 | 1.00501 | `BenchmarkNotContains` | | `pop` | 0.00366 | 0.08025 | 21.90218 | `BenchmarkPop` | | `remove` | 0.00363 | 0.11386 | 31.32714 | `BenchmarkRemove` | | `__setitem__` | 0.00365 | 0.00621 | 1.70089 | `BenchmarkSetitem` | | `__setitem__` (slice) | 0.00362 | 0.15878 | 43.90003 | `BenchmarkSetitemSlice` | | `__setitem__` (slice with skip) | 0.00361 | 0.0149 | 4.12814 | `BenchmarkSetitemSliceSkip` | | `sort` | 0.00377 | 0.07992 | 21.21334 | `BenchmarkSort` | approximate memory usage | subject | `builtin` | `sqlitecollections` | ratio | class | | :------ | --------: | ------------------: | ----: | :---- | | `__add__` | 0.0 | 0.0 | 1.0 | `BenchmarkAdd` | | `append` | 0.0 | 0.0 | 1.0 | `BenchmarkAppend` | | `clear` | 0.0 | 0.0 | 1.0 | `BenchmarkClear` | | `__contains__` | 0.0 | 0.0 | 1.0 | `BenchmarkContains` | | `copy` | 0.0 | 0.0 | 1.0 | `BenchmarkCopy` | | `count` | 0.0 | 0.0 | 1.0 | `BenchmarkCount` | | `__init__` | 0.0 | 0.0 | 1.0 | `BenchmarkCreateWithInitialData` | | `__delitem__` | 0.0 | 0.0 | 1.0 | `BenchmarkDelitem` | | `__delitem__` (slice) | 0.0 | 0.0 | 1.0 | `BenchmarkDelitemSlice` | | `__delitem__` (slice with skip) | 0.0 | 0.0 | 1.0 | `BenchmarkDelitemSliceSkip` | | `extend` | 0.0 | 0.0 | 1.0 | `BenchmarkExtend` | | `__getitem__` | 0.0 | 0.0 | 1.0 | `BenchmarkGetitem` | | `__getitem__` (slice) | 0.0 | 0.0 | 1.0 | `BenchmarkGetitemSlice` | | `__getitem__` (slice with skip) | 0.0 | 0.0 | 1.0 | `BenchmarkGetitemSliceSkip` | | `__iadd__` | 0.0 | 0.0 | 1.0 | `BenchmarkIadd` | | `__imult__` | 0.0 | 0.0 | 1.0 | `BenchmarkImult` | | `index` | 0.0 | 0.0 | 1.0 | `BenchmarkIndex` | | `index` (unsuccessful search) | 0.0 | 0.0 | 1.0 | `BenchmarkIndexUnsuccessfulSearch` | | `insert` | 0.0 | 0.0 | 1.0 | `BenchmarkInsert` | | `__len__` | 0.0 | 0.0 | 1.0 | `BenchmarkLen` | | `__mult__` | 0.0 | 0.0 | 1.0 | `BenchmarkMult` | | `__contains__` (unsuccessful search) | 0.0 | 0.0 | 1.0 | `BenchmarkNotContains` | | `pop` | 0.0 | 0.0 | 1.0 | `BenchmarkPop` | | `remove` | 0.0 | 0.0 | 1.0 | `BenchmarkRemove` | | `__setitem__` | 0.0 | 0.0 | 1.0 | `BenchmarkSetitem` | | `__setitem__` (slice) | 0.0 | 0.0 | 1.0 | `BenchmarkSetitemSlice` | | `__setitem__` (slice with skip) | 0.0 | 0.0 | 1.0 | `BenchmarkSetitemSliceSkip` | | `sort` | 0.0 | 0.72656 | inf | `BenchmarkSort` |","title":"List"},{"location":"benchmark_results/py36/set/","text":"timing | subject | `builtin` | `sqlitecollections` | ratio | class | | :------ | --------: | ------------------: | ----: | :---- | | `add (existing item)` | 0.00335 | 0.00472 | 1.41143 | `BenchmarkAddExistingItem` | | `add (new item)` | 0.00349 | 0.00581 | 1.664 | `BenchmarkAddNewItem` | | `__and__` | 0.00343 | 0.01007 | 2.93717 | `BenchmarkAnd` | | `clear` | 0.00345 | 0.00553 | 1.60481 | `BenchmarkClear` | | `__contains__` | 0.00341 | 0.00343 | 1.0074 | `BenchmarkContains` | | `copy` | 0.0035 | 0.00759 | 2.16942 | `BenchmarkCopy` | | `difference` | 0.00341 | 0.00754 | 2.20805 | `BenchmarkDifference` | | `discard` | 0.0034 | 0.00576 | 1.6962 | `BenchmarkDiscard` | | `discard (no changes)` | 0.00344 | 0.00468 | 1.36066 | `BenchmarkDiscardNoChanges` | | `__ge__` | 0.00345 | 0.00344 | 0.9971 | `BenchmarkGe` | | `__ge__` (not greater than or equals to) | 0.0034 | 0.00398 | 1.17207 | `BenchmarkGeNot` | | `__gt__` | 0.0034 | 0.02811 | 8.26569 | `BenchmarkGt` | | `__gt__` (not greater than) | 0.00343 | 0.03201 | 9.33488 | `BenchmarkGtNot` | | `__iand__` | 0.00345 | 0.00768 | 2.22594 | `BenchmarkIand` | | `__init__` | 0.0035 | 0.01663 | 4.74677 | `BenchmarkInit` | | `intersection` | 0.00345 | 0.01019 | 2.94883 | `BenchmarkIntersection` | | `intersection_update` | 0.00341 | 0.00776 | 2.27451 | `BenchmarkIntersectionUpdate` | | `__ior__` | 0.00348 | 0.00783 | 2.24979 | `BenchmarkIor` | | `isdisjoint` | 0.00346 | 0.00348 | 1.00608 | `BenchmarkIsdisjoint` | | `isdisjoint` (not disjoint) | 0.00353 | 0.00362 | 1.02592 | `BenchmarkIsdisjointNot` | | `issubset` | 0.00419 | 0.04505 | 10.75286 | `BenchmarkIssubset` | | `issubset` (not subset) | 0.00347 | 0.01064 | 3.06594 | `BenchmarkIssubsetNot` | | `issuperset` | 0.0035 | 0.02393 | 6.82814 | `BenchmarkIssuperset` | | `issuperset` (not superset) | 0.00348 | 0.00398 | 1.14334 | `BenchmarkIssupersetNot` | | `__ixor__` | 0.00342 | 0.04003 | 11.68938 | `BenchmarkIxor` | | `__le__` | 0.00341 | 0.00425 | 1.24657 | `BenchmarkLe` | | `__le__` (not less than or equals to) | 0.00347 | 0.00345 | 0.99469 | `BenchmarkLeNot` | | `__len__` | 0.00342 | 0.00343 | 1.00338 | `BenchmarkLen` | | `__lt__` | 0.00345 | 0.0044 | 1.27515 | `BenchmarkLt` | | `__lt__` (not less than) | 0.00346 | 0.00345 | 0.99747 | `BenchmarkLtNot` | | `__contains__` (unsuccessful search) | 0.00345 | 0.00356 | 1.03234 | `BenchmarkNotContains` | | `__or__` | 0.00356 | 0.0106 | 2.98133 | `BenchmarkOr` | | `pop` | 0.0035 | 0.00585 | 1.67002 | `BenchmarkPop` | | `remove` | 0.00345 | 0.00574 | 1.66312 | `BenchmarkRemove` | | `__sub__` | 0.00346 | 0.00986 | 2.8532 | `BenchmarkSub` | | `symmetric_difference` | 0.00343 | 0.04261 | 12.43443 | `BenchmarkSymmetricDifference` | | `symmetric_difference_update` | 0.00346 | 0.03974 | 11.49968 | `BenchmarkSymmetricDifferenceUpdate` | | `union` | 0.00346 | 0.01004 | 2.90204 | `BenchmarkUnion` | | `update` | 0.00348 | 0.00754 | 2.16903 | `BenchmarkUpdate` | | `__xor__` | 0.00347 | 0.04236 | 12.19846 | `BenchmarkXor` | approximate memory usage | subject | `builtin` | `sqlitecollections` | ratio | class | | :------ | --------: | ------------------: | ----: | :---- | | `add (existing item)` | 0.0 | 0.0 | 1.0 | `BenchmarkAddExistingItem` | | `add (new item)` | 0.0 | 0.0 | 1.0 | `BenchmarkAddNewItem` | | `__and__` | 0.0 | 0.0 | 1.0 | `BenchmarkAnd` | | `clear` | 0.0 | 0.0 | 1.0 | `BenchmarkClear` | | `__contains__` | 0.0 | 0.0 | 1.0 | `BenchmarkContains` | | `copy` | 0.0 | 0.0 | 1.0 | `BenchmarkCopy` | | `difference` | 0.0 | 0.0 | 1.0 | `BenchmarkDifference` | | `discard` | 0.0 | 0.0 | 1.0 | `BenchmarkDiscard` | | `discard (no changes)` | 0.0 | 0.0 | 1.0 | `BenchmarkDiscardNoChanges` | | `__ge__` | 0.0 | 0.0 | 1.0 | `BenchmarkGe` | | `__ge__` (not greater than or equals to) | 0.0 | 0.0 | 1.0 | `BenchmarkGeNot` | | `__gt__` | 0.0 | 0.0 | 1.0 | `BenchmarkGt` | | `__gt__` (not greater than) | 0.0 | 0.0 | 1.0 | `BenchmarkGtNot` | | `__iand__` | 0.0 | 0.0 | 1.0 | `BenchmarkIand` | | `__init__` | 0.0 | 0.05078 | inf | `BenchmarkInit` | | `intersection` | 0.0 | 0.0 | 1.0 | `BenchmarkIntersection` | | `intersection_update` | 0.0 | 0.0 | 1.0 | `BenchmarkIntersectionUpdate` | | `__ior__` | 0.0 | 0.0 | 1.0 | `BenchmarkIor` | | `isdisjoint` | 0.0 | 0.0 | 1.0 | `BenchmarkIsdisjoint` | | `isdisjoint` (not disjoint) | 0.0 | 0.0 | 1.0 | `BenchmarkIsdisjointNot` | | `issubset` | 0.0 | 0.0 | 1.0 | `BenchmarkIssubset` | | `issubset` (not subset) | 0.0 | 0.0 | 1.0 | `BenchmarkIssubsetNot` | | `issuperset` | 0.0 | 0.0 | 1.0 | `BenchmarkIssuperset` | | `issuperset` (not superset) | 0.0 | 0.0 | 1.0 | `BenchmarkIssupersetNot` | | `__ixor__` | 0.0 | 0.0 | 1.0 | `BenchmarkIxor` | | `__le__` | 0.0 | 0.0 | 1.0 | `BenchmarkLe` | | `__le__` (not less than or equals to) | 0.0 | 0.0 | 1.0 | `BenchmarkLeNot` | | `__len__` | 0.0 | 0.0 | 1.0 | `BenchmarkLen` | | `__lt__` | 0.0 | 0.0 | 1.0 | `BenchmarkLt` | | `__lt__` (not less than) | 0.0 | 0.0 | 1.0 | `BenchmarkLtNot` | | `__contains__` (unsuccessful search) | 0.0 | 0.0 | 1.0 | `BenchmarkNotContains` | | `__or__` | 0.0 | 0.0 | 1.0 | `BenchmarkOr` | | `pop` | 0.0 | 0.0 | 1.0 | `BenchmarkPop` | | `remove` | 0.0 | 0.0 | 1.0 | `BenchmarkRemove` | | `__sub__` | 0.0 | 0.0 | 1.0 | `BenchmarkSub` | | `symmetric_difference` | 0.0 | 0.0 | 1.0 | `BenchmarkSymmetricDifference` | | `symmetric_difference_update` | 0.0 | 0.0 | 1.0 | `BenchmarkSymmetricDifferenceUpdate` | | `union` | 0.0 | 0.0 | 1.0 | `BenchmarkUnion` | | `update` | 0.0 | 0.0 | 1.0 | `BenchmarkUpdate` | | `__xor__` | 0.0 | 0.0 | 1.0 | `BenchmarkXor` |","title":"Set"},{"location":"benchmark_results/py37/dict/","text":"timing | subject | `builtin` | `sqlitecollections` | ratio | class | | :------ | --------: | ------------------: | ----: | :---- | | `clear` | 0.00525 | 0.00954 | 1.81764 | `BenchmarkClear` | | `__contains__` | 0.00582 | 0.0058 | 0.99757 | `BenchmarkContains` | | `copy` | 0.00454 | 0.01367 | 3.01282 | `BenchmarkCopy` | | `__delitem__` | 0.00511 | 0.00931 | 1.82184 | `BenchmarkDelitem` | | `get` | 0.00518 | 0.00519 | 1.00072 | `BenchmarkGet` | | `get (unsuccessful search)` | 0.00467 | 0.00589 | 1.26093 | `BenchmarkGetDefault` | | `__getitem__` | 0.0057 | 0.00533 | 0.93595 | `BenchmarkGetitem` | | `__init__` | 0.0051 | 0.07146 | 14.02149 | `BenchmarkInit` | | `items` | 0.00735 | 0.01849 | 2.51384 | `BenchmarkItems` | | `__iter__` | 0.00559 | 0.01135 | 2.02917 | `BenchmarkIter` | | `keys` | 0.00656 | 0.01117 | 1.703 | `BenchmarkKeys` | | `__len__` | 0.00541 | 0.00485 | 0.89684 | `BenchmarkLen` | | `__contains__` (unsuccessful search) | 0.00498 | 0.00518 | 1.0419 | `BenchmarkNotContains` | | `pop` | 0.00538 | 0.01081 | 2.00773 | `BenchmarkPop` | | `pop (unsuccessful search)` | 0.00564 | 0.00997 | 1.76781 | `BenchmarkPopDefault` | | `popitem` | 0.00537 | 0.01138 | 2.12005 | `BenchmarkPopitem` | | `setdefault` | 0.00519 | 0.00731 | 1.40737 | `BenchmarkSetdefault` | | `setdefault (unsuccessful search)` | 0.00552 | 0.0081 | 1.46676 | `BenchmarkSetdefaultAddItem` | | `__setitem__` (add new item) | 0.00567 | 0.01138 | 2.00581 | `BenchmarkSetitemAddNewItem` | | `__setitem__` (replace) | 0.00507 | 0.0098 | 1.93394 | `BenchmarkSetitemReplace` | | `update` | 0.00511 | 0.01069 | 2.09213 | `BenchmarkUpdate` | | `update` (many) | 0.00648 | 0.81361 | 125.60907 | `BenchmarkUpdateMany` | | `values` | 0.00503 | 0.01164 | 2.3124 | `BenchmarkValues` | approximate memory usage | subject | `builtin` | `sqlitecollections` | ratio | class | | :------ | --------: | ------------------: | ----: | :---- | | `clear` | 0.0 | 0.0 | 1.0 | `BenchmarkClear` | | `__contains__` | 0.0 | 0.0 | 1.0 | `BenchmarkContains` | | `copy` | 0.0625 | 0.0 | 0.0 | `BenchmarkCopy` | | `__delitem__` | 0.0 | 0.0 | 1.0 | `BenchmarkDelitem` | | `get` | 0.0 | 0.0 | 1.0 | `BenchmarkGet` | | `get (unsuccessful search)` | 0.0 | 0.0 | 1.0 | `BenchmarkGetDefault` | | `__getitem__` | 0.0 | 0.0 | 1.0 | `BenchmarkGetitem` | | `__init__` | 0.0 | 0.0 | 1.0 | `BenchmarkInit` | | `items` | 0.125 | 0.22656 | 1.8125 | `BenchmarkItems` | | `__iter__` | 0.0 | 0.0 | 1.0 | `BenchmarkIter` | | `keys` | 0.0 | 0.0 | 1.0 | `BenchmarkKeys` | | `__len__` | 0.0 | 0.0 | 1.0 | `BenchmarkLen` | | `__contains__` (unsuccessful search) | 0.0 | 0.0 | 1.0 | `BenchmarkNotContains` | | `pop` | 0.0 | 0.0 | 1.0 | `BenchmarkPop` | | `pop (unsuccessful search)` | 0.0 | 0.0 | 1.0 | `BenchmarkPopDefault` | | `popitem` | 0.0 | 0.0 | 1.0 | `BenchmarkPopitem` | | `setdefault` | 0.0 | 0.0 | 1.0 | `BenchmarkSetdefault` | | `setdefault (unsuccessful search)` | 0.0 | 0.0 | 1.0 | `BenchmarkSetdefaultAddItem` | | `__setitem__` (add new item) | 0.0 | 0.0 | 1.0 | `BenchmarkSetitemAddNewItem` | | `__setitem__` (replace) | 0.0 | 0.0 | 1.0 | `BenchmarkSetitemReplace` | | `update` | 0.0 | 0.0 | 1.0 | `BenchmarkUpdate` | | `update` (many) | 0.0 | 0.0 | 1.0 | `BenchmarkUpdateMany` | | `values` | 0.0 | 0.0 | 1.0 | `BenchmarkValues` |","title":"Dict"},{"location":"benchmark_results/py37/list/","text":"timing | subject | `builtin` | `sqlitecollections` | ratio | class | | :------ | --------: | ------------------: | ----: | :---- | | `__add__` | 0.00504 | 0.0153 | 3.03485 | `BenchmarkAdd` | | `append` | 0.00493 | 0.0089 | 1.80586 | `BenchmarkAppend` | | `clear` | 0.00524 | 0.00906 | 1.7288 | `BenchmarkClear` | | `__contains__` | 0.00513 | 0.00505 | 0.98508 | `BenchmarkContains` | | `copy` | 0.00573 | 0.01708 | 2.97868 | `BenchmarkCopy` | | `count` | 0.00482 | 0.00501 | 1.03866 | `BenchmarkCount` | | `__init__` | 0.00686 | 0.03598 | 5.24782 | `BenchmarkCreateWithInitialData` | | `__delitem__` | 0.00487 | 0.10034 | 20.59513 | `BenchmarkDelitem` | | `__delitem__` (slice) | 0.00462 | 0.17672 | 38.2826 | `BenchmarkDelitemSlice` | | `__delitem__` (slice with skip) | 0.00428 | 0.17965 | 42.00627 | `BenchmarkDelitemSliceSkip` | | `extend` | 0.00452 | 0.00995 | 2.2012 | `BenchmarkExtend` | | `__getitem__` | 0.00495 | 0.00496 | 1.00293 | `BenchmarkGetitem` | | `__getitem__` (slice) | 0.00465 | 0.11023 | 23.70874 | `BenchmarkGetitemSlice` | | `__getitem__` (slice with skip) | 0.00521 | 0.01933 | 3.70814 | `BenchmarkGetitemSliceSkip` | | `__iadd__` | 0.00493 | 0.0088 | 1.78538 | `BenchmarkIadd` | | `__imult__` | 0.00522 | 0.28341 | 54.30778 | `BenchmarkImult` | | `index` | 0.00467 | 0.00553 | 1.18327 | `BenchmarkIndex` | | `index` (unsuccessful search) | 0.0049 | 0.00547 | 1.11692 | `BenchmarkIndexUnsuccessfulSearch` | | `insert` | 0.00482 | 0.19381 | 40.19658 | `BenchmarkInsert` | | `__len__` | 0.00461 | 0.00523 | 1.13305 | `BenchmarkLen` | | `__mult__` | 0.0056 | 0.2889 | 51.61505 | `BenchmarkMult` | | `__contains__` (unsuccessful search) | 0.00469 | 0.00472 | 1.00631 | `BenchmarkNotContains` | | `pop` | 0.00455 | 0.09792 | 21.52043 | `BenchmarkPop` | | `remove` | 0.00434 | 0.13315 | 30.69182 | `BenchmarkRemove` | | `__setitem__` | 0.00483 | 0.0088 | 1.82277 | `BenchmarkSetitem` | | `__setitem__` (slice) | 0.00487 | 0.19026 | 39.04462 | `BenchmarkSetitemSlice` | | `__setitem__` (slice with skip) | 0.00461 | 0.02036 | 4.41698 | `BenchmarkSetitemSliceSkip` | | `sort` | 0.00559 | 0.10565 | 18.90563 | `BenchmarkSort` | approximate memory usage | subject | `builtin` | `sqlitecollections` | ratio | class | | :------ | --------: | ------------------: | ----: | :---- | | `__add__` | 0.0 | 0.0 | 1.0 | `BenchmarkAdd` | | `append` | 0.0 | 0.0 | 1.0 | `BenchmarkAppend` | | `clear` | 0.0 | 0.0 | 1.0 | `BenchmarkClear` | | `__contains__` | 0.0 | 0.0 | 1.0 | `BenchmarkContains` | | `copy` | 0.0 | 0.0 | 1.0 | `BenchmarkCopy` | | `count` | 0.0 | 0.0 | 1.0 | `BenchmarkCount` | | `__init__` | 0.0 | 0.0 | 1.0 | `BenchmarkCreateWithInitialData` | | `__delitem__` | 0.0 | 0.0 | 1.0 | `BenchmarkDelitem` | | `__delitem__` (slice) | 0.0 | 0.0 | 1.0 | `BenchmarkDelitemSlice` | | `__delitem__` (slice with skip) | 0.0 | 0.0 | 1.0 | `BenchmarkDelitemSliceSkip` | | `extend` | 0.0 | 0.0 | 1.0 | `BenchmarkExtend` | | `__getitem__` | 0.0 | 0.0 | 1.0 | `BenchmarkGetitem` | | `__getitem__` (slice) | 0.0 | 0.0 | 1.0 | `BenchmarkGetitemSlice` | | `__getitem__` (slice with skip) | 0.0 | 0.0 | 1.0 | `BenchmarkGetitemSliceSkip` | | `__iadd__` | 0.0 | 0.0 | 1.0 | `BenchmarkIadd` | | `__imult__` | 0.0 | 0.0 | 1.0 | `BenchmarkImult` | | `index` | 0.0 | 0.0 | 1.0 | `BenchmarkIndex` | | `index` (unsuccessful search) | 0.0 | 0.0 | 1.0 | `BenchmarkIndexUnsuccessfulSearch` | | `insert` | 0.0 | 0.0 | 1.0 | `BenchmarkInsert` | | `__len__` | 0.0 | 0.0 | 1.0 | `BenchmarkLen` | | `__mult__` | 0.0 | 0.0 | 1.0 | `BenchmarkMult` | | `__contains__` (unsuccessful search) | 0.0 | 0.0 | 1.0 | `BenchmarkNotContains` | | `pop` | 0.0 | 0.0 | 1.0 | `BenchmarkPop` | | `remove` | 0.0 | 0.0 | 1.0 | `BenchmarkRemove` | | `__setitem__` | 0.0 | 0.0 | 1.0 | `BenchmarkSetitem` | | `__setitem__` (slice) | 0.0 | 0.0 | 1.0 | `BenchmarkSetitemSlice` | | `__setitem__` (slice with skip) | 0.0 | 0.0 | 1.0 | `BenchmarkSetitemSliceSkip` | | `sort` | 0.0 | 0.63672 | inf | `BenchmarkSort` |","title":"List"},{"location":"benchmark_results/py37/set/","text":"timing | subject | `builtin` | `sqlitecollections` | ratio | class | | :------ | --------: | ------------------: | ----: | :---- | | `add (existing item)` | 0.00535 | 0.00778 | 1.45478 | `BenchmarkAddExistingItem` | | `add (new item)` | 0.00605 | 0.00869 | 1.43777 | `BenchmarkAddNewItem` | | `__and__` | 0.00482 | 0.01843 | 3.82599 | `BenchmarkAnd` | | `clear` | 0.00524 | 0.0093 | 1.77501 | `BenchmarkClear` | | `__contains__` | 0.00497 | 0.00482 | 0.96963 | `BenchmarkContains` | | `copy` | 0.00449 | 0.01171 | 2.60553 | `BenchmarkCopy` | | `difference` | 0.00448 | 0.01182 | 2.63692 | `BenchmarkDifference` | | `discard` | 0.00439 | 0.00871 | 1.98344 | `BenchmarkDiscard` | | `discard (no changes)` | 0.00445 | 0.00682 | 1.53308 | `BenchmarkDiscardNoChanges` | | `__ge__` | 0.00495 | 0.0048 | 0.97062 | `BenchmarkGe` | | `__ge__` (not greater than or equals to) | 0.00447 | 0.00769 | 1.71946 | `BenchmarkGeNot` | | `__gt__` | 0.00445 | 0.00911 | 2.04839 | `BenchmarkGt` | | `__gt__` (not greater than) | 0.00486 | 0.03795 | 7.81518 | `BenchmarkGtNot` | | `__iand__` | 0.00453 | 0.01229 | 2.71332 | `BenchmarkIand` | | `__init__` | 0.00455 | 0.02421 | 5.31879 | `BenchmarkInit` | | `intersection` | 0.00433 | 0.01592 | 3.6736 | `BenchmarkIntersection` | | `intersection_update` | 0.00459 | 0.01106 | 2.40925 | `BenchmarkIntersectionUpdate` | | `__ior__` | 0.00432 | 0.01114 | 2.58234 | `BenchmarkIor` | | `isdisjoint` | 0.00547 | 0.0051 | 0.93301 | `BenchmarkIsdisjoint` | | `isdisjoint` (not disjoint) | 0.00475 | 0.0048 | 1.00936 | `BenchmarkIsdisjointNot` | | `issubset` | 0.00506 | 0.03887 | 7.67745 | `BenchmarkIssubset` | | `issubset` (not subset) | 0.00446 | 0.01731 | 3.88193 | `BenchmarkIssubsetNot` | | `issuperset` | 0.00565 | 0.02941 | 5.20628 | `BenchmarkIssuperset` | | `issuperset` (not superset) | 0.00494 | 0.00777 | 1.57356 | `BenchmarkIssupersetNot` | | `__ixor__` | 0.00448 | 0.05207 | 11.61876 | `BenchmarkIxor` | | `__le__` | 0.00512 | 0.00612 | 1.19523 | `BenchmarkLe` | | `__le__` (not less than or equals to) | 0.00476 | 0.00501 | 1.05148 | `BenchmarkLeNot` | | `__len__` | 0.00462 | 0.00459 | 0.99432 | `BenchmarkLen` | | `__lt__` | 0.00485 | 0.00657 | 1.35486 | `BenchmarkLt` | | `__lt__` (not less than) | 0.0047 | 0.00442 | 0.94235 | `BenchmarkLtNot` | | `__contains__` (unsuccessful search) | 0.0045 | 0.00472 | 1.04835 | `BenchmarkNotContains` | | `__or__` | 0.00491 | 0.01699 | 3.46244 | `BenchmarkOr` | | `pop` | 0.00485 | 0.00811 | 1.67127 | `BenchmarkPop` | | `remove` | 0.00558 | 0.00941 | 1.68576 | `BenchmarkRemove` | | `__sub__` | 0.00493 | 0.01443 | 2.92383 | `BenchmarkSub` | | `symmetric_difference` | 0.00529 | 0.06237 | 11.79452 | `BenchmarkSymmetricDifference` | | `symmetric_difference_update` | 0.00532 | 0.05398 | 10.14396 | `BenchmarkSymmetricDifferenceUpdate` | | `union` | 0.00496 | 0.01696 | 3.42095 | `BenchmarkUnion` | | `update` | 0.00488 | 0.0124 | 2.54344 | `BenchmarkUpdate` | | `__xor__` | 0.00586 | 0.06067 | 10.35967 | `BenchmarkXor` | approximate memory usage | subject | `builtin` | `sqlitecollections` | ratio | class | | :------ | --------: | ------------------: | ----: | :---- | | `add (existing item)` | 0.0 | 0.0 | 1.0 | `BenchmarkAddExistingItem` | | `add (new item)` | 0.0 | 0.0 | 1.0 | `BenchmarkAddNewItem` | | `__and__` | 0.0 | 0.0 | 1.0 | `BenchmarkAnd` | | `clear` | 0.0 | 0.0 | 1.0 | `BenchmarkClear` | | `__contains__` | 0.0 | 0.0 | 1.0 | `BenchmarkContains` | | `copy` | 0.0 | 0.0 | 1.0 | `BenchmarkCopy` | | `difference` | 0.0 | 0.0 | 1.0 | `BenchmarkDifference` | | `discard` | 0.0 | 0.0 | 1.0 | `BenchmarkDiscard` | | `discard (no changes)` | 0.0 | 0.0 | 1.0 | `BenchmarkDiscardNoChanges` | | `__ge__` | 0.0 | 0.0 | 1.0 | `BenchmarkGe` | | `__ge__` (not greater than or equals to) | 0.0 | 0.0 | 1.0 | `BenchmarkGeNot` | | `__gt__` | 0.0 | 0.0 | 1.0 | `BenchmarkGt` | | `__gt__` (not greater than) | 0.0 | 0.0 | 1.0 | `BenchmarkGtNot` | | `__iand__` | 0.0 | 0.0 | 1.0 | `BenchmarkIand` | | `__init__` | 0.0 | 0.0 | 1.0 | `BenchmarkInit` | | `intersection` | 0.0 | 0.0 | 1.0 | `BenchmarkIntersection` | | `intersection_update` | 0.0 | 0.0 | 1.0 | `BenchmarkIntersectionUpdate` | | `__ior__` | 0.0 | 0.0 | 1.0 | `BenchmarkIor` | | `isdisjoint` | 0.0 | 0.0 | 1.0 | `BenchmarkIsdisjoint` | | `isdisjoint` (not disjoint) | 0.0 | 0.0 | 1.0 | `BenchmarkIsdisjointNot` | | `issubset` | 0.0 | 0.0 | 1.0 | `BenchmarkIssubset` | | `issubset` (not subset) | 0.0 | 0.0 | 1.0 | `BenchmarkIssubsetNot` | | `issuperset` | 0.0 | 0.0 | 1.0 | `BenchmarkIssuperset` | | `issuperset` (not superset) | 0.0 | 0.0 | 1.0 | `BenchmarkIssupersetNot` | | `__ixor__` | 0.0 | 0.0 | 1.0 | `BenchmarkIxor` | | `__le__` | 0.0 | 0.0 | 1.0 | `BenchmarkLe` | | `__le__` (not less than or equals to) | 0.0 | 0.0 | 1.0 | `BenchmarkLeNot` | | `__len__` | 0.0 | 0.0 | 1.0 | `BenchmarkLen` | | `__lt__` | 0.0 | 0.0 | 1.0 | `BenchmarkLt` | | `__lt__` (not less than) | 0.0 | 0.0 | 1.0 | `BenchmarkLtNot` | | `__contains__` (unsuccessful search) | 0.0 | 0.0 | 1.0 | `BenchmarkNotContains` | | `__or__` | 0.0 | 0.0 | 1.0 | `BenchmarkOr` | | `pop` | 0.0 | 0.0 | 1.0 | `BenchmarkPop` | | `remove` | 0.0 | 0.0 | 1.0 | `BenchmarkRemove` | | `__sub__` | 0.0 | 0.0 | 1.0 | `BenchmarkSub` | | `symmetric_difference` | 0.0 | 0.0 | 1.0 | `BenchmarkSymmetricDifference` | | `symmetric_difference_update` | 0.0 | 0.0 | 1.0 | `BenchmarkSymmetricDifferenceUpdate` | | `union` | 0.0 | 0.0 | 1.0 | `BenchmarkUnion` | | `update` | 0.0 | 0.0 | 1.0 | `BenchmarkUpdate` | | `__xor__` | 0.0 | 0.0 | 1.0 | `BenchmarkXor` |","title":"Set"},{"location":"benchmark_results/py38/dict/","text":"timing | subject | `builtin` | `sqlitecollections` | ratio | class | | :------ | --------: | ------------------: | ----: | :---- | | `clear` | 0.00501 | 0.00852 | 1.70231 | `BenchmarkClear` | | `__contains__` | 0.00487 | 0.00517 | 1.06128 | `BenchmarkContains` | | `copy` | 0.00483 | 0.01258 | 2.60526 | `BenchmarkCopy` | | `__delitem__` | 0.00491 | 0.0087 | 1.77161 | `BenchmarkDelitem` | | `get` | 0.00532 | 0.00533 | 1.00327 | `BenchmarkGet` | | `get (unsuccessful search)` | 0.005 | 0.00525 | 1.0488 | `BenchmarkGetDefault` | | `__getitem__` | 0.00484 | 0.00526 | 1.08723 | `BenchmarkGetitem` | | `__init__` | 0.00501 | 0.04748 | 9.48634 | `BenchmarkInit` | | `items` | 0.00562 | 0.01318 | 2.34351 | `BenchmarkItems` | | `__iter__` | 0.00502 | 0.00981 | 1.95684 | `BenchmarkIter` | | `keys` | 0.00499 | 0.01008 | 2.01975 | `BenchmarkKeys` | | `__len__` | 0.00485 | 0.00505 | 1.04017 | `BenchmarkLen` | | `__contains__` (unsuccessful search) | 0.00524 | 0.00558 | 1.06556 | `BenchmarkNotContains` | | `pop` | 0.00493 | 0.0101 | 2.04987 | `BenchmarkPop` | | `pop (unsuccessful search)` | 0.00514 | 0.00736 | 1.43224 | `BenchmarkPopDefault` | | `popitem` | 0.00516 | 0.01063 | 2.06057 | `BenchmarkPopitem` | | `reversed` | 0.005 | 0.0098 | 1.96101 | `BenchmarkReversed` | | `setdefault` | 0.00499 | 0.00796 | 1.59446 | `BenchmarkSetdefault` | | `setdefault (unsuccessful search)` | 0.00501 | 0.00773 | 1.54176 | `BenchmarkSetdefaultAddItem` | | `__setitem__` (add new item) | 0.00504 | 0.00967 | 1.918 | `BenchmarkSetitemAddNewItem` | | `__setitem__` (replace) | 0.00498 | 0.01043 | 2.09356 | `BenchmarkSetitemReplace` | | `update` | 0.00526 | 0.00886 | 1.68412 | `BenchmarkUpdate` | | `update` (many) | 0.00623 | 0.71898 | 115.37703 | `BenchmarkUpdateMany` | | `values` | 0.005 | 0.00944 | 1.88828 | `BenchmarkValues` | approximate memory usage | subject | `builtin` | `sqlitecollections` | ratio | class | | :------ | --------: | ------------------: | ----: | :---- | | `clear` | 0.0 | 0.0 | 1.0 | `BenchmarkClear` | | `__contains__` | 0.0 | 0.0 | 1.0 | `BenchmarkContains` | | `copy` | 0.00781 | 0.0 | 0.0 | `BenchmarkCopy` | | `__delitem__` | 0.0 | 0.0 | 1.0 | `BenchmarkDelitem` | | `get` | 0.0 | 0.0 | 1.0 | `BenchmarkGet` | | `get (unsuccessful search)` | 0.0 | 0.0 | 1.0 | `BenchmarkGetDefault` | | `__getitem__` | 0.0 | 0.0 | 1.0 | `BenchmarkGetitem` | | `__init__` | 0.0 | 0.0 | 1.0 | `BenchmarkInit` | | `items` | 0.125 | 0.13672 | 1.09375 | `BenchmarkItems` | | `__iter__` | 0.0 | 0.0 | 1.0 | `BenchmarkIter` | | `keys` | 0.0 | 0.0 | 1.0 | `BenchmarkKeys` | | `__len__` | 0.0 | 0.0 | 1.0 | `BenchmarkLen` | | `__contains__` (unsuccessful search) | 0.0 | 0.0 | 1.0 | `BenchmarkNotContains` | | `pop` | 0.0 | 0.0 | 1.0 | `BenchmarkPop` | | `pop (unsuccessful search)` | 0.0 | 0.0 | 1.0 | `BenchmarkPopDefault` | | `popitem` | 0.0 | 0.0 | 1.0 | `BenchmarkPopitem` | | `reversed` | 0.0 | 0.0 | 1.0 | `BenchmarkReversed` | | `setdefault` | 0.0 | 0.0 | 1.0 | `BenchmarkSetdefault` | | `setdefault (unsuccessful search)` | 0.0 | 0.0 | 1.0 | `BenchmarkSetdefaultAddItem` | | `__setitem__` (add new item) | 0.0 | 0.0 | 1.0 | `BenchmarkSetitemAddNewItem` | | `__setitem__` (replace) | 0.0 | 0.0 | 1.0 | `BenchmarkSetitemReplace` | | `update` | 0.0 | 0.0 | 1.0 | `BenchmarkUpdate` | | `update` (many) | 0.0 | 0.0 | 1.0 | `BenchmarkUpdateMany` | | `values` | 0.03906 | 0.0 | 0.0 | `BenchmarkValues` |","title":"Dict"},{"location":"benchmark_results/py38/list/","text":"timing | subject | `builtin` | `sqlitecollections` | ratio | class | | :------ | --------: | ------------------: | ----: | :---- | | `__add__` | 0.00543 | 0.0131 | 2.41162 | `BenchmarkAdd` | | `append` | 0.00538 | 0.00898 | 1.67047 | `BenchmarkAppend` | | `clear` | 0.00496 | 0.00838 | 1.6882 | `BenchmarkClear` | | `__contains__` | 0.00491 | 0.00501 | 1.02032 | `BenchmarkContains` | | `copy` | 0.00556 | 0.01141 | 2.05258 | `BenchmarkCopy` | | `count` | 0.00501 | 0.00521 | 1.04007 | `BenchmarkCount` | | `__init__` | 0.00509 | 0.02412 | 4.74244 | `BenchmarkCreateWithInitialData` | | `__delitem__` | 0.0053 | 0.1007 | 18.99423 | `BenchmarkDelitem` | | `__delitem__` (slice) | 0.00497 | 0.19426 | 39.12509 | `BenchmarkDelitemSlice` | | `__delitem__` (slice with skip) | 0.00517 | 0.19684 | 38.05483 | `BenchmarkDelitemSliceSkip` | | `extend` | 0.00553 | 0.00941 | 1.70119 | `BenchmarkExtend` | | `__getitem__` | 0.00516 | 0.00526 | 1.02038 | `BenchmarkGetitem` | | `__getitem__` (slice) | 0.00504 | 0.11186 | 22.19618 | `BenchmarkGetitemSlice` | | `__getitem__` (slice with skip) | 0.00543 | 0.0166 | 3.05849 | `BenchmarkGetitemSliceSkip` | | `__iadd__` | 0.00503 | 0.0087 | 1.7305 | `BenchmarkIadd` | | `__imult__` | 0.00497 | 0.28799 | 57.94799 | `BenchmarkImult` | | `index` | 0.00541 | 0.00563 | 1.04028 | `BenchmarkIndex` | | `index` (unsuccessful search) | 0.0053 | 0.00546 | 1.03065 | `BenchmarkIndexUnsuccessfulSearch` | | `insert` | 0.00517 | 0.19098 | 36.95485 | `BenchmarkInsert` | | `__len__` | 0.00492 | 0.00488 | 0.99292 | `BenchmarkLen` | | `__mult__` | 0.0051 | 0.28876 | 56.61648 | `BenchmarkMult` | | `__contains__` (unsuccessful search) | 0.00509 | 0.00537 | 1.0546 | `BenchmarkNotContains` | | `pop` | 0.00499 | 0.10658 | 21.33962 | `BenchmarkPop` | | `remove` | 0.00521 | 0.14287 | 27.39694 | `BenchmarkRemove` | | `__setitem__` | 0.00521 | 0.00966 | 1.85216 | `BenchmarkSetitem` | | `__setitem__` (slice) | 0.00497 | 0.19671 | 39.56578 | `BenchmarkSetitemSlice` | | `__setitem__` (slice with skip) | 0.00515 | 0.01939 | 3.76658 | `BenchmarkSetitemSliceSkip` | | `sort` | 0.00515 | 0.10919 | 21.21141 | `BenchmarkSort` | approximate memory usage | subject | `builtin` | `sqlitecollections` | ratio | class | | :------ | --------: | ------------------: | ----: | :---- | | `__add__` | 0.0 | 0.0 | 1.0 | `BenchmarkAdd` | | `append` | 0.0 | 0.0 | 1.0 | `BenchmarkAppend` | | `clear` | 0.0 | 0.0 | 1.0 | `BenchmarkClear` | | `__contains__` | 0.0 | 0.0 | 1.0 | `BenchmarkContains` | | `copy` | 0.0 | 0.0 | 1.0 | `BenchmarkCopy` | | `count` | 0.0 | 0.0 | 1.0 | `BenchmarkCount` | | `__init__` | 0.0 | 0.0 | 1.0 | `BenchmarkCreateWithInitialData` | | `__delitem__` | 0.0 | 0.0 | 1.0 | `BenchmarkDelitem` | | `__delitem__` (slice) | 0.0 | 0.0 | 1.0 | `BenchmarkDelitemSlice` | | `__delitem__` (slice with skip) | 0.0 | 0.0 | 1.0 | `BenchmarkDelitemSliceSkip` | | `extend` | 0.0 | 0.0 | 1.0 | `BenchmarkExtend` | | `__getitem__` | 0.0 | 0.0 | 1.0 | `BenchmarkGetitem` | | `__getitem__` (slice) | 0.0 | 0.0 | 1.0 | `BenchmarkGetitemSlice` | | `__getitem__` (slice with skip) | 0.0 | 0.0 | 1.0 | `BenchmarkGetitemSliceSkip` | | `__iadd__` | 0.0 | 0.0 | 1.0 | `BenchmarkIadd` | | `__imult__` | 0.0 | 0.0 | 1.0 | `BenchmarkImult` | | `index` | 0.0 | 0.0 | 1.0 | `BenchmarkIndex` | | `index` (unsuccessful search) | 0.0 | 0.0 | 1.0 | `BenchmarkIndexUnsuccessfulSearch` | | `insert` | 0.0 | 0.0 | 1.0 | `BenchmarkInsert` | | `__len__` | 0.0 | 0.0 | 1.0 | `BenchmarkLen` | | `__mult__` | 0.0 | 0.0 | 1.0 | `BenchmarkMult` | | `__contains__` (unsuccessful search) | 0.0 | 0.0 | 1.0 | `BenchmarkNotContains` | | `pop` | 0.0 | 0.0 | 1.0 | `BenchmarkPop` | | `remove` | 0.0 | 0.0 | 1.0 | `BenchmarkRemove` | | `__setitem__` | 0.0 | 0.0 | 1.0 | `BenchmarkSetitem` | | `__setitem__` (slice) | 0.0 | 0.0 | 1.0 | `BenchmarkSetitemSlice` | | `__setitem__` (slice with skip) | 0.0 | 0.0 | 1.0 | `BenchmarkSetitemSliceSkip` | | `sort` | 0.0 | 0.64062 | inf | `BenchmarkSort` |","title":"List"},{"location":"benchmark_results/py38/set/","text":"timing | subject | `builtin` | `sqlitecollections` | ratio | class | | :------ | --------: | ------------------: | ----: | :---- | | `add (existing item)` | 0.00519 | 0.00845 | 1.6275 | `BenchmarkAddExistingItem` | | `add (new item)` | 0.00547 | 0.00914 | 1.67265 | `BenchmarkAddNewItem` | | `__and__` | 0.00531 | 0.01631 | 3.0725 | `BenchmarkAnd` | | `clear` | 0.00537 | 0.00825 | 1.53528 | `BenchmarkClear` | | `__contains__` | 0.00532 | 0.00555 | 1.04394 | `BenchmarkContains` | | `copy` | 0.0049 | 0.0149 | 3.03943 | `BenchmarkCopy` | | `difference` | 0.00487 | 0.01115 | 2.29139 | `BenchmarkDifference` | | `discard` | 0.00534 | 0.01209 | 2.26432 | `BenchmarkDiscard` | | `discard (no changes)` | 0.00496 | 0.00649 | 1.30877 | `BenchmarkDiscardNoChanges` | | `__ge__` | 0.00482 | 0.00475 | 0.98629 | `BenchmarkGe` | | `__ge__` (not greater than or equals to) | 0.00489 | 0.00565 | 1.15612 | `BenchmarkGeNot` | | `__gt__` | 0.00486 | 0.02942 | 6.0583 | `BenchmarkGt` | | `__gt__` (not greater than) | 0.00498 | 0.03741 | 7.50444 | `BenchmarkGtNot` | | `__iand__` | 0.00532 | 0.01271 | 2.39178 | `BenchmarkIand` | | `__init__` | 0.00483 | 0.02331 | 4.82023 | `BenchmarkInit` | | `intersection` | 0.0055 | 0.01515 | 2.75238 | `BenchmarkIntersection` | | `intersection_update` | 0.00483 | 0.01056 | 2.18406 | `BenchmarkIntersectionUpdate` | | `__ior__` | 0.00491 | 0.0103 | 2.0953 | `BenchmarkIor` | | `isdisjoint` | 0.00533 | 0.00542 | 1.01696 | `BenchmarkIsdisjoint` | | `isdisjoint` (not disjoint) | 0.00496 | 0.00542 | 1.09346 | `BenchmarkIsdisjointNot` | | `issubset` | 0.00477 | 0.03613 | 7.56792 | `BenchmarkIssubset` | | `issubset` (not subset) | 0.00517 | 0.01496 | 2.89434 | `BenchmarkIssubsetNot` | | `issuperset` | 0.00484 | 0.02871 | 5.93344 | `BenchmarkIssuperset` | | `issuperset` (not superset) | 0.00532 | 0.00551 | 1.03627 | `BenchmarkIssupersetNot` | | `__ixor__` | 0.00489 | 0.04727 | 9.6637 | `BenchmarkIxor` | | `__le__` | 0.00508 | 0.00594 | 1.17099 | `BenchmarkLe` | | `__le__` (not less than or equals to) | 0.00547 | 0.00475 | 0.86875 | `BenchmarkLeNot` | | `__len__` | 0.00502 | 0.0047 | 0.93576 | `BenchmarkLen` | | `__lt__` | 0.00519 | 0.0063 | 1.21442 | `BenchmarkLt` | | `__lt__` (not less than) | 0.00496 | 0.00507 | 1.02276 | `BenchmarkLtNot` | | `__contains__` (unsuccessful search) | 0.00504 | 0.00538 | 1.06694 | `BenchmarkNotContains` | | `__or__` | 0.00518 | 0.01557 | 3.00347 | `BenchmarkOr` | | `pop` | 0.00496 | 0.00812 | 1.63744 | `BenchmarkPop` | | `remove` | 0.00502 | 0.0081 | 1.61403 | `BenchmarkRemove` | | `__sub__` | 0.00489 | 0.0117 | 2.3948 | `BenchmarkSub` | | `symmetric_difference` | 0.00487 | 0.05431 | 11.14427 | `BenchmarkSymmetricDifference` | | `symmetric_difference_update` | 0.00493 | 0.0465 | 9.43349 | `BenchmarkSymmetricDifferenceUpdate` | | `union` | 0.00503 | 0.01485 | 2.95387 | `BenchmarkUnion` | | `update` | 0.00533 | 0.01109 | 2.08293 | `BenchmarkUpdate` | | `__xor__` | 0.00488 | 0.05067 | 10.3911 | `BenchmarkXor` | approximate memory usage | subject | `builtin` | `sqlitecollections` | ratio | class | | :------ | --------: | ------------------: | ----: | :---- | | `add (existing item)` | 0.0 | 0.0 | 1.0 | `BenchmarkAddExistingItem` | | `add (new item)` | 0.0 | 0.0 | 1.0 | `BenchmarkAddNewItem` | | `__and__` | 0.0 | 0.0 | 1.0 | `BenchmarkAnd` | | `clear` | 0.0 | 0.0 | 1.0 | `BenchmarkClear` | | `__contains__` | 0.0 | 0.0 | 1.0 | `BenchmarkContains` | | `copy` | 0.0 | 0.0 | 1.0 | `BenchmarkCopy` | | `difference` | 0.0 | 0.0 | 1.0 | `BenchmarkDifference` | | `discard` | 0.0 | 0.0 | 1.0 | `BenchmarkDiscard` | | `discard (no changes)` | 0.0 | 0.0 | 1.0 | `BenchmarkDiscardNoChanges` | | `__ge__` | 0.0 | 0.0 | 1.0 | `BenchmarkGe` | | `__ge__` (not greater than or equals to) | 0.0 | 0.0 | 1.0 | `BenchmarkGeNot` | | `__gt__` | 0.0 | 0.0 | 1.0 | `BenchmarkGt` | | `__gt__` (not greater than) | 0.0 | 0.0 | 1.0 | `BenchmarkGtNot` | | `__iand__` | 0.0 | 0.0 | 1.0 | `BenchmarkIand` | | `__init__` | 0.0 | 0.0 | 1.0 | `BenchmarkInit` | | `intersection` | 0.0 | 0.0 | 1.0 | `BenchmarkIntersection` | | `intersection_update` | 0.0 | 0.0 | 1.0 | `BenchmarkIntersectionUpdate` | | `__ior__` | 0.0 | 0.0 | 1.0 | `BenchmarkIor` | | `isdisjoint` | 0.0 | 0.0 | 1.0 | `BenchmarkIsdisjoint` | | `isdisjoint` (not disjoint) | 0.0 | 0.0 | 1.0 | `BenchmarkIsdisjointNot` | | `issubset` | 0.0 | 0.0 | 1.0 | `BenchmarkIssubset` | | `issubset` (not subset) | 0.0 | 0.0 | 1.0 | `BenchmarkIssubsetNot` | | `issuperset` | 0.0 | 0.0 | 1.0 | `BenchmarkIssuperset` | | `issuperset` (not superset) | 0.0 | 0.0 | 1.0 | `BenchmarkIssupersetNot` | | `__ixor__` | 0.0 | 0.0 | 1.0 | `BenchmarkIxor` | | `__le__` | 0.0 | 0.0 | 1.0 | `BenchmarkLe` | | `__le__` (not less than or equals to) | 0.0 | 0.0 | 1.0 | `BenchmarkLeNot` | | `__len__` | 0.0 | 0.0 | 1.0 | `BenchmarkLen` | | `__lt__` | 0.0 | 0.0 | 1.0 | `BenchmarkLt` | | `__lt__` (not less than) | 0.0 | 0.0 | 1.0 | `BenchmarkLtNot` | | `__contains__` (unsuccessful search) | 0.0 | 0.0 | 1.0 | `BenchmarkNotContains` | | `__or__` | 0.0 | 0.0 | 1.0 | `BenchmarkOr` | | `pop` | 0.0 | 0.0 | 1.0 | `BenchmarkPop` | | `remove` | 0.0 | 0.0 | 1.0 | `BenchmarkRemove` | | `__sub__` | 0.0 | 0.0 | 1.0 | `BenchmarkSub` | | `symmetric_difference` | 0.0 | 0.0 | 1.0 | `BenchmarkSymmetricDifference` | | `symmetric_difference_update` | 0.0 | 0.0 | 1.0 | `BenchmarkSymmetricDifferenceUpdate` | | `union` | 0.0 | 0.0 | 1.0 | `BenchmarkUnion` | | `update` | 0.0 | 0.0 | 1.0 | `BenchmarkUpdate` | | `__xor__` | 0.0 | 0.0 | 1.0 | `BenchmarkXor` |","title":"Set"},{"location":"benchmark_results/py39/dict/","text":"timing | subject | `builtin` | `sqlitecollections` | ratio | class | | :------ | --------: | ------------------: | ----: | :---- | | `clear` | 0.00496 | 0.01012 | 2.03949 | `BenchmarkClear` | | `__contains__` | 0.00479 | 0.00516 | 1.07716 | `BenchmarkContains` | | `copy` | 0.0051 | 0.01302 | 2.55507 | `BenchmarkCopy` | | `__delitem__` | 0.00492 | 0.00996 | 2.02524 | `BenchmarkDelitem` | | `get` | 0.00476 | 0.00515 | 1.08068 | `BenchmarkGet` | | `get (unsuccessful search)` | 0.0048 | 0.00505 | 1.05169 | `BenchmarkGetDefault` | | `__getitem__` | 0.00504 | 0.00497 | 0.98671 | `BenchmarkGetitem` | | `__init__` | 0.00504 | 0.05045 | 10.01674 | `BenchmarkInit` | | `__ior__` | 0.0048 | 0.00998 | 2.07846 | `BenchmarkIor` | | `__ior__` (many) | 0.00653 | 0.70038 | 107.29851 | `BenchmarkIorMany` | | `items` | 0.00575 | 0.01341 | 2.33086 | `BenchmarkItems` | | `__iter__` | 0.00508 | 0.00965 | 1.90041 | `BenchmarkIter` | | `keys` | 0.00516 | 0.0095 | 1.8394 | `BenchmarkKeys` | | `__len__` | 0.00553 | 0.00554 | 1.00103 | `BenchmarkLen` | | `__contains__` (unsuccessful search) | 0.00506 | 0.00527 | 1.04127 | `BenchmarkNotContains` | | `__or__` | 0.00489 | 0.01622 | 3.31924 | `BenchmarkOr` | | `__or__` (many) | 0.00667 | 0.7026 | 105.31907 | `BenchmarkOrMany` | | `pop` | 0.0048 | 0.0095 | 1.97888 | `BenchmarkPop` | | `pop (unsuccessful search)` | 0.00489 | 0.00783 | 1.60061 | `BenchmarkPopDefault` | | `popitem` | 0.00495 | 0.01026 | 2.07428 | `BenchmarkPopitem` | | `reversed` | 0.00488 | 0.00918 | 1.87923 | `BenchmarkReversed` | | `setdefault` | 0.00495 | 0.00707 | 1.4274 | `BenchmarkSetdefault` | | `setdefault (unsuccessful search)` | 0.00492 | 0.00781 | 1.58572 | `BenchmarkSetdefaultAddItem` | | `__setitem__` (add new item) | 0.00529 | 0.00952 | 1.79881 | `BenchmarkSetitemAddNewItem` | | `__setitem__` (replace) | 0.00477 | 0.00987 | 2.06941 | `BenchmarkSetitemReplace` | | `update` | 0.00492 | 0.01133 | 2.30002 | `BenchmarkUpdate` | | `update` (many) | 0.00615 | 0.68205 | 110.89405 | `BenchmarkUpdateMany` | | `values` | 0.00461 | 0.00906 | 1.96481 | `BenchmarkValues` | approximate memory usage | subject | `builtin` | `sqlitecollections` | ratio | class | | :------ | --------: | ------------------: | ----: | :---- | | `clear` | 0.0 | 0.0 | 1.0 | `BenchmarkClear` | | `__contains__` | 0.0 | 0.0 | 1.0 | `BenchmarkContains` | | `copy` | 0.0 | 0.0 | 1.0 | `BenchmarkCopy` | | `__delitem__` | 0.0 | 0.0 | 1.0 | `BenchmarkDelitem` | | `get` | 0.0 | 0.0 | 1.0 | `BenchmarkGet` | | `get (unsuccessful search)` | 0.0 | 0.0 | 1.0 | `BenchmarkGetDefault` | | `__getitem__` | 0.0 | 0.0 | 1.0 | `BenchmarkGetitem` | | `__init__` | 0.0 | 0.0 | 1.0 | `BenchmarkInit` | | `__ior__` | 0.0 | 0.0 | 1.0 | `BenchmarkIor` | | `__ior__` (many) | 0.1875 | 0.0 | 0.0 | `BenchmarkIorMany` | | `items` | 0.0 | 0.10938 | inf | `BenchmarkItems` | | `__iter__` | 0.0 | 0.0 | 1.0 | `BenchmarkIter` | | `keys` | 0.0 | 0.0 | 1.0 | `BenchmarkKeys` | | `__len__` | 0.0 | 0.0 | 1.0 | `BenchmarkLen` | | `__contains__` (unsuccessful search) | 0.0 | 0.0 | 1.0 | `BenchmarkNotContains` | | `__or__` | 0.0 | 0.0 | 1.0 | `BenchmarkOr` | | `__or__` (many) | 0.0 | 0.0 | 1.0 | `BenchmarkOrMany` | | `pop` | 0.0 | 0.0 | 1.0 | `BenchmarkPop` | | `pop (unsuccessful search)` | 0.0 | 0.0 | 1.0 | `BenchmarkPopDefault` | | `popitem` | 0.0 | 0.0 | 1.0 | `BenchmarkPopitem` | | `reversed` | 0.0 | 0.0 | 1.0 | `BenchmarkReversed` | | `setdefault` | 0.0 | 0.0 | 1.0 | `BenchmarkSetdefault` | | `setdefault (unsuccessful search)` | 0.0 | 0.0 | 1.0 | `BenchmarkSetdefaultAddItem` | | `__setitem__` (add new item) | 0.0 | 0.0 | 1.0 | `BenchmarkSetitemAddNewItem` | | `__setitem__` (replace) | 0.0 | 0.0 | 1.0 | `BenchmarkSetitemReplace` | | `update` | 0.0 | 0.0 | 1.0 | `BenchmarkUpdate` | | `update` (many) | 0.0 | 0.0 | 1.0 | `BenchmarkUpdateMany` | | `values` | 0.0 | 0.0 | 1.0 | `BenchmarkValues` |","title":"Dict"},{"location":"benchmark_results/py39/list/","text":"timing | subject | `builtin` | `sqlitecollections` | ratio | class | | :------ | --------: | ------------------: | ----: | :---- | | `__add__` | 0.0049 | 0.01576 | 3.21855 | `BenchmarkAdd` | | `append` | 0.00503 | 0.01029 | 2.04612 | `BenchmarkAppend` | | `clear` | 0.00498 | 0.00953 | 1.91485 | `BenchmarkClear` | | `__contains__` | 0.00497 | 0.00477 | 0.96146 | `BenchmarkContains` | | `copy` | 0.00532 | 0.01235 | 2.32129 | `BenchmarkCopy` | | `count` | 0.00496 | 0.00497 | 1.00193 | `BenchmarkCount` | | `__init__` | 0.00476 | 0.02663 | 5.59576 | `BenchmarkCreateWithInitialData` | | `__delitem__` | 0.0049 | 0.10109 | 20.61522 | `BenchmarkDelitem` | | `__delitem__` (slice) | 0.00495 | 0.18794 | 37.95795 | `BenchmarkDelitemSlice` | | `__delitem__` (slice with skip) | 0.00483 | 0.18828 | 39.00872 | `BenchmarkDelitemSliceSkip` | | `extend` | 0.00481 | 0.00929 | 1.92966 | `BenchmarkExtend` | | `__getitem__` | 0.00497 | 0.00497 | 0.99986 | `BenchmarkGetitem` | | `__getitem__` (slice) | 0.00489 | 0.11183 | 22.86324 | `BenchmarkGetitemSlice` | | `__getitem__` (slice with skip) | 0.0049 | 0.0183 | 3.73217 | `BenchmarkGetitemSliceSkip` | | `__iadd__` | 0.00505 | 0.00963 | 1.90513 | `BenchmarkIadd` | | `__imult__` | 0.00481 | 0.28712 | 59.70839 | `BenchmarkImult` | | `index` | 0.00511 | 0.00533 | 1.04249 | `BenchmarkIndex` | | `index` (unsuccessful search) | 0.00497 | 0.00558 | 1.12245 | `BenchmarkIndexUnsuccessfulSearch` | | `insert` | 0.00486 | 0.18802 | 38.68118 | `BenchmarkInsert` | | `__len__` | 0.00474 | 0.00492 | 1.03874 | `BenchmarkLen` | | `__mult__` | 0.00499 | 0.2899 | 58.12857 | `BenchmarkMult` | | `__contains__` (unsuccessful search) | 0.00484 | 0.00507 | 1.04667 | `BenchmarkNotContains` | | `pop` | 0.00478 | 0.10286 | 21.50896 | `BenchmarkPop` | | `remove` | 0.00478 | 0.14037 | 29.38014 | `BenchmarkRemove` | | `__setitem__` | 0.00512 | 0.00924 | 1.80414 | `BenchmarkSetitem` | | `__setitem__` (slice) | 0.00494 | 0.19334 | 39.16712 | `BenchmarkSetitemSlice` | | `__setitem__` (slice with skip) | 0.00532 | 0.02013 | 3.78614 | `BenchmarkSetitemSliceSkip` | | `sort` | 0.00502 | 0.10697 | 21.29843 | `BenchmarkSort` | approximate memory usage | subject | `builtin` | `sqlitecollections` | ratio | class | | :------ | --------: | ------------------: | ----: | :---- | | `__add__` | 0.0 | 0.0 | 1.0 | `BenchmarkAdd` | | `append` | 0.0 | 0.0 | 1.0 | `BenchmarkAppend` | | `clear` | 0.0 | 0.0 | 1.0 | `BenchmarkClear` | | `__contains__` | 0.0 | 0.0 | 1.0 | `BenchmarkContains` | | `copy` | 0.0 | 0.0 | 1.0 | `BenchmarkCopy` | | `count` | 0.0 | 0.0 | 1.0 | `BenchmarkCount` | | `__init__` | 0.0 | 0.0 | 1.0 | `BenchmarkCreateWithInitialData` | | `__delitem__` | 0.0 | 0.0 | 1.0 | `BenchmarkDelitem` | | `__delitem__` (slice) | 0.0 | 0.0 | 1.0 | `BenchmarkDelitemSlice` | | `__delitem__` (slice with skip) | 0.0 | 0.0 | 1.0 | `BenchmarkDelitemSliceSkip` | | `extend` | 0.0 | 0.0 | 1.0 | `BenchmarkExtend` | | `__getitem__` | 0.0 | 0.0 | 1.0 | `BenchmarkGetitem` | | `__getitem__` (slice) | 0.0 | 0.0 | 1.0 | `BenchmarkGetitemSlice` | | `__getitem__` (slice with skip) | 0.0 | 0.0 | 1.0 | `BenchmarkGetitemSliceSkip` | | `__iadd__` | 0.0 | 0.0 | 1.0 | `BenchmarkIadd` | | `__imult__` | 0.0 | 0.0 | 1.0 | `BenchmarkImult` | | `index` | 0.0 | 0.0 | 1.0 | `BenchmarkIndex` | | `index` (unsuccessful search) | 0.0 | 0.0 | 1.0 | `BenchmarkIndexUnsuccessfulSearch` | | `insert` | 0.0 | 0.0 | 1.0 | `BenchmarkInsert` | | `__len__` | 0.0 | 0.0 | 1.0 | `BenchmarkLen` | | `__mult__` | 0.0 | 0.0 | 1.0 | `BenchmarkMult` | | `__contains__` (unsuccessful search) | 0.0 | 0.0 | 1.0 | `BenchmarkNotContains` | | `pop` | 0.0 | 0.0 | 1.0 | `BenchmarkPop` | | `remove` | 0.0 | 0.0 | 1.0 | `BenchmarkRemove` | | `__setitem__` | 0.0 | 0.0 | 1.0 | `BenchmarkSetitem` | | `__setitem__` (slice) | 0.0 | 0.0 | 1.0 | `BenchmarkSetitemSlice` | | `__setitem__` (slice with skip) | 0.0 | 0.0 | 1.0 | `BenchmarkSetitemSliceSkip` | | `sort` | 0.0 | 0.59766 | inf | `BenchmarkSort` |","title":"List"},{"location":"benchmark_results/py39/set/","text":"timing | subject | `builtin` | `sqlitecollections` | ratio | class | | :------ | --------: | ------------------: | ----: | :---- | | `add (existing item)` | 0.00501 | 0.00762 | 1.52154 | `BenchmarkAddExistingItem` | | `add (new item)` | 0.00499 | 0.00889 | 1.78055 | `BenchmarkAddNewItem` | | `__and__` | 0.00497 | 0.01481 | 2.9781 | `BenchmarkAnd` | | `clear` | 0.00528 | 0.00877 | 1.66066 | `BenchmarkClear` | | `__contains__` | 0.00506 | 0.00541 | 1.06853 | `BenchmarkContains` | | `copy` | 0.00507 | 0.01173 | 2.31439 | `BenchmarkCopy` | | `difference` | 0.00539 | 0.01221 | 2.26508 | `BenchmarkDifference` | | `discard` | 0.00469 | 0.00898 | 1.91285 | `BenchmarkDiscard` | | `discard (no changes)` | 0.00478 | 0.00679 | 1.4212 | `BenchmarkDiscardNoChanges` | | `__ge__` | 0.00468 | 0.0047 | 1.00284 | `BenchmarkGe` | | `__ge__` (not greater than or equals to) | 0.00472 | 0.00473 | 1.00179 | `BenchmarkGeNot` | | `__gt__` | 0.0054 | 0.01641 | 3.03689 | `BenchmarkGt` | | `__gt__` (not greater than) | 0.00493 | 0.03902 | 7.90989 | `BenchmarkGtNot` | | `__iand__` | 0.00487 | 0.01136 | 2.33433 | `BenchmarkIand` | | `__init__` | 0.00495 | 0.03383 | 6.84045 | `BenchmarkInit` | | `intersection` | 0.00465 | 0.01577 | 3.39441 | `BenchmarkIntersection` | | `intersection_update` | 0.00479 | 0.01391 | 2.90207 | `BenchmarkIntersectionUpdate` | | `__ior__` | 0.0047 | 0.01163 | 2.47287 | `BenchmarkIor` | | `isdisjoint` | 0.00474 | 0.0052 | 1.09685 | `BenchmarkIsdisjoint` | | `isdisjoint` (not disjoint) | 0.00473 | 0.00472 | 0.99917 | `BenchmarkIsdisjointNot` | | `issubset` | 0.00469 | 0.03922 | 8.36946 | `BenchmarkIssubset` | | `issubset` (not subset) | 0.00471 | 0.01726 | 3.66228 | `BenchmarkIssubsetNot` | | `issuperset` | 0.00471 | 0.02855 | 6.06248 | `BenchmarkIssuperset` | | `issuperset` (not superset) | 0.00472 | 0.00488 | 1.03433 | `BenchmarkIssupersetNot` | | `__ixor__` | 0.00515 | 0.04934 | 9.58294 | `BenchmarkIxor` | | `__le__` | 0.00482 | 0.00686 | 1.42472 | `BenchmarkLe` | | `__le__` (not less than or equals to) | 0.00489 | 0.00492 | 1.00454 | `BenchmarkLeNot` | | `__len__` | 0.00482 | 0.00464 | 0.96345 | `BenchmarkLen` | | `__lt__` | 0.00459 | 0.00549 | 1.19705 | `BenchmarkLt` | | `__lt__` (not less than) | 0.00495 | 0.00505 | 1.02079 | `BenchmarkLtNot` | | `__contains__` (unsuccessful search) | 0.00471 | 0.0051 | 1.08271 | `BenchmarkNotContains` | | `__or__` | 0.00494 | 0.01661 | 3.36437 | `BenchmarkOr` | | `pop` | 0.00494 | 0.00902 | 1.82541 | `BenchmarkPop` | | `remove` | 0.00527 | 0.00972 | 1.8464 | `BenchmarkRemove` | | `__sub__` | 0.00508 | 0.01217 | 2.39536 | `BenchmarkSub` | | `symmetric_difference` | 0.00491 | 0.05393 | 10.98568 | `BenchmarkSymmetricDifference` | | `symmetric_difference_update` | 0.00506 | 0.04967 | 9.81881 | `BenchmarkSymmetricDifferenceUpdate` | | `union` | 0.00545 | 0.01674 | 3.07461 | `BenchmarkUnion` | | `update` | 0.00531 | 0.01088 | 2.04688 | `BenchmarkUpdate` | | `__xor__` | 0.00496 | 0.05334 | 10.74413 | `BenchmarkXor` | approximate memory usage | subject | `builtin` | `sqlitecollections` | ratio | class | | :------ | --------: | ------------------: | ----: | :---- | | `add (existing item)` | 0.0 | 0.0 | 1.0 | `BenchmarkAddExistingItem` | | `add (new item)` | 0.0 | 0.0 | 1.0 | `BenchmarkAddNewItem` | | `__and__` | 0.0 | 0.0 | 1.0 | `BenchmarkAnd` | | `clear` | 0.0 | 0.0 | 1.0 | `BenchmarkClear` | | `__contains__` | 0.0 | 0.0 | 1.0 | `BenchmarkContains` | | `copy` | 0.0 | 0.0 | 1.0 | `BenchmarkCopy` | | `difference` | 0.0 | 0.0 | 1.0 | `BenchmarkDifference` | | `discard` | 0.0 | 0.0 | 1.0 | `BenchmarkDiscard` | | `discard (no changes)` | 0.0 | 0.0 | 1.0 | `BenchmarkDiscardNoChanges` | | `__ge__` | 0.0 | 0.0 | 1.0 | `BenchmarkGe` | | `__ge__` (not greater than or equals to) | 0.0 | 0.0 | 1.0 | `BenchmarkGeNot` | | `__gt__` | 0.0 | 0.0 | 1.0 | `BenchmarkGt` | | `__gt__` (not greater than) | 0.0 | 0.0 | 1.0 | `BenchmarkGtNot` | | `__iand__` | 0.0 | 0.0 | 1.0 | `BenchmarkIand` | | `__init__` | 0.0 | 0.0 | 1.0 | `BenchmarkInit` | | `intersection` | 0.0 | 0.0 | 1.0 | `BenchmarkIntersection` | | `intersection_update` | 0.0 | 0.0 | 1.0 | `BenchmarkIntersectionUpdate` | | `__ior__` | 0.0 | 0.0 | 1.0 | `BenchmarkIor` | | `isdisjoint` | 0.0 | 0.0 | 1.0 | `BenchmarkIsdisjoint` | | `isdisjoint` (not disjoint) | 0.0 | 0.0 | 1.0 | `BenchmarkIsdisjointNot` | | `issubset` | 0.0 | 0.0 | 1.0 | `BenchmarkIssubset` | | `issubset` (not subset) | 0.0 | 0.0 | 1.0 | `BenchmarkIssubsetNot` | | `issuperset` | 0.0 | 0.0 | 1.0 | `BenchmarkIssuperset` | | `issuperset` (not superset) | 0.0 | 0.0 | 1.0 | `BenchmarkIssupersetNot` | | `__ixor__` | 0.0 | 0.0 | 1.0 | `BenchmarkIxor` | | `__le__` | 0.0 | 0.0 | 1.0 | `BenchmarkLe` | | `__le__` (not less than or equals to) | 0.0 | 0.0 | 1.0 | `BenchmarkLeNot` | | `__len__` | 0.0 | 0.0 | 1.0 | `BenchmarkLen` | | `__lt__` | 0.0 | 0.0 | 1.0 | `BenchmarkLt` | | `__lt__` (not less than) | 0.0 | 0.0 | 1.0 | `BenchmarkLtNot` | | `__contains__` (unsuccessful search) | 0.0 | 0.0 | 1.0 | `BenchmarkNotContains` | | `__or__` | 0.0 | 0.0 | 1.0 | `BenchmarkOr` | | `pop` | 0.0 | 0.0 | 1.0 | `BenchmarkPop` | | `remove` | 0.0 | 0.0 | 1.0 | `BenchmarkRemove` | | `__sub__` | 0.0 | 0.0 | 1.0 | `BenchmarkSub` | | `symmetric_difference` | 0.0 | 0.0 | 1.0 | `BenchmarkSymmetricDifference` | | `symmetric_difference_update` | 0.0 | 0.0 | 1.0 | `BenchmarkSymmetricDifferenceUpdate` | | `union` | 0.0 | 0.0 | 1.0 | `BenchmarkUnion` | | `update` | 0.0 | 0.0 | 1.0 | `BenchmarkUpdate` | | `__xor__` | 0.0 | 0.0 | 1.0 | `BenchmarkXor` |","title":"Set"},{"location":"usage/common/","text":"Common Features","title":"common features"},{"location":"usage/common/#common-features","text":"","title":"Common Features"},{"location":"usage/dict/","text":"Dict Dict is a container compatible with the built-in dict , which serializes keys and values and stores them in a sqlite3 database. It preserves insertion order for all supported python versions. Dict[KT, VT](...) Constructor. Type Parameters: KT : key type VT : value type Arguments: data : Mapping[KT, VT] or Iterable[Tuple[KT, VT]] , optional, positional-only argument, defualt= None ; Initial data. If None or no argument is given, persistent data is used as is if available, otherwise persistent data in the corresponding table is cleared and given data is stored instead. connection : str or sqlite3.Connection , optional, default= None ; If None , temporary file is automatically created. If connection is a str , it will be used as the sqlite3 database file name. You can pass a sqlite3.Connection directly. table_name : str , optional, default= None ; Table name of this container. If None , an auto-generated unique name will be used. Available characters are letters, numbers, and underscores ( _ ). key_serializer : Callable[[KT], bytes] , optional, default= None ; Function to serialize key. If None , pickle.dumps is used. key_deserializer : Callable[[bytes], KT] , optional, default= None ; Function to deserialize key. If None , pickle.loads is used. value_serializer : Callable[[VT], bytes] , optional, default= None ; Function to serialize value. If None , key_serializer is used. value_deserializer : Callable[[bytes], VT] , optional, default= None ; Function to deserialize value. If None , key_deserializer is used. persist : bool , optional, default= True ; If True , table won't be deleted even when the object is deleted. If False , the table is deleted when this object is deleted. len(d) Return the number of items in d: Dict[KT, VT] Return value: int : The number of items in d d[key] Get item of d with key key . Raises a KeyError if key is not in the map. Arguments: key : KT ; Key to retrieve corresponding value Return value: VT : Item of d with key key d[key] = value Set d[key] to value . Arguments: key : KT ; Key to be set value : VT ; Value to be set Return value: None del d[key] Delete d[key] . Arguments: key : KT ; Key to be deleted Return value: None key in d Return whether if key is in d Arguments: key : KT ; Key to be checked Return value: bool : True if key is in d and False otherwise. key not in d Return whether if key is not in d Arguments: key : KT ; Key to be checked Return value: bool : True if key is not in d and False otherwise. iter(d) Return an iterator over the keys of d Return value: Iterator[KT] : an iterator over the keys of d clear() Remove all items from the dictionary Return value: None copy() Return a copy of the dictionary. The actual behavior is to create a table with a unique table name and copy the keys and the values to the new table. Therefore, unlike the built-in dict copy, the behavior is similar to deep copy. Be aware that the copied dictionary is volatile. Return value: Dict[KT, VT] : A volatile copy of the dictionary. get(key[, default]) Return the value for key if key is in the dictionary, else default . If default is not given, it defaults to None , so that this method never raises a KeyError . Arguments: key : KT ; Key to retrieve corresponding value if exists. default : VT , optional, default= None ; Default value in case that key is not in the dictionary Return value: VT : Item of the dictionary with key key if key is in the dictionary, default otherwise. items() Return a new view of the dictionary\u2019s items (key-value pairs). Return value: ItemsView : View object of the dictionary's items keys() Return a new view of the dictionary's keys. Return value: KeysView[KT] : View object of the dictionary's keys. pop(key[, default]) If key is in the dictionary, remove it and return its value, else return default . If default is not given and key is not in the dictionary, a KeyError is raised. Arguments: key : KT ; Key to retrieve corresponding value if exists. default : VT , optional, default= None ; Default value in case that key is not in the dictionary Return value: VT : Item of the dictionary with key key if key is in the dictionary, default otherwise. popitem() Remove and return a key-value pair from the dictionary. Pairs are returned in LIFO order. If the dictionary is empty, raises a KeyError . Return value: Tuple[KT, VT] : Key-value pair that were last inserted into the dictionary reversed(d) Return a reverse iterator over the keys of the dictionary. (provided only python version 3.8 and above) Return value: Iterator[KT] : Reverse iterator over the keys of the dictionary setdefault(key[, default]) If key is in the dictionary, return its value. If not, insert key with a value of default and return default . Arguments: key : KT ; Key to retrieve or set the value default : VT , optional, default= None ; Value to be set if key is not in the dictionary Return value: VT : Item of the dictionary with key key if key is in the dictionary, default otherwise. update([other, **kwargs]) Update the dictionary with the key-value pairs from other , overwriting existing keys. Arguments: other : Mapping[KT, VT] or Iterable[Tuple[KT, VT]] , optional; Key-value pairs to be added kwargs : VT , optional; values to be added Return value: None values() Return a new view of the dictionary's values. Return value: ValuesView : View object of the dictionary's values d | other Create a new dictionary with the merged keys and values of d and other , which must both be dictionaries. The values of other take priority when d and other share keys. The return value is volatile by default. (provided only python version 3.9 and above) Arguments: other : Mapping[KT, VT] or Iterable[Tuple[KT, VT]] ; Key-value pairs to be merged Return value: Dict[KT, VT] : A new volatile dictionary object. d |= other Update the dictionary d with keys and values from other . (provided only python version 3.9 and above) Arguments: other : Mapping[KT, VT] or Iterable[Tuple[KT, VT]] ; Key-value pairs to be merged Return value: Dict[KT, VT] : The dictionary object.","title":"Dict"},{"location":"usage/dict/#dict","text":"Dict is a container compatible with the built-in dict , which serializes keys and values and stores them in a sqlite3 database. It preserves insertion order for all supported python versions.","title":"Dict"},{"location":"usage/dict/#dictkt-vt","text":"Constructor.","title":"Dict[KT, VT](...)"},{"location":"usage/dict/#type-parameters","text":"KT : key type VT : value type","title":"Type Parameters:"},{"location":"usage/dict/#arguments","text":"data : Mapping[KT, VT] or Iterable[Tuple[KT, VT]] , optional, positional-only argument, defualt= None ; Initial data. If None or no argument is given, persistent data is used as is if available, otherwise persistent data in the corresponding table is cleared and given data is stored instead. connection : str or sqlite3.Connection , optional, default= None ; If None , temporary file is automatically created. If connection is a str , it will be used as the sqlite3 database file name. You can pass a sqlite3.Connection directly. table_name : str , optional, default= None ; Table name of this container. If None , an auto-generated unique name will be used. Available characters are letters, numbers, and underscores ( _ ). key_serializer : Callable[[KT], bytes] , optional, default= None ; Function to serialize key. If None , pickle.dumps is used. key_deserializer : Callable[[bytes], KT] , optional, default= None ; Function to deserialize key. If None , pickle.loads is used. value_serializer : Callable[[VT], bytes] , optional, default= None ; Function to serialize value. If None , key_serializer is used. value_deserializer : Callable[[bytes], VT] , optional, default= None ; Function to deserialize value. If None , key_deserializer is used. persist : bool , optional, default= True ; If True , table won't be deleted even when the object is deleted. If False , the table is deleted when this object is deleted.","title":"Arguments:"},{"location":"usage/dict/#lend","text":"Return the number of items in d: Dict[KT, VT]","title":"len(d)"},{"location":"usage/dict/#return-value","text":"int : The number of items in d","title":"Return value:"},{"location":"usage/dict/#dkey","text":"Get item of d with key key . Raises a KeyError if key is not in the map.","title":"d[key]"},{"location":"usage/dict/#arguments_1","text":"key : KT ; Key to retrieve corresponding value","title":"Arguments:"},{"location":"usage/dict/#return-value_1","text":"VT : Item of d with key key","title":"Return value:"},{"location":"usage/dict/#dkey-value","text":"Set d[key] to value .","title":"d[key] = value"},{"location":"usage/dict/#arguments_2","text":"key : KT ; Key to be set value : VT ; Value to be set","title":"Arguments:"},{"location":"usage/dict/#return-value_2","text":"None","title":"Return value:"},{"location":"usage/dict/#del-dkey","text":"Delete d[key] .","title":"del d[key]"},{"location":"usage/dict/#arguments_3","text":"key : KT ; Key to be deleted","title":"Arguments:"},{"location":"usage/dict/#return-value_3","text":"None","title":"Return value:"},{"location":"usage/dict/#key-in-d","text":"Return whether if key is in d","title":"key in d"},{"location":"usage/dict/#arguments_4","text":"key : KT ; Key to be checked","title":"Arguments:"},{"location":"usage/dict/#return-value_4","text":"bool : True if key is in d and False otherwise.","title":"Return value:"},{"location":"usage/dict/#key-not-in-d","text":"Return whether if key is not in d","title":"key not in d"},{"location":"usage/dict/#arguments_5","text":"key : KT ; Key to be checked","title":"Arguments:"},{"location":"usage/dict/#return-value_5","text":"bool : True if key is not in d and False otherwise.","title":"Return value:"},{"location":"usage/dict/#iterd","text":"Return an iterator over the keys of d","title":"iter(d)"},{"location":"usage/dict/#return-value_6","text":"Iterator[KT] : an iterator over the keys of d","title":"Return value:"},{"location":"usage/dict/#clear","text":"Remove all items from the dictionary","title":"clear()"},{"location":"usage/dict/#return-value_7","text":"None","title":"Return value:"},{"location":"usage/dict/#copy","text":"Return a copy of the dictionary. The actual behavior is to create a table with a unique table name and copy the keys and the values to the new table. Therefore, unlike the built-in dict copy, the behavior is similar to deep copy. Be aware that the copied dictionary is volatile.","title":"copy()"},{"location":"usage/dict/#return-value_8","text":"Dict[KT, VT] : A volatile copy of the dictionary.","title":"Return value:"},{"location":"usage/dict/#getkey-default","text":"Return the value for key if key is in the dictionary, else default . If default is not given, it defaults to None , so that this method never raises a KeyError .","title":"get(key[, default])"},{"location":"usage/dict/#arguments_6","text":"key : KT ; Key to retrieve corresponding value if exists. default : VT , optional, default= None ; Default value in case that key is not in the dictionary","title":"Arguments:"},{"location":"usage/dict/#return-value_9","text":"VT : Item of the dictionary with key key if key is in the dictionary, default otherwise.","title":"Return value:"},{"location":"usage/dict/#items","text":"Return a new view of the dictionary\u2019s items (key-value pairs).","title":"items()"},{"location":"usage/dict/#return-value_10","text":"ItemsView : View object of the dictionary's items","title":"Return value:"},{"location":"usage/dict/#keys","text":"Return a new view of the dictionary's keys.","title":"keys()"},{"location":"usage/dict/#return-value_11","text":"KeysView[KT] : View object of the dictionary's keys.","title":"Return value:"},{"location":"usage/dict/#popkey-default","text":"If key is in the dictionary, remove it and return its value, else return default . If default is not given and key is not in the dictionary, a KeyError is raised.","title":"pop(key[, default])"},{"location":"usage/dict/#arguments_7","text":"key : KT ; Key to retrieve corresponding value if exists. default : VT , optional, default= None ; Default value in case that key is not in the dictionary","title":"Arguments:"},{"location":"usage/dict/#return-value_12","text":"VT : Item of the dictionary with key key if key is in the dictionary, default otherwise.","title":"Return value:"},{"location":"usage/dict/#popitem","text":"Remove and return a key-value pair from the dictionary. Pairs are returned in LIFO order. If the dictionary is empty, raises a KeyError .","title":"popitem()"},{"location":"usage/dict/#return-value_13","text":"Tuple[KT, VT] : Key-value pair that were last inserted into the dictionary","title":"Return value:"},{"location":"usage/dict/#reversedd","text":"Return a reverse iterator over the keys of the dictionary. (provided only python version 3.8 and above)","title":"reversed(d)"},{"location":"usage/dict/#return-value_14","text":"Iterator[KT] : Reverse iterator over the keys of the dictionary","title":"Return value:"},{"location":"usage/dict/#setdefaultkey-default","text":"If key is in the dictionary, return its value. If not, insert key with a value of default and return default .","title":"setdefault(key[, default])"},{"location":"usage/dict/#arguments_8","text":"key : KT ; Key to retrieve or set the value default : VT , optional, default= None ; Value to be set if key is not in the dictionary","title":"Arguments:"},{"location":"usage/dict/#return-value_15","text":"VT : Item of the dictionary with key key if key is in the dictionary, default otherwise.","title":"Return value:"},{"location":"usage/dict/#updateother-kwargs","text":"Update the dictionary with the key-value pairs from other , overwriting existing keys.","title":"update([other, **kwargs])"},{"location":"usage/dict/#arguments_9","text":"other : Mapping[KT, VT] or Iterable[Tuple[KT, VT]] , optional; Key-value pairs to be added kwargs : VT , optional; values to be added","title":"Arguments:"},{"location":"usage/dict/#return-value_16","text":"None","title":"Return value:"},{"location":"usage/dict/#values","text":"Return a new view of the dictionary's values.","title":"values()"},{"location":"usage/dict/#return-value_17","text":"ValuesView : View object of the dictionary's values","title":"Return value:"},{"location":"usage/dict/#d-other","text":"Create a new dictionary with the merged keys and values of d and other , which must both be dictionaries. The values of other take priority when d and other share keys. The return value is volatile by default. (provided only python version 3.9 and above)","title":"d | other"},{"location":"usage/dict/#arguments_10","text":"other : Mapping[KT, VT] or Iterable[Tuple[KT, VT]] ; Key-value pairs to be merged","title":"Arguments:"},{"location":"usage/dict/#return-value_18","text":"Dict[KT, VT] : A new volatile dictionary object.","title":"Return value:"},{"location":"usage/dict/#d-other_1","text":"Update the dictionary d with keys and values from other . (provided only python version 3.9 and above)","title":"d |= other"},{"location":"usage/dict/#arguments_11","text":"other : Mapping[KT, VT] or Iterable[Tuple[KT, VT]] ; Key-value pairs to be merged","title":"Arguments:"},{"location":"usage/dict/#return-value_19","text":"Dict[KT, VT] : The dictionary object.","title":"Return value:"},{"location":"usage/factory/","text":"factory module factory module contains a factory for each container: ListFactory for List , SetFactory for Set and DictFactory for Dict . They replace constructors of each container that require extra arguments such as connection , serializer , deserializer etc., and allow users to construct a container without specifying those extra arguments. Example Basic usage The results of the following two examples are almost the same (except for the auto-generated table names). Without factory: import sqlite3 import sqlitecollections as sc conn = sqlite3.connect(\"path/to/file.db\") def encode(x: str) -> bytes: return x.encode(\"utf-8\") def decode(x: bytes) -> str: return x.decode(\"utf-8\") l1 = sc.List[str]([\"Alice\", \"Bob\", \"Carol\"], connection=conn, serializer=encode, deserializer=decode) l2 = sc.List[str]([\"Dave\"], connection=conn, serializer=encode, deserializer=decode) l3 = sc.List[str]([\"Erin\"], connection=conn, serializer=encode, deserializer=decode) With factory: import sqlite3 import sqlitecollections as sc conn = sqlite3.connect(\"path/to/file.db\") def encode(x: str) -> bytes: return x.encode(\"utf-8\") def decode(x: bytes) -> str: return x.decode(\"utf-8\") list_ = sc.ListFactory[str](connection=conn, serializer=encode, deserializer=decode) l1 = list_([\"Alice\", \"Bob\", \"Carol\"]) l2 = list_([\"Dave\"]) l3 = list_([\"Erin\"]) Specifying a table name If you want to specify table names of containers from a factory, you can do that as follows: import sqlite3 import sqlitecollections as sc conn = sqlite3.connect(\"path/to/file.db\") def encode(x: str) -> bytes: return x.encode(\"utf-8\") def decode(x: bytes) -> str: return x.decode(\"utf-8\") list_ = sc.ListFactory[str](connection=conn, serializer=encode, deserializer=decode) l1 = list_[\"first_table_name\"]([\"Alice\", \"Bob\", \"Carol\"]) assert l1.table_name == \"first_table_name\" ListFactory ListFactory[T](...) Constructor of ListFactory which constructs List . Type Parameters: T : value type of the List Arguments: connection : str or sqlite3.Connection , optional, default= None ; If None , temporary file is automatically created. If connection is a str , it will be used as the sqlite3 database file name. You can pass a sqlite3.Connection directly. table_name : str , optional, default= None ; Table name of containers from this factory. This argument is assumed not to be specified directly by users. If None , an auto-generated unique name will be used. serializer : Callable[[T], bytes] , optional, default= None ; Function to serialize value. If None , pickle.dumps is used. deserializer : Callable[[bytes], T] , optional, default= None ; Function to deserialize value. If None , pickle.loads is used. list_(data) Construct List[T] with connection, serializer and deserializer preset from ListFactory[T] list_ . Arguments: data : Iterable[T] , optional, defualt= None ; Initial data. Return value: List[T] : connection, serializer and deserializer are the same as those of the factory list_ . create(data) Construct List[T] with connection, serializer and deserializer preset from the factory. Arguments: data : Iterable[T] , optional, defualt= None ; Initial data. Return value: List[T] : connection, serializer and deserializer are the same as those of the factory. f[t] Return a copy of this factory f that creates container with table name t . Arguments: t : str ; the table name Return value: ListFactory[T] : connection, serializer and deserializer are the same as those of this factory and the table name of the List[T] from this return value will be set to t . === DictFactory DictFactory[KT, VT](...) Constructor of DictFactory which constructs Dict . Type Parameters: KT : key type of the Dict VT : value type of the Dict Arguments: connection : str or sqlite3.Connection , optional, default= None ; If None , temporary file is automatically created. If connection is a str , it will be used as the sqlite3 database file name. You can pass a sqlite3.Connection directly. table_name : str , optional, default= None ; Table name of containers from this factory. This argument is assumed not to be specified directly by users. If None , an auto-generated unique name will be used. key_serializer : Callable[[KT], bytes] , optional, default= None ; Function to serialize key. If None , pickle.dumps is used. key_deserializer : Callable[[bytes], KT] , optional, default= None ; Function to deserialize key. If None , pickle.loads is used. value_serializer : Callable[[VT], bytes] , optional, default= None ; Function to serialize value. If None , key_serializer is used. value_deserializer : Callable[[bytes], VT] , optional, default= None ; Function to deserialize value. If None , key_deserializer is used. dict_(data, **kwargs) Construct Dict[KT, VT] with connection, key*serializer, etc., preset from DictFactory[KT, VT] dict* . Arguments: data : Mapping[KT, VT] or Iterable[Tuple[KT, VT]] , optional, defualt= None ; Initial data. **kwargs : VT , optional; Appended to initial data. Return value: Dict[KT, VT] : connection, key*serializers, etc., are the same as those of the factory dict* . create(data, **kwargs) Construct Dict[KT, VT] with connection, key_serializer, etc., preset from the factory. Arguments: data : Mapping[KT, VT] or Iterable[Tuple[KT, VT]] , optional, defualt= None ; Initial data. **kwargs : VT , optional; Appended to initial data. Return value: Dict[KT, VT] : connection, key_serializers, etc., are the same as those of the factory. f[t] Return a copy of this factory f that creates container with table name t . Arguments: t : str ; the table name Return value: DictFactory[KT, VT] : connection, key_serializer, key_deserializer, value_serializer and value_deserializer are the same as those of this factory and the table name of the Dict[KT, VT] from this return value will be set to t . === SetFactory SetFactory[T](...) Constructor of SetFactory which constructs Set . Type Parameters: T : value type of the Set Arguments: connection : str or sqlite3.Connection , optional, default= None ; If None , temporary file is automatically created. If connection is a str , it will be used as the sqlite3 database file name. You can pass a sqlite3.Connection directly. table_name : str , optional, default= None ; Table name of containers from this factory. This argument is assumed not to be specified directly by users. If None , an auto-generated unique name will be used. serializer : Callable[[T], bytes] , optional, default= None ; Function to serialize value. If None , pickle.dumps is used. deserializer : Callable[[bytes], T] , optional, default= None ; Function to deserialize value. If None , pickle.loads is used. set_(data) Construct Set[T] with connection, serializer and deserializer preset from SetFactory[T] set_ . Arguments: data : Iterable[T] , optional, defualt= None ; Initial data. Return value: Set[T] : connection, serializer and deserializer are the same as those of the factory set_ . create(data) Construct Set[T] with connection, serializer and deserializer preset from the factory. Arguments: data : Iterable[T] , optional, defualt= None ; Initial data. Return value: Set[T] : connection, serializer and deserializer are the same as those of the factory. f[t] Return a copy of this factory f that creates container with table name t . Arguments: t : str ; the table name Return value: SetFactory[T] : connection, serializer and deserializer are the same as those of this factory and the table name of the Set[T] from this return value will be set to t . ===","title":"factory"},{"location":"usage/factory/#factory-module","text":"factory module contains a factory for each container: ListFactory for List , SetFactory for Set and DictFactory for Dict . They replace constructors of each container that require extra arguments such as connection , serializer , deserializer etc., and allow users to construct a container without specifying those extra arguments.","title":"factory module"},{"location":"usage/factory/#example","text":"","title":"Example"},{"location":"usage/factory/#basic-usage","text":"The results of the following two examples are almost the same (except for the auto-generated table names). Without factory: import sqlite3 import sqlitecollections as sc conn = sqlite3.connect(\"path/to/file.db\") def encode(x: str) -> bytes: return x.encode(\"utf-8\") def decode(x: bytes) -> str: return x.decode(\"utf-8\") l1 = sc.List[str]([\"Alice\", \"Bob\", \"Carol\"], connection=conn, serializer=encode, deserializer=decode) l2 = sc.List[str]([\"Dave\"], connection=conn, serializer=encode, deserializer=decode) l3 = sc.List[str]([\"Erin\"], connection=conn, serializer=encode, deserializer=decode) With factory: import sqlite3 import sqlitecollections as sc conn = sqlite3.connect(\"path/to/file.db\") def encode(x: str) -> bytes: return x.encode(\"utf-8\") def decode(x: bytes) -> str: return x.decode(\"utf-8\") list_ = sc.ListFactory[str](connection=conn, serializer=encode, deserializer=decode) l1 = list_([\"Alice\", \"Bob\", \"Carol\"]) l2 = list_([\"Dave\"]) l3 = list_([\"Erin\"])","title":"Basic usage"},{"location":"usage/factory/#specifying-a-table-name","text":"If you want to specify table names of containers from a factory, you can do that as follows: import sqlite3 import sqlitecollections as sc conn = sqlite3.connect(\"path/to/file.db\") def encode(x: str) -> bytes: return x.encode(\"utf-8\") def decode(x: bytes) -> str: return x.decode(\"utf-8\") list_ = sc.ListFactory[str](connection=conn, serializer=encode, deserializer=decode) l1 = list_[\"first_table_name\"]([\"Alice\", \"Bob\", \"Carol\"]) assert l1.table_name == \"first_table_name\"","title":"Specifying a table name"},{"location":"usage/factory/#listfactory","text":"","title":"ListFactory"},{"location":"usage/factory/#listfactoryt","text":"Constructor of ListFactory which constructs List .","title":"ListFactory[T](...)"},{"location":"usage/factory/#type-parameters","text":"T : value type of the List","title":"Type Parameters:"},{"location":"usage/factory/#arguments","text":"connection : str or sqlite3.Connection , optional, default= None ; If None , temporary file is automatically created. If connection is a str , it will be used as the sqlite3 database file name. You can pass a sqlite3.Connection directly. table_name : str , optional, default= None ; Table name of containers from this factory. This argument is assumed not to be specified directly by users. If None , an auto-generated unique name will be used. serializer : Callable[[T], bytes] , optional, default= None ; Function to serialize value. If None , pickle.dumps is used. deserializer : Callable[[bytes], T] , optional, default= None ; Function to deserialize value. If None , pickle.loads is used.","title":"Arguments:"},{"location":"usage/factory/#list_data","text":"Construct List[T] with connection, serializer and deserializer preset from ListFactory[T] list_ .","title":"list_(data)"},{"location":"usage/factory/#arguments_1","text":"data : Iterable[T] , optional, defualt= None ; Initial data.","title":"Arguments:"},{"location":"usage/factory/#return-value","text":"List[T] : connection, serializer and deserializer are the same as those of the factory list_ .","title":"Return value:"},{"location":"usage/factory/#createdata","text":"Construct List[T] with connection, serializer and deserializer preset from the factory.","title":"create(data)"},{"location":"usage/factory/#arguments_2","text":"data : Iterable[T] , optional, defualt= None ; Initial data.","title":"Arguments:"},{"location":"usage/factory/#return-value_1","text":"List[T] : connection, serializer and deserializer are the same as those of the factory.","title":"Return value:"},{"location":"usage/factory/#ft","text":"Return a copy of this factory f that creates container with table name t .","title":"f[t]"},{"location":"usage/factory/#arguments_3","text":"t : str ; the table name","title":"Arguments:"},{"location":"usage/factory/#return-value_2","text":"ListFactory[T] : connection, serializer and deserializer are the same as those of this factory and the table name of the List[T] from this return value will be set to t . ===","title":"Return value:"},{"location":"usage/factory/#dictfactory","text":"","title":"DictFactory"},{"location":"usage/factory/#dictfactorykt-vt","text":"Constructor of DictFactory which constructs Dict .","title":"DictFactory[KT, VT](...)"},{"location":"usage/factory/#type-parameters_1","text":"KT : key type of the Dict VT : value type of the Dict","title":"Type Parameters:"},{"location":"usage/factory/#arguments_4","text":"connection : str or sqlite3.Connection , optional, default= None ; If None , temporary file is automatically created. If connection is a str , it will be used as the sqlite3 database file name. You can pass a sqlite3.Connection directly. table_name : str , optional, default= None ; Table name of containers from this factory. This argument is assumed not to be specified directly by users. If None , an auto-generated unique name will be used. key_serializer : Callable[[KT], bytes] , optional, default= None ; Function to serialize key. If None , pickle.dumps is used. key_deserializer : Callable[[bytes], KT] , optional, default= None ; Function to deserialize key. If None , pickle.loads is used. value_serializer : Callable[[VT], bytes] , optional, default= None ; Function to serialize value. If None , key_serializer is used. value_deserializer : Callable[[bytes], VT] , optional, default= None ; Function to deserialize value. If None , key_deserializer is used.","title":"Arguments:"},{"location":"usage/factory/#dict_data-kwargs","text":"Construct Dict[KT, VT] with connection, key*serializer, etc., preset from DictFactory[KT, VT] dict* .","title":"dict_(data, **kwargs)"},{"location":"usage/factory/#arguments_5","text":"data : Mapping[KT, VT] or Iterable[Tuple[KT, VT]] , optional, defualt= None ; Initial data. **kwargs : VT , optional; Appended to initial data.","title":"Arguments:"},{"location":"usage/factory/#return-value_3","text":"Dict[KT, VT] : connection, key*serializers, etc., are the same as those of the factory dict* .","title":"Return value:"},{"location":"usage/factory/#createdata-kwargs","text":"Construct Dict[KT, VT] with connection, key_serializer, etc., preset from the factory.","title":"create(data, **kwargs)"},{"location":"usage/factory/#arguments_6","text":"data : Mapping[KT, VT] or Iterable[Tuple[KT, VT]] , optional, defualt= None ; Initial data. **kwargs : VT , optional; Appended to initial data.","title":"Arguments:"},{"location":"usage/factory/#return-value_4","text":"Dict[KT, VT] : connection, key_serializers, etc., are the same as those of the factory.","title":"Return value:"},{"location":"usage/factory/#ft_1","text":"Return a copy of this factory f that creates container with table name t .","title":"f[t]"},{"location":"usage/factory/#arguments_7","text":"t : str ; the table name","title":"Arguments:"},{"location":"usage/factory/#return-value_5","text":"DictFactory[KT, VT] : connection, key_serializer, key_deserializer, value_serializer and value_deserializer are the same as those of this factory and the table name of the Dict[KT, VT] from this return value will be set to t . ===","title":"Return value:"},{"location":"usage/factory/#setfactory","text":"","title":"SetFactory"},{"location":"usage/factory/#setfactoryt","text":"Constructor of SetFactory which constructs Set .","title":"SetFactory[T](...)"},{"location":"usage/factory/#type-parameters_2","text":"T : value type of the Set","title":"Type Parameters:"},{"location":"usage/factory/#arguments_8","text":"connection : str or sqlite3.Connection , optional, default= None ; If None , temporary file is automatically created. If connection is a str , it will be used as the sqlite3 database file name. You can pass a sqlite3.Connection directly. table_name : str , optional, default= None ; Table name of containers from this factory. This argument is assumed not to be specified directly by users. If None , an auto-generated unique name will be used. serializer : Callable[[T], bytes] , optional, default= None ; Function to serialize value. If None , pickle.dumps is used. deserializer : Callable[[bytes], T] , optional, default= None ; Function to deserialize value. If None , pickle.loads is used.","title":"Arguments:"},{"location":"usage/factory/#set_data","text":"Construct Set[T] with connection, serializer and deserializer preset from SetFactory[T] set_ .","title":"set_(data)"},{"location":"usage/factory/#arguments_9","text":"data : Iterable[T] , optional, defualt= None ; Initial data.","title":"Arguments:"},{"location":"usage/factory/#return-value_6","text":"Set[T] : connection, serializer and deserializer are the same as those of the factory set_ .","title":"Return value:"},{"location":"usage/factory/#createdata_1","text":"Construct Set[T] with connection, serializer and deserializer preset from the factory.","title":"create(data)"},{"location":"usage/factory/#arguments_10","text":"data : Iterable[T] , optional, defualt= None ; Initial data.","title":"Arguments:"},{"location":"usage/factory/#return-value_7","text":"Set[T] : connection, serializer and deserializer are the same as those of the factory.","title":"Return value:"},{"location":"usage/factory/#ft_2","text":"Return a copy of this factory f that creates container with table name t .","title":"f[t]"},{"location":"usage/factory/#arguments_11","text":"t : str ; the table name","title":"Arguments:"},{"location":"usage/factory/#return-value_8","text":"SetFactory[T] : connection, serializer and deserializer are the same as those of this factory and the table name of the Set[T] from this return value will be set to t . ===","title":"Return value:"},{"location":"usage/list/","text":"List List is a container compatible with the built-in list , which serializes values and stores them in a sqlite3 database. List[T](...) Constructor. Type Parameters: T : value type Arguments: data : Iterable[T] , optional, positional-only argument, defualt= None ; Initial data. If None or no argument is given, persistent data is used as is if available, otherwise persistent data in the corresponding table is cleared and given data is stored instead. connection : str or sqlite3.Connection , optional, default= None ; If None , temporary file is automatically created. If connection is a str , it will be used as the sqlite3 database file name. You can pass a sqlite3.Connection directly. table_name : str , optional, default= None ; Table name of this container. If None , an auto-generated unique name will be used. Available characters are letters, numbers, and underscores ( _ ). serializer : Callable[[T], bytes] , optional, default= None ; Function to serialize value. If None , pickle.dumps is used. deserializer : Callable[[bytes], T] , optional, default= None ; Function to deserialize value. If None , pickle.loads is used. persist : bool , optional, default= True ; If True , table won't be deleted even when the object is deleted. If False , the table is deleted when this object is deleted. x in s True if an item of s is equal to x , else False Arguments: x : object ; an object to be checked Return value: bool : True if x is in s and False otherwise. x not in s False if an item of s is equal to x , else True Arguments: x : object ; an object to be checked Return value: bool : False if x is in s and True otherwise. s + t The concatenation of s and t Arguments: t : Iterable[T] ; An iterable to be concatenated. Return value: List[T] : The concatenation of s and t . s * n or n * s equivalent to adding s to itself n times. Arguments: n : int ; Number of times to repeat. Return value: List[T] : a list of n times s was repeated. s[i] i -th item of s , origin 0 . Arguments: i : int ; Item index. If it is negative, it is equivalent to len(s) + i . Return value: T : i -th item of s , origin 0 . s[i:j] Slice of s from i to j . Arguments: i : int or None ; Item index where the slice starts from. If None , it is treated as 0 . j : int or None ; Item index where the slice stops at. If None , it is treated as len(s) . Return value: List[T] : Slice of s from i to j . s[i:j:k] Slice of s from i to j with step k Arguments: i : int or None ; Item index where the slice starts from. If None , it is treated as 0 . j : int or None ; Item index where the slice stops at. If None , it is treated as len(s) . k : int or None ; Step of the slice. If None , it is treated as 1 . Return value: List[T] : Slice of s from i to j with step k . len(s) Return the number of items in s: List[T] Return value: int : The number of items in s index(x[, i[, j]]]) Return index of the first occurrence of x in the list (at or after index i and before index j ). Raise ValueError if x is not in the list. Arguments: x : T ; Value to retrieve corresponding index if exists. i : int , optional, default= None ; First index to look up the value. If it is None , start from the first element of the list. j : int , optional, default= None ; Index before the last one to look for a value. If None , search to the end. Return value: int : Index of the first occurrence of x in the list. count(x) Return total number of occurrences of x in the list. Arguments: x : T ; Value that counts the number of occurrences. Return value: int : The number of occurrences of x in the list. s[i] = x Replace item i of s by x . Arguments: i : int ; Item index to be set. If it is negative, it is equivalent to len(s) + i x : T ; Value to be set. Return value: None . del s[i] Remove item i of s . Arguments: i : int ; Item index to be removed. If it is negative, it is equivalent to len(s) + i . Return value: None . s[i:j] = t Replace slice of s from i to j by the contents of the iterable t . Arguments: i : int or None ; Item index where the slice starts from. If None , it is treated as 0 . j : int or None ; Item index where the slice stops at. If None , it is treated as len(s) . t : Iterable[T] ; Iterable to be inserted. Return value: None . del s[i:j] Remove slice of s from i to j . Arguments: i : int or None ; Item index where the slice starts from. If None , it is treated as 0 . j : int or None ; Item index where the slice stops at. If None , it is treated as len(s) . Return value: None . s[i:j:k] = t Replace the elements of s[i:j:k] by those ofthe iterable t . The length must be the same. Otherwise, ValueError will be raised. Arguments: i : int or None ; Item index where the slice starts from. If None , it is treated as 0 . j : int or None ; Item index where the slice stops at. If None , it is treated as len(s) . k : int or None ; Step of the slice. If None , it is treated as 1 . t : Iterable[T] ; Iterable to be substituted. The length must be the same as that of the slice. Return value: None . del s[i:j:k] Remove the elements of s[i:j:k] from the list. Arguments: i : int or None ; Item index where the slice starts from. If None , it is treated as 0 . j : int or None ; Item index where the slice stops at. If None , it is treated as len(s) . k : int or None ; Step of the slice. If None , it is treated as 1 . Return value: None . append(x) Append x to the end of the sequence. Arguments: x : T ; Item to be appended. Return value; None . clear() Remove all items from the list. Return value: None . copy() Return a copy of the list. The actual behavior is to create a table with a unique table name and copy the items to the new table. Therefore, unlike the built-in list copy, the behavior is similar to deep copy. Be aware that the copied list is volatile. Return value: List[T] : A volatile copy of the list. extend(t) Concatenate the list and t . Arguments: t : Iterable[T] ; An iterable to be concatenated. Return value: None . s += t Concatenate s and t . Arguments: t : Iterable[T] ; An iterable to be concatenated. Return value: None . s *= n Update s with its contents repeated n times. Arguments: n : int ; Number of times to repeat. Return value: None . insert(i, x) Insert x into the list at the index i . Arguments: i : int ; Index to be inserted. x : T ; Item to be inserted. Return value: None . pop(i) Retrieve the item at i and also remove it from s. Arguments: i : int or None , optional, default= None ; Index to be retrieved and removed. If it is None , it is treated as the last index of the list. Return value: T : i -th item of s , origin 0 . remove(x) Remove the first item of s whose value is equal to x . Arguments: x : T ; Item to be removed. Return value: None . reverse() Reverse the items of the list in place. Return value: None . sort(reverse, key) Sort the items of the list in place. The value of reverse can be either True or False , resulting in descending or ascending order, respectively. key specifies a function of one argument that is used to extract a comparison key from each list element. Arguments: reverse : bool , optional, default= False ; By default, the order is ascending, but if this value is True , the order will be descending. key : Callable[[T], Any] , optional, default= None ; Function to extract a comparison key from each list element. Return value: None .","title":"List"},{"location":"usage/list/#list","text":"List is a container compatible with the built-in list , which serializes values and stores them in a sqlite3 database.","title":"List"},{"location":"usage/list/#listt","text":"Constructor.","title":"List[T](...)"},{"location":"usage/list/#type-parameters","text":"T : value type","title":"Type Parameters:"},{"location":"usage/list/#arguments","text":"data : Iterable[T] , optional, positional-only argument, defualt= None ; Initial data. If None or no argument is given, persistent data is used as is if available, otherwise persistent data in the corresponding table is cleared and given data is stored instead. connection : str or sqlite3.Connection , optional, default= None ; If None , temporary file is automatically created. If connection is a str , it will be used as the sqlite3 database file name. You can pass a sqlite3.Connection directly. table_name : str , optional, default= None ; Table name of this container. If None , an auto-generated unique name will be used. Available characters are letters, numbers, and underscores ( _ ). serializer : Callable[[T], bytes] , optional, default= None ; Function to serialize value. If None , pickle.dumps is used. deserializer : Callable[[bytes], T] , optional, default= None ; Function to deserialize value. If None , pickle.loads is used. persist : bool , optional, default= True ; If True , table won't be deleted even when the object is deleted. If False , the table is deleted when this object is deleted.","title":"Arguments:"},{"location":"usage/list/#x-in-s","text":"True if an item of s is equal to x , else False","title":"x in s"},{"location":"usage/list/#arguments_1","text":"x : object ; an object to be checked","title":"Arguments:"},{"location":"usage/list/#return-value","text":"bool : True if x is in s and False otherwise.","title":"Return value:"},{"location":"usage/list/#x-not-in-s","text":"False if an item of s is equal to x , else True","title":"x not in s"},{"location":"usage/list/#arguments_2","text":"x : object ; an object to be checked","title":"Arguments:"},{"location":"usage/list/#return-value_1","text":"bool : False if x is in s and True otherwise.","title":"Return value:"},{"location":"usage/list/#s-t","text":"The concatenation of s and t","title":"s + t"},{"location":"usage/list/#arguments_3","text":"t : Iterable[T] ; An iterable to be concatenated.","title":"Arguments:"},{"location":"usage/list/#return-value_2","text":"List[T] : The concatenation of s and t .","title":"Return value:"},{"location":"usage/list/#s-n-or-n-s","text":"equivalent to adding s to itself n times.","title":"s * n or n * s"},{"location":"usage/list/#arguments_4","text":"n : int ; Number of times to repeat.","title":"Arguments:"},{"location":"usage/list/#return-value_3","text":"List[T] : a list of n times s was repeated.","title":"Return value:"},{"location":"usage/list/#si","text":"i -th item of s , origin 0 .","title":"s[i]"},{"location":"usage/list/#arguments_5","text":"i : int ; Item index. If it is negative, it is equivalent to len(s) + i .","title":"Arguments:"},{"location":"usage/list/#return-value_4","text":"T : i -th item of s , origin 0 .","title":"Return value:"},{"location":"usage/list/#sij","text":"Slice of s from i to j .","title":"s[i:j]"},{"location":"usage/list/#arguments_6","text":"i : int or None ; Item index where the slice starts from. If None , it is treated as 0 . j : int or None ; Item index where the slice stops at. If None , it is treated as len(s) .","title":"Arguments:"},{"location":"usage/list/#return-value_5","text":"List[T] : Slice of s from i to j .","title":"Return value:"},{"location":"usage/list/#sijk","text":"Slice of s from i to j with step k","title":"s[i:j:k]"},{"location":"usage/list/#arguments_7","text":"i : int or None ; Item index where the slice starts from. If None , it is treated as 0 . j : int or None ; Item index where the slice stops at. If None , it is treated as len(s) . k : int or None ; Step of the slice. If None , it is treated as 1 .","title":"Arguments:"},{"location":"usage/list/#return-value_6","text":"List[T] : Slice of s from i to j with step k .","title":"Return value:"},{"location":"usage/list/#lens","text":"Return the number of items in s: List[T]","title":"len(s)"},{"location":"usage/list/#return-value_7","text":"int : The number of items in s","title":"Return value:"},{"location":"usage/list/#indexx-i-j","text":"Return index of the first occurrence of x in the list (at or after index i and before index j ). Raise ValueError if x is not in the list.","title":"index(x[, i[, j]]])"},{"location":"usage/list/#arguments_8","text":"x : T ; Value to retrieve corresponding index if exists. i : int , optional, default= None ; First index to look up the value. If it is None , start from the first element of the list. j : int , optional, default= None ; Index before the last one to look for a value. If None , search to the end.","title":"Arguments:"},{"location":"usage/list/#return-value_8","text":"int : Index of the first occurrence of x in the list.","title":"Return value:"},{"location":"usage/list/#countx","text":"Return total number of occurrences of x in the list.","title":"count(x)"},{"location":"usage/list/#arguments_9","text":"x : T ; Value that counts the number of occurrences.","title":"Arguments:"},{"location":"usage/list/#return-value_9","text":"int : The number of occurrences of x in the list.","title":"Return value:"},{"location":"usage/list/#si-x","text":"Replace item i of s by x .","title":"s[i] = x"},{"location":"usage/list/#arguments_10","text":"i : int ; Item index to be set. If it is negative, it is equivalent to len(s) + i x : T ; Value to be set.","title":"Arguments:"},{"location":"usage/list/#return-value_10","text":"None .","title":"Return value:"},{"location":"usage/list/#del-si","text":"Remove item i of s .","title":"del s[i]"},{"location":"usage/list/#arguments_11","text":"i : int ; Item index to be removed. If it is negative, it is equivalent to len(s) + i .","title":"Arguments:"},{"location":"usage/list/#return-value_11","text":"None .","title":"Return value:"},{"location":"usage/list/#sij-t","text":"Replace slice of s from i to j by the contents of the iterable t .","title":"s[i:j] = t"},{"location":"usage/list/#arguments_12","text":"i : int or None ; Item index where the slice starts from. If None , it is treated as 0 . j : int or None ; Item index where the slice stops at. If None , it is treated as len(s) . t : Iterable[T] ; Iterable to be inserted.","title":"Arguments:"},{"location":"usage/list/#return-value_12","text":"None .","title":"Return value:"},{"location":"usage/list/#del-sij","text":"Remove slice of s from i to j .","title":"del s[i:j]"},{"location":"usage/list/#arguments_13","text":"i : int or None ; Item index where the slice starts from. If None , it is treated as 0 . j : int or None ; Item index where the slice stops at. If None , it is treated as len(s) .","title":"Arguments:"},{"location":"usage/list/#return-value_13","text":"None .","title":"Return value:"},{"location":"usage/list/#sijk-t","text":"Replace the elements of s[i:j:k] by those ofthe iterable t . The length must be the same. Otherwise, ValueError will be raised.","title":"s[i:j:k] = t"},{"location":"usage/list/#arguments_14","text":"i : int or None ; Item index where the slice starts from. If None , it is treated as 0 . j : int or None ; Item index where the slice stops at. If None , it is treated as len(s) . k : int or None ; Step of the slice. If None , it is treated as 1 . t : Iterable[T] ; Iterable to be substituted. The length must be the same as that of the slice.","title":"Arguments:"},{"location":"usage/list/#return-value_14","text":"None .","title":"Return value:"},{"location":"usage/list/#del-sijk","text":"Remove the elements of s[i:j:k] from the list.","title":"del s[i:j:k]"},{"location":"usage/list/#arguments_15","text":"i : int or None ; Item index where the slice starts from. If None , it is treated as 0 . j : int or None ; Item index where the slice stops at. If None , it is treated as len(s) . k : int or None ; Step of the slice. If None , it is treated as 1 .","title":"Arguments:"},{"location":"usage/list/#return-value_15","text":"None .","title":"Return value:"},{"location":"usage/list/#appendx","text":"Append x to the end of the sequence.","title":"append(x)"},{"location":"usage/list/#arguments_16","text":"x : T ; Item to be appended.","title":"Arguments:"},{"location":"usage/list/#return-value_16","text":"None .","title":"Return value;"},{"location":"usage/list/#clear","text":"Remove all items from the list.","title":"clear()"},{"location":"usage/list/#return-value_17","text":"None .","title":"Return value:"},{"location":"usage/list/#copy","text":"Return a copy of the list. The actual behavior is to create a table with a unique table name and copy the items to the new table. Therefore, unlike the built-in list copy, the behavior is similar to deep copy. Be aware that the copied list is volatile.","title":"copy()"},{"location":"usage/list/#return-value_18","text":"List[T] : A volatile copy of the list.","title":"Return value:"},{"location":"usage/list/#extendt","text":"Concatenate the list and t .","title":"extend(t)"},{"location":"usage/list/#arguments_17","text":"t : Iterable[T] ; An iterable to be concatenated.","title":"Arguments:"},{"location":"usage/list/#return-value_19","text":"None .","title":"Return value:"},{"location":"usage/list/#s-t_1","text":"Concatenate s and t .","title":"s += t"},{"location":"usage/list/#arguments_18","text":"t : Iterable[T] ; An iterable to be concatenated.","title":"Arguments:"},{"location":"usage/list/#return-value_20","text":"None .","title":"Return value:"},{"location":"usage/list/#s-n","text":"Update s with its contents repeated n times.","title":"s *= n"},{"location":"usage/list/#arguments_19","text":"n : int ; Number of times to repeat.","title":"Arguments:"},{"location":"usage/list/#return-value_21","text":"None .","title":"Return value:"},{"location":"usage/list/#inserti-x","text":"Insert x into the list at the index i .","title":"insert(i, x)"},{"location":"usage/list/#arguments_20","text":"i : int ; Index to be inserted. x : T ; Item to be inserted.","title":"Arguments:"},{"location":"usage/list/#return-value_22","text":"None .","title":"Return value:"},{"location":"usage/list/#popi","text":"Retrieve the item at i and also remove it from s.","title":"pop(i)"},{"location":"usage/list/#arguments_21","text":"i : int or None , optional, default= None ; Index to be retrieved and removed. If it is None , it is treated as the last index of the list.","title":"Arguments:"},{"location":"usage/list/#return-value_23","text":"T : i -th item of s , origin 0 .","title":"Return value:"},{"location":"usage/list/#removex","text":"Remove the first item of s whose value is equal to x .","title":"remove(x)"},{"location":"usage/list/#arguments_22","text":"x : T ; Item to be removed.","title":"Arguments:"},{"location":"usage/list/#return-value_24","text":"None .","title":"Return value:"},{"location":"usage/list/#reverse","text":"Reverse the items of the list in place.","title":"reverse()"},{"location":"usage/list/#return-value_25","text":"None .","title":"Return value:"},{"location":"usage/list/#sortreverse-key","text":"Sort the items of the list in place. The value of reverse can be either True or False , resulting in descending or ascending order, respectively. key specifies a function of one argument that is used to extract a comparison key from each list element.","title":"sort(reverse, key)"},{"location":"usage/list/#arguments_23","text":"reverse : bool , optional, default= False ; By default, the order is ascending, but if this value is True , the order will be descending. key : Callable[[T], Any] , optional, default= None ; Function to extract a comparison key from each list element.","title":"Arguments:"},{"location":"usage/list/#return-value_26","text":"None .","title":"Return value:"},{"location":"usage/metadata/","text":"Metadata MetadataItem MetadataItem(...) Constructor for MetadataItem. Instances of this class are not supposed to be created directly by the user. Arguments: table_name : str ; table name. container_type : str ; container type name. schema_version : str ; schema version. table_name Read-only property for the table name. Return value: str : The table name. container_type Read-only property for the container type. Return value: str : The container type. schema_version Read-only property for the schema version Return value: str : The schema version. MetadataReader MetadataReader(...) Constructor for MetadataReader class which can iterate over all records in the given connection. Arguments: connection : str or sqlite3.Connection ; Connection to sqlite3 to get metadata. If connection is a str , it will be used as the sqlite3 database file name. You can pass a sqlite3.Connection directly. len(metadata_reader) Return the number of records in the metadata table read by metadata_reader . It coincides the number of collections in the sqlite3 database connected by metadata_reader._connection . Return value: int : The number of items in the metadata table. obj in metadata_reader Return whether if obj is in metadata_reader Arguments: obj : object ; object to be checked the membership. Return value: bool : Boolean value whether if metadata_item is in the metadata table. iter(metadata_reader) Return an iterator over the MetadataItem 's in metadata_reader It coincides the records of metadata table in the sqlite3 database connected by metadata_reader._connection . Return value: Iterator[MetadataItem] : an iterator over the MetadataItem 's in metadata_reader","title":"metadata"},{"location":"usage/metadata/#metadata","text":"","title":"Metadata"},{"location":"usage/metadata/#metadataitem","text":"","title":"MetadataItem"},{"location":"usage/metadata/#metadataitem_1","text":"Constructor for MetadataItem. Instances of this class are not supposed to be created directly by the user.","title":"MetadataItem(...)"},{"location":"usage/metadata/#arguments","text":"table_name : str ; table name. container_type : str ; container type name. schema_version : str ; schema version.","title":"Arguments:"},{"location":"usage/metadata/#table_name","text":"Read-only property for the table name.","title":"table_name"},{"location":"usage/metadata/#return-value","text":"str : The table name.","title":"Return value:"},{"location":"usage/metadata/#container_type","text":"Read-only property for the container type.","title":"container_type"},{"location":"usage/metadata/#return-value_1","text":"str : The container type.","title":"Return value:"},{"location":"usage/metadata/#schema_version","text":"Read-only property for the schema version","title":"schema_version"},{"location":"usage/metadata/#return-value_2","text":"str : The schema version.","title":"Return value:"},{"location":"usage/metadata/#metadatareader","text":"","title":"MetadataReader"},{"location":"usage/metadata/#metadatareader_1","text":"Constructor for MetadataReader class which can iterate over all records in the given connection.","title":"MetadataReader(...)"},{"location":"usage/metadata/#arguments_1","text":"connection : str or sqlite3.Connection ; Connection to sqlite3 to get metadata. If connection is a str , it will be used as the sqlite3 database file name. You can pass a sqlite3.Connection directly.","title":"Arguments:"},{"location":"usage/metadata/#lenmetadata_reader","text":"Return the number of records in the metadata table read by metadata_reader . It coincides the number of collections in the sqlite3 database connected by metadata_reader._connection .","title":"len(metadata_reader)"},{"location":"usage/metadata/#return-value_3","text":"int : The number of items in the metadata table.","title":"Return value:"},{"location":"usage/metadata/#obj-in-metadata_reader","text":"Return whether if obj is in metadata_reader","title":"obj in metadata_reader"},{"location":"usage/metadata/#arguments_2","text":"obj : object ; object to be checked the membership.","title":"Arguments:"},{"location":"usage/metadata/#return-value_4","text":"bool : Boolean value whether if metadata_item is in the metadata table.","title":"Return value:"},{"location":"usage/metadata/#itermetadata_reader","text":"Return an iterator over the MetadataItem 's in metadata_reader It coincides the records of metadata table in the sqlite3 database connected by metadata_reader._connection .","title":"iter(metadata_reader)"},{"location":"usage/metadata/#return-value_5","text":"Iterator[MetadataItem] : an iterator over the MetadataItem 's in metadata_reader","title":"Return value:"},{"location":"usage/set/","text":"Set Set is a container compatible with the built-in set , which serializes values and stores them in a sqlite3 database. Set[T](...) Constructor. Type Parameters: T : value type Arguments: data : Iterable[T] , optional, positional-only argument, defualt= None ; Initial data. If None or no argument is given, persistent data is used as is if available, otherwise persistent data in the corresponding table is cleared and given data is stored instead. connection : str or sqlite3.Connection , optional, default= None ; If None , temporary file is automatically created. If connection is a str , it will be used as the sqlite3 database file name. You can pass a sqlite3.Connection directly. table_name : str , optional, default= None ; Table name of this container. If None , an auto-generated unique name will be used. Available characters are letters, numbers, and underscores ( _ ). serializer : Callable[[T], bytes] , optional, default= None ; Function to serialize value. If None , pickle.dumps is used. deserializer : Callable[[bytes], T] , optional, default= None ; Function to deserialize value. If None , pickle.loads is used. persist : bool , optional, default= True ; If True , table won't be deleted even when the object is deleted. If False , the table is deleted when this object is deleted. len(s) Return the number of items in s: Set[T] Return value: int : The number of items in s x in s True if x is in s , else False Arguments: x : object ; an object to be checked Return value: bool : True if x is in s and False otherwise. x not in s False if x is in s , else True Arguments: x : object ; an object to be checked Return value: bool : False if x is in s and True otherwise. isdisjoint(other) Return True if the set has no elements in common with other . Arguments: other : Iterable[T] ; Iterable to check if disjoint. Return value: bool : True if the set is disjoint with other , False otherwise. issubset(other) Return True if every element in the set is in other . Arguments: other : Iterable[T] ; Iterable to check if this one contains the set. Return value: bool : True if the set is subset of other , False otherwise. s <= other Return True if every element in the set is in other . Argument: other : Iterable[T] ; Iterable to check if this one contains all the elements in the set. Return value: bool : True if the set is subset of other , False otherwise. s < other Return True if every element in the set is in other and s is not equal to other . Arguments: other : Iterable[T] ; Iterable to check if it contains all elements of the set and is not equal to the set. Return value: bool : True if the set is a proper subset of other , False otherwise. issuperset(other) Return True if every element in other is in the set. Arguments: other : Iterable[T] ; Iterable to check if the elements are contained. Return value: bool : True if the set is superset of other , False otherwise. s >= other Return True if every element in other is in the set. Argument: other : Iterable[T] ; Iterable to check if the elements are contained. Return value: bool : True if the set is superset of other , False otherwise. s > other Return True if every element in other is in the set and s is not equal to other . Arguments: other : Iterable[T] ; Iterable to check if it all elements are in the set and is not equal to the set. Return value: bool : True if the set is a proper superset of other , False otherwise. union(*others) Return a new set with elements from the set and all others . Arguments: others : Iterable[T] ; Iterables to take the union. Return value: Set[T] : A new set with elements from the set and all others . s | other Return a new set with elements from s and other . Arguments: other : Iterable[T] ; Iterable to take the union. Return value: Set[T] : A new set with elements from s and other . intersection(*others) Return a new set with elements common to the set and all others . Arguments: others : Iterable[T] ; Iterables to take the intersection. Return value: Set[T] : A new set with elements common to the set and all others . s & other Return a new set with elements common to s and other . Arguments: other : Iterable[T] ; Iterable to take the intersection. Return value: Set[T] : A new set with elements common to s and other . difference(*others) Return a new set with elements in the set that are not in the others . Arguments: others : Iterable[T] ; Iterables to take the difference. Return value: Set[T] : A new set with elements in the set that are not in the others . s - other Return a new set with elements in the set that are not in the other . Arguments: other : Iterable[T] ; Iterable to take the difference. Return value: Set[T] : A new set with elements in the set that are not in the other . symmetric_difference(other) Return a new set with elements in either the set or other but not both. Arguments: other : Iterable[T] ; Iterable to take the symmetric difference. Return value: Set[T] : A new set with elements in either the set or other but not both. s ^ other Return a new set with elements in either the set or other but not both. Arguments: other : Iterable[T] ; Iterable to take the symmetric difference. Return value: Set[T] : A new set with elements in either the set or other but not both. copy() Return a copy of the set. The actual behavior is to create a table with a unique table name and copy the elements to the new table. Therefore, unlike the built-in set copy, the behavior is similar to deep copy. Be aware that the copied set is volatile. Return value: Set[T] : A volatile copy of the set. update(*others) Update the set by adding elements from all others . Arguments: others : Iterable[T] ; Iterables to take the union. Return value: None . s |= other Update the set by adding elements from other . Arguments: other : Iterable[T] ; Iterable to take the union. Return value: None . intersection_update(*others) Update the set by keeping only elements found in the set and all others . Arguments: others : Iterable[T] ; Iterables to take the intersection. Return value: None . s &= other Update the set by keeping only elements found in the set and other . Arguments: other : Iterable[T] ; Iterable to take the intersection. Return value: None . symmetric_difference_update(other) Update the set by keeping only elements found in either the set or other but not both. Arguments: other : Iterable[T] ; Iterable to take the symmetric difference. Return value: None . s ^= other Update the set by keeping only elements found in either the set or other but not both. Arguments: other : Iterable[T] ; Iterable to take the symmetric difference. Return value: None . add(elem) Add an element elem to the set. Arguments: elem : T ; An element to be added. Return value: None . remove(elem) Remove an element elem from the set. Raises KeyError if elem is not contained in the set. Arguemnts: elem : T ; An element to be removed. Return value: None . discard(elem) Remove an element elem from the set if it is present. Arguments: elem : T ; An element to be removed. Return value: None . pop() Remove and return an arbitrary element from the set. Raises KeyError if the set is empty. Return value: T : An element in the set. clear() Remove all elements from the set. Return value: None .","title":"Set"},{"location":"usage/set/#set","text":"Set is a container compatible with the built-in set , which serializes values and stores them in a sqlite3 database.","title":"Set"},{"location":"usage/set/#sett","text":"Constructor.","title":"Set[T](...)"},{"location":"usage/set/#type-parameters","text":"T : value type","title":"Type Parameters:"},{"location":"usage/set/#arguments","text":"data : Iterable[T] , optional, positional-only argument, defualt= None ; Initial data. If None or no argument is given, persistent data is used as is if available, otherwise persistent data in the corresponding table is cleared and given data is stored instead. connection : str or sqlite3.Connection , optional, default= None ; If None , temporary file is automatically created. If connection is a str , it will be used as the sqlite3 database file name. You can pass a sqlite3.Connection directly. table_name : str , optional, default= None ; Table name of this container. If None , an auto-generated unique name will be used. Available characters are letters, numbers, and underscores ( _ ). serializer : Callable[[T], bytes] , optional, default= None ; Function to serialize value. If None , pickle.dumps is used. deserializer : Callable[[bytes], T] , optional, default= None ; Function to deserialize value. If None , pickle.loads is used. persist : bool , optional, default= True ; If True , table won't be deleted even when the object is deleted. If False , the table is deleted when this object is deleted.","title":"Arguments:"},{"location":"usage/set/#lens","text":"Return the number of items in s: Set[T]","title":"len(s)"},{"location":"usage/set/#return-value","text":"int : The number of items in s","title":"Return value:"},{"location":"usage/set/#x-in-s","text":"True if x is in s , else False","title":"x in s"},{"location":"usage/set/#arguments_1","text":"x : object ; an object to be checked","title":"Arguments:"},{"location":"usage/set/#return-value_1","text":"bool : True if x is in s and False otherwise.","title":"Return value:"},{"location":"usage/set/#x-not-in-s","text":"False if x is in s , else True","title":"x not in s"},{"location":"usage/set/#arguments_2","text":"x : object ; an object to be checked","title":"Arguments:"},{"location":"usage/set/#return-value_2","text":"bool : False if x is in s and True otherwise.","title":"Return value:"},{"location":"usage/set/#isdisjointother","text":"Return True if the set has no elements in common with other .","title":"isdisjoint(other)"},{"location":"usage/set/#arguments_3","text":"other : Iterable[T] ; Iterable to check if disjoint.","title":"Arguments:"},{"location":"usage/set/#return-value_3","text":"bool : True if the set is disjoint with other , False otherwise.","title":"Return value:"},{"location":"usage/set/#issubsetother","text":"Return True if every element in the set is in other .","title":"issubset(other)"},{"location":"usage/set/#arguments_4","text":"other : Iterable[T] ; Iterable to check if this one contains the set.","title":"Arguments:"},{"location":"usage/set/#return-value_4","text":"bool : True if the set is subset of other , False otherwise.","title":"Return value:"},{"location":"usage/set/#s-other","text":"Return True if every element in the set is in other .","title":"s &lt;= other"},{"location":"usage/set/#argument","text":"other : Iterable[T] ; Iterable to check if this one contains all the elements in the set.","title":"Argument:"},{"location":"usage/set/#return-value_5","text":"bool : True if the set is subset of other , False otherwise.","title":"Return value:"},{"location":"usage/set/#s-other_1","text":"Return True if every element in the set is in other and s is not equal to other .","title":"s &lt; other"},{"location":"usage/set/#arguments_5","text":"other : Iterable[T] ; Iterable to check if it contains all elements of the set and is not equal to the set.","title":"Arguments:"},{"location":"usage/set/#return-value_6","text":"bool : True if the set is a proper subset of other , False otherwise.","title":"Return value:"},{"location":"usage/set/#issupersetother","text":"Return True if every element in other is in the set.","title":"issuperset(other)"},{"location":"usage/set/#arguments_6","text":"other : Iterable[T] ; Iterable to check if the elements are contained.","title":"Arguments:"},{"location":"usage/set/#return-value_7","text":"bool : True if the set is superset of other , False otherwise.","title":"Return value:"},{"location":"usage/set/#s-other_2","text":"Return True if every element in other is in the set.","title":"s &gt;= other"},{"location":"usage/set/#argument_1","text":"other : Iterable[T] ; Iterable to check if the elements are contained.","title":"Argument:"},{"location":"usage/set/#return-value_8","text":"bool : True if the set is superset of other , False otherwise.","title":"Return value:"},{"location":"usage/set/#s-other_3","text":"Return True if every element in other is in the set and s is not equal to other .","title":"s &gt; other"},{"location":"usage/set/#arguments_7","text":"other : Iterable[T] ; Iterable to check if it all elements are in the set and is not equal to the set.","title":"Arguments:"},{"location":"usage/set/#return-value_9","text":"bool : True if the set is a proper superset of other , False otherwise.","title":"Return value:"},{"location":"usage/set/#unionothers","text":"Return a new set with elements from the set and all others .","title":"union(*others)"},{"location":"usage/set/#arguments_8","text":"others : Iterable[T] ; Iterables to take the union.","title":"Arguments:"},{"location":"usage/set/#return-value_10","text":"Set[T] : A new set with elements from the set and all others .","title":"Return value:"},{"location":"usage/set/#s-other_4","text":"Return a new set with elements from s and other .","title":"s | other"},{"location":"usage/set/#arguments_9","text":"other : Iterable[T] ; Iterable to take the union.","title":"Arguments:"},{"location":"usage/set/#return-value_11","text":"Set[T] : A new set with elements from s and other .","title":"Return value:"},{"location":"usage/set/#intersectionothers","text":"Return a new set with elements common to the set and all others .","title":"intersection(*others)"},{"location":"usage/set/#arguments_10","text":"others : Iterable[T] ; Iterables to take the intersection.","title":"Arguments:"},{"location":"usage/set/#return-value_12","text":"Set[T] : A new set with elements common to the set and all others .","title":"Return value:"},{"location":"usage/set/#s-other_5","text":"Return a new set with elements common to s and other .","title":"s &amp; other"},{"location":"usage/set/#arguments_11","text":"other : Iterable[T] ; Iterable to take the intersection.","title":"Arguments:"},{"location":"usage/set/#return-value_13","text":"Set[T] : A new set with elements common to s and other .","title":"Return value:"},{"location":"usage/set/#differenceothers","text":"Return a new set with elements in the set that are not in the others .","title":"difference(*others)"},{"location":"usage/set/#arguments_12","text":"others : Iterable[T] ; Iterables to take the difference.","title":"Arguments:"},{"location":"usage/set/#return-value_14","text":"Set[T] : A new set with elements in the set that are not in the others .","title":"Return value:"},{"location":"usage/set/#s-other_6","text":"Return a new set with elements in the set that are not in the other .","title":"s - other"},{"location":"usage/set/#arguments_13","text":"other : Iterable[T] ; Iterable to take the difference.","title":"Arguments:"},{"location":"usage/set/#return-value_15","text":"Set[T] : A new set with elements in the set that are not in the other .","title":"Return value:"},{"location":"usage/set/#symmetric_differenceother","text":"Return a new set with elements in either the set or other but not both.","title":"symmetric_difference(other)"},{"location":"usage/set/#arguments_14","text":"other : Iterable[T] ; Iterable to take the symmetric difference.","title":"Arguments:"},{"location":"usage/set/#return-value_16","text":"Set[T] : A new set with elements in either the set or other but not both.","title":"Return value:"},{"location":"usage/set/#s-other_7","text":"Return a new set with elements in either the set or other but not both.","title":"s ^ other"},{"location":"usage/set/#arguments_15","text":"other : Iterable[T] ; Iterable to take the symmetric difference.","title":"Arguments:"},{"location":"usage/set/#return-value_17","text":"Set[T] : A new set with elements in either the set or other but not both.","title":"Return value:"},{"location":"usage/set/#copy","text":"Return a copy of the set. The actual behavior is to create a table with a unique table name and copy the elements to the new table. Therefore, unlike the built-in set copy, the behavior is similar to deep copy. Be aware that the copied set is volatile.","title":"copy()"},{"location":"usage/set/#return-value_18","text":"Set[T] : A volatile copy of the set.","title":"Return value:"},{"location":"usage/set/#updateothers","text":"Update the set by adding elements from all others .","title":"update(*others)"},{"location":"usage/set/#arguments_16","text":"others : Iterable[T] ; Iterables to take the union.","title":"Arguments:"},{"location":"usage/set/#return-value_19","text":"None .","title":"Return value:"},{"location":"usage/set/#s-other_8","text":"Update the set by adding elements from other .","title":"s |= other"},{"location":"usage/set/#arguments_17","text":"other : Iterable[T] ; Iterable to take the union.","title":"Arguments:"},{"location":"usage/set/#return-value_20","text":"None .","title":"Return value:"},{"location":"usage/set/#intersection_updateothers","text":"Update the set by keeping only elements found in the set and all others .","title":"intersection_update(*others)"},{"location":"usage/set/#arguments_18","text":"others : Iterable[T] ; Iterables to take the intersection.","title":"Arguments:"},{"location":"usage/set/#return-value_21","text":"None .","title":"Return value:"},{"location":"usage/set/#s-other_9","text":"Update the set by keeping only elements found in the set and other .","title":"s &amp;= other"},{"location":"usage/set/#arguments_19","text":"other : Iterable[T] ; Iterable to take the intersection.","title":"Arguments:"},{"location":"usage/set/#return-value_22","text":"None .","title":"Return value:"},{"location":"usage/set/#symmetric_difference_updateother","text":"Update the set by keeping only elements found in either the set or other but not both.","title":"symmetric_difference_update(other)"},{"location":"usage/set/#arguments_20","text":"other : Iterable[T] ; Iterable to take the symmetric difference.","title":"Arguments:"},{"location":"usage/set/#return-value_23","text":"None .","title":"Return value:"},{"location":"usage/set/#s-other_10","text":"Update the set by keeping only elements found in either the set or other but not both.","title":"s ^= other"},{"location":"usage/set/#arguments_21","text":"other : Iterable[T] ; Iterable to take the symmetric difference.","title":"Arguments:"},{"location":"usage/set/#return-value_24","text":"None .","title":"Return value:"},{"location":"usage/set/#addelem","text":"Add an element elem to the set.","title":"add(elem)"},{"location":"usage/set/#arguments_22","text":"elem : T ; An element to be added.","title":"Arguments:"},{"location":"usage/set/#return-value_25","text":"None .","title":"Return value:"},{"location":"usage/set/#removeelem","text":"Remove an element elem from the set. Raises KeyError if elem is not contained in the set.","title":"remove(elem)"},{"location":"usage/set/#arguemnts","text":"elem : T ; An element to be removed.","title":"Arguemnts:"},{"location":"usage/set/#return-value_26","text":"None .","title":"Return value:"},{"location":"usage/set/#discardelem","text":"Remove an element elem from the set if it is present.","title":"discard(elem)"},{"location":"usage/set/#arguments_23","text":"elem : T ; An element to be removed.","title":"Arguments:"},{"location":"usage/set/#return-value_27","text":"None .","title":"Return value:"},{"location":"usage/set/#pop","text":"Remove and return an arbitrary element from the set. Raises KeyError if the set is empty.","title":"pop()"},{"location":"usage/set/#return-value_28","text":"T : An element in the set.","title":"Return value:"},{"location":"usage/set/#clear","text":"Remove all elements from the set.","title":"clear()"},{"location":"usage/set/#return-value_29","text":"None .","title":"Return value:"},{"location":"usage/dictview/itemsview/","text":"ItemsView ItemsView is a view object which is returned by dict.items() . It provides a dynamic view on the dictionary's (key, value) tuples, which means when dictionay changes, the view reflects these changes. len(itemsview) Return the number of items in the dictionary d: Dict[KT, VT] where itemsview=d.items() . Return value: int : The number of items in d iter(itemsview) Return an iterator over the (key, value) tuples in the dictionary. The order of the items is guaranteed to be inserted order. Return value: Iterable[Tuple[_KT_co, _VT_co]] : The iterator over the keys in the dictionary. item in itemsview Return whether if item is in the dictionary. Arguments: item : object ; An object to be checked Return value: bool : True if item is in the dictionary and False otherwise. reversed(itemsview) Return a reverse iterator over the (key, value) tuples of the dictionary. (provided only python version 3.8 and above) Return value: Iterator[Tuple[_KT_co, _VT_co]] : The reverse iterator over the (key, value) tuples in the dictonary. itemsview & other Return a set with elements common to itemsview and other . Arguments: other : Iterable[Any] ; Iterable to take the intersection. Return value: Set[Tuple[_KT_co, _VT_co]] : A set with elements common to itemsview and other . other & itemsview Return a set with elements common to itemsview and other . Arguments: other : Iterable[_T] ; Iterable to take the intersection. Return value: Set[_T] : A set with elements common to itemsview and other . itemsview | other Return a new set with elements from itemsview and other . Arguments: other : Iterable[_T] ; Iterable to take the union. Return value: Set[Union[Tuple[_KT_co, _VT_co], _T]] : A new set with elements from itemsview and other . other | itemsview Return a new set with elements from itemsview and other . Arguments: other : Iterable[_T] ; Iterable to take the union. Return value: Set[Union[Tuple[_KT_co, _VT_co], _T]] : A new set with elements from itemsview and other . itemsview - other Return a new set with elements in the itemsview that are not in the other . Arguments: other : Iterable[Any] ; Iterable to take the difference. Return value: Set[Tuple[_KT_co, _VT_co]] : A new set with elements in the set that are not in the other . other - itemsview Return a new set with elements in the other that are not in the itemsview . Arguments: other : Iterable[_T] ; Iterable to take the difference. Return value: Set[_T] : A new set with elements in the other that are not in the itemsview . itemsview ^ other Return a new set with elements in either the itemsview or other but not both. Arguments: other : Iterable[_T] ; Iterable to take the symmetric difference. Return value Set[Union[Tuple[_KT_co, _VT_co], _T]] : A new set with elements in either the itemsview or other but not both. other ^ itemsview Return a new set with elements in either the itemsview or other but not both. Arguments: other : Iterable[_T] ; Iterable to take the symmetric difference. Return value Set[Union[Tuple[_KT_co, _VT_co], _T]] : A new set with elements in either the itemsview or other but not both. itemsview.mapping Return a MappingProxyType that wraps the original dictionary to which the view refers. (provided only python version 3.10 and above) Return value MappingProxyType : A read-only proxy of the original dictionary.","title":"ItemsView"},{"location":"usage/dictview/itemsview/#itemsview","text":"ItemsView is a view object which is returned by dict.items() . It provides a dynamic view on the dictionary's (key, value) tuples, which means when dictionay changes, the view reflects these changes.","title":"ItemsView"},{"location":"usage/dictview/itemsview/#lenitemsview","text":"Return the number of items in the dictionary d: Dict[KT, VT] where itemsview=d.items() .","title":"len(itemsview)"},{"location":"usage/dictview/itemsview/#return-value","text":"int : The number of items in d","title":"Return value:"},{"location":"usage/dictview/itemsview/#iteritemsview","text":"Return an iterator over the (key, value) tuples in the dictionary. The order of the items is guaranteed to be inserted order.","title":"iter(itemsview)"},{"location":"usage/dictview/itemsview/#return-value_1","text":"Iterable[Tuple[_KT_co, _VT_co]] : The iterator over the keys in the dictionary.","title":"Return value:"},{"location":"usage/dictview/itemsview/#item-in-itemsview","text":"Return whether if item is in the dictionary.","title":"item in itemsview"},{"location":"usage/dictview/itemsview/#arguments","text":"item : object ; An object to be checked","title":"Arguments:"},{"location":"usage/dictview/itemsview/#return-value_2","text":"bool : True if item is in the dictionary and False otherwise.","title":"Return value:"},{"location":"usage/dictview/itemsview/#reverseditemsview","text":"Return a reverse iterator over the (key, value) tuples of the dictionary. (provided only python version 3.8 and above)","title":"reversed(itemsview)"},{"location":"usage/dictview/itemsview/#return-value_3","text":"Iterator[Tuple[_KT_co, _VT_co]] : The reverse iterator over the (key, value) tuples in the dictonary.","title":"Return value:"},{"location":"usage/dictview/itemsview/#itemsview-other","text":"Return a set with elements common to itemsview and other .","title":"itemsview &amp; other"},{"location":"usage/dictview/itemsview/#arguments_1","text":"other : Iterable[Any] ; Iterable to take the intersection.","title":"Arguments:"},{"location":"usage/dictview/itemsview/#return-value_4","text":"Set[Tuple[_KT_co, _VT_co]] : A set with elements common to itemsview and other .","title":"Return value:"},{"location":"usage/dictview/itemsview/#other-itemsview","text":"Return a set with elements common to itemsview and other .","title":"other &amp; itemsview"},{"location":"usage/dictview/itemsview/#arguments_2","text":"other : Iterable[_T] ; Iterable to take the intersection.","title":"Arguments:"},{"location":"usage/dictview/itemsview/#return-value_5","text":"Set[_T] : A set with elements common to itemsview and other .","title":"Return value:"},{"location":"usage/dictview/itemsview/#itemsview-other_1","text":"Return a new set with elements from itemsview and other .","title":"itemsview | other"},{"location":"usage/dictview/itemsview/#arguments_3","text":"other : Iterable[_T] ; Iterable to take the union.","title":"Arguments:"},{"location":"usage/dictview/itemsview/#return-value_6","text":"Set[Union[Tuple[_KT_co, _VT_co], _T]] : A new set with elements from itemsview and other .","title":"Return value:"},{"location":"usage/dictview/itemsview/#other-itemsview_1","text":"Return a new set with elements from itemsview and other .","title":"other | itemsview"},{"location":"usage/dictview/itemsview/#arguments_4","text":"other : Iterable[_T] ; Iterable to take the union.","title":"Arguments:"},{"location":"usage/dictview/itemsview/#return-value_7","text":"Set[Union[Tuple[_KT_co, _VT_co], _T]] : A new set with elements from itemsview and other .","title":"Return value:"},{"location":"usage/dictview/itemsview/#itemsview-other_2","text":"Return a new set with elements in the itemsview that are not in the other .","title":"itemsview - other"},{"location":"usage/dictview/itemsview/#arguments_5","text":"other : Iterable[Any] ; Iterable to take the difference.","title":"Arguments:"},{"location":"usage/dictview/itemsview/#return-value_8","text":"Set[Tuple[_KT_co, _VT_co]] : A new set with elements in the set that are not in the other .","title":"Return value:"},{"location":"usage/dictview/itemsview/#other-itemsview_2","text":"Return a new set with elements in the other that are not in the itemsview .","title":"other - itemsview"},{"location":"usage/dictview/itemsview/#arguments_6","text":"other : Iterable[_T] ; Iterable to take the difference.","title":"Arguments:"},{"location":"usage/dictview/itemsview/#return-value_9","text":"Set[_T] : A new set with elements in the other that are not in the itemsview .","title":"Return value:"},{"location":"usage/dictview/itemsview/#itemsview-other_3","text":"Return a new set with elements in either the itemsview or other but not both.","title":"itemsview ^ other"},{"location":"usage/dictview/itemsview/#arguments_7","text":"other : Iterable[_T] ; Iterable to take the symmetric difference.","title":"Arguments:"},{"location":"usage/dictview/itemsview/#return-value_10","text":"Set[Union[Tuple[_KT_co, _VT_co], _T]] : A new set with elements in either the itemsview or other but not both.","title":"Return value"},{"location":"usage/dictview/itemsview/#other-itemsview_3","text":"Return a new set with elements in either the itemsview or other but not both.","title":"other ^ itemsview"},{"location":"usage/dictview/itemsview/#arguments_8","text":"other : Iterable[_T] ; Iterable to take the symmetric difference.","title":"Arguments:"},{"location":"usage/dictview/itemsview/#return-value_11","text":"Set[Union[Tuple[_KT_co, _VT_co], _T]] : A new set with elements in either the itemsview or other but not both.","title":"Return value"},{"location":"usage/dictview/itemsview/#itemsviewmapping","text":"Return a MappingProxyType that wraps the original dictionary to which the view refers. (provided only python version 3.10 and above)","title":"itemsview.mapping"},{"location":"usage/dictview/itemsview/#return-value_12","text":"MappingProxyType : A read-only proxy of the original dictionary.","title":"Return value"},{"location":"usage/dictview/keysview/","text":"KeysView KeysView is a view object which is returned by dict.keys() . It provides a dynamic view on the dictionary's keys, which means when dictionay changes, the view reflects these changes. len(keysview) Return the number of items in the dictionary d: Dict[KT, VT] where keysview=d.keys() . Return value: int : The number of items in d iter(keysview) Return an iterator over the keys in the dictionary. The order of the keys is guaranteed to be inserted order. Return value: Iterator[_KT_co] : The iterator over the keys in the dictonary. key in keysview Return whether if key is in the dictionary. Arguments: key : object ; An object to be checked Return value: bool : True if key is in the dictionary and False otherwise. reversed(keysview) Return a reverse iterator over the keys of the dictionary. (provided only python version 3.8 and above) Return value: Iterator[_KT_co] : The reverse iterator over the keys in the dictonary. keysview & other Return a set with elements common to keysview and other . Arguments: other : Iterable[Any] ; Iterable to take the intersection. Return value: Set[_KT_co] : A set with elements common to keysview and other . other & keysview Return a set with elements common to keysview and other . Arguments: other : Iterable[_T] ; Iterable to take the intersection. Return value: Set[_T] : A set with elements common to keysview and other . keysview | other Return a new set with elements from keysview and other . Arguments: other : Iterable[_T] ; Iterable to take the union. Return value: Set[Union[_KT_co, _T]] : A new set with elements from keysview and other . other | keysview Return a new set with elements from keysview and other . Arguments: other : Iterable[_T] ; Iterable to take the union. Return value: Set[Union[_KT_co, _T]] : A new set with elements from keysview and other . keysview - other Return a new set with elements in the keysview that are not in the other . Arguments: other : Iterable[Any] ; Iterable to take the difference. Return value: Set[_KT_co] : A new set with elements in the set that are not in the other . other - keysview Return a new set with elements in the other that are not in the keysview . Arguments: other : Iterable[_T] ; Iterable to be taken the difference. Return value: Set[_T] : A new set with elements in other that are not in the keysview . keysview ^ other Return a new set with elements in either the keysview or other but not both. Arguments: other : Iterable[_T] ; Iterable to take the symmetric difference. Return value Set[Union[_KT_co, _T]] : A new set with elements in either the keysview or other but not both. other ^ keysview Return a new set with elements in either the keysview or other but not both. Arguments: other : Iterable[_T] ; Iterable to take the symmetric difference. Return value Set[Union[_KT_co, _T]] : A new set with elements in either the keysview or other but not both. keysview.mapping Return a MappingProxyType that wraps the original dictionary to which the view refers. (provided only python version 3.10 and above) Return value MappingProxyType : A read-only proxy of the original dictionary.","title":"KeysView"},{"location":"usage/dictview/keysview/#keysview","text":"KeysView is a view object which is returned by dict.keys() . It provides a dynamic view on the dictionary's keys, which means when dictionay changes, the view reflects these changes.","title":"KeysView"},{"location":"usage/dictview/keysview/#lenkeysview","text":"Return the number of items in the dictionary d: Dict[KT, VT] where keysview=d.keys() .","title":"len(keysview)"},{"location":"usage/dictview/keysview/#return-value","text":"int : The number of items in d","title":"Return value:"},{"location":"usage/dictview/keysview/#iterkeysview","text":"Return an iterator over the keys in the dictionary. The order of the keys is guaranteed to be inserted order.","title":"iter(keysview)"},{"location":"usage/dictview/keysview/#return-value_1","text":"Iterator[_KT_co] : The iterator over the keys in the dictonary.","title":"Return value:"},{"location":"usage/dictview/keysview/#key-in-keysview","text":"Return whether if key is in the dictionary.","title":"key in keysview"},{"location":"usage/dictview/keysview/#arguments","text":"key : object ; An object to be checked","title":"Arguments:"},{"location":"usage/dictview/keysview/#return-value_2","text":"bool : True if key is in the dictionary and False otherwise.","title":"Return value:"},{"location":"usage/dictview/keysview/#reversedkeysview","text":"Return a reverse iterator over the keys of the dictionary. (provided only python version 3.8 and above)","title":"reversed(keysview)"},{"location":"usage/dictview/keysview/#return-value_3","text":"Iterator[_KT_co] : The reverse iterator over the keys in the dictonary.","title":"Return value:"},{"location":"usage/dictview/keysview/#keysview-other","text":"Return a set with elements common to keysview and other .","title":"keysview &amp; other"},{"location":"usage/dictview/keysview/#arguments_1","text":"other : Iterable[Any] ; Iterable to take the intersection.","title":"Arguments:"},{"location":"usage/dictview/keysview/#return-value_4","text":"Set[_KT_co] : A set with elements common to keysview and other .","title":"Return value:"},{"location":"usage/dictview/keysview/#other-keysview","text":"Return a set with elements common to keysview and other .","title":"other &amp; keysview"},{"location":"usage/dictview/keysview/#arguments_2","text":"other : Iterable[_T] ; Iterable to take the intersection.","title":"Arguments:"},{"location":"usage/dictview/keysview/#return-value_5","text":"Set[_T] : A set with elements common to keysview and other .","title":"Return value:"},{"location":"usage/dictview/keysview/#keysview-other_1","text":"Return a new set with elements from keysview and other .","title":"keysview | other"},{"location":"usage/dictview/keysview/#arguments_3","text":"other : Iterable[_T] ; Iterable to take the union.","title":"Arguments:"},{"location":"usage/dictview/keysview/#return-value_6","text":"Set[Union[_KT_co, _T]] : A new set with elements from keysview and other .","title":"Return value:"},{"location":"usage/dictview/keysview/#other-keysview_1","text":"Return a new set with elements from keysview and other .","title":"other | keysview"},{"location":"usage/dictview/keysview/#arguments_4","text":"other : Iterable[_T] ; Iterable to take the union.","title":"Arguments:"},{"location":"usage/dictview/keysview/#return-value_7","text":"Set[Union[_KT_co, _T]] : A new set with elements from keysview and other .","title":"Return value:"},{"location":"usage/dictview/keysview/#keysview-other_2","text":"Return a new set with elements in the keysview that are not in the other .","title":"keysview - other"},{"location":"usage/dictview/keysview/#arguments_5","text":"other : Iterable[Any] ; Iterable to take the difference.","title":"Arguments:"},{"location":"usage/dictview/keysview/#return-value_8","text":"Set[_KT_co] : A new set with elements in the set that are not in the other .","title":"Return value:"},{"location":"usage/dictview/keysview/#other-keysview_2","text":"Return a new set with elements in the other that are not in the keysview .","title":"other - keysview"},{"location":"usage/dictview/keysview/#arguments_6","text":"other : Iterable[_T] ; Iterable to be taken the difference.","title":"Arguments:"},{"location":"usage/dictview/keysview/#return-value_9","text":"Set[_T] : A new set with elements in other that are not in the keysview .","title":"Return value:"},{"location":"usage/dictview/keysview/#keysview-other_3","text":"Return a new set with elements in either the keysview or other but not both.","title":"keysview ^ other"},{"location":"usage/dictview/keysview/#arguments_7","text":"other : Iterable[_T] ; Iterable to take the symmetric difference.","title":"Arguments:"},{"location":"usage/dictview/keysview/#return-value_10","text":"Set[Union[_KT_co, _T]] : A new set with elements in either the keysview or other but not both.","title":"Return value"},{"location":"usage/dictview/keysview/#other-keysview_3","text":"Return a new set with elements in either the keysview or other but not both.","title":"other ^ keysview"},{"location":"usage/dictview/keysview/#arguments_8","text":"other : Iterable[_T] ; Iterable to take the symmetric difference.","title":"Arguments:"},{"location":"usage/dictview/keysview/#return-value_11","text":"Set[Union[_KT_co, _T]] : A new set with elements in either the keysview or other but not both.","title":"Return value"},{"location":"usage/dictview/keysview/#keysviewmapping","text":"Return a MappingProxyType that wraps the original dictionary to which the view refers. (provided only python version 3.10 and above)","title":"keysview.mapping"},{"location":"usage/dictview/keysview/#return-value_12","text":"MappingProxyType : A read-only proxy of the original dictionary.","title":"Return value"},{"location":"usage/dictview/valuesview/","text":"ValuesView ValuesView is a view object which is returned by dict.views() . It provides a dynamic view on the dictionary's values, which means when dictionay changes, the view reflects these changes. len(valuesview) Return the number of items in the dictionay d: Dict[KT, VT] where valuesview=d.values() . Return value: int : The number of items in d iter(valuesview) Return an iterator over the values in the dictionary. The order of the values is guaranteed to be inserted order. Return value: Iterator[_VT_co] : The iterator over the values in the dictionary. value in valuesview Return whether if value is in the dictionary. Arguments: value : object ; An object to be checked Return value: bool : True if value is in the dictionary and False otherwise. reversed(valuesview) Return a reverse iterator over the values of the dictionary. (provided only python version 3.8 and above) Return value: Iterator[_VT_co] : The reverse iterator over the values in the dictonary. valuesview.mapping Return a MappingProxyType that wraps the original dictionary to which the view refers. (provided only python version 3.10 and above) Return value MappingProxyType : A read-only proxy of the original dictionary.","title":"ValuesView"},{"location":"usage/dictview/valuesview/#valuesview","text":"ValuesView is a view object which is returned by dict.views() . It provides a dynamic view on the dictionary's values, which means when dictionay changes, the view reflects these changes.","title":"ValuesView"},{"location":"usage/dictview/valuesview/#lenvaluesview","text":"Return the number of items in the dictionay d: Dict[KT, VT] where valuesview=d.values() .","title":"len(valuesview)"},{"location":"usage/dictview/valuesview/#return-value","text":"int : The number of items in d","title":"Return value:"},{"location":"usage/dictview/valuesview/#itervaluesview","text":"Return an iterator over the values in the dictionary. The order of the values is guaranteed to be inserted order.","title":"iter(valuesview)"},{"location":"usage/dictview/valuesview/#return-value_1","text":"Iterator[_VT_co] : The iterator over the values in the dictionary.","title":"Return value:"},{"location":"usage/dictview/valuesview/#value-in-valuesview","text":"Return whether if value is in the dictionary.","title":"value in valuesview"},{"location":"usage/dictview/valuesview/#arguments","text":"value : object ; An object to be checked","title":"Arguments:"},{"location":"usage/dictview/valuesview/#return-value_2","text":"bool : True if value is in the dictionary and False otherwise.","title":"Return value:"},{"location":"usage/dictview/valuesview/#reversedvaluesview","text":"Return a reverse iterator over the values of the dictionary. (provided only python version 3.8 and above)","title":"reversed(valuesview)"},{"location":"usage/dictview/valuesview/#return-value_3","text":"Iterator[_VT_co] : The reverse iterator over the values in the dictonary.","title":"Return value:"},{"location":"usage/dictview/valuesview/#valuesviewmapping","text":"Return a MappingProxyType that wraps the original dictionary to which the view refers. (provided only python version 3.10 and above)","title":"valuesview.mapping"},{"location":"usage/dictview/valuesview/#return-value_4","text":"MappingProxyType : A read-only proxy of the original dictionary.","title":"Return value"}]}