{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Overview Documentation for version: 1.0.4 sqlitecollections is a sort of containers that are backended by sqlite3 DB and are compatible with corresponding built-in collections. Since containers consume disk space instead of RAM, they can handle large amounts of data even in environments with limited RAM. Migrating from existing code using the built-in container is as simple as importing the library and changing the constructor. The elements of the container are automatically serialized and stored in the sqlite3 database, and are automatically read from the sqlite3 database and deserialized when accessed. Current version supports List (mutable sequence), Dict (mutable mapping) and Set (mutable set) and almost all methods are compatible with list, dict and set respectively. Installation pip install sqlitecollections Example import sqlitecollections as sc l = sc . List [ str ]([ \"Alice\" , \"Bob\" , \"Carol\" ]) print ( l [ 2 ]) #> Carol print ( len ( l )) #> 3 l . append ( \"Dave\" ) print ( l . index ( \"Bob\" )) #> 1 print ( l . index ( \"Dave\" )) #> 3 d = sc . Dict [ str , str ]({ \"a\" : \"Alice\" , \"b\" : \"Bob\" }) print ( d [ \"a\" ]) #> Alice d [ \"c\" ] = \"Carol\" print ( list ( d . keys ())) #> ['a', 'b', 'c'] print ( list ( d . values ())) #> ['Alice', 'Bob', 'Carol'] s = sc . Set [ str ]([ \"Alice\" , \"Bob\" , \"Carol\" , \"Dave\" ]) print ( \"Ellen\" in s ) #> False print ( \"Alice\" in s ) #> True print ( list ( s . intersection ([ \"Alice\" , \"Carol\" ]))) #> ['Alice', 'Carol'] In the above example, a temporary file is created every time a container is created, and the elements are written to the sqlite3 database created on the file, thus consuming very little RAM. If you want to reuse the container you created, you can create it by specifying the file path and table name of the sqlite3 database. import sqlitecollections as sc l = sc . List [ str ]([ \"Alice\" , \"Bob\" , \"Carol\" ], connection = \"path/to/file.db\" , table_name = \"list_example\" ) l . append ( \"Dave\" ) exit () When you load it, you can restore the previous state by specifying the same file path and table name. import sqlitecollections as sc l = sc . List [ str ]( connection = \"path/to/file.db\" , table_name = \"list_example\" ) print ( len ( l )) #> 4 print ( list ( l )) #> ['Alice', 'Bob', 'Carol', 'Dave'] Pros and cons for built-in containers Pros Save memory usage. Once the database is built, loading time is almost zero, even for huge data. Cons Each operation has the overhead of serialize/deserialize. Some operations are incompatible and unavailable. For example, directly rewriting the mutable elements of a container.","title":"Overview"},{"location":"#overview","text":"Documentation for version: 1.0.4 sqlitecollections is a sort of containers that are backended by sqlite3 DB and are compatible with corresponding built-in collections. Since containers consume disk space instead of RAM, they can handle large amounts of data even in environments with limited RAM. Migrating from existing code using the built-in container is as simple as importing the library and changing the constructor. The elements of the container are automatically serialized and stored in the sqlite3 database, and are automatically read from the sqlite3 database and deserialized when accessed. Current version supports List (mutable sequence), Dict (mutable mapping) and Set (mutable set) and almost all methods are compatible with list, dict and set respectively.","title":"Overview"},{"location":"#installation","text":"pip install sqlitecollections","title":"Installation"},{"location":"#example","text":"import sqlitecollections as sc l = sc . List [ str ]([ \"Alice\" , \"Bob\" , \"Carol\" ]) print ( l [ 2 ]) #> Carol print ( len ( l )) #> 3 l . append ( \"Dave\" ) print ( l . index ( \"Bob\" )) #> 1 print ( l . index ( \"Dave\" )) #> 3 d = sc . Dict [ str , str ]({ \"a\" : \"Alice\" , \"b\" : \"Bob\" }) print ( d [ \"a\" ]) #> Alice d [ \"c\" ] = \"Carol\" print ( list ( d . keys ())) #> ['a', 'b', 'c'] print ( list ( d . values ())) #> ['Alice', 'Bob', 'Carol'] s = sc . Set [ str ]([ \"Alice\" , \"Bob\" , \"Carol\" , \"Dave\" ]) print ( \"Ellen\" in s ) #> False print ( \"Alice\" in s ) #> True print ( list ( s . intersection ([ \"Alice\" , \"Carol\" ]))) #> ['Alice', 'Carol'] In the above example, a temporary file is created every time a container is created, and the elements are written to the sqlite3 database created on the file, thus consuming very little RAM. If you want to reuse the container you created, you can create it by specifying the file path and table name of the sqlite3 database. import sqlitecollections as sc l = sc . List [ str ]([ \"Alice\" , \"Bob\" , \"Carol\" ], connection = \"path/to/file.db\" , table_name = \"list_example\" ) l . append ( \"Dave\" ) exit () When you load it, you can restore the previous state by specifying the same file path and table name. import sqlitecollections as sc l = sc . List [ str ]( connection = \"path/to/file.db\" , table_name = \"list_example\" ) print ( len ( l )) #> 4 print ( list ( l )) #> ['Alice', 'Bob', 'Carol', 'Dave']","title":"Example"},{"location":"#pros-and-cons-for-built-in-containers","text":"","title":"Pros and cons for built-in containers"},{"location":"#pros","text":"Save memory usage. Once the database is built, loading time is almost zero, even for huge data.","title":"Pros"},{"location":"#cons","text":"Each operation has the overhead of serialize/deserialize. Some operations are incompatible and unavailable. For example, directly rewriting the mutable elements of a container.","title":"Cons"},{"location":"benchmark/","text":"py36 py37 py38 py39 py310 dict list set timing subject builtin sqlitecollections ratio clear 0.00383 0.00704 1.83747 __contains__ 0.00393 0.00439 1.11809 copy 0.00382 0.01113 2.91503 __delitem__ 0.00402 0.00658 1.63441 get 0.00372 0.00412 1.10529 get (unsuccessful search) 0.00464 0.00408 0.87744 __getitem__ 0.00409 0.00439 1.07427 __init__ 0.00413 0.04907 11.89458 items 0.00448 0.01182 2.63919 __iter__ 0.00427 0.00844 1.97486 keys 0.00394 0.00841 2.13336 __len__ 0.00396 0.00415 1.04761 __contains__ (unsuccessful search) 0.00398 0.00469 1.17722 pop 0.00397 0.00705 1.77586 pop (unsuccessful search) 0.00388 0.00583 1.50404 popitem 0.00396 0.00749 1.88973 setdefault 0.00461 0.00588 1.27667 setdefault (unsuccessful search) 0.00389 0.00613 1.57463 __setitem__ (add new item) 0.00393 0.00758 1.92882 __setitem__ (replace) 0.00408 0.00741 1.81479 update 0.00393 0.00775 1.97029 update (many) 0.00548 0.5667 103.33829 values 0.00388 0.00842 2.1719 approximate memory usage subject builtin sqlitecollections ratio clear 0.0 0.0 1.0 __contains__ 0.0 0.0 1.0 copy 0.0 0.0 1.0 __delitem__ 0.0 0.0 1.0 get 0.0 0.0 1.0 get (unsuccessful search) 0.0 0.0 1.0 __getitem__ 0.0 0.0 1.0 __init__ 0.0 0.0 1.0 items 0.11328 0.18359 1.62069 __iter__ 0.0 0.0 1.0 keys 0.0 0.0 1.0 __len__ 0.0 0.0 1.0 __contains__ (unsuccessful search) 0.0 0.0 1.0 pop 0.0 0.0 1.0 pop (unsuccessful search) 0.0 0.0 1.0 popitem 0.0 0.0 1.0 setdefault 0.0 0.0 1.0 setdefault (unsuccessful search) 0.0 0.0 1.0 __setitem__ (add new item) 0.0 0.0 1.0 __setitem__ (replace) 0.0 0.0 1.0 update 0.0 0.0 1.0 update (many) 0.0 0.0 1.0 values 0.0 0.0 1.0 timing subject builtin sqlitecollections ratio __add__ 0.00394 0.01047 2.66028 append 0.00367 0.00662 1.80118 clear 0.0038 0.00732 1.92312 __contains__ 0.00406 0.00397 0.97774 copy 0.00391 0.00898 2.29926 count 0.00378 0.00401 1.06274 __init__ 0.00367 0.02302 6.26765 __delitem__ 0.00387 0.08201 21.1895 __delitem__ (slice) 0.00381 0.15544 40.8173 __delitem__ (slice with skip) 0.00365 0.15616 42.83004 extend 0.00388 0.00686 1.76728 __getitem__ 0.00369 0.00397 1.07586 __getitem__ (slice) 0.00403 0.09237 22.90714 __getitem__ (slice with skip) 0.00376 0.01301 3.4572 __iadd__ 0.00376 0.00731 1.9425 __imult__ 0.00375 0.23512 62.74551 index 0.00372 0.00399 1.0724 index (unsuccessful search) 0.00363 0.00399 1.1011 insert 0.00377 0.1533 40.65812 __len__ 0.0038 0.00397 1.04672 __mult__ 0.00411 0.24149 58.7007 __contains__ (unsuccessful search) 0.00373 0.00385 1.03315 pop 0.00426 0.08072 18.94755 remove 0.0037 0.11734 31.68563 __setitem__ 0.00389 0.00762 1.96068 __setitem__ (slice) 0.00375 13.6965 3655.10384 __setitem__ (slice with skip) 0.00417 0.01637 3.92627 sort 0.00407 0.0814 19.9962 approximate memory usage subject builtin sqlitecollections ratio __add__ 0.0 0.0 1.0 append 0.0 0.0 1.0 clear 0.0 0.0 1.0 __contains__ 0.0 0.0 1.0 copy 0.0 0.0 1.0 count 0.0 0.0 1.0 __init__ 0.0 0.0 1.0 __delitem__ 0.0 0.0 1.0 __delitem__ (slice) 0.0 0.0 1.0 __delitem__ (slice with skip) 0.0 0.0 1.0 extend 0.0 0.0 1.0 __getitem__ 0.0 0.0 1.0 __getitem__ (slice) 0.0 0.0 1.0 __getitem__ (slice with skip) 0.0 0.0 1.0 __iadd__ 0.0 0.0 1.0 __imult__ 0.0 0.0 1.0 index 0.0 0.00391 inf index (unsuccessful search) 0.0 0.0 1.0 insert 0.0 0.0 1.0 __len__ 0.0 0.0 1.0 __mult__ 0.0 0.0 1.0 __contains__ (unsuccessful search) 0.0 0.0 1.0 pop 0.0 0.0 1.0 remove 0.0 0.0 1.0 __setitem__ 0.0 0.0 1.0 __setitem__ (slice) 0.0 0.0 1.0 __setitem__ (slice with skip) 0.0 0.0 1.0 sort 0.0 1.28125 inf timing subject builtin sqlitecollections ratio add (existing item) 0.00348 0.00511 1.46904 add (new item) 0.00353 0.00633 1.79345 __and__ 0.00354 0.01082 3.05492 clear 0.00355 0.00616 1.73328 __contains__ 0.00366 0.00375 1.02518 copy 0.00362 0.01092 3.01583 difference 0.00373 0.00848 2.27352 discard 0.00372 0.00624 1.67461 discard (no changes) 0.0037 0.00516 1.39696 __ge__ 0.00368 0.00447 1.21423 __ge__ (not greater than or equals to) 0.00353 0.00506 1.43447 __gt__ 0.00356 0.0069 1.93867 __gt__ (not greater than) 0.00363 0.03316 9.13496 __iand__ 0.00389 0.02308 5.92949 __init__ 0.00368 0.01808 4.91742 intersection 0.00375 0.0112 2.98933 intersection_update 0.00362 0.01 2.76075 __ior__ 0.00363 0.00912 2.50999 isdisjoint 0.00375 0.00387 1.03354 isdisjoint (not disjoint) 0.00366 0.00389 1.06283 issubset 0.00351 0.03281 9.35598 issubset (not subset) 0.00406 0.20654 50.89314 issuperset 0.00367 0.02713 7.38806 issuperset (not superset) 0.0038 0.00534 1.40336 __ixor__ 0.00391 0.04171 10.6771 __le__ 0.00387 0.00477 1.2317 __le__ (not less than or equals to) 0.00361 0.00368 1.0193 __len__ 0.00363 0.00374 1.029 __lt__ 0.00369 0.00452 1.22464 __lt__ (not less than) 0.00362 0.00375 1.03427 __contains__ (unsuccessful search) 0.00363 0.00417 1.14979 __or__ 0.00365 0.01265 3.46459 pop 0.0039 0.007 1.79608 remove 0.00408 0.00823 2.01821 __sub__ 0.00375 0.00919 2.44796 symmetric_difference 0.00377 0.04396 11.67087 symmetric_difference_update 0.00382 0.04361 11.42257 union 0.00383 0.01275 3.33046 update 0.00375 0.00813 2.16564 __xor__ 0.00372 0.04341 11.65556 approximate memory usage subject builtin sqlitecollections ratio add (existing item) 0.0 0.0 1.0 add (new item) 0.0 0.0 1.0 __and__ 0.0 0.00391 inf clear 0.0 0.0 1.0 __contains__ 0.0 0.0 1.0 copy 0.0 0.0 1.0 difference 0.0 0.0 1.0 discard 0.0 0.0 1.0 discard (no changes) 0.0 0.0 1.0 __ge__ 0.0 0.0 1.0 __ge__ (not greater than or equals to) 0.0 0.0 1.0 __gt__ 0.0 0.0 1.0 __gt__ (not greater than) 0.0 0.0 1.0 __iand__ 0.0 0.0 1.0 __init__ 0.0 0.00781 inf intersection 0.0 0.0 1.0 intersection_update 0.0 0.0 1.0 __ior__ 0.0 0.0 1.0 isdisjoint 0.0 0.0 1.0 isdisjoint (not disjoint) 0.0 0.0 1.0 issubset 0.0 0.0 1.0 issubset (not subset) 0.0 0.0 1.0 issuperset 0.0 0.0 1.0 issuperset (not superset) 0.0 0.0 1.0 __ixor__ 0.0 0.0 1.0 __le__ 0.0 0.0 1.0 __le__ (not less than or equals to) 0.0 0.0 1.0 __len__ 0.0 0.0 1.0 __lt__ 0.0 0.0 1.0 __lt__ (not less than) 0.0 0.0 1.0 __contains__ (unsuccessful search) 0.0 0.0 1.0 __or__ 0.0 0.0 1.0 pop 0.0 0.0 1.0 remove 0.0 0.0 1.0 __sub__ 0.0 0.0 1.0 symmetric_difference 0.0 0.00391 inf symmetric_difference_update 0.0 0.0 1.0 union 0.0 0.0 1.0 update 0.0 0.0 1.0 __xor__ 0.0 0.0 1.0 dict list set timing subject builtin sqlitecollections ratio clear 0.00522 0.00985 1.88529 __contains__ 0.00511 0.00516 1.00961 copy 0.00509 0.01329 2.60986 __delitem__ 0.00513 0.01015 1.97982 get 0.00513 0.00533 1.03928 get (unsuccessful search) 0.00512 0.00513 1.0022 __getitem__ 0.0053 0.00551 1.03953 __init__ 0.00534 0.05894 11.02769 items 0.00585 0.01562 2.67163 __iter__ 0.00529 0.0106 2.00479 keys 0.00545 0.01134 2.07988 __len__ 0.00512 0.00637 1.2451 __contains__ (unsuccessful search) 0.0052 0.00616 1.18472 pop 0.00515 0.00945 1.83465 pop (unsuccessful search) 0.00534 0.00758 1.42023 popitem 0.00575 0.01024 1.78071 setdefault 0.00552 0.00836 1.5143 setdefault (unsuccessful search) 0.00525 0.00858 1.63307 __setitem__ (add new item) 0.00517 0.00936 1.8094 __setitem__ (replace) 0.00518 0.00959 1.85076 update 0.00508 0.01055 2.07595 update (many) 0.00626 0.71726 114.6332 values 0.00536 0.01066 1.98744 approximate memory usage subject builtin sqlitecollections ratio clear 0.0 0.0 1.0 __contains__ 0.0 0.0 1.0 copy 0.0 0.0 1.0 __delitem__ 0.0 0.0 1.0 get 0.0 0.0 1.0 get (unsuccessful search) 0.0 0.0 1.0 __getitem__ 0.0 0.0 1.0 __init__ 0.0 0.0 1.0 items 0.00391 0.33203 85.0 __iter__ 0.0 0.0 1.0 keys 0.0 0.0 1.0 __len__ 0.0 0.0 1.0 __contains__ (unsuccessful search) 0.0 0.0 1.0 pop 0.0 0.0 1.0 pop (unsuccessful search) 0.0 0.0 1.0 popitem 0.0 0.0 1.0 setdefault 0.0 0.0 1.0 setdefault (unsuccessful search) 0.0 0.0 1.0 __setitem__ (add new item) 0.0 0.0 1.0 __setitem__ (replace) 0.0 0.0 1.0 update 0.0 0.0 1.0 update (many) 0.0 0.0 1.0 values 0.0 0.0 1.0 timing subject builtin sqlitecollections ratio __add__ 0.00518 0.01769 3.41536 append 0.0052 0.00937 1.80061 clear 0.00491 0.00982 1.99974 __contains__ 0.00487 0.00508 1.04321 copy 0.00561 0.01286 2.29291 count 0.00506 0.0068 1.34418 __init__ 0.00489 0.03167 6.47661 __delitem__ 0.00525 0.10048 19.12623 __delitem__ (slice) 0.0055 0.19083 34.709 __delitem__ (slice with skip) 0.00507 0.19026 37.51458 extend 0.00501 0.01006 2.00808 __getitem__ 0.00517 0.00504 0.97457 __getitem__ (slice) 0.0053 0.11596 21.88991 __getitem__ (slice with skip) 0.00478 0.01869 3.90816 __iadd__ 0.00496 0.01065 2.14747 __imult__ 0.00547 0.28823 52.65028 index 0.0051 0.00596 1.16792 index (unsuccessful search) 0.00522 0.00535 1.02386 insert 0.00504 0.19166 37.99235 __len__ 0.00489 0.00544 1.11155 __mult__ 0.00504 0.29191 57.89971 __contains__ (unsuccessful search) 0.00509 0.00539 1.05965 pop 0.0051 0.10419 20.42879 remove 0.00493 0.1453 29.50243 __setitem__ 0.00495 0.01037 2.09515 __setitem__ (slice) 0.0051 16.98318 3330.28081 __setitem__ (slice with skip) 0.00519 0.02294 4.4182 sort 0.00518 0.10974 21.20277 approximate memory usage subject builtin sqlitecollections ratio __add__ 0.0 0.0 1.0 append 0.0 0.0 1.0 clear 0.0 0.0 1.0 __contains__ 0.0 0.0 1.0 copy 0.0 0.0 1.0 count 0.0 0.0 1.0 __init__ 0.0 0.0 1.0 __delitem__ 0.0 0.0 1.0 __delitem__ (slice) 0.0 0.0 1.0 __delitem__ (slice with skip) 0.0 0.0 1.0 extend 0.0 0.0 1.0 __getitem__ 0.0 0.0 1.0 __getitem__ (slice) 0.0 0.0 1.0 __getitem__ (slice with skip) 0.0 0.0 1.0 __iadd__ 0.0 0.0 1.0 __imult__ 0.0 0.0 1.0 index 0.0 0.0 1.0 index (unsuccessful search) 0.0 0.0 1.0 insert 0.0 0.0 1.0 __len__ 0.0 0.0 1.0 __mult__ 0.0 0.0 1.0 __contains__ (unsuccessful search) 0.0 0.0 1.0 pop 0.0 0.0 1.0 remove 0.0 0.0 1.0 __setitem__ 0.0 0.0 1.0 __setitem__ (slice) 0.0 0.0 1.0 __setitem__ (slice with skip) 0.0 0.0 1.0 sort 0.0 1.00391 inf timing subject builtin sqlitecollections ratio add (existing item) 0.00498 0.00738 1.48364 add (new item) 0.00534 0.00964 1.80424 __and__ 0.00566 0.01651 2.91445 clear 0.00501 0.00962 1.9189 __contains__ 0.00551 0.00491 0.89078 copy 0.00506 0.01186 2.34459 difference 0.00516 0.01281 2.48259 discard 0.00526 0.00941 1.78831 discard (no changes) 0.00511 0.00736 1.44007 __ge__ 0.00507 0.00501 0.98781 __ge__ (not greater than or equals to) 0.00514 0.00623 1.21182 __gt__ 0.00517 0.00945 1.82852 __gt__ (not greater than) 0.00505 0.04034 7.99229 __iand__ 0.00515 0.01191 2.31129 __init__ 0.00519 0.02463 4.74699 intersection 0.00485 0.27166 55.98493 intersection_update 0.00487 0.01158 2.37745 __ior__ 0.00482 0.01165 2.41844 isdisjoint 0.00488 0.00527 1.08061 isdisjoint (not disjoint) 0.00507 0.00509 1.00266 issubset 0.00482 0.03959 8.21909 issubset (not subset) 0.00522 0.01731 3.31595 issuperset 0.00479 0.0324 6.76906 issuperset (not superset) 0.00501 0.0059 1.17922 __ixor__ 0.00545 0.05122 9.3956 __le__ 0.00501 0.00638 1.27427 __le__ (not less than or equals to) 0.00511 0.00519 1.01638 __len__ 0.00512 0.00503 0.98219 __lt__ 0.00487 0.00627 1.28846 __lt__ (not less than) 0.00514 0.00491 0.9547 __contains__ (unsuccessful search) 0.00496 0.00544 1.09791 __or__ 0.00503 0.01615 3.2095 pop 0.00498 0.00857 1.72148 remove 0.00491 0.00934 1.90265 __sub__ 0.00545 0.0133 2.44164 symmetric_difference 0.00532 0.05594 10.51367 symmetric_difference_update 0.00489 0.05058 10.34027 union 0.00496 0.01648 3.322 update 0.0048 0.0112 2.33488 __xor__ 0.00497 0.05462 10.99728 approximate memory usage subject builtin sqlitecollections ratio add (existing item) 0.0 0.0 1.0 add (new item) 0.0 0.0 1.0 __and__ 0.0 0.0 1.0 clear 0.0 0.0 1.0 __contains__ 0.0 0.0 1.0 copy 0.0 0.0 1.0 difference 0.0 0.0 1.0 discard 0.0 0.0 1.0 discard (no changes) 0.0 0.0 1.0 __ge__ 0.0 0.0 1.0 __ge__ (not greater than or equals to) 0.0 0.0 1.0 __gt__ 0.0 0.0 1.0 __gt__ (not greater than) 0.0 0.0 1.0 __iand__ 0.0 0.0 1.0 __init__ 0.0 0.05078 inf intersection 0.0 0.0 1.0 intersection_update 0.0 0.0 1.0 __ior__ 0.0 0.0 1.0 isdisjoint 0.0 0.0 1.0 isdisjoint (not disjoint) 0.0 0.0 1.0 issubset 0.0 0.0 1.0 issubset (not subset) 0.0 0.0 1.0 issuperset 0.0 0.0 1.0 issuperset (not superset) 0.0 0.0 1.0 __ixor__ 0.0 0.0 1.0 __le__ 0.0 0.0 1.0 __le__ (not less than or equals to) 0.0 0.0 1.0 __len__ 0.0 0.0 1.0 __lt__ 0.0 0.0 1.0 __lt__ (not less than) 0.0 0.0 1.0 __contains__ (unsuccessful search) 0.0 0.0 1.0 __or__ 0.0 0.0 1.0 pop 0.0 0.0 1.0 remove 0.0 0.0 1.0 __sub__ 0.0 0.0 1.0 symmetric_difference 0.0 0.0 1.0 symmetric_difference_update 0.0 0.0 1.0 union 0.0 0.0 1.0 update 0.0 0.0 1.0 __xor__ 0.0 0.0 1.0 dict list set timing subject builtin sqlitecollections ratio clear 0.00465 0.00733 1.57722 __contains__ 0.00424 0.00452 1.06806 copy 0.00429 0.01026 2.39521 __delitem__ 0.00443 0.00776 1.75056 get 0.00422 0.00463 1.09804 get (unsuccessful search) 0.0043 0.00475 1.10586 __getitem__ 0.00421 0.00454 1.07831 __init__ 0.00447 0.03895 8.70455 items 0.00476 0.01176 2.4727 __iter__ 0.00441 0.00806 1.82789 keys 0.00436 0.00829 1.90027 __len__ 0.00442 0.0044 0.99592 __contains__ (unsuccessful search) 0.0042 0.00445 1.05989 pop 0.0043 0.00805 1.87177 pop (unsuccessful search) 0.00433 0.00626 1.44608 popitem 0.00437 0.00831 1.90365 reversed 0.00432 0.00814 1.8829 setdefault 0.00436 0.00658 1.5065 setdefault (unsuccessful search) 0.00428 0.00699 1.63406 __setitem__ (add new item) 0.00439 0.00793 1.805 __setitem__ (replace) 0.00431 0.00775 1.79852 update 0.00432 0.00794 1.83647 update (many) 0.00537 0.58603 109.19687 values 0.00435 0.00792 1.82162 approximate memory usage subject builtin sqlitecollections ratio clear 0.0 0.0 1.0 __contains__ 0.0 0.0 1.0 copy 0.0 0.0 1.0 __delitem__ 0.0 0.0 1.0 get 0.0 0.0 1.0 get (unsuccessful search) 0.0 0.0 1.0 __getitem__ 0.0 0.0 1.0 __init__ 0.0 0.0 1.0 items 0.0 0.25 inf __iter__ 0.0 0.0 1.0 keys 0.0 0.0 1.0 __len__ 0.0 0.0 1.0 __contains__ (unsuccessful search) 0.0 0.0 1.0 pop 0.0 0.0 1.0 pop (unsuccessful search) 0.0 0.0 1.0 popitem 0.0 0.0 1.0 reversed 0.0 0.0 1.0 setdefault 0.0 0.0 1.0 setdefault (unsuccessful search) 0.0 0.0 1.0 __setitem__ (add new item) 0.0 0.0 1.0 __setitem__ (replace) 0.0 0.0 1.0 update 0.0 0.0 1.0 update (many) 0.0 0.0 1.0 values 0.0 0.0 1.0 timing subject builtin sqlitecollections ratio __add__ 0.00406 0.01071 2.63555 append 0.00425 0.00733 1.72235 clear 0.00415 0.00711 1.71335 __contains__ 0.00429 0.0044 1.02463 copy 0.00415 0.00932 2.24637 count 0.00421 0.00452 1.07372 __init__ 0.00424 0.02094 4.94387 __delitem__ 0.00416 0.08423 20.2354 __delitem__ (slice) 0.00415 0.16061 38.65487 __delitem__ (slice with skip) 0.00429 0.16122 37.59054 extend 0.00444 0.0074 1.66666 __getitem__ 0.00414 0.00418 1.00826 __getitem__ (slice) 0.00422 0.09164 21.73471 __getitem__ (slice with skip) 0.00417 0.01276 3.05835 __iadd__ 0.00419 0.00746 1.78046 __imult__ 0.00424 0.23887 56.38109 index 0.00418 0.00475 1.13601 index (unsuccessful search) 0.00442 0.00468 1.06068 insert 0.00432 0.15743 36.4212 __len__ 0.00423 0.00443 1.04785 __mult__ 0.00428 0.24361 56.9571 __contains__ (unsuccessful search) 0.0042 0.00425 1.01204 pop 0.00419 0.0854 20.36593 remove 0.00422 0.12298 29.11364 __setitem__ 0.00419 0.00734 1.75174 __setitem__ (slice) 0.00419 14.13621 3373.39165 __setitem__ (slice with skip) 0.00423 0.01635 3.86677 sort 0.00422 0.09185 21.7415 approximate memory usage subject builtin sqlitecollections ratio __add__ 0.0 0.0 1.0 append 0.0 0.0 1.0 clear 0.0 0.0 1.0 __contains__ 0.0 0.0 1.0 copy 0.0 0.0 1.0 count 0.0 0.0 1.0 __init__ 0.0 0.0 1.0 __delitem__ 0.0 0.0 1.0 __delitem__ (slice) 0.0 0.0 1.0 __delitem__ (slice with skip) 0.0 0.0 1.0 extend 0.0 0.0 1.0 __getitem__ 0.0 0.0 1.0 __getitem__ (slice) 0.0 0.0 1.0 __getitem__ (slice with skip) 0.0 0.0 1.0 __iadd__ 0.0 0.0 1.0 __imult__ 0.0 0.0 1.0 index 0.0 0.0 1.0 index (unsuccessful search) 0.0 0.0 1.0 insert 0.0 0.0 1.0 __len__ 0.0 0.0 1.0 __mult__ 0.0 0.0 1.0 __contains__ (unsuccessful search) 0.0 0.0 1.0 pop 0.0 0.0 1.0 remove 0.0 0.0 1.0 __setitem__ 0.0 0.0 1.0 __setitem__ (slice) 0.0 0.0 1.0 __setitem__ (slice with skip) 0.0 0.0 1.0 sort 0.0 0.9375 inf timing subject builtin sqlitecollections ratio add (existing item) 0.00406 0.00574 1.41611 add (new item) 0.00423 0.00728 1.72168 __and__ 0.00421 0.05347 12.71017 clear 0.00421 0.00683 1.62107 __contains__ 0.00412 0.00433 1.04993 copy 0.00441 0.00905 2.05325 difference 0.00423 0.03777 8.93288 discard 0.00419 0.00714 1.70233 discard (no changes) 0.00424 0.00597 1.40666 __ge__ 0.0041 0.00435 1.06154 __ge__ (not greater than or equals to) 0.00417 0.00601 1.4431 __gt__ 0.00406 0.0073 1.79678 __gt__ (not greater than) 0.00407 0.03084 7.58494 __iand__ 0.00408 0.00908 2.22643 __init__ 0.00416 0.01677 4.02769 intersection 0.00414 0.01182 2.85616 intersection_update 0.00423 0.00872 2.0636 __ior__ 0.00422 0.00955 2.26382 isdisjoint 0.00423 0.00434 1.02716 isdisjoint (not disjoint) 0.00404 0.00429 1.06142 issubset 0.00414 0.02981 7.20123 issubset (not subset) 0.00396 0.01203 3.03519 issuperset 0.00408 0.02586 6.33949 issuperset (not superset) 0.00412 0.00593 1.43999 __ixor__ 0.00413 0.03947 9.56217 __le__ 0.00401 0.00498 1.24163 __le__ (not less than or equals to) 0.00406 0.00424 1.04262 __len__ 0.00416 0.00429 1.03003 __lt__ 0.00423 0.00511 1.20722 __lt__ (not less than) 0.0042 0.00415 0.98823 __contains__ (unsuccessful search) 0.00416 0.00437 1.05039 __or__ 0.00421 0.01236 2.93267 pop 0.0042 0.00688 1.64068 remove 0.00407 0.0069 1.6978 __sub__ 0.00429 0.00903 2.10583 symmetric_difference 0.00424 0.04212 9.93269 symmetric_difference_update 0.00416 0.03926 9.44656 union 0.00419 0.01193 2.84908 update 0.00415 0.00855 2.06015 __xor__ 0.00405 0.04263 10.52539 approximate memory usage subject builtin sqlitecollections ratio add (existing item) 0.0 0.0 1.0 add (new item) 0.0 0.0 1.0 __and__ 0.0 0.0 1.0 clear 0.0 0.0 1.0 __contains__ 0.0 0.0 1.0 copy 0.0 0.0 1.0 difference 0.0 0.0 1.0 discard 0.0 0.0 1.0 discard (no changes) 0.0 0.0 1.0 __ge__ 0.0 0.0 1.0 __ge__ (not greater than or equals to) 0.0 0.0 1.0 __gt__ 0.0 0.0 1.0 __gt__ (not greater than) 0.0 0.0 1.0 __iand__ 0.0 0.0 1.0 __init__ 0.0 0.05859 inf intersection 0.0 0.0 1.0 intersection_update 0.0 0.0 1.0 __ior__ 0.0 0.0 1.0 isdisjoint 0.0 0.0 1.0 isdisjoint (not disjoint) 0.0 0.0 1.0 issubset 0.0 0.0 1.0 issubset (not subset) 0.0 0.0 1.0 issuperset 0.0 0.0 1.0 issuperset (not superset) 0.0 0.0 1.0 __ixor__ 0.0 0.0 1.0 __le__ 0.0 0.0 1.0 __le__ (not less than or equals to) 0.0 0.0 1.0 __len__ 0.0 0.0 1.0 __lt__ 0.0 0.0 1.0 __lt__ (not less than) 0.0 0.0 1.0 __contains__ (unsuccessful search) 0.0 0.0 1.0 __or__ 0.0 0.0 1.0 pop 0.0 0.0 1.0 remove 0.0 0.0 1.0 __sub__ 0.0 0.0 1.0 symmetric_difference 0.0 0.0 1.0 symmetric_difference_update 0.0 0.0 1.0 union 0.0 0.0 1.0 update 0.0 0.0 1.0 __xor__ 0.0 0.0 1.0 dict list set timing subject builtin sqlitecollections ratio clear 0.00406 0.00717 1.76641 __contains__ 0.00401 0.00422 1.05232 copy 0.00409 0.00973 2.37846 __delitem__ 0.00404 0.00705 1.74492 get 0.00377 0.00402 1.0672 get (unsuccessful search) 0.00374 0.00411 1.09762 __getitem__ 0.0037 0.00412 1.11469 __init__ 0.0041 0.03584 8.73972 __ior__ 0.00387 0.00687 1.77484 __ior__ (many) 0.00508 0.51704 101.78427 items 0.00446 0.01011 2.26833 __iter__ 0.00392 0.00752 1.91819 keys 0.00402 0.00799 1.98935 __len__ 0.00404 0.00422 1.0437 __contains__ (unsuccessful search) 0.00409 0.00461 1.12478 __or__ 0.00426 0.01241 2.91176 __or__ (many) 0.00565 0.52927 93.64977 pop 0.0041 0.00785 1.9167 pop (unsuccessful search) 0.00432 0.00588 1.36237 popitem 0.00423 0.00819 1.93554 reversed 0.00449 0.00786 1.75264 setdefault 0.00417 0.00606 1.45109 setdefault (unsuccessful search) 0.00415 0.00656 1.58152 __setitem__ (add new item) 0.00425 0.00762 1.79259 __setitem__ (replace) 0.00418 0.00719 1.71936 update 0.00423 0.00774 1.82706 update (many) 0.00518 0.55901 107.89158 values 0.00416 0.00767 1.84656 approximate memory usage subject builtin sqlitecollections ratio clear 0.0 0.0 1.0 __contains__ 0.0 0.0 1.0 copy 0.0 0.0 1.0 __delitem__ 0.0 0.0 1.0 get 0.0 0.0 1.0 get (unsuccessful search) 0.0 0.0 1.0 __getitem__ 0.0 0.0 1.0 __init__ 0.0 0.0 1.0 __ior__ 0.0 0.0 1.0 __ior__ (many) 0.18359 0.0 0.0 items 0.0 0.21875 inf __iter__ 0.0 0.0 1.0 keys 0.0 0.0 1.0 __len__ 0.0 0.0 1.0 __contains__ (unsuccessful search) 0.0 0.0 1.0 __or__ 0.0 0.0 1.0 __or__ (many) 0.0 0.0 1.0 pop 0.0 0.0 1.0 pop (unsuccessful search) 0.0 0.0 1.0 popitem 0.0 0.0 1.0 reversed 0.0 0.0 1.0 setdefault 0.0 0.0 1.0 setdefault (unsuccessful search) 0.0 0.0 1.0 __setitem__ (add new item) 0.0 0.0 1.0 __setitem__ (replace) 0.0 0.0 1.0 update 0.0 0.0 1.0 update (many) 0.0 0.0 1.0 values 0.0 0.0 1.0 timing subject builtin sqlitecollections ratio __add__ 0.00374 0.01008 2.69649 append 0.00372 0.0067 1.80208 clear 0.00373 0.00678 1.81613 __contains__ 0.00405 0.00405 0.99799 copy 0.0039 0.00916 2.34831 count 0.00397 0.00413 1.03964 __init__ 0.00389 0.01936 4.97514 __delitem__ 0.00402 0.08242 20.52781 __delitem__ (slice) 0.00392 0.14118 35.99534 __delitem__ (slice with skip) 0.0038 0.14419 37.97142 extend 0.00383 0.00665 1.73467 __getitem__ 0.0036 0.00401 1.11549 __getitem__ (slice) 0.00383 0.08252 21.54433 __getitem__ (slice with skip) 0.00372 0.01153 3.1006 __iadd__ 0.00377 0.00655 1.73787 __imult__ 0.00371 0.21236 57.26571 index 0.004 0.00418 1.04598 index (unsuccessful search) 0.00373 0.00415 1.11118 insert 0.00375 0.13969 37.26354 __len__ 0.00377 0.00411 1.09189 __mult__ 0.00403 0.22894 56.8614 __contains__ (unsuccessful search) 0.00387 0.00414 1.06939 pop 0.00397 0.08045 20.25192 remove 0.00399 0.10679 26.77678 __setitem__ 0.0037 0.00648 1.75449 __setitem__ (slice) 0.00369 13.23976 3586.52949 __setitem__ (slice with skip) 0.00384 0.01497 3.89252 sort 0.00403 0.08134 20.16336 approximate memory usage subject builtin sqlitecollections ratio __add__ 0.0 0.0 1.0 append 0.0 0.0 1.0 clear 0.0 0.0 1.0 __contains__ 0.0 0.0 1.0 copy 0.0 0.0 1.0 count 0.0 0.0 1.0 __init__ 0.0 0.0 1.0 __delitem__ 0.0 0.00391 inf __delitem__ (slice) 0.0 0.0 1.0 __delitem__ (slice with skip) 0.0 0.00391 inf extend 0.0 0.0 1.0 __getitem__ 0.0 0.0 1.0 __getitem__ (slice) 0.0 0.0 1.0 __getitem__ (slice with skip) 0.0 0.0 1.0 __iadd__ 0.0 0.0 1.0 __imult__ 0.0 0.0 1.0 index 0.0 0.0 1.0 index (unsuccessful search) 0.0 0.0 1.0 insert 0.0 0.0 1.0 __len__ 0.0 0.0 1.0 __mult__ 0.0 0.00391 inf __contains__ (unsuccessful search) 0.0 0.0 1.0 pop 0.0 0.0 1.0 remove 0.0 0.0 1.0 __setitem__ 0.0 0.0 1.0 __setitem__ (slice) 0.0 0.0 1.0 __setitem__ (slice with skip) 0.0 0.0 1.0 sort 0.0 0.63672 inf timing subject builtin sqlitecollections ratio add (existing item) 0.00392 0.0055 1.40202 add (new item) 0.0039 0.00709 1.81885 __and__ 0.00385 0.01092 2.83435 clear 0.0039 0.00655 1.68117 __contains__ 0.004 0.00409 1.02441 copy 0.004 0.00844 2.10963 difference 0.00384 0.0089 2.31766 discard 0.00399 0.00648 1.62324 discard (no changes) 0.00392 0.02852 7.2728 __ge__ 0.00403 0.00426 1.05716 __ge__ (not greater than or equals to) 0.00393 0.0043 1.09307 __gt__ 0.00404 0.00686 1.69866 __gt__ (not greater than) 0.00401 0.0295 7.3514 __iand__ 0.00396 0.00831 2.09752 __init__ 0.0041 0.01678 4.08845 intersection 0.00391 0.01082 2.76551 intersection_update 0.00414 0.00864 2.08736 __ior__ 0.00413 0.00858 2.07519 isdisjoint 0.00405 0.00393 0.97159 isdisjoint (not disjoint) 0.00377 0.0039 1.03492 issubset 0.0037 0.16123 43.54553 issubset (not subset) 0.00374 0.0131 3.50026 issuperset 0.00427 0.02345 5.49359 issuperset (not superset) 0.0047 0.00401 0.85439 __ixor__ 0.00373 0.03588 9.62813 __le__ 0.00368 0.00458 1.24545 __le__ (not less than or equals to) 0.0037 0.00385 1.04009 __len__ 0.00373 0.00375 1.00546 __lt__ 0.00368 0.00458 1.24507 __lt__ (not less than) 0.00378 0.0038 1.0053 __contains__ (unsuccessful search) 0.00369 0.00372 1.00736 __or__ 0.00357 0.01097 3.0734 pop 0.00381 0.00662 1.73664 remove 0.00367 0.00648 1.7664 __sub__ 0.00372 0.00815 2.19209 symmetric_difference 0.00384 0.03883 10.12363 symmetric_difference_update 0.00369 0.03566 9.65794 union 0.00367 0.01094 2.97933 update 0.00363 0.00788 2.16782 __xor__ 0.00369 0.03828 10.38093 approximate memory usage subject builtin sqlitecollections ratio add (existing item) 0.0 0.0 1.0 add (new item) 0.0 0.0 1.0 __and__ 0.0 0.0 1.0 clear 0.0 0.0 1.0 __contains__ 0.0 0.0 1.0 copy 0.0 0.0 1.0 difference 0.0 0.0 1.0 discard 0.0 0.0 1.0 discard (no changes) 0.0 0.0 1.0 __ge__ 0.0 0.0 1.0 __ge__ (not greater than or equals to) 0.0 0.0 1.0 __gt__ 0.0 0.0 1.0 __gt__ (not greater than) 0.0 0.0 1.0 __iand__ 0.0 0.0 1.0 __init__ 0.0 0.0 1.0 intersection 0.0 0.0 1.0 intersection_update 0.0 0.0 1.0 __ior__ 0.0 0.0 1.0 isdisjoint 0.0 0.0 1.0 isdisjoint (not disjoint) 0.0 0.0 1.0 issubset 0.0 0.0 1.0 issubset (not subset) 0.0 0.0 1.0 issuperset 0.0 0.0 1.0 issuperset (not superset) 0.0 0.0 1.0 __ixor__ 0.0 0.0 1.0 __le__ 0.0 0.0 1.0 __le__ (not less than or equals to) 0.0 0.0 1.0 __len__ 0.0 0.0 1.0 __lt__ 0.0 0.0 1.0 __lt__ (not less than) 0.0 0.0 1.0 __contains__ (unsuccessful search) 0.0 0.0 1.0 __or__ 0.0 0.0 1.0 pop 0.0 0.0 1.0 remove 0.0 0.0 1.0 __sub__ 0.0 0.0 1.0 symmetric_difference 0.0 0.0 1.0 symmetric_difference_update 0.0 0.0 1.0 union 0.0 0.0 1.0 update 0.0 0.0 1.0 __xor__ 0.0 0.0 1.0 dict list set timing subject builtin sqlitecollections ratio clear 0.00388 0.00723 1.86237 __contains__ 0.00397 0.00406 1.02229 copy 0.00391 0.00946 2.42123 __delitem__ 0.00396 0.00792 2.00033 get 0.00377 0.00402 1.06742 get (unsuccessful search) 0.00401 0.00389 0.96947 __getitem__ 0.00379 0.00396 1.0463 __init__ 0.00425 0.0413 9.71777 __ior__ 0.00512 0.0074 1.44398 __ior__ (many) 0.00497 0.5706 114.71589 items 0.00443 0.01105 2.4967 __iter__ 0.00395 0.00791 2.00479 keys 0.00399 0.00797 1.99669 __len__ 0.00377 0.00388 1.02752 __contains__ (unsuccessful search) 0.00385 0.00426 1.10623 __or__ 0.00399 0.01219 3.05096 __or__ (many) 0.00516 0.56298 109.15718 pop 0.00398 0.00772 1.9383 pop (unsuccessful search) 0.00407 0.00634 1.55808 popitem 0.00399 0.00807 2.02273 reversed 0.00404 0.00799 1.97671 setdefault 0.00391 0.00599 1.5319 setdefault (unsuccessful search) 0.00394 0.00619 1.57035 __setitem__ (add new item) 0.00397 0.00783 1.97265 __setitem__ (replace) 0.00405 0.00743 1.83177 update 0.00404 0.00773 1.91336 update (many) 0.00478 0.55776 116.75435 values 0.00398 0.00741 1.86097 approximate memory usage subject builtin sqlitecollections ratio clear 0.0 0.0 1.0 __contains__ 0.0 0.0 1.0 copy 0.0 0.0 1.0 __delitem__ 0.0 0.0 1.0 get 0.0 0.0 1.0 get (unsuccessful search) 0.0 0.0 1.0 __getitem__ 0.0 0.0 1.0 __init__ 0.0 0.0 1.0 __ior__ 0.0 0.0 1.0 __ior__ (many) 0.23828 0.0 0.0 items 0.01172 0.21484 18.33333 __iter__ 0.0 0.0 1.0 keys 0.0 0.0 1.0 __len__ 0.0 0.0 1.0 __contains__ (unsuccessful search) 0.0 0.0 1.0 __or__ 0.0 0.0 1.0 __or__ (many) 0.0 0.0 1.0 pop 0.0 0.0 1.0 pop (unsuccessful search) 0.0 0.0 1.0 popitem 0.0 0.0 1.0 reversed 0.0 0.0 1.0 setdefault 0.0 0.0 1.0 setdefault (unsuccessful search) 0.0 0.0 1.0 __setitem__ (add new item) 0.0 0.0 1.0 __setitem__ (replace) 0.0 0.0 1.0 update 0.0 0.0 1.0 update (many) 0.0 0.0 1.0 values 0.0 0.0 1.0 timing subject builtin sqlitecollections ratio __add__ 0.00375 0.0106 2.82333 append 0.00381 0.00773 2.02948 clear 0.0038 0.00614 1.61776 __contains__ 0.00381 0.00388 1.0168 copy 0.00377 0.00852 2.26013 count 0.00383 0.00383 0.99989 __init__ 0.00376 0.02142 5.7019 __delitem__ 0.00377 0.10427 27.64387 __delitem__ (slice) 0.00386 0.15439 40.02255 __delitem__ (slice with skip) 0.00378 0.15348 40.64555 extend 0.00391 0.00682 1.74518 __getitem__ 0.0037 0.00389 1.05231 __getitem__ (slice) 0.00369 0.08988 24.33863 __getitem__ (slice with skip) 0.0038 0.01284 3.3753 __iadd__ 0.0038 0.00692 1.81867 __imult__ 0.00384 0.23033 59.94218 index 0.00375 0.00418 1.11455 index (unsuccessful search) 0.00371 0.00416 1.12215 insert 0.00389 0.15283 39.29299 __len__ 0.00368 0.00397 1.07905 __mult__ 0.00375 0.23472 62.51193 __contains__ (unsuccessful search) 0.00378 0.00379 1.00387 pop 0.00376 0.08153 21.66377 remove 0.00377 0.11443 30.35543 __setitem__ 0.00372 0.00803 2.16049 __setitem__ (slice) 0.0038 13.72314 3608.80215 __setitem__ (slice with skip) 0.00377 0.01633 4.32922 sort 0.00376 0.0798 21.20538 approximate memory usage subject builtin sqlitecollections ratio __add__ 0.0 0.0 1.0 append 0.0 0.0 1.0 clear 0.0 0.0 1.0 __contains__ 0.0 0.0 1.0 copy 0.0 0.0 1.0 count 0.0 0.0 1.0 __init__ 0.0 0.0 1.0 __delitem__ 0.0 0.0 1.0 __delitem__ (slice) 0.0 0.0 1.0 __delitem__ (slice with skip) 0.0 0.0 1.0 extend 0.0 0.0 1.0 __getitem__ 0.0 0.0 1.0 __getitem__ (slice) 0.0 0.00391 inf __getitem__ (slice with skip) 0.0 0.0 1.0 __iadd__ 0.0 0.0 1.0 __imult__ 0.0 0.0 1.0 index 0.0 0.0 1.0 index (unsuccessful search) 0.0 0.0 1.0 insert 0.0 0.00391 inf __len__ 0.0 0.0 1.0 __mult__ 0.0 0.0 1.0 __contains__ (unsuccessful search) 0.0 0.0 1.0 pop 0.0 0.00391 inf remove 0.0 0.0 1.0 __setitem__ 0.0 0.0 1.0 __setitem__ (slice) 0.0 0.0 1.0 __setitem__ (slice with skip) 0.0 0.0 1.0 sort 0.0 0.70703 inf timing subject builtin sqlitecollections ratio add (existing item) 0.00376 0.00534 1.41958 add (new item) 0.00373 0.00669 1.79103 __and__ 0.00371 0.01259 3.39025 clear 0.00387 0.00658 1.70212 __contains__ 0.00383 0.00377 0.98546 copy 0.00383 0.00854 2.2287 difference 0.00374 0.019 5.08479 discard 0.0038 0.00628 1.65095 discard (no changes) 0.00371 0.00554 1.49121 __ge__ 0.00374 0.00369 0.98647 __ge__ (not greater than or equals to) 0.00374 0.00368 0.98338 __gt__ 0.00366 0.00709 1.93884 __gt__ (not greater than) 0.00371 0.02995 8.08337 __iand__ 0.00372 0.00911 2.4482 __init__ 0.00374 0.01921 5.13744 intersection 0.00367 0.01216 3.31064 intersection_update 0.00372 0.00927 2.49267 __ior__ 0.00377 0.00919 2.44117 isdisjoint 0.00366 0.00373 1.02117 isdisjoint (not disjoint) 0.00371 0.0037 0.99799 issubset 0.00369 0.07001 18.98811 issubset (not subset) 0.00377 0.08936 23.7227 issuperset 0.00377 0.02468 6.53783 issuperset (not superset) 0.00377 0.00371 0.986 __ixor__ 0.00379 0.03994 10.53478 __le__ 0.00369 0.00454 1.22903 __le__ (not less than or equals to) 0.00363 0.00385 1.05886 __len__ 0.00365 0.00378 1.03607 __lt__ 0.00372 0.0045 1.20908 __lt__ (not less than) 0.00378 0.00379 1.00141 __contains__ (unsuccessful search) 0.0037 0.00379 1.02637 __or__ 0.00369 0.0118 3.19529 pop 0.00365 0.00674 1.84607 remove 0.00369 0.00712 1.92767 __sub__ 0.00371 0.00858 2.31267 symmetric_difference 0.00377 0.04171 11.05034 symmetric_difference_update 0.00377 0.03869 10.26119 union 0.00378 0.01193 3.1544 update 0.00387 0.00845 2.18061 __xor__ 0.00374 0.04277 11.41964 approximate memory usage subject builtin sqlitecollections ratio add (existing item) 0.0 0.0 1.0 add (new item) 0.0 0.0 1.0 __and__ 0.0 0.0 1.0 clear 0.0 0.0 1.0 __contains__ 0.0 0.0 1.0 copy 0.0 0.0 1.0 difference 0.0 0.0 1.0 discard 0.0 0.0 1.0 discard (no changes) 0.0 0.0 1.0 __ge__ 0.0 0.0 1.0 __ge__ (not greater than or equals to) 0.0 0.0 1.0 __gt__ 0.0 0.0 1.0 __gt__ (not greater than) 0.0 0.0 1.0 __iand__ 0.0 0.0 1.0 __init__ 0.0 0.0 1.0 intersection 0.0 0.0 1.0 intersection_update 0.0 0.0 1.0 __ior__ 0.0 0.0 1.0 isdisjoint 0.0 0.0 1.0 isdisjoint (not disjoint) 0.0 0.0 1.0 issubset 0.0 0.0 1.0 issubset (not subset) 0.0 0.0 1.0 issuperset 0.0 0.0 1.0 issuperset (not superset) 0.0 0.0 1.0 __ixor__ 0.0 0.0 1.0 __le__ 0.0 0.0 1.0 __le__ (not less than or equals to) 0.0 0.0 1.0 __len__ 0.0 0.0 1.0 __lt__ 0.0 0.0 1.0 __lt__ (not less than) 0.0 0.0 1.0 __contains__ (unsuccessful search) 0.0 0.0 1.0 __or__ 0.0 0.0 1.0 pop 0.0 0.0 1.0 remove 0.0 0.0 1.0 __sub__ 0.0 0.0 1.0 symmetric_difference 0.0 0.0 1.0 symmetric_difference_update 0.0 0.0 1.0 union 0.0 0.0 1.0 update 0.0 0.0 1.0 __xor__ 0.0 0.0 1.0","title":"Benchmark"},{"location":"development/","text":"Development Tests, type checking and linting locally To run tests, type checking and linting locally, you'll need to have python 3.6 , 3.7 , 3.8 , 3.9 and 3.10 installed. We use tox to run tests and type checking on all the supported python versions. You can set up the development environment with the following commands: git clone git@github.com:osoken/sqlitecollections.git cd sqlitecollections python -m venv .venv source ./.venv/bin/activate pip install -e .[dev] Then, run tests is as easy as: tox After a while, you'll see the following message at the bottom of the long logs from pytest and others. __________________ summary __________________ lint: commands succeeded py36: commands succeeded py37: commands succeeded py38: commands succeeded py39: commands succeeded py310: commands succeeded congratulations :) Building documents We use mkdocs to build the documentation. To set up the environment for building the document, run the following commands: git clone git@github.com:osoken/sqlitecollections.git cd sqlitecollections python -m venv .venv source ./.venv/bin/activate pip install -e .[docs] Then, building the documentation can be done by the following command: mkdocs build The output will be located in site directory in your current directory. During development, you can also run mkdoc 's builtin development server with hot-reloading enabled with the following command: mkdocs serve In that case, you can check the result on http://127.0.0.1:8000 . Compatibility policy We aim to implement containers that are as compatible as possible with the built-in containers, but we have a few implementations that intentionally behave differently. Normal behavior will be compatible, but in case of errors it may be different. The constructor arguments are not compatible, as they require arguments specific to this package's container, such as sqlite3 DB file paths and serialization methods. copy method in each container behaves similarly to deep copy, since it copies the table containing serialized elements. Dict 's item order is guaranteed to be insertion order not only for python 3.7 and upper but for all versions. Dict.fromkeys class method is not provided. Any member in the container cannot be mutated directly. If you want to mutate any member, mutate it via temporary variable then write it back. import sqlitecollections as sc x = sc . Dict ({ \"a\" : []}) # create {\"a\": []} x [ \"a\" ] . append ( \"b\" ) # try to mutate the empty list print ( x [ \"a\" ]) # not [\"b\"] but [] temp = x [ \"a\" ] # temporarily substitute the list to a variable temp . append ( \"b\" ) # mutate the temporary variable x [ \"a\" ] = temp # then, write it back print ( x [ \"a\" ]) # now, we get [\"b\"]","title":"Development"},{"location":"development/#development","text":"","title":"Development"},{"location":"development/#tests-type-checking-and-linting-locally","text":"To run tests, type checking and linting locally, you'll need to have python 3.6 , 3.7 , 3.8 , 3.9 and 3.10 installed. We use tox to run tests and type checking on all the supported python versions. You can set up the development environment with the following commands: git clone git@github.com:osoken/sqlitecollections.git cd sqlitecollections python -m venv .venv source ./.venv/bin/activate pip install -e .[dev] Then, run tests is as easy as: tox After a while, you'll see the following message at the bottom of the long logs from pytest and others. __________________ summary __________________ lint: commands succeeded py36: commands succeeded py37: commands succeeded py38: commands succeeded py39: commands succeeded py310: commands succeeded congratulations :)","title":"Tests, type checking and linting locally"},{"location":"development/#building-documents","text":"We use mkdocs to build the documentation. To set up the environment for building the document, run the following commands: git clone git@github.com:osoken/sqlitecollections.git cd sqlitecollections python -m venv .venv source ./.venv/bin/activate pip install -e .[docs] Then, building the documentation can be done by the following command: mkdocs build The output will be located in site directory in your current directory. During development, you can also run mkdoc 's builtin development server with hot-reloading enabled with the following command: mkdocs serve In that case, you can check the result on http://127.0.0.1:8000 .","title":"Building documents"},{"location":"development/#compatibility-policy","text":"We aim to implement containers that are as compatible as possible with the built-in containers, but we have a few implementations that intentionally behave differently. Normal behavior will be compatible, but in case of errors it may be different. The constructor arguments are not compatible, as they require arguments specific to this package's container, such as sqlite3 DB file paths and serialization methods. copy method in each container behaves similarly to deep copy, since it copies the table containing serialized elements. Dict 's item order is guaranteed to be insertion order not only for python 3.7 and upper but for all versions. Dict.fromkeys class method is not provided. Any member in the container cannot be mutated directly. If you want to mutate any member, mutate it via temporary variable then write it back. import sqlitecollections as sc x = sc . Dict ({ \"a\" : []}) # create {\"a\": []} x [ \"a\" ] . append ( \"b\" ) # try to mutate the empty list print ( x [ \"a\" ]) # not [\"b\"] but [] temp = x [ \"a\" ] # temporarily substitute the list to a variable temp . append ( \"b\" ) # mutate the temporary variable x [ \"a\" ] = temp # then, write it back print ( x [ \"a\" ]) # now, we get [\"b\"]","title":"Compatibility policy"},{"location":"install/","text":"Install pip install sqlitecollections","title":"Install"},{"location":"install/#install","text":"pip install sqlitecollections","title":"Install"},{"location":"benchmark_results/py310/dict/","text":"timing | subject | `builtin` | `sqlitecollections` | ratio | | :------ | --------: | ------------------: | ----: | | `clear` | 0.00388 | 0.00723 | 1.86237 | | `__contains__` | 0.00397 | 0.00406 | 1.02229 | | `copy` | 0.00391 | 0.00946 | 2.42123 | | `__delitem__` | 0.00396 | 0.00792 | 2.00033 | | `get` | 0.00377 | 0.00402 | 1.06742 | | `get (unsuccessful search)` | 0.00401 | 0.00389 | 0.96947 | | `__getitem__` | 0.00379 | 0.00396 | 1.0463 | | `__init__` | 0.00425 | 0.0413 | 9.71777 | | `__ior__` | 0.00512 | 0.0074 | 1.44398 | | `__ior__` (many) | 0.00497 | 0.5706 | 114.71589 | | `items` | 0.00443 | 0.01105 | 2.4967 | | `__iter__` | 0.00395 | 0.00791 | 2.00479 | | `keys` | 0.00399 | 0.00797 | 1.99669 | | `__len__` | 0.00377 | 0.00388 | 1.02752 | | `__contains__` (unsuccessful search) | 0.00385 | 0.00426 | 1.10623 | | `__or__` | 0.00399 | 0.01219 | 3.05096 | | `__or__` (many) | 0.00516 | 0.56298 | 109.15718 | | `pop` | 0.00398 | 0.00772 | 1.9383 | | `pop (unsuccessful search)` | 0.00407 | 0.00634 | 1.55808 | | `popitem` | 0.00399 | 0.00807 | 2.02273 | | `reversed` | 0.00404 | 0.00799 | 1.97671 | | `setdefault` | 0.00391 | 0.00599 | 1.5319 | | `setdefault (unsuccessful search)` | 0.00394 | 0.00619 | 1.57035 | | `__setitem__` (add new item) | 0.00397 | 0.00783 | 1.97265 | | `__setitem__` (replace) | 0.00405 | 0.00743 | 1.83177 | | `update` | 0.00404 | 0.00773 | 1.91336 | | `update` (many) | 0.00478 | 0.55776 | 116.75435 | | `values` | 0.00398 | 0.00741 | 1.86097 | approximate memory usage | subject | `builtin` | `sqlitecollections` | ratio | | :------ | --------: | ------------------: | ----: | | `clear` | 0.0 | 0.0 | 1.0 | | `__contains__` | 0.0 | 0.0 | 1.0 | | `copy` | 0.0 | 0.0 | 1.0 | | `__delitem__` | 0.0 | 0.0 | 1.0 | | `get` | 0.0 | 0.0 | 1.0 | | `get (unsuccessful search)` | 0.0 | 0.0 | 1.0 | | `__getitem__` | 0.0 | 0.0 | 1.0 | | `__init__` | 0.0 | 0.0 | 1.0 | | `__ior__` | 0.0 | 0.0 | 1.0 | | `__ior__` (many) | 0.23828 | 0.0 | 0.0 | | `items` | 0.01172 | 0.21484 | 18.33333 | | `__iter__` | 0.0 | 0.0 | 1.0 | | `keys` | 0.0 | 0.0 | 1.0 | | `__len__` | 0.0 | 0.0 | 1.0 | | `__contains__` (unsuccessful search) | 0.0 | 0.0 | 1.0 | | `__or__` | 0.0 | 0.0 | 1.0 | | `__or__` (many) | 0.0 | 0.0 | 1.0 | | `pop` | 0.0 | 0.0 | 1.0 | | `pop (unsuccessful search)` | 0.0 | 0.0 | 1.0 | | `popitem` | 0.0 | 0.0 | 1.0 | | `reversed` | 0.0 | 0.0 | 1.0 | | `setdefault` | 0.0 | 0.0 | 1.0 | | `setdefault (unsuccessful search)` | 0.0 | 0.0 | 1.0 | | `__setitem__` (add new item) | 0.0 | 0.0 | 1.0 | | `__setitem__` (replace) | 0.0 | 0.0 | 1.0 | | `update` | 0.0 | 0.0 | 1.0 | | `update` (many) | 0.0 | 0.0 | 1.0 | | `values` | 0.0 | 0.0 | 1.0 |","title":"Dict"},{"location":"benchmark_results/py310/list/","text":"timing | subject | `builtin` | `sqlitecollections` | ratio | | :------ | --------: | ------------------: | ----: | | `__add__` | 0.00375 | 0.0106 | 2.82333 | | `append` | 0.00381 | 0.00773 | 2.02948 | | `clear` | 0.0038 | 0.00614 | 1.61776 | | `__contains__` | 0.00381 | 0.00388 | 1.0168 | | `copy` | 0.00377 | 0.00852 | 2.26013 | | `count` | 0.00383 | 0.00383 | 0.99989 | | `__init__` | 0.00376 | 0.02142 | 5.7019 | | `__delitem__` | 0.00377 | 0.10427 | 27.64387 | | `__delitem__` (slice) | 0.00386 | 0.15439 | 40.02255 | | `__delitem__` (slice with skip) | 0.00378 | 0.15348 | 40.64555 | | `extend` | 0.00391 | 0.00682 | 1.74518 | | `__getitem__` | 0.0037 | 0.00389 | 1.05231 | | `__getitem__` (slice) | 0.00369 | 0.08988 | 24.33863 | | `__getitem__` (slice with skip) | 0.0038 | 0.01284 | 3.3753 | | `__iadd__` | 0.0038 | 0.00692 | 1.81867 | | `__imult__` | 0.00384 | 0.23033 | 59.94218 | | `index` | 0.00375 | 0.00418 | 1.11455 | | `index` (unsuccessful search) | 0.00371 | 0.00416 | 1.12215 | | `insert` | 0.00389 | 0.15283 | 39.29299 | | `__len__` | 0.00368 | 0.00397 | 1.07905 | | `__mult__` | 0.00375 | 0.23472 | 62.51193 | | `__contains__` (unsuccessful search) | 0.00378 | 0.00379 | 1.00387 | | `pop` | 0.00376 | 0.08153 | 21.66377 | | `remove` | 0.00377 | 0.11443 | 30.35543 | | `__setitem__` | 0.00372 | 0.00803 | 2.16049 | | `__setitem__` (slice) | 0.0038 | 13.72314 | 3608.80215 | | `__setitem__` (slice with skip) | 0.00377 | 0.01633 | 4.32922 | | `sort` | 0.00376 | 0.0798 | 21.20538 | approximate memory usage | subject | `builtin` | `sqlitecollections` | ratio | | :------ | --------: | ------------------: | ----: | | `__add__` | 0.0 | 0.0 | 1.0 | | `append` | 0.0 | 0.0 | 1.0 | | `clear` | 0.0 | 0.0 | 1.0 | | `__contains__` | 0.0 | 0.0 | 1.0 | | `copy` | 0.0 | 0.0 | 1.0 | | `count` | 0.0 | 0.0 | 1.0 | | `__init__` | 0.0 | 0.0 | 1.0 | | `__delitem__` | 0.0 | 0.0 | 1.0 | | `__delitem__` (slice) | 0.0 | 0.0 | 1.0 | | `__delitem__` (slice with skip) | 0.0 | 0.0 | 1.0 | | `extend` | 0.0 | 0.0 | 1.0 | | `__getitem__` | 0.0 | 0.0 | 1.0 | | `__getitem__` (slice) | 0.0 | 0.00391 | inf | | `__getitem__` (slice with skip) | 0.0 | 0.0 | 1.0 | | `__iadd__` | 0.0 | 0.0 | 1.0 | | `__imult__` | 0.0 | 0.0 | 1.0 | | `index` | 0.0 | 0.0 | 1.0 | | `index` (unsuccessful search) | 0.0 | 0.0 | 1.0 | | `insert` | 0.0 | 0.00391 | inf | | `__len__` | 0.0 | 0.0 | 1.0 | | `__mult__` | 0.0 | 0.0 | 1.0 | | `__contains__` (unsuccessful search) | 0.0 | 0.0 | 1.0 | | `pop` | 0.0 | 0.00391 | inf | | `remove` | 0.0 | 0.0 | 1.0 | | `__setitem__` | 0.0 | 0.0 | 1.0 | | `__setitem__` (slice) | 0.0 | 0.0 | 1.0 | | `__setitem__` (slice with skip) | 0.0 | 0.0 | 1.0 | | `sort` | 0.0 | 0.70703 | inf |","title":"List"},{"location":"benchmark_results/py310/set/","text":"timing | subject | `builtin` | `sqlitecollections` | ratio | | :------ | --------: | ------------------: | ----: | | `add (existing item)` | 0.00376 | 0.00534 | 1.41958 | | `add (new item)` | 0.00373 | 0.00669 | 1.79103 | | `__and__` | 0.00371 | 0.01259 | 3.39025 | | `clear` | 0.00387 | 0.00658 | 1.70212 | | `__contains__` | 0.00383 | 0.00377 | 0.98546 | | `copy` | 0.00383 | 0.00854 | 2.2287 | | `difference` | 0.00374 | 0.019 | 5.08479 | | `discard` | 0.0038 | 0.00628 | 1.65095 | | `discard (no changes)` | 0.00371 | 0.00554 | 1.49121 | | `__ge__` | 0.00374 | 0.00369 | 0.98647 | | `__ge__` (not greater than or equals to) | 0.00374 | 0.00368 | 0.98338 | | `__gt__` | 0.00366 | 0.00709 | 1.93884 | | `__gt__` (not greater than) | 0.00371 | 0.02995 | 8.08337 | | `__iand__` | 0.00372 | 0.00911 | 2.4482 | | `__init__` | 0.00374 | 0.01921 | 5.13744 | | `intersection` | 0.00367 | 0.01216 | 3.31064 | | `intersection_update` | 0.00372 | 0.00927 | 2.49267 | | `__ior__` | 0.00377 | 0.00919 | 2.44117 | | `isdisjoint` | 0.00366 | 0.00373 | 1.02117 | | `isdisjoint` (not disjoint) | 0.00371 | 0.0037 | 0.99799 | | `issubset` | 0.00369 | 0.07001 | 18.98811 | | `issubset` (not subset) | 0.00377 | 0.08936 | 23.7227 | | `issuperset` | 0.00377 | 0.02468 | 6.53783 | | `issuperset` (not superset) | 0.00377 | 0.00371 | 0.986 | | `__ixor__` | 0.00379 | 0.03994 | 10.53478 | | `__le__` | 0.00369 | 0.00454 | 1.22903 | | `__le__` (not less than or equals to) | 0.00363 | 0.00385 | 1.05886 | | `__len__` | 0.00365 | 0.00378 | 1.03607 | | `__lt__` | 0.00372 | 0.0045 | 1.20908 | | `__lt__` (not less than) | 0.00378 | 0.00379 | 1.00141 | | `__contains__` (unsuccessful search) | 0.0037 | 0.00379 | 1.02637 | | `__or__` | 0.00369 | 0.0118 | 3.19529 | | `pop` | 0.00365 | 0.00674 | 1.84607 | | `remove` | 0.00369 | 0.00712 | 1.92767 | | `__sub__` | 0.00371 | 0.00858 | 2.31267 | | `symmetric_difference` | 0.00377 | 0.04171 | 11.05034 | | `symmetric_difference_update` | 0.00377 | 0.03869 | 10.26119 | | `union` | 0.00378 | 0.01193 | 3.1544 | | `update` | 0.00387 | 0.00845 | 2.18061 | | `__xor__` | 0.00374 | 0.04277 | 11.41964 | approximate memory usage | subject | `builtin` | `sqlitecollections` | ratio | | :------ | --------: | ------------------: | ----: | | `add (existing item)` | 0.0 | 0.0 | 1.0 | | `add (new item)` | 0.0 | 0.0 | 1.0 | | `__and__` | 0.0 | 0.0 | 1.0 | | `clear` | 0.0 | 0.0 | 1.0 | | `__contains__` | 0.0 | 0.0 | 1.0 | | `copy` | 0.0 | 0.0 | 1.0 | | `difference` | 0.0 | 0.0 | 1.0 | | `discard` | 0.0 | 0.0 | 1.0 | | `discard (no changes)` | 0.0 | 0.0 | 1.0 | | `__ge__` | 0.0 | 0.0 | 1.0 | | `__ge__` (not greater than or equals to) | 0.0 | 0.0 | 1.0 | | `__gt__` | 0.0 | 0.0 | 1.0 | | `__gt__` (not greater than) | 0.0 | 0.0 | 1.0 | | `__iand__` | 0.0 | 0.0 | 1.0 | | `__init__` | 0.0 | 0.0 | 1.0 | | `intersection` | 0.0 | 0.0 | 1.0 | | `intersection_update` | 0.0 | 0.0 | 1.0 | | `__ior__` | 0.0 | 0.0 | 1.0 | | `isdisjoint` | 0.0 | 0.0 | 1.0 | | `isdisjoint` (not disjoint) | 0.0 | 0.0 | 1.0 | | `issubset` | 0.0 | 0.0 | 1.0 | | `issubset` (not subset) | 0.0 | 0.0 | 1.0 | | `issuperset` | 0.0 | 0.0 | 1.0 | | `issuperset` (not superset) | 0.0 | 0.0 | 1.0 | | `__ixor__` | 0.0 | 0.0 | 1.0 | | `__le__` | 0.0 | 0.0 | 1.0 | | `__le__` (not less than or equals to) | 0.0 | 0.0 | 1.0 | | `__len__` | 0.0 | 0.0 | 1.0 | | `__lt__` | 0.0 | 0.0 | 1.0 | | `__lt__` (not less than) | 0.0 | 0.0 | 1.0 | | `__contains__` (unsuccessful search) | 0.0 | 0.0 | 1.0 | | `__or__` | 0.0 | 0.0 | 1.0 | | `pop` | 0.0 | 0.0 | 1.0 | | `remove` | 0.0 | 0.0 | 1.0 | | `__sub__` | 0.0 | 0.0 | 1.0 | | `symmetric_difference` | 0.0 | 0.0 | 1.0 | | `symmetric_difference_update` | 0.0 | 0.0 | 1.0 | | `union` | 0.0 | 0.0 | 1.0 | | `update` | 0.0 | 0.0 | 1.0 | | `__xor__` | 0.0 | 0.0 | 1.0 |","title":"Set"},{"location":"benchmark_results/py36/dict/","text":"timing | subject | `builtin` | `sqlitecollections` | ratio | | :------ | --------: | ------------------: | ----: | | `clear` | 0.00383 | 0.00704 | 1.83747 | | `__contains__` | 0.00393 | 0.00439 | 1.11809 | | `copy` | 0.00382 | 0.01113 | 2.91503 | | `__delitem__` | 0.00402 | 0.00658 | 1.63441 | | `get` | 0.00372 | 0.00412 | 1.10529 | | `get (unsuccessful search)` | 0.00464 | 0.00408 | 0.87744 | | `__getitem__` | 0.00409 | 0.00439 | 1.07427 | | `__init__` | 0.00413 | 0.04907 | 11.89458 | | `items` | 0.00448 | 0.01182 | 2.63919 | | `__iter__` | 0.00427 | 0.00844 | 1.97486 | | `keys` | 0.00394 | 0.00841 | 2.13336 | | `__len__` | 0.00396 | 0.00415 | 1.04761 | | `__contains__` (unsuccessful search) | 0.00398 | 0.00469 | 1.17722 | | `pop` | 0.00397 | 0.00705 | 1.77586 | | `pop (unsuccessful search)` | 0.00388 | 0.00583 | 1.50404 | | `popitem` | 0.00396 | 0.00749 | 1.88973 | | `setdefault` | 0.00461 | 0.00588 | 1.27667 | | `setdefault (unsuccessful search)` | 0.00389 | 0.00613 | 1.57463 | | `__setitem__` (add new item) | 0.00393 | 0.00758 | 1.92882 | | `__setitem__` (replace) | 0.00408 | 0.00741 | 1.81479 | | `update` | 0.00393 | 0.00775 | 1.97029 | | `update` (many) | 0.00548 | 0.5667 | 103.33829 | | `values` | 0.00388 | 0.00842 | 2.1719 | approximate memory usage | subject | `builtin` | `sqlitecollections` | ratio | | :------ | --------: | ------------------: | ----: | | `clear` | 0.0 | 0.0 | 1.0 | | `__contains__` | 0.0 | 0.0 | 1.0 | | `copy` | 0.0 | 0.0 | 1.0 | | `__delitem__` | 0.0 | 0.0 | 1.0 | | `get` | 0.0 | 0.0 | 1.0 | | `get (unsuccessful search)` | 0.0 | 0.0 | 1.0 | | `__getitem__` | 0.0 | 0.0 | 1.0 | | `__init__` | 0.0 | 0.0 | 1.0 | | `items` | 0.11328 | 0.18359 | 1.62069 | | `__iter__` | 0.0 | 0.0 | 1.0 | | `keys` | 0.0 | 0.0 | 1.0 | | `__len__` | 0.0 | 0.0 | 1.0 | | `__contains__` (unsuccessful search) | 0.0 | 0.0 | 1.0 | | `pop` | 0.0 | 0.0 | 1.0 | | `pop (unsuccessful search)` | 0.0 | 0.0 | 1.0 | | `popitem` | 0.0 | 0.0 | 1.0 | | `setdefault` | 0.0 | 0.0 | 1.0 | | `setdefault (unsuccessful search)` | 0.0 | 0.0 | 1.0 | | `__setitem__` (add new item) | 0.0 | 0.0 | 1.0 | | `__setitem__` (replace) | 0.0 | 0.0 | 1.0 | | `update` | 0.0 | 0.0 | 1.0 | | `update` (many) | 0.0 | 0.0 | 1.0 | | `values` | 0.0 | 0.0 | 1.0 |","title":"Dict"},{"location":"benchmark_results/py36/list/","text":"timing | subject | `builtin` | `sqlitecollections` | ratio | | :------ | --------: | ------------------: | ----: | | `__add__` | 0.00394 | 0.01047 | 2.66028 | | `append` | 0.00367 | 0.00662 | 1.80118 | | `clear` | 0.0038 | 0.00732 | 1.92312 | | `__contains__` | 0.00406 | 0.00397 | 0.97774 | | `copy` | 0.00391 | 0.00898 | 2.29926 | | `count` | 0.00378 | 0.00401 | 1.06274 | | `__init__` | 0.00367 | 0.02302 | 6.26765 | | `__delitem__` | 0.00387 | 0.08201 | 21.1895 | | `__delitem__` (slice) | 0.00381 | 0.15544 | 40.8173 | | `__delitem__` (slice with skip) | 0.00365 | 0.15616 | 42.83004 | | `extend` | 0.00388 | 0.00686 | 1.76728 | | `__getitem__` | 0.00369 | 0.00397 | 1.07586 | | `__getitem__` (slice) | 0.00403 | 0.09237 | 22.90714 | | `__getitem__` (slice with skip) | 0.00376 | 0.01301 | 3.4572 | | `__iadd__` | 0.00376 | 0.00731 | 1.9425 | | `__imult__` | 0.00375 | 0.23512 | 62.74551 | | `index` | 0.00372 | 0.00399 | 1.0724 | | `index` (unsuccessful search) | 0.00363 | 0.00399 | 1.1011 | | `insert` | 0.00377 | 0.1533 | 40.65812 | | `__len__` | 0.0038 | 0.00397 | 1.04672 | | `__mult__` | 0.00411 | 0.24149 | 58.7007 | | `__contains__` (unsuccessful search) | 0.00373 | 0.00385 | 1.03315 | | `pop` | 0.00426 | 0.08072 | 18.94755 | | `remove` | 0.0037 | 0.11734 | 31.68563 | | `__setitem__` | 0.00389 | 0.00762 | 1.96068 | | `__setitem__` (slice) | 0.00375 | 13.6965 | 3655.10384 | | `__setitem__` (slice with skip) | 0.00417 | 0.01637 | 3.92627 | | `sort` | 0.00407 | 0.0814 | 19.9962 | approximate memory usage | subject | `builtin` | `sqlitecollections` | ratio | | :------ | --------: | ------------------: | ----: | | `__add__` | 0.0 | 0.0 | 1.0 | | `append` | 0.0 | 0.0 | 1.0 | | `clear` | 0.0 | 0.0 | 1.0 | | `__contains__` | 0.0 | 0.0 | 1.0 | | `copy` | 0.0 | 0.0 | 1.0 | | `count` | 0.0 | 0.0 | 1.0 | | `__init__` | 0.0 | 0.0 | 1.0 | | `__delitem__` | 0.0 | 0.0 | 1.0 | | `__delitem__` (slice) | 0.0 | 0.0 | 1.0 | | `__delitem__` (slice with skip) | 0.0 | 0.0 | 1.0 | | `extend` | 0.0 | 0.0 | 1.0 | | `__getitem__` | 0.0 | 0.0 | 1.0 | | `__getitem__` (slice) | 0.0 | 0.0 | 1.0 | | `__getitem__` (slice with skip) | 0.0 | 0.0 | 1.0 | | `__iadd__` | 0.0 | 0.0 | 1.0 | | `__imult__` | 0.0 | 0.0 | 1.0 | | `index` | 0.0 | 0.00391 | inf | | `index` (unsuccessful search) | 0.0 | 0.0 | 1.0 | | `insert` | 0.0 | 0.0 | 1.0 | | `__len__` | 0.0 | 0.0 | 1.0 | | `__mult__` | 0.0 | 0.0 | 1.0 | | `__contains__` (unsuccessful search) | 0.0 | 0.0 | 1.0 | | `pop` | 0.0 | 0.0 | 1.0 | | `remove` | 0.0 | 0.0 | 1.0 | | `__setitem__` | 0.0 | 0.0 | 1.0 | | `__setitem__` (slice) | 0.0 | 0.0 | 1.0 | | `__setitem__` (slice with skip) | 0.0 | 0.0 | 1.0 | | `sort` | 0.0 | 1.28125 | inf |","title":"List"},{"location":"benchmark_results/py36/set/","text":"timing | subject | `builtin` | `sqlitecollections` | ratio | | :------ | --------: | ------------------: | ----: | | `add (existing item)` | 0.00348 | 0.00511 | 1.46904 | | `add (new item)` | 0.00353 | 0.00633 | 1.79345 | | `__and__` | 0.00354 | 0.01082 | 3.05492 | | `clear` | 0.00355 | 0.00616 | 1.73328 | | `__contains__` | 0.00366 | 0.00375 | 1.02518 | | `copy` | 0.00362 | 0.01092 | 3.01583 | | `difference` | 0.00373 | 0.00848 | 2.27352 | | `discard` | 0.00372 | 0.00624 | 1.67461 | | `discard (no changes)` | 0.0037 | 0.00516 | 1.39696 | | `__ge__` | 0.00368 | 0.00447 | 1.21423 | | `__ge__` (not greater than or equals to) | 0.00353 | 0.00506 | 1.43447 | | `__gt__` | 0.00356 | 0.0069 | 1.93867 | | `__gt__` (not greater than) | 0.00363 | 0.03316 | 9.13496 | | `__iand__` | 0.00389 | 0.02308 | 5.92949 | | `__init__` | 0.00368 | 0.01808 | 4.91742 | | `intersection` | 0.00375 | 0.0112 | 2.98933 | | `intersection_update` | 0.00362 | 0.01 | 2.76075 | | `__ior__` | 0.00363 | 0.00912 | 2.50999 | | `isdisjoint` | 0.00375 | 0.00387 | 1.03354 | | `isdisjoint` (not disjoint) | 0.00366 | 0.00389 | 1.06283 | | `issubset` | 0.00351 | 0.03281 | 9.35598 | | `issubset` (not subset) | 0.00406 | 0.20654 | 50.89314 | | `issuperset` | 0.00367 | 0.02713 | 7.38806 | | `issuperset` (not superset) | 0.0038 | 0.00534 | 1.40336 | | `__ixor__` | 0.00391 | 0.04171 | 10.6771 | | `__le__` | 0.00387 | 0.00477 | 1.2317 | | `__le__` (not less than or equals to) | 0.00361 | 0.00368 | 1.0193 | | `__len__` | 0.00363 | 0.00374 | 1.029 | | `__lt__` | 0.00369 | 0.00452 | 1.22464 | | `__lt__` (not less than) | 0.00362 | 0.00375 | 1.03427 | | `__contains__` (unsuccessful search) | 0.00363 | 0.00417 | 1.14979 | | `__or__` | 0.00365 | 0.01265 | 3.46459 | | `pop` | 0.0039 | 0.007 | 1.79608 | | `remove` | 0.00408 | 0.00823 | 2.01821 | | `__sub__` | 0.00375 | 0.00919 | 2.44796 | | `symmetric_difference` | 0.00377 | 0.04396 | 11.67087 | | `symmetric_difference_update` | 0.00382 | 0.04361 | 11.42257 | | `union` | 0.00383 | 0.01275 | 3.33046 | | `update` | 0.00375 | 0.00813 | 2.16564 | | `__xor__` | 0.00372 | 0.04341 | 11.65556 | approximate memory usage | subject | `builtin` | `sqlitecollections` | ratio | | :------ | --------: | ------------------: | ----: | | `add (existing item)` | 0.0 | 0.0 | 1.0 | | `add (new item)` | 0.0 | 0.0 | 1.0 | | `__and__` | 0.0 | 0.00391 | inf | | `clear` | 0.0 | 0.0 | 1.0 | | `__contains__` | 0.0 | 0.0 | 1.0 | | `copy` | 0.0 | 0.0 | 1.0 | | `difference` | 0.0 | 0.0 | 1.0 | | `discard` | 0.0 | 0.0 | 1.0 | | `discard (no changes)` | 0.0 | 0.0 | 1.0 | | `__ge__` | 0.0 | 0.0 | 1.0 | | `__ge__` (not greater than or equals to) | 0.0 | 0.0 | 1.0 | | `__gt__` | 0.0 | 0.0 | 1.0 | | `__gt__` (not greater than) | 0.0 | 0.0 | 1.0 | | `__iand__` | 0.0 | 0.0 | 1.0 | | `__init__` | 0.0 | 0.00781 | inf | | `intersection` | 0.0 | 0.0 | 1.0 | | `intersection_update` | 0.0 | 0.0 | 1.0 | | `__ior__` | 0.0 | 0.0 | 1.0 | | `isdisjoint` | 0.0 | 0.0 | 1.0 | | `isdisjoint` (not disjoint) | 0.0 | 0.0 | 1.0 | | `issubset` | 0.0 | 0.0 | 1.0 | | `issubset` (not subset) | 0.0 | 0.0 | 1.0 | | `issuperset` | 0.0 | 0.0 | 1.0 | | `issuperset` (not superset) | 0.0 | 0.0 | 1.0 | | `__ixor__` | 0.0 | 0.0 | 1.0 | | `__le__` | 0.0 | 0.0 | 1.0 | | `__le__` (not less than or equals to) | 0.0 | 0.0 | 1.0 | | `__len__` | 0.0 | 0.0 | 1.0 | | `__lt__` | 0.0 | 0.0 | 1.0 | | `__lt__` (not less than) | 0.0 | 0.0 | 1.0 | | `__contains__` (unsuccessful search) | 0.0 | 0.0 | 1.0 | | `__or__` | 0.0 | 0.0 | 1.0 | | `pop` | 0.0 | 0.0 | 1.0 | | `remove` | 0.0 | 0.0 | 1.0 | | `__sub__` | 0.0 | 0.0 | 1.0 | | `symmetric_difference` | 0.0 | 0.00391 | inf | | `symmetric_difference_update` | 0.0 | 0.0 | 1.0 | | `union` | 0.0 | 0.0 | 1.0 | | `update` | 0.0 | 0.0 | 1.0 | | `__xor__` | 0.0 | 0.0 | 1.0 |","title":"Set"},{"location":"benchmark_results/py37/dict/","text":"timing | subject | `builtin` | `sqlitecollections` | ratio | | :------ | --------: | ------------------: | ----: | | `clear` | 0.00522 | 0.00985 | 1.88529 | | `__contains__` | 0.00511 | 0.00516 | 1.00961 | | `copy` | 0.00509 | 0.01329 | 2.60986 | | `__delitem__` | 0.00513 | 0.01015 | 1.97982 | | `get` | 0.00513 | 0.00533 | 1.03928 | | `get (unsuccessful search)` | 0.00512 | 0.00513 | 1.0022 | | `__getitem__` | 0.0053 | 0.00551 | 1.03953 | | `__init__` | 0.00534 | 0.05894 | 11.02769 | | `items` | 0.00585 | 0.01562 | 2.67163 | | `__iter__` | 0.00529 | 0.0106 | 2.00479 | | `keys` | 0.00545 | 0.01134 | 2.07988 | | `__len__` | 0.00512 | 0.00637 | 1.2451 | | `__contains__` (unsuccessful search) | 0.0052 | 0.00616 | 1.18472 | | `pop` | 0.00515 | 0.00945 | 1.83465 | | `pop (unsuccessful search)` | 0.00534 | 0.00758 | 1.42023 | | `popitem` | 0.00575 | 0.01024 | 1.78071 | | `setdefault` | 0.00552 | 0.00836 | 1.5143 | | `setdefault (unsuccessful search)` | 0.00525 | 0.00858 | 1.63307 | | `__setitem__` (add new item) | 0.00517 | 0.00936 | 1.8094 | | `__setitem__` (replace) | 0.00518 | 0.00959 | 1.85076 | | `update` | 0.00508 | 0.01055 | 2.07595 | | `update` (many) | 0.00626 | 0.71726 | 114.6332 | | `values` | 0.00536 | 0.01066 | 1.98744 | approximate memory usage | subject | `builtin` | `sqlitecollections` | ratio | | :------ | --------: | ------------------: | ----: | | `clear` | 0.0 | 0.0 | 1.0 | | `__contains__` | 0.0 | 0.0 | 1.0 | | `copy` | 0.0 | 0.0 | 1.0 | | `__delitem__` | 0.0 | 0.0 | 1.0 | | `get` | 0.0 | 0.0 | 1.0 | | `get (unsuccessful search)` | 0.0 | 0.0 | 1.0 | | `__getitem__` | 0.0 | 0.0 | 1.0 | | `__init__` | 0.0 | 0.0 | 1.0 | | `items` | 0.00391 | 0.33203 | 85.0 | | `__iter__` | 0.0 | 0.0 | 1.0 | | `keys` | 0.0 | 0.0 | 1.0 | | `__len__` | 0.0 | 0.0 | 1.0 | | `__contains__` (unsuccessful search) | 0.0 | 0.0 | 1.0 | | `pop` | 0.0 | 0.0 | 1.0 | | `pop (unsuccessful search)` | 0.0 | 0.0 | 1.0 | | `popitem` | 0.0 | 0.0 | 1.0 | | `setdefault` | 0.0 | 0.0 | 1.0 | | `setdefault (unsuccessful search)` | 0.0 | 0.0 | 1.0 | | `__setitem__` (add new item) | 0.0 | 0.0 | 1.0 | | `__setitem__` (replace) | 0.0 | 0.0 | 1.0 | | `update` | 0.0 | 0.0 | 1.0 | | `update` (many) | 0.0 | 0.0 | 1.0 | | `values` | 0.0 | 0.0 | 1.0 |","title":"Dict"},{"location":"benchmark_results/py37/list/","text":"timing | subject | `builtin` | `sqlitecollections` | ratio | | :------ | --------: | ------------------: | ----: | | `__add__` | 0.00518 | 0.01769 | 3.41536 | | `append` | 0.0052 | 0.00937 | 1.80061 | | `clear` | 0.00491 | 0.00982 | 1.99974 | | `__contains__` | 0.00487 | 0.00508 | 1.04321 | | `copy` | 0.00561 | 0.01286 | 2.29291 | | `count` | 0.00506 | 0.0068 | 1.34418 | | `__init__` | 0.00489 | 0.03167 | 6.47661 | | `__delitem__` | 0.00525 | 0.10048 | 19.12623 | | `__delitem__` (slice) | 0.0055 | 0.19083 | 34.709 | | `__delitem__` (slice with skip) | 0.00507 | 0.19026 | 37.51458 | | `extend` | 0.00501 | 0.01006 | 2.00808 | | `__getitem__` | 0.00517 | 0.00504 | 0.97457 | | `__getitem__` (slice) | 0.0053 | 0.11596 | 21.88991 | | `__getitem__` (slice with skip) | 0.00478 | 0.01869 | 3.90816 | | `__iadd__` | 0.00496 | 0.01065 | 2.14747 | | `__imult__` | 0.00547 | 0.28823 | 52.65028 | | `index` | 0.0051 | 0.00596 | 1.16792 | | `index` (unsuccessful search) | 0.00522 | 0.00535 | 1.02386 | | `insert` | 0.00504 | 0.19166 | 37.99235 | | `__len__` | 0.00489 | 0.00544 | 1.11155 | | `__mult__` | 0.00504 | 0.29191 | 57.89971 | | `__contains__` (unsuccessful search) | 0.00509 | 0.00539 | 1.05965 | | `pop` | 0.0051 | 0.10419 | 20.42879 | | `remove` | 0.00493 | 0.1453 | 29.50243 | | `__setitem__` | 0.00495 | 0.01037 | 2.09515 | | `__setitem__` (slice) | 0.0051 | 16.98318 | 3330.28081 | | `__setitem__` (slice with skip) | 0.00519 | 0.02294 | 4.4182 | | `sort` | 0.00518 | 0.10974 | 21.20277 | approximate memory usage | subject | `builtin` | `sqlitecollections` | ratio | | :------ | --------: | ------------------: | ----: | | `__add__` | 0.0 | 0.0 | 1.0 | | `append` | 0.0 | 0.0 | 1.0 | | `clear` | 0.0 | 0.0 | 1.0 | | `__contains__` | 0.0 | 0.0 | 1.0 | | `copy` | 0.0 | 0.0 | 1.0 | | `count` | 0.0 | 0.0 | 1.0 | | `__init__` | 0.0 | 0.0 | 1.0 | | `__delitem__` | 0.0 | 0.0 | 1.0 | | `__delitem__` (slice) | 0.0 | 0.0 | 1.0 | | `__delitem__` (slice with skip) | 0.0 | 0.0 | 1.0 | | `extend` | 0.0 | 0.0 | 1.0 | | `__getitem__` | 0.0 | 0.0 | 1.0 | | `__getitem__` (slice) | 0.0 | 0.0 | 1.0 | | `__getitem__` (slice with skip) | 0.0 | 0.0 | 1.0 | | `__iadd__` | 0.0 | 0.0 | 1.0 | | `__imult__` | 0.0 | 0.0 | 1.0 | | `index` | 0.0 | 0.0 | 1.0 | | `index` (unsuccessful search) | 0.0 | 0.0 | 1.0 | | `insert` | 0.0 | 0.0 | 1.0 | | `__len__` | 0.0 | 0.0 | 1.0 | | `__mult__` | 0.0 | 0.0 | 1.0 | | `__contains__` (unsuccessful search) | 0.0 | 0.0 | 1.0 | | `pop` | 0.0 | 0.0 | 1.0 | | `remove` | 0.0 | 0.0 | 1.0 | | `__setitem__` | 0.0 | 0.0 | 1.0 | | `__setitem__` (slice) | 0.0 | 0.0 | 1.0 | | `__setitem__` (slice with skip) | 0.0 | 0.0 | 1.0 | | `sort` | 0.0 | 1.00391 | inf |","title":"List"},{"location":"benchmark_results/py37/set/","text":"timing | subject | `builtin` | `sqlitecollections` | ratio | | :------ | --------: | ------------------: | ----: | | `add (existing item)` | 0.00498 | 0.00738 | 1.48364 | | `add (new item)` | 0.00534 | 0.00964 | 1.80424 | | `__and__` | 0.00566 | 0.01651 | 2.91445 | | `clear` | 0.00501 | 0.00962 | 1.9189 | | `__contains__` | 0.00551 | 0.00491 | 0.89078 | | `copy` | 0.00506 | 0.01186 | 2.34459 | | `difference` | 0.00516 | 0.01281 | 2.48259 | | `discard` | 0.00526 | 0.00941 | 1.78831 | | `discard (no changes)` | 0.00511 | 0.00736 | 1.44007 | | `__ge__` | 0.00507 | 0.00501 | 0.98781 | | `__ge__` (not greater than or equals to) | 0.00514 | 0.00623 | 1.21182 | | `__gt__` | 0.00517 | 0.00945 | 1.82852 | | `__gt__` (not greater than) | 0.00505 | 0.04034 | 7.99229 | | `__iand__` | 0.00515 | 0.01191 | 2.31129 | | `__init__` | 0.00519 | 0.02463 | 4.74699 | | `intersection` | 0.00485 | 0.27166 | 55.98493 | | `intersection_update` | 0.00487 | 0.01158 | 2.37745 | | `__ior__` | 0.00482 | 0.01165 | 2.41844 | | `isdisjoint` | 0.00488 | 0.00527 | 1.08061 | | `isdisjoint` (not disjoint) | 0.00507 | 0.00509 | 1.00266 | | `issubset` | 0.00482 | 0.03959 | 8.21909 | | `issubset` (not subset) | 0.00522 | 0.01731 | 3.31595 | | `issuperset` | 0.00479 | 0.0324 | 6.76906 | | `issuperset` (not superset) | 0.00501 | 0.0059 | 1.17922 | | `__ixor__` | 0.00545 | 0.05122 | 9.3956 | | `__le__` | 0.00501 | 0.00638 | 1.27427 | | `__le__` (not less than or equals to) | 0.00511 | 0.00519 | 1.01638 | | `__len__` | 0.00512 | 0.00503 | 0.98219 | | `__lt__` | 0.00487 | 0.00627 | 1.28846 | | `__lt__` (not less than) | 0.00514 | 0.00491 | 0.9547 | | `__contains__` (unsuccessful search) | 0.00496 | 0.00544 | 1.09791 | | `__or__` | 0.00503 | 0.01615 | 3.2095 | | `pop` | 0.00498 | 0.00857 | 1.72148 | | `remove` | 0.00491 | 0.00934 | 1.90265 | | `__sub__` | 0.00545 | 0.0133 | 2.44164 | | `symmetric_difference` | 0.00532 | 0.05594 | 10.51367 | | `symmetric_difference_update` | 0.00489 | 0.05058 | 10.34027 | | `union` | 0.00496 | 0.01648 | 3.322 | | `update` | 0.0048 | 0.0112 | 2.33488 | | `__xor__` | 0.00497 | 0.05462 | 10.99728 | approximate memory usage | subject | `builtin` | `sqlitecollections` | ratio | | :------ | --------: | ------------------: | ----: | | `add (existing item)` | 0.0 | 0.0 | 1.0 | | `add (new item)` | 0.0 | 0.0 | 1.0 | | `__and__` | 0.0 | 0.0 | 1.0 | | `clear` | 0.0 | 0.0 | 1.0 | | `__contains__` | 0.0 | 0.0 | 1.0 | | `copy` | 0.0 | 0.0 | 1.0 | | `difference` | 0.0 | 0.0 | 1.0 | | `discard` | 0.0 | 0.0 | 1.0 | | `discard (no changes)` | 0.0 | 0.0 | 1.0 | | `__ge__` | 0.0 | 0.0 | 1.0 | | `__ge__` (not greater than or equals to) | 0.0 | 0.0 | 1.0 | | `__gt__` | 0.0 | 0.0 | 1.0 | | `__gt__` (not greater than) | 0.0 | 0.0 | 1.0 | | `__iand__` | 0.0 | 0.0 | 1.0 | | `__init__` | 0.0 | 0.05078 | inf | | `intersection` | 0.0 | 0.0 | 1.0 | | `intersection_update` | 0.0 | 0.0 | 1.0 | | `__ior__` | 0.0 | 0.0 | 1.0 | | `isdisjoint` | 0.0 | 0.0 | 1.0 | | `isdisjoint` (not disjoint) | 0.0 | 0.0 | 1.0 | | `issubset` | 0.0 | 0.0 | 1.0 | | `issubset` (not subset) | 0.0 | 0.0 | 1.0 | | `issuperset` | 0.0 | 0.0 | 1.0 | | `issuperset` (not superset) | 0.0 | 0.0 | 1.0 | | `__ixor__` | 0.0 | 0.0 | 1.0 | | `__le__` | 0.0 | 0.0 | 1.0 | | `__le__` (not less than or equals to) | 0.0 | 0.0 | 1.0 | | `__len__` | 0.0 | 0.0 | 1.0 | | `__lt__` | 0.0 | 0.0 | 1.0 | | `__lt__` (not less than) | 0.0 | 0.0 | 1.0 | | `__contains__` (unsuccessful search) | 0.0 | 0.0 | 1.0 | | `__or__` | 0.0 | 0.0 | 1.0 | | `pop` | 0.0 | 0.0 | 1.0 | | `remove` | 0.0 | 0.0 | 1.0 | | `__sub__` | 0.0 | 0.0 | 1.0 | | `symmetric_difference` | 0.0 | 0.0 | 1.0 | | `symmetric_difference_update` | 0.0 | 0.0 | 1.0 | | `union` | 0.0 | 0.0 | 1.0 | | `update` | 0.0 | 0.0 | 1.0 | | `__xor__` | 0.0 | 0.0 | 1.0 |","title":"Set"},{"location":"benchmark_results/py38/dict/","text":"timing | subject | `builtin` | `sqlitecollections` | ratio | | :------ | --------: | ------------------: | ----: | | `clear` | 0.00465 | 0.00733 | 1.57722 | | `__contains__` | 0.00424 | 0.00452 | 1.06806 | | `copy` | 0.00429 | 0.01026 | 2.39521 | | `__delitem__` | 0.00443 | 0.00776 | 1.75056 | | `get` | 0.00422 | 0.00463 | 1.09804 | | `get (unsuccessful search)` | 0.0043 | 0.00475 | 1.10586 | | `__getitem__` | 0.00421 | 0.00454 | 1.07831 | | `__init__` | 0.00447 | 0.03895 | 8.70455 | | `items` | 0.00476 | 0.01176 | 2.4727 | | `__iter__` | 0.00441 | 0.00806 | 1.82789 | | `keys` | 0.00436 | 0.00829 | 1.90027 | | `__len__` | 0.00442 | 0.0044 | 0.99592 | | `__contains__` (unsuccessful search) | 0.0042 | 0.00445 | 1.05989 | | `pop` | 0.0043 | 0.00805 | 1.87177 | | `pop (unsuccessful search)` | 0.00433 | 0.00626 | 1.44608 | | `popitem` | 0.00437 | 0.00831 | 1.90365 | | `reversed` | 0.00432 | 0.00814 | 1.8829 | | `setdefault` | 0.00436 | 0.00658 | 1.5065 | | `setdefault (unsuccessful search)` | 0.00428 | 0.00699 | 1.63406 | | `__setitem__` (add new item) | 0.00439 | 0.00793 | 1.805 | | `__setitem__` (replace) | 0.00431 | 0.00775 | 1.79852 | | `update` | 0.00432 | 0.00794 | 1.83647 | | `update` (many) | 0.00537 | 0.58603 | 109.19687 | | `values` | 0.00435 | 0.00792 | 1.82162 | approximate memory usage | subject | `builtin` | `sqlitecollections` | ratio | | :------ | --------: | ------------------: | ----: | | `clear` | 0.0 | 0.0 | 1.0 | | `__contains__` | 0.0 | 0.0 | 1.0 | | `copy` | 0.0 | 0.0 | 1.0 | | `__delitem__` | 0.0 | 0.0 | 1.0 | | `get` | 0.0 | 0.0 | 1.0 | | `get (unsuccessful search)` | 0.0 | 0.0 | 1.0 | | `__getitem__` | 0.0 | 0.0 | 1.0 | | `__init__` | 0.0 | 0.0 | 1.0 | | `items` | 0.0 | 0.25 | inf | | `__iter__` | 0.0 | 0.0 | 1.0 | | `keys` | 0.0 | 0.0 | 1.0 | | `__len__` | 0.0 | 0.0 | 1.0 | | `__contains__` (unsuccessful search) | 0.0 | 0.0 | 1.0 | | `pop` | 0.0 | 0.0 | 1.0 | | `pop (unsuccessful search)` | 0.0 | 0.0 | 1.0 | | `popitem` | 0.0 | 0.0 | 1.0 | | `reversed` | 0.0 | 0.0 | 1.0 | | `setdefault` | 0.0 | 0.0 | 1.0 | | `setdefault (unsuccessful search)` | 0.0 | 0.0 | 1.0 | | `__setitem__` (add new item) | 0.0 | 0.0 | 1.0 | | `__setitem__` (replace) | 0.0 | 0.0 | 1.0 | | `update` | 0.0 | 0.0 | 1.0 | | `update` (many) | 0.0 | 0.0 | 1.0 | | `values` | 0.0 | 0.0 | 1.0 |","title":"Dict"},{"location":"benchmark_results/py38/list/","text":"timing | subject | `builtin` | `sqlitecollections` | ratio | | :------ | --------: | ------------------: | ----: | | `__add__` | 0.00406 | 0.01071 | 2.63555 | | `append` | 0.00425 | 0.00733 | 1.72235 | | `clear` | 0.00415 | 0.00711 | 1.71335 | | `__contains__` | 0.00429 | 0.0044 | 1.02463 | | `copy` | 0.00415 | 0.00932 | 2.24637 | | `count` | 0.00421 | 0.00452 | 1.07372 | | `__init__` | 0.00424 | 0.02094 | 4.94387 | | `__delitem__` | 0.00416 | 0.08423 | 20.2354 | | `__delitem__` (slice) | 0.00415 | 0.16061 | 38.65487 | | `__delitem__` (slice with skip) | 0.00429 | 0.16122 | 37.59054 | | `extend` | 0.00444 | 0.0074 | 1.66666 | | `__getitem__` | 0.00414 | 0.00418 | 1.00826 | | `__getitem__` (slice) | 0.00422 | 0.09164 | 21.73471 | | `__getitem__` (slice with skip) | 0.00417 | 0.01276 | 3.05835 | | `__iadd__` | 0.00419 | 0.00746 | 1.78046 | | `__imult__` | 0.00424 | 0.23887 | 56.38109 | | `index` | 0.00418 | 0.00475 | 1.13601 | | `index` (unsuccessful search) | 0.00442 | 0.00468 | 1.06068 | | `insert` | 0.00432 | 0.15743 | 36.4212 | | `__len__` | 0.00423 | 0.00443 | 1.04785 | | `__mult__` | 0.00428 | 0.24361 | 56.9571 | | `__contains__` (unsuccessful search) | 0.0042 | 0.00425 | 1.01204 | | `pop` | 0.00419 | 0.0854 | 20.36593 | | `remove` | 0.00422 | 0.12298 | 29.11364 | | `__setitem__` | 0.00419 | 0.00734 | 1.75174 | | `__setitem__` (slice) | 0.00419 | 14.13621 | 3373.39165 | | `__setitem__` (slice with skip) | 0.00423 | 0.01635 | 3.86677 | | `sort` | 0.00422 | 0.09185 | 21.7415 | approximate memory usage | subject | `builtin` | `sqlitecollections` | ratio | | :------ | --------: | ------------------: | ----: | | `__add__` | 0.0 | 0.0 | 1.0 | | `append` | 0.0 | 0.0 | 1.0 | | `clear` | 0.0 | 0.0 | 1.0 | | `__contains__` | 0.0 | 0.0 | 1.0 | | `copy` | 0.0 | 0.0 | 1.0 | | `count` | 0.0 | 0.0 | 1.0 | | `__init__` | 0.0 | 0.0 | 1.0 | | `__delitem__` | 0.0 | 0.0 | 1.0 | | `__delitem__` (slice) | 0.0 | 0.0 | 1.0 | | `__delitem__` (slice with skip) | 0.0 | 0.0 | 1.0 | | `extend` | 0.0 | 0.0 | 1.0 | | `__getitem__` | 0.0 | 0.0 | 1.0 | | `__getitem__` (slice) | 0.0 | 0.0 | 1.0 | | `__getitem__` (slice with skip) | 0.0 | 0.0 | 1.0 | | `__iadd__` | 0.0 | 0.0 | 1.0 | | `__imult__` | 0.0 | 0.0 | 1.0 | | `index` | 0.0 | 0.0 | 1.0 | | `index` (unsuccessful search) | 0.0 | 0.0 | 1.0 | | `insert` | 0.0 | 0.0 | 1.0 | | `__len__` | 0.0 | 0.0 | 1.0 | | `__mult__` | 0.0 | 0.0 | 1.0 | | `__contains__` (unsuccessful search) | 0.0 | 0.0 | 1.0 | | `pop` | 0.0 | 0.0 | 1.0 | | `remove` | 0.0 | 0.0 | 1.0 | | `__setitem__` | 0.0 | 0.0 | 1.0 | | `__setitem__` (slice) | 0.0 | 0.0 | 1.0 | | `__setitem__` (slice with skip) | 0.0 | 0.0 | 1.0 | | `sort` | 0.0 | 0.9375 | inf |","title":"List"},{"location":"benchmark_results/py38/set/","text":"timing | subject | `builtin` | `sqlitecollections` | ratio | | :------ | --------: | ------------------: | ----: | | `add (existing item)` | 0.00406 | 0.00574 | 1.41611 | | `add (new item)` | 0.00423 | 0.00728 | 1.72168 | | `__and__` | 0.00421 | 0.05347 | 12.71017 | | `clear` | 0.00421 | 0.00683 | 1.62107 | | `__contains__` | 0.00412 | 0.00433 | 1.04993 | | `copy` | 0.00441 | 0.00905 | 2.05325 | | `difference` | 0.00423 | 0.03777 | 8.93288 | | `discard` | 0.00419 | 0.00714 | 1.70233 | | `discard (no changes)` | 0.00424 | 0.00597 | 1.40666 | | `__ge__` | 0.0041 | 0.00435 | 1.06154 | | `__ge__` (not greater than or equals to) | 0.00417 | 0.00601 | 1.4431 | | `__gt__` | 0.00406 | 0.0073 | 1.79678 | | `__gt__` (not greater than) | 0.00407 | 0.03084 | 7.58494 | | `__iand__` | 0.00408 | 0.00908 | 2.22643 | | `__init__` | 0.00416 | 0.01677 | 4.02769 | | `intersection` | 0.00414 | 0.01182 | 2.85616 | | `intersection_update` | 0.00423 | 0.00872 | 2.0636 | | `__ior__` | 0.00422 | 0.00955 | 2.26382 | | `isdisjoint` | 0.00423 | 0.00434 | 1.02716 | | `isdisjoint` (not disjoint) | 0.00404 | 0.00429 | 1.06142 | | `issubset` | 0.00414 | 0.02981 | 7.20123 | | `issubset` (not subset) | 0.00396 | 0.01203 | 3.03519 | | `issuperset` | 0.00408 | 0.02586 | 6.33949 | | `issuperset` (not superset) | 0.00412 | 0.00593 | 1.43999 | | `__ixor__` | 0.00413 | 0.03947 | 9.56217 | | `__le__` | 0.00401 | 0.00498 | 1.24163 | | `__le__` (not less than or equals to) | 0.00406 | 0.00424 | 1.04262 | | `__len__` | 0.00416 | 0.00429 | 1.03003 | | `__lt__` | 0.00423 | 0.00511 | 1.20722 | | `__lt__` (not less than) | 0.0042 | 0.00415 | 0.98823 | | `__contains__` (unsuccessful search) | 0.00416 | 0.00437 | 1.05039 | | `__or__` | 0.00421 | 0.01236 | 2.93267 | | `pop` | 0.0042 | 0.00688 | 1.64068 | | `remove` | 0.00407 | 0.0069 | 1.6978 | | `__sub__` | 0.00429 | 0.00903 | 2.10583 | | `symmetric_difference` | 0.00424 | 0.04212 | 9.93269 | | `symmetric_difference_update` | 0.00416 | 0.03926 | 9.44656 | | `union` | 0.00419 | 0.01193 | 2.84908 | | `update` | 0.00415 | 0.00855 | 2.06015 | | `__xor__` | 0.00405 | 0.04263 | 10.52539 | approximate memory usage | subject | `builtin` | `sqlitecollections` | ratio | | :------ | --------: | ------------------: | ----: | | `add (existing item)` | 0.0 | 0.0 | 1.0 | | `add (new item)` | 0.0 | 0.0 | 1.0 | | `__and__` | 0.0 | 0.0 | 1.0 | | `clear` | 0.0 | 0.0 | 1.0 | | `__contains__` | 0.0 | 0.0 | 1.0 | | `copy` | 0.0 | 0.0 | 1.0 | | `difference` | 0.0 | 0.0 | 1.0 | | `discard` | 0.0 | 0.0 | 1.0 | | `discard (no changes)` | 0.0 | 0.0 | 1.0 | | `__ge__` | 0.0 | 0.0 | 1.0 | | `__ge__` (not greater than or equals to) | 0.0 | 0.0 | 1.0 | | `__gt__` | 0.0 | 0.0 | 1.0 | | `__gt__` (not greater than) | 0.0 | 0.0 | 1.0 | | `__iand__` | 0.0 | 0.0 | 1.0 | | `__init__` | 0.0 | 0.05859 | inf | | `intersection` | 0.0 | 0.0 | 1.0 | | `intersection_update` | 0.0 | 0.0 | 1.0 | | `__ior__` | 0.0 | 0.0 | 1.0 | | `isdisjoint` | 0.0 | 0.0 | 1.0 | | `isdisjoint` (not disjoint) | 0.0 | 0.0 | 1.0 | | `issubset` | 0.0 | 0.0 | 1.0 | | `issubset` (not subset) | 0.0 | 0.0 | 1.0 | | `issuperset` | 0.0 | 0.0 | 1.0 | | `issuperset` (not superset) | 0.0 | 0.0 | 1.0 | | `__ixor__` | 0.0 | 0.0 | 1.0 | | `__le__` | 0.0 | 0.0 | 1.0 | | `__le__` (not less than or equals to) | 0.0 | 0.0 | 1.0 | | `__len__` | 0.0 | 0.0 | 1.0 | | `__lt__` | 0.0 | 0.0 | 1.0 | | `__lt__` (not less than) | 0.0 | 0.0 | 1.0 | | `__contains__` (unsuccessful search) | 0.0 | 0.0 | 1.0 | | `__or__` | 0.0 | 0.0 | 1.0 | | `pop` | 0.0 | 0.0 | 1.0 | | `remove` | 0.0 | 0.0 | 1.0 | | `__sub__` | 0.0 | 0.0 | 1.0 | | `symmetric_difference` | 0.0 | 0.0 | 1.0 | | `symmetric_difference_update` | 0.0 | 0.0 | 1.0 | | `union` | 0.0 | 0.0 | 1.0 | | `update` | 0.0 | 0.0 | 1.0 | | `__xor__` | 0.0 | 0.0 | 1.0 |","title":"Set"},{"location":"benchmark_results/py39/dict/","text":"timing | subject | `builtin` | `sqlitecollections` | ratio | | :------ | --------: | ------------------: | ----: | | `clear` | 0.00406 | 0.00717 | 1.76641 | | `__contains__` | 0.00401 | 0.00422 | 1.05232 | | `copy` | 0.00409 | 0.00973 | 2.37846 | | `__delitem__` | 0.00404 | 0.00705 | 1.74492 | | `get` | 0.00377 | 0.00402 | 1.0672 | | `get (unsuccessful search)` | 0.00374 | 0.00411 | 1.09762 | | `__getitem__` | 0.0037 | 0.00412 | 1.11469 | | `__init__` | 0.0041 | 0.03584 | 8.73972 | | `__ior__` | 0.00387 | 0.00687 | 1.77484 | | `__ior__` (many) | 0.00508 | 0.51704 | 101.78427 | | `items` | 0.00446 | 0.01011 | 2.26833 | | `__iter__` | 0.00392 | 0.00752 | 1.91819 | | `keys` | 0.00402 | 0.00799 | 1.98935 | | `__len__` | 0.00404 | 0.00422 | 1.0437 | | `__contains__` (unsuccessful search) | 0.00409 | 0.00461 | 1.12478 | | `__or__` | 0.00426 | 0.01241 | 2.91176 | | `__or__` (many) | 0.00565 | 0.52927 | 93.64977 | | `pop` | 0.0041 | 0.00785 | 1.9167 | | `pop (unsuccessful search)` | 0.00432 | 0.00588 | 1.36237 | | `popitem` | 0.00423 | 0.00819 | 1.93554 | | `reversed` | 0.00449 | 0.00786 | 1.75264 | | `setdefault` | 0.00417 | 0.00606 | 1.45109 | | `setdefault (unsuccessful search)` | 0.00415 | 0.00656 | 1.58152 | | `__setitem__` (add new item) | 0.00425 | 0.00762 | 1.79259 | | `__setitem__` (replace) | 0.00418 | 0.00719 | 1.71936 | | `update` | 0.00423 | 0.00774 | 1.82706 | | `update` (many) | 0.00518 | 0.55901 | 107.89158 | | `values` | 0.00416 | 0.00767 | 1.84656 | approximate memory usage | subject | `builtin` | `sqlitecollections` | ratio | | :------ | --------: | ------------------: | ----: | | `clear` | 0.0 | 0.0 | 1.0 | | `__contains__` | 0.0 | 0.0 | 1.0 | | `copy` | 0.0 | 0.0 | 1.0 | | `__delitem__` | 0.0 | 0.0 | 1.0 | | `get` | 0.0 | 0.0 | 1.0 | | `get (unsuccessful search)` | 0.0 | 0.0 | 1.0 | | `__getitem__` | 0.0 | 0.0 | 1.0 | | `__init__` | 0.0 | 0.0 | 1.0 | | `__ior__` | 0.0 | 0.0 | 1.0 | | `__ior__` (many) | 0.18359 | 0.0 | 0.0 | | `items` | 0.0 | 0.21875 | inf | | `__iter__` | 0.0 | 0.0 | 1.0 | | `keys` | 0.0 | 0.0 | 1.0 | | `__len__` | 0.0 | 0.0 | 1.0 | | `__contains__` (unsuccessful search) | 0.0 | 0.0 | 1.0 | | `__or__` | 0.0 | 0.0 | 1.0 | | `__or__` (many) | 0.0 | 0.0 | 1.0 | | `pop` | 0.0 | 0.0 | 1.0 | | `pop (unsuccessful search)` | 0.0 | 0.0 | 1.0 | | `popitem` | 0.0 | 0.0 | 1.0 | | `reversed` | 0.0 | 0.0 | 1.0 | | `setdefault` | 0.0 | 0.0 | 1.0 | | `setdefault (unsuccessful search)` | 0.0 | 0.0 | 1.0 | | `__setitem__` (add new item) | 0.0 | 0.0 | 1.0 | | `__setitem__` (replace) | 0.0 | 0.0 | 1.0 | | `update` | 0.0 | 0.0 | 1.0 | | `update` (many) | 0.0 | 0.0 | 1.0 | | `values` | 0.0 | 0.0 | 1.0 |","title":"Dict"},{"location":"benchmark_results/py39/list/","text":"timing | subject | `builtin` | `sqlitecollections` | ratio | | :------ | --------: | ------------------: | ----: | | `__add__` | 0.00374 | 0.01008 | 2.69649 | | `append` | 0.00372 | 0.0067 | 1.80208 | | `clear` | 0.00373 | 0.00678 | 1.81613 | | `__contains__` | 0.00405 | 0.00405 | 0.99799 | | `copy` | 0.0039 | 0.00916 | 2.34831 | | `count` | 0.00397 | 0.00413 | 1.03964 | | `__init__` | 0.00389 | 0.01936 | 4.97514 | | `__delitem__` | 0.00402 | 0.08242 | 20.52781 | | `__delitem__` (slice) | 0.00392 | 0.14118 | 35.99534 | | `__delitem__` (slice with skip) | 0.0038 | 0.14419 | 37.97142 | | `extend` | 0.00383 | 0.00665 | 1.73467 | | `__getitem__` | 0.0036 | 0.00401 | 1.11549 | | `__getitem__` (slice) | 0.00383 | 0.08252 | 21.54433 | | `__getitem__` (slice with skip) | 0.00372 | 0.01153 | 3.1006 | | `__iadd__` | 0.00377 | 0.00655 | 1.73787 | | `__imult__` | 0.00371 | 0.21236 | 57.26571 | | `index` | 0.004 | 0.00418 | 1.04598 | | `index` (unsuccessful search) | 0.00373 | 0.00415 | 1.11118 | | `insert` | 0.00375 | 0.13969 | 37.26354 | | `__len__` | 0.00377 | 0.00411 | 1.09189 | | `__mult__` | 0.00403 | 0.22894 | 56.8614 | | `__contains__` (unsuccessful search) | 0.00387 | 0.00414 | 1.06939 | | `pop` | 0.00397 | 0.08045 | 20.25192 | | `remove` | 0.00399 | 0.10679 | 26.77678 | | `__setitem__` | 0.0037 | 0.00648 | 1.75449 | | `__setitem__` (slice) | 0.00369 | 13.23976 | 3586.52949 | | `__setitem__` (slice with skip) | 0.00384 | 0.01497 | 3.89252 | | `sort` | 0.00403 | 0.08134 | 20.16336 | approximate memory usage | subject | `builtin` | `sqlitecollections` | ratio | | :------ | --------: | ------------------: | ----: | | `__add__` | 0.0 | 0.0 | 1.0 | | `append` | 0.0 | 0.0 | 1.0 | | `clear` | 0.0 | 0.0 | 1.0 | | `__contains__` | 0.0 | 0.0 | 1.0 | | `copy` | 0.0 | 0.0 | 1.0 | | `count` | 0.0 | 0.0 | 1.0 | | `__init__` | 0.0 | 0.0 | 1.0 | | `__delitem__` | 0.0 | 0.00391 | inf | | `__delitem__` (slice) | 0.0 | 0.0 | 1.0 | | `__delitem__` (slice with skip) | 0.0 | 0.00391 | inf | | `extend` | 0.0 | 0.0 | 1.0 | | `__getitem__` | 0.0 | 0.0 | 1.0 | | `__getitem__` (slice) | 0.0 | 0.0 | 1.0 | | `__getitem__` (slice with skip) | 0.0 | 0.0 | 1.0 | | `__iadd__` | 0.0 | 0.0 | 1.0 | | `__imult__` | 0.0 | 0.0 | 1.0 | | `index` | 0.0 | 0.0 | 1.0 | | `index` (unsuccessful search) | 0.0 | 0.0 | 1.0 | | `insert` | 0.0 | 0.0 | 1.0 | | `__len__` | 0.0 | 0.0 | 1.0 | | `__mult__` | 0.0 | 0.00391 | inf | | `__contains__` (unsuccessful search) | 0.0 | 0.0 | 1.0 | | `pop` | 0.0 | 0.0 | 1.0 | | `remove` | 0.0 | 0.0 | 1.0 | | `__setitem__` | 0.0 | 0.0 | 1.0 | | `__setitem__` (slice) | 0.0 | 0.0 | 1.0 | | `__setitem__` (slice with skip) | 0.0 | 0.0 | 1.0 | | `sort` | 0.0 | 0.63672 | inf |","title":"List"},{"location":"benchmark_results/py39/set/","text":"timing | subject | `builtin` | `sqlitecollections` | ratio | | :------ | --------: | ------------------: | ----: | | `add (existing item)` | 0.00392 | 0.0055 | 1.40202 | | `add (new item)` | 0.0039 | 0.00709 | 1.81885 | | `__and__` | 0.00385 | 0.01092 | 2.83435 | | `clear` | 0.0039 | 0.00655 | 1.68117 | | `__contains__` | 0.004 | 0.00409 | 1.02441 | | `copy` | 0.004 | 0.00844 | 2.10963 | | `difference` | 0.00384 | 0.0089 | 2.31766 | | `discard` | 0.00399 | 0.00648 | 1.62324 | | `discard (no changes)` | 0.00392 | 0.02852 | 7.2728 | | `__ge__` | 0.00403 | 0.00426 | 1.05716 | | `__ge__` (not greater than or equals to) | 0.00393 | 0.0043 | 1.09307 | | `__gt__` | 0.00404 | 0.00686 | 1.69866 | | `__gt__` (not greater than) | 0.00401 | 0.0295 | 7.3514 | | `__iand__` | 0.00396 | 0.00831 | 2.09752 | | `__init__` | 0.0041 | 0.01678 | 4.08845 | | `intersection` | 0.00391 | 0.01082 | 2.76551 | | `intersection_update` | 0.00414 | 0.00864 | 2.08736 | | `__ior__` | 0.00413 | 0.00858 | 2.07519 | | `isdisjoint` | 0.00405 | 0.00393 | 0.97159 | | `isdisjoint` (not disjoint) | 0.00377 | 0.0039 | 1.03492 | | `issubset` | 0.0037 | 0.16123 | 43.54553 | | `issubset` (not subset) | 0.00374 | 0.0131 | 3.50026 | | `issuperset` | 0.00427 | 0.02345 | 5.49359 | | `issuperset` (not superset) | 0.0047 | 0.00401 | 0.85439 | | `__ixor__` | 0.00373 | 0.03588 | 9.62813 | | `__le__` | 0.00368 | 0.00458 | 1.24545 | | `__le__` (not less than or equals to) | 0.0037 | 0.00385 | 1.04009 | | `__len__` | 0.00373 | 0.00375 | 1.00546 | | `__lt__` | 0.00368 | 0.00458 | 1.24507 | | `__lt__` (not less than) | 0.00378 | 0.0038 | 1.0053 | | `__contains__` (unsuccessful search) | 0.00369 | 0.00372 | 1.00736 | | `__or__` | 0.00357 | 0.01097 | 3.0734 | | `pop` | 0.00381 | 0.00662 | 1.73664 | | `remove` | 0.00367 | 0.00648 | 1.7664 | | `__sub__` | 0.00372 | 0.00815 | 2.19209 | | `symmetric_difference` | 0.00384 | 0.03883 | 10.12363 | | `symmetric_difference_update` | 0.00369 | 0.03566 | 9.65794 | | `union` | 0.00367 | 0.01094 | 2.97933 | | `update` | 0.00363 | 0.00788 | 2.16782 | | `__xor__` | 0.00369 | 0.03828 | 10.38093 | approximate memory usage | subject | `builtin` | `sqlitecollections` | ratio | | :------ | --------: | ------------------: | ----: | | `add (existing item)` | 0.0 | 0.0 | 1.0 | | `add (new item)` | 0.0 | 0.0 | 1.0 | | `__and__` | 0.0 | 0.0 | 1.0 | | `clear` | 0.0 | 0.0 | 1.0 | | `__contains__` | 0.0 | 0.0 | 1.0 | | `copy` | 0.0 | 0.0 | 1.0 | | `difference` | 0.0 | 0.0 | 1.0 | | `discard` | 0.0 | 0.0 | 1.0 | | `discard (no changes)` | 0.0 | 0.0 | 1.0 | | `__ge__` | 0.0 | 0.0 | 1.0 | | `__ge__` (not greater than or equals to) | 0.0 | 0.0 | 1.0 | | `__gt__` | 0.0 | 0.0 | 1.0 | | `__gt__` (not greater than) | 0.0 | 0.0 | 1.0 | | `__iand__` | 0.0 | 0.0 | 1.0 | | `__init__` | 0.0 | 0.0 | 1.0 | | `intersection` | 0.0 | 0.0 | 1.0 | | `intersection_update` | 0.0 | 0.0 | 1.0 | | `__ior__` | 0.0 | 0.0 | 1.0 | | `isdisjoint` | 0.0 | 0.0 | 1.0 | | `isdisjoint` (not disjoint) | 0.0 | 0.0 | 1.0 | | `issubset` | 0.0 | 0.0 | 1.0 | | `issubset` (not subset) | 0.0 | 0.0 | 1.0 | | `issuperset` | 0.0 | 0.0 | 1.0 | | `issuperset` (not superset) | 0.0 | 0.0 | 1.0 | | `__ixor__` | 0.0 | 0.0 | 1.0 | | `__le__` | 0.0 | 0.0 | 1.0 | | `__le__` (not less than or equals to) | 0.0 | 0.0 | 1.0 | | `__len__` | 0.0 | 0.0 | 1.0 | | `__lt__` | 0.0 | 0.0 | 1.0 | | `__lt__` (not less than) | 0.0 | 0.0 | 1.0 | | `__contains__` (unsuccessful search) | 0.0 | 0.0 | 1.0 | | `__or__` | 0.0 | 0.0 | 1.0 | | `pop` | 0.0 | 0.0 | 1.0 | | `remove` | 0.0 | 0.0 | 1.0 | | `__sub__` | 0.0 | 0.0 | 1.0 | | `symmetric_difference` | 0.0 | 0.0 | 1.0 | | `symmetric_difference_update` | 0.0 | 0.0 | 1.0 | | `union` | 0.0 | 0.0 | 1.0 | | `update` | 0.0 | 0.0 | 1.0 | | `__xor__` | 0.0 | 0.0 | 1.0 |","title":"Set"},{"location":"usage/common/","text":"Common Features","title":"common features"},{"location":"usage/common/#common-features","text":"","title":"Common Features"},{"location":"usage/dict/","text":"Dict Dict is a container compatible with the built-in dict , which serializes keys and values and stores them in a sqlite3 database. It preserves insertion order for all supported python versions. Dict[KT, VT](...) Constructor. Type Parameters: KT : key type VT : value type Arguments: data : Mapping[KT, VT] or Iterable[Tuple[KT, VT]] , optional, positional-only argument, defualt= None ; Initial data. If None or no argument is given, persistent data is used as is if available, otherwise persistent data in the corresponding table is cleared and given data is stored instead. connection : str or sqlite3.Connection , optional, default= None ; If None , temporary file is automatically created. If connection is a str , it will be used as the sqlite3 database file name. You can pass a sqlite3.Connection directly. table_name : str , optional, default= None ; Table name of this container. If None , an auto-generated unique name will be used. Available characters are letters, numbers, and underscores ( _ ). key_serializer : Callable[[KT], bytes] , optional, default= None ; Function to serialize key. If None , pickle.dumps is used. key_deserializer : Callable[[bytes], KT] , optional, default= None ; Function to deserialize key. If None , pickle.loads is used. value_serializer : Callable[[VT], bytes] , optional, default= None ; Function to serialize value. If None , key_serializer is used. value_deserializer : Callable[[bytes], VT] , optional, default= None ; Function to deserialize value. If None , key_deserializer is used. persist : bool , optional, default= True ; If True , table won't be deleted even when the object is deleted. If False , the table is deleted when this object is deleted. len(d) Return the number of items in d: Dict[KT, VT] Return value: int : The number of items in d d[key] Get item of d with key key . Raises a KeyError if key is not in the map. Arguments: key : KT ; Key to retrieve corresponding value Return value: VT : Item of d with key key d[key] = value Set d[key] to value . Arguments: key : KT ; Key to be set value : VT ; Value to be set Return value: None del d[key] Delete d[key] . Arguments: key : KT ; Key to be deleted Return value: None key in d Return whether if key is in d Arguments: key : KT ; Key to be checked Return value: bool : True if key is in d and False otherwise. key not in d Return whether if key is not in d Arguments: key : KT ; Key to be checked Return value: bool : True if key is not in d and False otherwise. iter(d) Return an iterator over the keys of d Return value: Iterator[KT] : an iterator over the keys of d clear() Remove all items from the dictionary Return value: None copy() Return a copy of the dictionary. The actual behavior is to create a table with a unique table name and copy the keys and the values to the new table. Therefore, unlike the built-in dict copy, the behavior is similar to deep copy. Be aware that the copied dictionary is volatile. Return value: Dict[KT, VT] : A volatile copy of the dictionary. get(key[, default]) Return the value for key if key is in the dictionary, else default . If default is not given, it defaults to None , so that this method never raises a KeyError . Arguments: key : KT ; Key to retrieve corresponding value if exists. default : VT , optional, default= None ; Default value in case that key is not in the dictionary Return value: VT : Item of the dictionary with key key if key is in the dictionary, default otherwise. items() Return a new view of the dictionary\u2019s items (key-value pairs). Return value: ItemsView : View object of the dictionary's items keys() Return a new view of the dictionary's keys. Return value: KeysView[KT] : View object of the dictionary's keys. pop(key[, default]) If key is in the dictionary, remove it and return its value, else return default . If default is not given and key is not in the dictionary, a KeyError is raised. Arguments: key : KT ; Key to retrieve corresponding value if exists. default : VT , optional, default= None ; Default value in case that key is not in the dictionary Return value: VT : Item of the dictionary with key key if key is in the dictionary, default otherwise. popitem() Remove and return a key-value pair from the dictionary. Pairs are returned in LIFO order. If the dictionary is empty, raises a KeyError . Return value: Tuple[KT, VT] : Key-value pair that were last inserted into the dictionary reversed(d) Return a reverse iterator over the keys of the dictionary. (provided only python version 3.8 and above) Return value: Iterator[KT] : Reverse iterator over the keys of the dictionary setdefault(key[, default]) If key is in the dictionary, return its value. If not, insert key with a value of default and return default . Arguments: key : KT ; Key to retrieve or set the value default : VT , optional, default= None ; Value to be set if key is not in the dictionary Return value: VT : Item of the dictionary with key key if key is in the dictionary, default otherwise. update([other, **kwargs]) Update the dictionary with the key-value pairs from other , overwriting existing keys. Arguments: other : Mapping[KT, VT] or Iterable[Tuple[KT, VT]] , optional; Key-value pairs to be added kwargs : VT , optional; values to be added Return value: None values() Return a new view of the dictionary's values. Return value: ValuesView : View object of the dictionary's values d | other Create a new dictionary with the merged keys and values of d and other , which must both be dictionaries. The values of other take priority when d and other share keys. The return value is volatile by default. (provided only python version 3.9 and above) Arguments: other : Mapping[KT, VT] or Iterable[Tuple[KT, VT]] ; Key-value pairs to be merged Return value: Dict[KT, VT] : A new volatile dictionary object. d |= other Update the dictionary d with keys and values from other . (provided only python version 3.9 and above) Arguments: other : Mapping[KT, VT] or Iterable[Tuple[KT, VT]] ; Key-value pairs to be merged Return value: Dict[KT, VT] : The dictionary object.","title":"Dict"},{"location":"usage/dict/#dict","text":"Dict is a container compatible with the built-in dict , which serializes keys and values and stores them in a sqlite3 database. It preserves insertion order for all supported python versions.","title":"Dict"},{"location":"usage/dict/#dictkt-vt","text":"Constructor.","title":"Dict[KT, VT](...)"},{"location":"usage/dict/#type-parameters","text":"KT : key type VT : value type","title":"Type Parameters:"},{"location":"usage/dict/#arguments","text":"data : Mapping[KT, VT] or Iterable[Tuple[KT, VT]] , optional, positional-only argument, defualt= None ; Initial data. If None or no argument is given, persistent data is used as is if available, otherwise persistent data in the corresponding table is cleared and given data is stored instead. connection : str or sqlite3.Connection , optional, default= None ; If None , temporary file is automatically created. If connection is a str , it will be used as the sqlite3 database file name. You can pass a sqlite3.Connection directly. table_name : str , optional, default= None ; Table name of this container. If None , an auto-generated unique name will be used. Available characters are letters, numbers, and underscores ( _ ). key_serializer : Callable[[KT], bytes] , optional, default= None ; Function to serialize key. If None , pickle.dumps is used. key_deserializer : Callable[[bytes], KT] , optional, default= None ; Function to deserialize key. If None , pickle.loads is used. value_serializer : Callable[[VT], bytes] , optional, default= None ; Function to serialize value. If None , key_serializer is used. value_deserializer : Callable[[bytes], VT] , optional, default= None ; Function to deserialize value. If None , key_deserializer is used. persist : bool , optional, default= True ; If True , table won't be deleted even when the object is deleted. If False , the table is deleted when this object is deleted.","title":"Arguments:"},{"location":"usage/dict/#lend","text":"Return the number of items in d: Dict[KT, VT]","title":"len(d)"},{"location":"usage/dict/#return-value","text":"int : The number of items in d","title":"Return value:"},{"location":"usage/dict/#dkey","text":"Get item of d with key key . Raises a KeyError if key is not in the map.","title":"d[key]"},{"location":"usage/dict/#arguments_1","text":"key : KT ; Key to retrieve corresponding value","title":"Arguments:"},{"location":"usage/dict/#return-value_1","text":"VT : Item of d with key key","title":"Return value:"},{"location":"usage/dict/#dkey-value","text":"Set d[key] to value .","title":"d[key] = value"},{"location":"usage/dict/#arguments_2","text":"key : KT ; Key to be set value : VT ; Value to be set","title":"Arguments:"},{"location":"usage/dict/#return-value_2","text":"None","title":"Return value:"},{"location":"usage/dict/#del-dkey","text":"Delete d[key] .","title":"del d[key]"},{"location":"usage/dict/#arguments_3","text":"key : KT ; Key to be deleted","title":"Arguments:"},{"location":"usage/dict/#return-value_3","text":"None","title":"Return value:"},{"location":"usage/dict/#key-in-d","text":"Return whether if key is in d","title":"key in d"},{"location":"usage/dict/#arguments_4","text":"key : KT ; Key to be checked","title":"Arguments:"},{"location":"usage/dict/#return-value_4","text":"bool : True if key is in d and False otherwise.","title":"Return value:"},{"location":"usage/dict/#key-not-in-d","text":"Return whether if key is not in d","title":"key not in d"},{"location":"usage/dict/#arguments_5","text":"key : KT ; Key to be checked","title":"Arguments:"},{"location":"usage/dict/#return-value_5","text":"bool : True if key is not in d and False otherwise.","title":"Return value:"},{"location":"usage/dict/#iterd","text":"Return an iterator over the keys of d","title":"iter(d)"},{"location":"usage/dict/#return-value_6","text":"Iterator[KT] : an iterator over the keys of d","title":"Return value:"},{"location":"usage/dict/#clear","text":"Remove all items from the dictionary","title":"clear()"},{"location":"usage/dict/#return-value_7","text":"None","title":"Return value:"},{"location":"usage/dict/#copy","text":"Return a copy of the dictionary. The actual behavior is to create a table with a unique table name and copy the keys and the values to the new table. Therefore, unlike the built-in dict copy, the behavior is similar to deep copy. Be aware that the copied dictionary is volatile.","title":"copy()"},{"location":"usage/dict/#return-value_8","text":"Dict[KT, VT] : A volatile copy of the dictionary.","title":"Return value:"},{"location":"usage/dict/#getkey-default","text":"Return the value for key if key is in the dictionary, else default . If default is not given, it defaults to None , so that this method never raises a KeyError .","title":"get(key[, default])"},{"location":"usage/dict/#arguments_6","text":"key : KT ; Key to retrieve corresponding value if exists. default : VT , optional, default= None ; Default value in case that key is not in the dictionary","title":"Arguments:"},{"location":"usage/dict/#return-value_9","text":"VT : Item of the dictionary with key key if key is in the dictionary, default otherwise.","title":"Return value:"},{"location":"usage/dict/#items","text":"Return a new view of the dictionary\u2019s items (key-value pairs).","title":"items()"},{"location":"usage/dict/#return-value_10","text":"ItemsView : View object of the dictionary's items","title":"Return value:"},{"location":"usage/dict/#keys","text":"Return a new view of the dictionary's keys.","title":"keys()"},{"location":"usage/dict/#return-value_11","text":"KeysView[KT] : View object of the dictionary's keys.","title":"Return value:"},{"location":"usage/dict/#popkey-default","text":"If key is in the dictionary, remove it and return its value, else return default . If default is not given and key is not in the dictionary, a KeyError is raised.","title":"pop(key[, default])"},{"location":"usage/dict/#arguments_7","text":"key : KT ; Key to retrieve corresponding value if exists. default : VT , optional, default= None ; Default value in case that key is not in the dictionary","title":"Arguments:"},{"location":"usage/dict/#return-value_12","text":"VT : Item of the dictionary with key key if key is in the dictionary, default otherwise.","title":"Return value:"},{"location":"usage/dict/#popitem","text":"Remove and return a key-value pair from the dictionary. Pairs are returned in LIFO order. If the dictionary is empty, raises a KeyError .","title":"popitem()"},{"location":"usage/dict/#return-value_13","text":"Tuple[KT, VT] : Key-value pair that were last inserted into the dictionary","title":"Return value:"},{"location":"usage/dict/#reversedd","text":"Return a reverse iterator over the keys of the dictionary. (provided only python version 3.8 and above)","title":"reversed(d)"},{"location":"usage/dict/#return-value_14","text":"Iterator[KT] : Reverse iterator over the keys of the dictionary","title":"Return value:"},{"location":"usage/dict/#setdefaultkey-default","text":"If key is in the dictionary, return its value. If not, insert key with a value of default and return default .","title":"setdefault(key[, default])"},{"location":"usage/dict/#arguments_8","text":"key : KT ; Key to retrieve or set the value default : VT , optional, default= None ; Value to be set if key is not in the dictionary","title":"Arguments:"},{"location":"usage/dict/#return-value_15","text":"VT : Item of the dictionary with key key if key is in the dictionary, default otherwise.","title":"Return value:"},{"location":"usage/dict/#updateother-kwargs","text":"Update the dictionary with the key-value pairs from other , overwriting existing keys.","title":"update([other, **kwargs])"},{"location":"usage/dict/#arguments_9","text":"other : Mapping[KT, VT] or Iterable[Tuple[KT, VT]] , optional; Key-value pairs to be added kwargs : VT , optional; values to be added","title":"Arguments:"},{"location":"usage/dict/#return-value_16","text":"None","title":"Return value:"},{"location":"usage/dict/#values","text":"Return a new view of the dictionary's values.","title":"values()"},{"location":"usage/dict/#return-value_17","text":"ValuesView : View object of the dictionary's values","title":"Return value:"},{"location":"usage/dict/#d-other","text":"Create a new dictionary with the merged keys and values of d and other , which must both be dictionaries. The values of other take priority when d and other share keys. The return value is volatile by default. (provided only python version 3.9 and above)","title":"d | other"},{"location":"usage/dict/#arguments_10","text":"other : Mapping[KT, VT] or Iterable[Tuple[KT, VT]] ; Key-value pairs to be merged","title":"Arguments:"},{"location":"usage/dict/#return-value_18","text":"Dict[KT, VT] : A new volatile dictionary object.","title":"Return value:"},{"location":"usage/dict/#d-other_1","text":"Update the dictionary d with keys and values from other . (provided only python version 3.9 and above)","title":"d |= other"},{"location":"usage/dict/#arguments_11","text":"other : Mapping[KT, VT] or Iterable[Tuple[KT, VT]] ; Key-value pairs to be merged","title":"Arguments:"},{"location":"usage/dict/#return-value_19","text":"Dict[KT, VT] : The dictionary object.","title":"Return value:"},{"location":"usage/factory/","text":"factory module factory module contains a factory for each container: ListFactory for List , SetFactory for Set and DictFactory for Dict . They replace constructors of each container that require extra arguments such as connection , serializer , deserializer etc., and allow users to construct a container without specifying those extra arguments. Example Basic usage The results of the following two examples are almost the same (except for the auto-generated table names). Without factory: import sqlite3 import sqlitecollections as sc conn = sqlite3.connect(\"path/to/file.db\") def encode(x: str) -> bytes: return x.encode(\"utf-8\") def decode(x: bytes) -> str: return x.decode(\"utf-8\") l1 = sc.List[str]([\"Alice\", \"Bob\", \"Carol\"], connection=conn, serializer=encode, deserializer=decode) l2 = sc.List[str]([\"Dave\"], connection=conn, serializer=encode, deserializer=decode) l3 = sc.List[str]([\"Erin\"], connection=conn, serializer=encode, deserializer=decode) With factory: import sqlite3 import sqlitecollections as sc conn = sqlite3.connect(\"path/to/file.db\") def encode(x: str) -> bytes: return x.encode(\"utf-8\") def decode(x: bytes) -> str: return x.decode(\"utf-8\") list_ = sc.ListFactory[str](connection=conn, serializer=encode, deserializer=decode) l1 = list_([\"Alice\", \"Bob\", \"Carol\"]) l2 = list_([\"Dave\"]) l3 = list_([\"Erin\"]) Specifying a table name If you want to specify table names of containers from a factory, you can do that as follows: import sqlite3 import sqlitecollections as sc conn = sqlite3.connect(\"path/to/file.db\") def encode(x: str) -> bytes: return x.encode(\"utf-8\") def decode(x: bytes) -> str: return x.decode(\"utf-8\") list_ = sc.ListFactory[str](connection=conn, serializer=encode, deserializer=decode) l1 = list_[\"first_table_name\"]([\"Alice\", \"Bob\", \"Carol\"]) assert l1.table_name == \"first_table_name\" ListFactory ListFactory[T](...) Constructor of ListFactory which constructs List . Type Parameters: T : value type of the List Arguments: connection : str or sqlite3.Connection , optional, default= None ; If None , temporary file is automatically created. If connection is a str , it will be used as the sqlite3 database file name. You can pass a sqlite3.Connection directly. table_name : str , optional, default= None ; Table name of containers from this factory. This argument is assumed not to be specified directly by users. If None , an auto-generated unique name will be used. serializer : Callable[[T], bytes] , optional, default= None ; Function to serialize value. If None , pickle.dumps is used. deserializer : Callable[[bytes], T] , optional, default= None ; Function to deserialize value. If None , pickle.loads is used. list_(data) Construct List[T] with connection, serializer and deserializer preset from ListFactory[T] list_ . Arguments: data : Iterable[T] , optional, defualt= None ; Initial data. Return value: List[T] : connection, serializer and deserializer are the same as those of the factory list_ . create(data) Construct List[T] with connection, serializer and deserializer preset from the factory. Arguments: data : Iterable[T] , optional, defualt= None ; Initial data. Return value: List[T] : connection, serializer and deserializer are the same as those of the factory. f[t] Return a copy of this factory f that creates container with table name t . Arguments: t : str ; the table name Return value: ListFactory[T] : connection, serializer and deserializer are the same as those of this factory and the table name of the List[T] from this return value will be set to t . === DictFactory DictFactory[KT, VT](...) Constructor of DictFactory which constructs Dict . Type Parameters: KT : key type of the Dict VT : value type of the Dict Arguments: connection : str or sqlite3.Connection , optional, default= None ; If None , temporary file is automatically created. If connection is a str , it will be used as the sqlite3 database file name. You can pass a sqlite3.Connection directly. table_name : str , optional, default= None ; Table name of containers from this factory. This argument is assumed not to be specified directly by users. If None , an auto-generated unique name will be used. key_serializer : Callable[[KT], bytes] , optional, default= None ; Function to serialize key. If None , pickle.dumps is used. key_deserializer : Callable[[bytes], KT] , optional, default= None ; Function to deserialize key. If None , pickle.loads is used. value_serializer : Callable[[VT], bytes] , optional, default= None ; Function to serialize value. If None , key_serializer is used. value_deserializer : Callable[[bytes], VT] , optional, default= None ; Function to deserialize value. If None , key_deserializer is used. dict_(data, **kwargs) Construct Dict[KT, VT] with connection, key*serializer, etc., preset from DictFactory[KT, VT] dict* . Arguments: data : Mapping[KT, VT] or Iterable[Tuple[KT, VT]] , optional, defualt= None ; Initial data. **kwargs : VT , optional; Appended to initial data. Return value: Dict[KT, VT] : connection, key*serializers, etc., are the same as those of the factory dict* . create(data, **kwargs) Construct Dict[KT, VT] with connection, key_serializer, etc., preset from the factory. Arguments: data : Mapping[KT, VT] or Iterable[Tuple[KT, VT]] , optional, defualt= None ; Initial data. **kwargs : VT , optional; Appended to initial data. Return value: Dict[KT, VT] : connection, key_serializers, etc., are the same as those of the factory. f[t] Return a copy of this factory f that creates container with table name t . Arguments: t : str ; the table name Return value: DictFactory[KT, VT] : connection, key_serializer, key_deserializer, value_serializer and value_deserializer are the same as those of this factory and the table name of the Dict[KT, VT] from this return value will be set to t . === SetFactory SetFactory[T](...) Constructor of SetFactory which constructs Set . Type Parameters: T : value type of the Set Arguments: connection : str or sqlite3.Connection , optional, default= None ; If None , temporary file is automatically created. If connection is a str , it will be used as the sqlite3 database file name. You can pass a sqlite3.Connection directly. table_name : str , optional, default= None ; Table name of containers from this factory. This argument is assumed not to be specified directly by users. If None , an auto-generated unique name will be used. serializer : Callable[[T], bytes] , optional, default= None ; Function to serialize value. If None , pickle.dumps is used. deserializer : Callable[[bytes], T] , optional, default= None ; Function to deserialize value. If None , pickle.loads is used. set_(data) Construct Set[T] with connection, serializer and deserializer preset from SetFactory[T] set_ . Arguments: data : Iterable[T] , optional, defualt= None ; Initial data. Return value: Set[T] : connection, serializer and deserializer are the same as those of the factory set_ . create(data) Construct Set[T] with connection, serializer and deserializer preset from the factory. Arguments: data : Iterable[T] , optional, defualt= None ; Initial data. Return value: Set[T] : connection, serializer and deserializer are the same as those of the factory. f[t] Return a copy of this factory f that creates container with table name t . Arguments: t : str ; the table name Return value: SetFactory[T] : connection, serializer and deserializer are the same as those of this factory and the table name of the Set[T] from this return value will be set to t . ===","title":"factory"},{"location":"usage/factory/#factory-module","text":"factory module contains a factory for each container: ListFactory for List , SetFactory for Set and DictFactory for Dict . They replace constructors of each container that require extra arguments such as connection , serializer , deserializer etc., and allow users to construct a container without specifying those extra arguments.","title":"factory module"},{"location":"usage/factory/#example","text":"","title":"Example"},{"location":"usage/factory/#basic-usage","text":"The results of the following two examples are almost the same (except for the auto-generated table names). Without factory: import sqlite3 import sqlitecollections as sc conn = sqlite3.connect(\"path/to/file.db\") def encode(x: str) -> bytes: return x.encode(\"utf-8\") def decode(x: bytes) -> str: return x.decode(\"utf-8\") l1 = sc.List[str]([\"Alice\", \"Bob\", \"Carol\"], connection=conn, serializer=encode, deserializer=decode) l2 = sc.List[str]([\"Dave\"], connection=conn, serializer=encode, deserializer=decode) l3 = sc.List[str]([\"Erin\"], connection=conn, serializer=encode, deserializer=decode) With factory: import sqlite3 import sqlitecollections as sc conn = sqlite3.connect(\"path/to/file.db\") def encode(x: str) -> bytes: return x.encode(\"utf-8\") def decode(x: bytes) -> str: return x.decode(\"utf-8\") list_ = sc.ListFactory[str](connection=conn, serializer=encode, deserializer=decode) l1 = list_([\"Alice\", \"Bob\", \"Carol\"]) l2 = list_([\"Dave\"]) l3 = list_([\"Erin\"])","title":"Basic usage"},{"location":"usage/factory/#specifying-a-table-name","text":"If you want to specify table names of containers from a factory, you can do that as follows: import sqlite3 import sqlitecollections as sc conn = sqlite3.connect(\"path/to/file.db\") def encode(x: str) -> bytes: return x.encode(\"utf-8\") def decode(x: bytes) -> str: return x.decode(\"utf-8\") list_ = sc.ListFactory[str](connection=conn, serializer=encode, deserializer=decode) l1 = list_[\"first_table_name\"]([\"Alice\", \"Bob\", \"Carol\"]) assert l1.table_name == \"first_table_name\"","title":"Specifying a table name"},{"location":"usage/factory/#listfactory","text":"","title":"ListFactory"},{"location":"usage/factory/#listfactoryt","text":"Constructor of ListFactory which constructs List .","title":"ListFactory[T](...)"},{"location":"usage/factory/#type-parameters","text":"T : value type of the List","title":"Type Parameters:"},{"location":"usage/factory/#arguments","text":"connection : str or sqlite3.Connection , optional, default= None ; If None , temporary file is automatically created. If connection is a str , it will be used as the sqlite3 database file name. You can pass a sqlite3.Connection directly. table_name : str , optional, default= None ; Table name of containers from this factory. This argument is assumed not to be specified directly by users. If None , an auto-generated unique name will be used. serializer : Callable[[T], bytes] , optional, default= None ; Function to serialize value. If None , pickle.dumps is used. deserializer : Callable[[bytes], T] , optional, default= None ; Function to deserialize value. If None , pickle.loads is used.","title":"Arguments:"},{"location":"usage/factory/#list_data","text":"Construct List[T] with connection, serializer and deserializer preset from ListFactory[T] list_ .","title":"list_(data)"},{"location":"usage/factory/#arguments_1","text":"data : Iterable[T] , optional, defualt= None ; Initial data.","title":"Arguments:"},{"location":"usage/factory/#return-value","text":"List[T] : connection, serializer and deserializer are the same as those of the factory list_ .","title":"Return value:"},{"location":"usage/factory/#createdata","text":"Construct List[T] with connection, serializer and deserializer preset from the factory.","title":"create(data)"},{"location":"usage/factory/#arguments_2","text":"data : Iterable[T] , optional, defualt= None ; Initial data.","title":"Arguments:"},{"location":"usage/factory/#return-value_1","text":"List[T] : connection, serializer and deserializer are the same as those of the factory.","title":"Return value:"},{"location":"usage/factory/#ft","text":"Return a copy of this factory f that creates container with table name t .","title":"f[t]"},{"location":"usage/factory/#arguments_3","text":"t : str ; the table name","title":"Arguments:"},{"location":"usage/factory/#return-value_2","text":"ListFactory[T] : connection, serializer and deserializer are the same as those of this factory and the table name of the List[T] from this return value will be set to t . ===","title":"Return value:"},{"location":"usage/factory/#dictfactory","text":"","title":"DictFactory"},{"location":"usage/factory/#dictfactorykt-vt","text":"Constructor of DictFactory which constructs Dict .","title":"DictFactory[KT, VT](...)"},{"location":"usage/factory/#type-parameters_1","text":"KT : key type of the Dict VT : value type of the Dict","title":"Type Parameters:"},{"location":"usage/factory/#arguments_4","text":"connection : str or sqlite3.Connection , optional, default= None ; If None , temporary file is automatically created. If connection is a str , it will be used as the sqlite3 database file name. You can pass a sqlite3.Connection directly. table_name : str , optional, default= None ; Table name of containers from this factory. This argument is assumed not to be specified directly by users. If None , an auto-generated unique name will be used. key_serializer : Callable[[KT], bytes] , optional, default= None ; Function to serialize key. If None , pickle.dumps is used. key_deserializer : Callable[[bytes], KT] , optional, default= None ; Function to deserialize key. If None , pickle.loads is used. value_serializer : Callable[[VT], bytes] , optional, default= None ; Function to serialize value. If None , key_serializer is used. value_deserializer : Callable[[bytes], VT] , optional, default= None ; Function to deserialize value. If None , key_deserializer is used.","title":"Arguments:"},{"location":"usage/factory/#dict_data-kwargs","text":"Construct Dict[KT, VT] with connection, key*serializer, etc., preset from DictFactory[KT, VT] dict* .","title":"dict_(data, **kwargs)"},{"location":"usage/factory/#arguments_5","text":"data : Mapping[KT, VT] or Iterable[Tuple[KT, VT]] , optional, defualt= None ; Initial data. **kwargs : VT , optional; Appended to initial data.","title":"Arguments:"},{"location":"usage/factory/#return-value_3","text":"Dict[KT, VT] : connection, key*serializers, etc., are the same as those of the factory dict* .","title":"Return value:"},{"location":"usage/factory/#createdata-kwargs","text":"Construct Dict[KT, VT] with connection, key_serializer, etc., preset from the factory.","title":"create(data, **kwargs)"},{"location":"usage/factory/#arguments_6","text":"data : Mapping[KT, VT] or Iterable[Tuple[KT, VT]] , optional, defualt= None ; Initial data. **kwargs : VT , optional; Appended to initial data.","title":"Arguments:"},{"location":"usage/factory/#return-value_4","text":"Dict[KT, VT] : connection, key_serializers, etc., are the same as those of the factory.","title":"Return value:"},{"location":"usage/factory/#ft_1","text":"Return a copy of this factory f that creates container with table name t .","title":"f[t]"},{"location":"usage/factory/#arguments_7","text":"t : str ; the table name","title":"Arguments:"},{"location":"usage/factory/#return-value_5","text":"DictFactory[KT, VT] : connection, key_serializer, key_deserializer, value_serializer and value_deserializer are the same as those of this factory and the table name of the Dict[KT, VT] from this return value will be set to t . ===","title":"Return value:"},{"location":"usage/factory/#setfactory","text":"","title":"SetFactory"},{"location":"usage/factory/#setfactoryt","text":"Constructor of SetFactory which constructs Set .","title":"SetFactory[T](...)"},{"location":"usage/factory/#type-parameters_2","text":"T : value type of the Set","title":"Type Parameters:"},{"location":"usage/factory/#arguments_8","text":"connection : str or sqlite3.Connection , optional, default= None ; If None , temporary file is automatically created. If connection is a str , it will be used as the sqlite3 database file name. You can pass a sqlite3.Connection directly. table_name : str , optional, default= None ; Table name of containers from this factory. This argument is assumed not to be specified directly by users. If None , an auto-generated unique name will be used. serializer : Callable[[T], bytes] , optional, default= None ; Function to serialize value. If None , pickle.dumps is used. deserializer : Callable[[bytes], T] , optional, default= None ; Function to deserialize value. If None , pickle.loads is used.","title":"Arguments:"},{"location":"usage/factory/#set_data","text":"Construct Set[T] with connection, serializer and deserializer preset from SetFactory[T] set_ .","title":"set_(data)"},{"location":"usage/factory/#arguments_9","text":"data : Iterable[T] , optional, defualt= None ; Initial data.","title":"Arguments:"},{"location":"usage/factory/#return-value_6","text":"Set[T] : connection, serializer and deserializer are the same as those of the factory set_ .","title":"Return value:"},{"location":"usage/factory/#createdata_1","text":"Construct Set[T] with connection, serializer and deserializer preset from the factory.","title":"create(data)"},{"location":"usage/factory/#arguments_10","text":"data : Iterable[T] , optional, defualt= None ; Initial data.","title":"Arguments:"},{"location":"usage/factory/#return-value_7","text":"Set[T] : connection, serializer and deserializer are the same as those of the factory.","title":"Return value:"},{"location":"usage/factory/#ft_2","text":"Return a copy of this factory f that creates container with table name t .","title":"f[t]"},{"location":"usage/factory/#arguments_11","text":"t : str ; the table name","title":"Arguments:"},{"location":"usage/factory/#return-value_8","text":"SetFactory[T] : connection, serializer and deserializer are the same as those of this factory and the table name of the Set[T] from this return value will be set to t . ===","title":"Return value:"},{"location":"usage/list/","text":"List List is a container compatible with the built-in list , which serializes values and stores them in a sqlite3 database. List[T](...) Constructor. Type Parameters: T : value type Arguments: data : Iterable[T] , optional, positional-only argument, defualt= None ; Initial data. If None or no argument is given, persistent data is used as is if available, otherwise persistent data in the corresponding table is cleared and given data is stored instead. connection : str or sqlite3.Connection , optional, default= None ; If None , temporary file is automatically created. If connection is a str , it will be used as the sqlite3 database file name. You can pass a sqlite3.Connection directly. table_name : str , optional, default= None ; Table name of this container. If None , an auto-generated unique name will be used. Available characters are letters, numbers, and underscores ( _ ). serializer : Callable[[T], bytes] , optional, default= None ; Function to serialize value. If None , pickle.dumps is used. deserializer : Callable[[bytes], T] , optional, default= None ; Function to deserialize value. If None , pickle.loads is used. persist : bool , optional, default= True ; If True , table won't be deleted even when the object is deleted. If False , the table is deleted when this object is deleted. x in s True if an item of s is equal to x , else False Arguments: x : object ; an object to be checked Return value: bool : True if x is in s and False otherwise. x not in s False if an item of s is equal to x , else True Arguments: x : object ; an object to be checked Return value: bool : False if x is in s and True otherwise. s + t The concatenation of s and t Arguments: t : Iterable[T] ; An iterable to be concatenated. Return value: List[T] : The concatenation of s and t . s * n or n * s equivalent to adding s to itself n times. Arguments: n : int ; Number of times to repeat. Return value: List[T] : a list of n times s was repeated. s[i] i -th item of s , origin 0 . Arguments: i : int ; Item index. If it is negative, it is equivalent to len(s) + i . Return value: T : i -th item of s , origin 0 . s[i:j] Slice of s from i to j . Arguments: i : int or None ; Item index where the slice starts from. If None , it is treated as 0 . j : int or None ; Item index where the slice stops at. If None , it is treated as len(s) . Return value: List[T] : Slice of s from i to j . s[i:j:k] Slice of s from i to j with step k Arguments: i : int or None ; Item index where the slice starts from. If None , it is treated as 0 . j : int or None ; Item index where the slice stops at. If None , it is treated as len(s) . k : int or None ; Step of the slice. If None , it is treated as 1 . Return value: List[T] : Slice of s from i to j with step k . len(s) Return the number of items in s: List[T] Return value: int : The number of items in s index(x[, i[, j]]]) Return index of the first occurrence of x in the list (at or after index i and before index j ). Raise ValueError if x is not in the list. Arguments: x : T ; Value to retrieve corresponding index if exists. i : int , optional, default= None ; First index to look up the value. If it is None , start from the first element of the list. j : int , optional, default= None ; Index before the last one to look for a value. If None , search to the end. Return value: int : Index of the first occurrence of x in the list. count(x) Return total number of occurrences of x in the list. Arguments: x : T ; Value that counts the number of occurrences. Return value: int : The number of occurrences of x in the list. s[i] = x Replace item i of s by x . Arguments: i : int ; Item index to be set. If it is negative, it is equivalent to len(s) + i x : T ; Value to be set. Return value: None . del s[i] Remove item i of s . Arguments: i : int ; Item index to be removed. If it is negative, it is equivalent to len(s) + i . Return value: None . s[i:j] = t Replace slice of s from i to j by the contents of the iterable t . Arguments: i : int or None ; Item index where the slice starts from. If None , it is treated as 0 . j : int or None ; Item index where the slice stops at. If None , it is treated as len(s) . t : Iterable[T] ; Iterable to be inserted. Return value: None . del s[i:j] Remove slice of s from i to j . Arguments: i : int or None ; Item index where the slice starts from. If None , it is treated as 0 . j : int or None ; Item index where the slice stops at. If None , it is treated as len(s) . Return value: None . s[i:j:k] = t Replace the elements of s[i:j:k] by those ofthe iterable t . The length must be the same. Otherwise, ValueError will be raised. Arguments: i : int or None ; Item index where the slice starts from. If None , it is treated as 0 . j : int or None ; Item index where the slice stops at. If None , it is treated as len(s) . k : int or None ; Step of the slice. If None , it is treated as 1 . t : Iterable[T] ; Iterable to be substituted. The length must be the same as that of the slice. Return value: None . del s[i:j:k] Remove the elements of s[i:j:k] from the list. Arguments: i : int or None ; Item index where the slice starts from. If None , it is treated as 0 . j : int or None ; Item index where the slice stops at. If None , it is treated as len(s) . k : int or None ; Step of the slice. If None , it is treated as 1 . Return value: None . append(x) Append x to the end of the sequence. Arguments: x : T ; Item to be appended. Return value; None . clear() Remove all items from the list. Return value: None . copy() Return a copy of the list. The actual behavior is to create a table with a unique table name and copy the items to the new table. Therefore, unlike the built-in list copy, the behavior is similar to deep copy. Be aware that the copied list is volatile. Return value: List[T] : A volatile copy of the list. extend(t) Concatenate the list and t . Arguments: t : Iterable[T] ; An iterable to be concatenated. Return value: None . s += t Concatenate s and t . Arguments: t : Iterable[T] ; An iterable to be concatenated. Return value: None . s *= n Update s with its contents repeated n times. Arguments: n : int ; Number of times to repeat. Return value: None . insert(i, x) Insert x into the list at the index i . Arguments: i : int ; Index to be inserted. x : T ; Item to be inserted. Return value: None . pop(i) Retrieve the item at i and also remove it from s. Arguments: i : int or None , optional, default= None ; Index to be retrieved and removed. If it is None , it is treated as the last index of the list. Return value: T : i -th item of s , origin 0 . remove(x) Remove the first item of s whose value is equal to x . Arguments: x : T ; Item to be removed. Return value: None . reverse() Reverse the items of the list in place. Return value: None . sort(reverse, key) Sort the items of the list in place. The value of reverse can be either True or False , resulting in descending or ascending order, respectively. key specifies a function of one argument that is used to extract a comparison key from each list element. Arguments: reverse : bool , optional, default= False ; By default, the order is ascending, but if this value is True , the order will be descending. key : Callable[[T], Any] , optional, default= None ; Function to extract a comparison key from each list element. Return value: None .","title":"List"},{"location":"usage/list/#list","text":"List is a container compatible with the built-in list , which serializes values and stores them in a sqlite3 database.","title":"List"},{"location":"usage/list/#listt","text":"Constructor.","title":"List[T](...)"},{"location":"usage/list/#type-parameters","text":"T : value type","title":"Type Parameters:"},{"location":"usage/list/#arguments","text":"data : Iterable[T] , optional, positional-only argument, defualt= None ; Initial data. If None or no argument is given, persistent data is used as is if available, otherwise persistent data in the corresponding table is cleared and given data is stored instead. connection : str or sqlite3.Connection , optional, default= None ; If None , temporary file is automatically created. If connection is a str , it will be used as the sqlite3 database file name. You can pass a sqlite3.Connection directly. table_name : str , optional, default= None ; Table name of this container. If None , an auto-generated unique name will be used. Available characters are letters, numbers, and underscores ( _ ). serializer : Callable[[T], bytes] , optional, default= None ; Function to serialize value. If None , pickle.dumps is used. deserializer : Callable[[bytes], T] , optional, default= None ; Function to deserialize value. If None , pickle.loads is used. persist : bool , optional, default= True ; If True , table won't be deleted even when the object is deleted. If False , the table is deleted when this object is deleted.","title":"Arguments:"},{"location":"usage/list/#x-in-s","text":"True if an item of s is equal to x , else False","title":"x in s"},{"location":"usage/list/#arguments_1","text":"x : object ; an object to be checked","title":"Arguments:"},{"location":"usage/list/#return-value","text":"bool : True if x is in s and False otherwise.","title":"Return value:"},{"location":"usage/list/#x-not-in-s","text":"False if an item of s is equal to x , else True","title":"x not in s"},{"location":"usage/list/#arguments_2","text":"x : object ; an object to be checked","title":"Arguments:"},{"location":"usage/list/#return-value_1","text":"bool : False if x is in s and True otherwise.","title":"Return value:"},{"location":"usage/list/#s-t","text":"The concatenation of s and t","title":"s + t"},{"location":"usage/list/#arguments_3","text":"t : Iterable[T] ; An iterable to be concatenated.","title":"Arguments:"},{"location":"usage/list/#return-value_2","text":"List[T] : The concatenation of s and t .","title":"Return value:"},{"location":"usage/list/#s-n-or-n-s","text":"equivalent to adding s to itself n times.","title":"s * n or n * s"},{"location":"usage/list/#arguments_4","text":"n : int ; Number of times to repeat.","title":"Arguments:"},{"location":"usage/list/#return-value_3","text":"List[T] : a list of n times s was repeated.","title":"Return value:"},{"location":"usage/list/#si","text":"i -th item of s , origin 0 .","title":"s[i]"},{"location":"usage/list/#arguments_5","text":"i : int ; Item index. If it is negative, it is equivalent to len(s) + i .","title":"Arguments:"},{"location":"usage/list/#return-value_4","text":"T : i -th item of s , origin 0 .","title":"Return value:"},{"location":"usage/list/#sij","text":"Slice of s from i to j .","title":"s[i:j]"},{"location":"usage/list/#arguments_6","text":"i : int or None ; Item index where the slice starts from. If None , it is treated as 0 . j : int or None ; Item index where the slice stops at. If None , it is treated as len(s) .","title":"Arguments:"},{"location":"usage/list/#return-value_5","text":"List[T] : Slice of s from i to j .","title":"Return value:"},{"location":"usage/list/#sijk","text":"Slice of s from i to j with step k","title":"s[i:j:k]"},{"location":"usage/list/#arguments_7","text":"i : int or None ; Item index where the slice starts from. If None , it is treated as 0 . j : int or None ; Item index where the slice stops at. If None , it is treated as len(s) . k : int or None ; Step of the slice. If None , it is treated as 1 .","title":"Arguments:"},{"location":"usage/list/#return-value_6","text":"List[T] : Slice of s from i to j with step k .","title":"Return value:"},{"location":"usage/list/#lens","text":"Return the number of items in s: List[T]","title":"len(s)"},{"location":"usage/list/#return-value_7","text":"int : The number of items in s","title":"Return value:"},{"location":"usage/list/#indexx-i-j","text":"Return index of the first occurrence of x in the list (at or after index i and before index j ). Raise ValueError if x is not in the list.","title":"index(x[, i[, j]]])"},{"location":"usage/list/#arguments_8","text":"x : T ; Value to retrieve corresponding index if exists. i : int , optional, default= None ; First index to look up the value. If it is None , start from the first element of the list. j : int , optional, default= None ; Index before the last one to look for a value. If None , search to the end.","title":"Arguments:"},{"location":"usage/list/#return-value_8","text":"int : Index of the first occurrence of x in the list.","title":"Return value:"},{"location":"usage/list/#countx","text":"Return total number of occurrences of x in the list.","title":"count(x)"},{"location":"usage/list/#arguments_9","text":"x : T ; Value that counts the number of occurrences.","title":"Arguments:"},{"location":"usage/list/#return-value_9","text":"int : The number of occurrences of x in the list.","title":"Return value:"},{"location":"usage/list/#si-x","text":"Replace item i of s by x .","title":"s[i] = x"},{"location":"usage/list/#arguments_10","text":"i : int ; Item index to be set. If it is negative, it is equivalent to len(s) + i x : T ; Value to be set.","title":"Arguments:"},{"location":"usage/list/#return-value_10","text":"None .","title":"Return value:"},{"location":"usage/list/#del-si","text":"Remove item i of s .","title":"del s[i]"},{"location":"usage/list/#arguments_11","text":"i : int ; Item index to be removed. If it is negative, it is equivalent to len(s) + i .","title":"Arguments:"},{"location":"usage/list/#return-value_11","text":"None .","title":"Return value:"},{"location":"usage/list/#sij-t","text":"Replace slice of s from i to j by the contents of the iterable t .","title":"s[i:j] = t"},{"location":"usage/list/#arguments_12","text":"i : int or None ; Item index where the slice starts from. If None , it is treated as 0 . j : int or None ; Item index where the slice stops at. If None , it is treated as len(s) . t : Iterable[T] ; Iterable to be inserted.","title":"Arguments:"},{"location":"usage/list/#return-value_12","text":"None .","title":"Return value:"},{"location":"usage/list/#del-sij","text":"Remove slice of s from i to j .","title":"del s[i:j]"},{"location":"usage/list/#arguments_13","text":"i : int or None ; Item index where the slice starts from. If None , it is treated as 0 . j : int or None ; Item index where the slice stops at. If None , it is treated as len(s) .","title":"Arguments:"},{"location":"usage/list/#return-value_13","text":"None .","title":"Return value:"},{"location":"usage/list/#sijk-t","text":"Replace the elements of s[i:j:k] by those ofthe iterable t . The length must be the same. Otherwise, ValueError will be raised.","title":"s[i:j:k] = t"},{"location":"usage/list/#arguments_14","text":"i : int or None ; Item index where the slice starts from. If None , it is treated as 0 . j : int or None ; Item index where the slice stops at. If None , it is treated as len(s) . k : int or None ; Step of the slice. If None , it is treated as 1 . t : Iterable[T] ; Iterable to be substituted. The length must be the same as that of the slice.","title":"Arguments:"},{"location":"usage/list/#return-value_14","text":"None .","title":"Return value:"},{"location":"usage/list/#del-sijk","text":"Remove the elements of s[i:j:k] from the list.","title":"del s[i:j:k]"},{"location":"usage/list/#arguments_15","text":"i : int or None ; Item index where the slice starts from. If None , it is treated as 0 . j : int or None ; Item index where the slice stops at. If None , it is treated as len(s) . k : int or None ; Step of the slice. If None , it is treated as 1 .","title":"Arguments:"},{"location":"usage/list/#return-value_15","text":"None .","title":"Return value:"},{"location":"usage/list/#appendx","text":"Append x to the end of the sequence.","title":"append(x)"},{"location":"usage/list/#arguments_16","text":"x : T ; Item to be appended.","title":"Arguments:"},{"location":"usage/list/#return-value_16","text":"None .","title":"Return value;"},{"location":"usage/list/#clear","text":"Remove all items from the list.","title":"clear()"},{"location":"usage/list/#return-value_17","text":"None .","title":"Return value:"},{"location":"usage/list/#copy","text":"Return a copy of the list. The actual behavior is to create a table with a unique table name and copy the items to the new table. Therefore, unlike the built-in list copy, the behavior is similar to deep copy. Be aware that the copied list is volatile.","title":"copy()"},{"location":"usage/list/#return-value_18","text":"List[T] : A volatile copy of the list.","title":"Return value:"},{"location":"usage/list/#extendt","text":"Concatenate the list and t .","title":"extend(t)"},{"location":"usage/list/#arguments_17","text":"t : Iterable[T] ; An iterable to be concatenated.","title":"Arguments:"},{"location":"usage/list/#return-value_19","text":"None .","title":"Return value:"},{"location":"usage/list/#s-t_1","text":"Concatenate s and t .","title":"s += t"},{"location":"usage/list/#arguments_18","text":"t : Iterable[T] ; An iterable to be concatenated.","title":"Arguments:"},{"location":"usage/list/#return-value_20","text":"None .","title":"Return value:"},{"location":"usage/list/#s-n","text":"Update s with its contents repeated n times.","title":"s *= n"},{"location":"usage/list/#arguments_19","text":"n : int ; Number of times to repeat.","title":"Arguments:"},{"location":"usage/list/#return-value_21","text":"None .","title":"Return value:"},{"location":"usage/list/#inserti-x","text":"Insert x into the list at the index i .","title":"insert(i, x)"},{"location":"usage/list/#arguments_20","text":"i : int ; Index to be inserted. x : T ; Item to be inserted.","title":"Arguments:"},{"location":"usage/list/#return-value_22","text":"None .","title":"Return value:"},{"location":"usage/list/#popi","text":"Retrieve the item at i and also remove it from s.","title":"pop(i)"},{"location":"usage/list/#arguments_21","text":"i : int or None , optional, default= None ; Index to be retrieved and removed. If it is None , it is treated as the last index of the list.","title":"Arguments:"},{"location":"usage/list/#return-value_23","text":"T : i -th item of s , origin 0 .","title":"Return value:"},{"location":"usage/list/#removex","text":"Remove the first item of s whose value is equal to x .","title":"remove(x)"},{"location":"usage/list/#arguments_22","text":"x : T ; Item to be removed.","title":"Arguments:"},{"location":"usage/list/#return-value_24","text":"None .","title":"Return value:"},{"location":"usage/list/#reverse","text":"Reverse the items of the list in place.","title":"reverse()"},{"location":"usage/list/#return-value_25","text":"None .","title":"Return value:"},{"location":"usage/list/#sortreverse-key","text":"Sort the items of the list in place. The value of reverse can be either True or False , resulting in descending or ascending order, respectively. key specifies a function of one argument that is used to extract a comparison key from each list element.","title":"sort(reverse, key)"},{"location":"usage/list/#arguments_23","text":"reverse : bool , optional, default= False ; By default, the order is ascending, but if this value is True , the order will be descending. key : Callable[[T], Any] , optional, default= None ; Function to extract a comparison key from each list element.","title":"Arguments:"},{"location":"usage/list/#return-value_26","text":"None .","title":"Return value:"},{"location":"usage/metadata/","text":"Metadata MetadataItem MetadataItem(...) Constructor for MetadataItem. Instances of this class are not supposed to be created directly by the user. Arguments: table_name : str ; table name. container_type : str ; container type name. schema_version : str ; schema version. table_name Read-only property for the table name. Return value: str : The table name. container_type Read-only property for the container type. Return value: str : The container type. schema_version Read-only property for the schema version Return value: str : The schema version. MetadataReader MetadataReader(...) Constructor for MetadataReader class which can iterate over all records in the given connection. Arguments: connection : str or sqlite3.Connection ; Connection to sqlite3 to get metadata. If connection is a str , it will be used as the sqlite3 database file name. You can pass a sqlite3.Connection directly. len(metadata_reader) Return the number of records in the metadata table read by metadata_reader . It coincides the number of collections in the sqlite3 database connected by metadata_reader._connection . Return value: int : The number of items in the metadata table. obj in metadata_reader Return whether if obj is in metadata_reader Arguments: obj : object ; object to be checked the membership. Return value: bool : Boolean value whether if metadata_item is in the metadata table. iter(metadata_reader) Return an iterator over the MetadataItem 's in metadata_reader It coincides the records of metadata table in the sqlite3 database connected by metadata_reader._connection . Return value: Iterator[MetadataItem] : an iterator over the MetadataItem 's in metadata_reader","title":"metadata"},{"location":"usage/metadata/#metadata","text":"","title":"Metadata"},{"location":"usage/metadata/#metadataitem","text":"","title":"MetadataItem"},{"location":"usage/metadata/#metadataitem_1","text":"Constructor for MetadataItem. Instances of this class are not supposed to be created directly by the user.","title":"MetadataItem(...)"},{"location":"usage/metadata/#arguments","text":"table_name : str ; table name. container_type : str ; container type name. schema_version : str ; schema version.","title":"Arguments:"},{"location":"usage/metadata/#table_name","text":"Read-only property for the table name.","title":"table_name"},{"location":"usage/metadata/#return-value","text":"str : The table name.","title":"Return value:"},{"location":"usage/metadata/#container_type","text":"Read-only property for the container type.","title":"container_type"},{"location":"usage/metadata/#return-value_1","text":"str : The container type.","title":"Return value:"},{"location":"usage/metadata/#schema_version","text":"Read-only property for the schema version","title":"schema_version"},{"location":"usage/metadata/#return-value_2","text":"str : The schema version.","title":"Return value:"},{"location":"usage/metadata/#metadatareader","text":"","title":"MetadataReader"},{"location":"usage/metadata/#metadatareader_1","text":"Constructor for MetadataReader class which can iterate over all records in the given connection.","title":"MetadataReader(...)"},{"location":"usage/metadata/#arguments_1","text":"connection : str or sqlite3.Connection ; Connection to sqlite3 to get metadata. If connection is a str , it will be used as the sqlite3 database file name. You can pass a sqlite3.Connection directly.","title":"Arguments:"},{"location":"usage/metadata/#lenmetadata_reader","text":"Return the number of records in the metadata table read by metadata_reader . It coincides the number of collections in the sqlite3 database connected by metadata_reader._connection .","title":"len(metadata_reader)"},{"location":"usage/metadata/#return-value_3","text":"int : The number of items in the metadata table.","title":"Return value:"},{"location":"usage/metadata/#obj-in-metadata_reader","text":"Return whether if obj is in metadata_reader","title":"obj in metadata_reader"},{"location":"usage/metadata/#arguments_2","text":"obj : object ; object to be checked the membership.","title":"Arguments:"},{"location":"usage/metadata/#return-value_4","text":"bool : Boolean value whether if metadata_item is in the metadata table.","title":"Return value:"},{"location":"usage/metadata/#itermetadata_reader","text":"Return an iterator over the MetadataItem 's in metadata_reader It coincides the records of metadata table in the sqlite3 database connected by metadata_reader._connection .","title":"iter(metadata_reader)"},{"location":"usage/metadata/#return-value_5","text":"Iterator[MetadataItem] : an iterator over the MetadataItem 's in metadata_reader","title":"Return value:"},{"location":"usage/set/","text":"Set Set is a container compatible with the built-in set , which serializes values and stores them in a sqlite3 database. Set[T](...) Constructor. Type Parameters: T : value type Arguments: data : Iterable[T] , optional, positional-only argument, defualt= None ; Initial data. If None or no argument is given, persistent data is used as is if available, otherwise persistent data in the corresponding table is cleared and given data is stored instead. connection : str or sqlite3.Connection , optional, default= None ; If None , temporary file is automatically created. If connection is a str , it will be used as the sqlite3 database file name. You can pass a sqlite3.Connection directly. table_name : str , optional, default= None ; Table name of this container. If None , an auto-generated unique name will be used. Available characters are letters, numbers, and underscores ( _ ). serializer : Callable[[T], bytes] , optional, default= None ; Function to serialize value. If None , pickle.dumps is used. deserializer : Callable[[bytes], T] , optional, default= None ; Function to deserialize value. If None , pickle.loads is used. persist : bool , optional, default= True ; If True , table won't be deleted even when the object is deleted. If False , the table is deleted when this object is deleted. len(s) Return the number of items in s: Set[T] Return value: int : The number of items in s x in s True if x is in s , else False Arguments: x : object ; an object to be checked Return value: bool : True if x is in s and False otherwise. x not in s False if x is in s , else True Arguments: x : object ; an object to be checked Return value: bool : False if x is in s and True otherwise. isdisjoint(other) Return True if the set has no elements in common with other . Arguments: other : Iterable[T] ; Iterable to check if disjoint. Return value: bool : True if the set is disjoint with other , False otherwise. issubset(other) Return True if every element in the set is in other . Arguments: other : Iterable[T] ; Iterable to check if this one contains the set. Return value: bool : True if the set is subset of other , False otherwise. s <= other Return True if every element in the set is in other . Argument: other : Iterable[T] ; Iterable to check if this one contains all the elements in the set. Return value: bool : True if the set is subset of other , False otherwise. s < other Return True if every element in the set is in other and s is not equal to other . Arguments: other : Iterable[T] ; Iterable to check if it contains all elements of the set and is not equal to the set. Return value: bool : True if the set is a proper subset of other , False otherwise. issuperset(other) Return True if every element in other is in the set. Arguments: other : Iterable[T] ; Iterable to check if the elements are contained. Return value: bool : True if the set is superset of other , False otherwise. s >= other Return True if every element in other is in the set. Argument: other : Iterable[T] ; Iterable to check if the elements are contained. Return value: bool : True if the set is superset of other , False otherwise. s > other Return True if every element in other is in the set and s is not equal to other . Arguments: other : Iterable[T] ; Iterable to check if it all elements are in the set and is not equal to the set. Return value: bool : True if the set is a proper superset of other , False otherwise. union(*others) Return a new set with elements from the set and all others . Arguments: others : Iterable[T] ; Iterables to take the union. Return value: Set[T] : A new set with elements from the set and all others . s | other Return a new set with elements from s and other . Arguments: other : Iterable[T] ; Iterable to take the union. Return value: Set[T] : A new set with elements from s and other . intersection(*others) Return a new set with elements common to the set and all others . Arguments: others : Iterable[T] ; Iterables to take the intersection. Return value: Set[T] : A new set with elements common to the set and all others . s & other Return a new set with elements common to s and other . Arguments: other : Iterable[T] ; Iterable to take the intersection. Return value: Set[T] : A new set with elements common to s and other . difference(*others) Return a new set with elements in the set that are not in the others . Arguments: others : Iterable[T] ; Iterables to take the difference. Return value: Set[T] : A new set with elements in the set that are not in the others . s - other Return a new set with elements in the set that are not in the other . Arguments: other : Iterable[T] ; Iterable to take the difference. Return value: Set[T] : A new set with elements in the set that are not in the other . symmetric_difference(other) Return a new set with elements in either the set or other but not both. Arguments: other : Iterable[T] ; Iterable to take the symmetric difference. Return value: Set[T] : A new set with elements in either the set or other but not both. s ^ other Return a new set with elements in either the set or other but not both. Arguments: other : Iterable[T] ; Iterable to take the symmetric difference. Return value: Set[T] : A new set with elements in either the set or other but not both. copy() Return a copy of the set. The actual behavior is to create a table with a unique table name and copy the elements to the new table. Therefore, unlike the built-in set copy, the behavior is similar to deep copy. Be aware that the copied set is volatile. Return value: Set[T] : A volatile copy of the set. update(*others) Update the set by adding elements from all others . Arguments: others : Iterable[T] ; Iterables to take the union. Return value: None . s |= other Update the set by adding elements from other . Arguments: other : Iterable[T] ; Iterable to take the union. Return value: None . intersection_update(*others) Update the set by keeping only elements found in the set and all others . Arguments: others : Iterable[T] ; Iterables to take the intersection. Return value: None . s &= other Update the set by keeping only elements found in the set and other . Arguments: other : Iterable[T] ; Iterable to take the intersection. Return value: None . symmetric_difference_update(other) Update the set by keeping only elements found in either the set or other but not both. Arguments: other : Iterable[T] ; Iterable to take the symmetric difference. Return value: None . s ^= other Update the set by keeping only elements found in either the set or other but not both. Arguments: other : Iterable[T] ; Iterable to take the symmetric difference. Return value: None . add(elem) Add an element elem to the set. Arguments: elem : T ; An element to be added. Return value: None . remove(elem) Remove an element elem from the set. Raises KeyError if elem is not contained in the set. Arguemnts: elem : T ; An element to be removed. Return value: None . discard(elem) Remove an element elem from the set if it is present. Arguments: elem : T ; An element to be removed. Return value: None . pop() Remove and return an arbitrary element from the set. Raises KeyError if the set is empty. Return value: T : An element in the set. clear() Remove all elements from the set. Return value: None .","title":"Set"},{"location":"usage/set/#set","text":"Set is a container compatible with the built-in set , which serializes values and stores them in a sqlite3 database.","title":"Set"},{"location":"usage/set/#sett","text":"Constructor.","title":"Set[T](...)"},{"location":"usage/set/#type-parameters","text":"T : value type","title":"Type Parameters:"},{"location":"usage/set/#arguments","text":"data : Iterable[T] , optional, positional-only argument, defualt= None ; Initial data. If None or no argument is given, persistent data is used as is if available, otherwise persistent data in the corresponding table is cleared and given data is stored instead. connection : str or sqlite3.Connection , optional, default= None ; If None , temporary file is automatically created. If connection is a str , it will be used as the sqlite3 database file name. You can pass a sqlite3.Connection directly. table_name : str , optional, default= None ; Table name of this container. If None , an auto-generated unique name will be used. Available characters are letters, numbers, and underscores ( _ ). serializer : Callable[[T], bytes] , optional, default= None ; Function to serialize value. If None , pickle.dumps is used. deserializer : Callable[[bytes], T] , optional, default= None ; Function to deserialize value. If None , pickle.loads is used. persist : bool , optional, default= True ; If True , table won't be deleted even when the object is deleted. If False , the table is deleted when this object is deleted.","title":"Arguments:"},{"location":"usage/set/#lens","text":"Return the number of items in s: Set[T]","title":"len(s)"},{"location":"usage/set/#return-value","text":"int : The number of items in s","title":"Return value:"},{"location":"usage/set/#x-in-s","text":"True if x is in s , else False","title":"x in s"},{"location":"usage/set/#arguments_1","text":"x : object ; an object to be checked","title":"Arguments:"},{"location":"usage/set/#return-value_1","text":"bool : True if x is in s and False otherwise.","title":"Return value:"},{"location":"usage/set/#x-not-in-s","text":"False if x is in s , else True","title":"x not in s"},{"location":"usage/set/#arguments_2","text":"x : object ; an object to be checked","title":"Arguments:"},{"location":"usage/set/#return-value_2","text":"bool : False if x is in s and True otherwise.","title":"Return value:"},{"location":"usage/set/#isdisjointother","text":"Return True if the set has no elements in common with other .","title":"isdisjoint(other)"},{"location":"usage/set/#arguments_3","text":"other : Iterable[T] ; Iterable to check if disjoint.","title":"Arguments:"},{"location":"usage/set/#return-value_3","text":"bool : True if the set is disjoint with other , False otherwise.","title":"Return value:"},{"location":"usage/set/#issubsetother","text":"Return True if every element in the set is in other .","title":"issubset(other)"},{"location":"usage/set/#arguments_4","text":"other : Iterable[T] ; Iterable to check if this one contains the set.","title":"Arguments:"},{"location":"usage/set/#return-value_4","text":"bool : True if the set is subset of other , False otherwise.","title":"Return value:"},{"location":"usage/set/#s-other","text":"Return True if every element in the set is in other .","title":"s &lt;= other"},{"location":"usage/set/#argument","text":"other : Iterable[T] ; Iterable to check if this one contains all the elements in the set.","title":"Argument:"},{"location":"usage/set/#return-value_5","text":"bool : True if the set is subset of other , False otherwise.","title":"Return value:"},{"location":"usage/set/#s-other_1","text":"Return True if every element in the set is in other and s is not equal to other .","title":"s &lt; other"},{"location":"usage/set/#arguments_5","text":"other : Iterable[T] ; Iterable to check if it contains all elements of the set and is not equal to the set.","title":"Arguments:"},{"location":"usage/set/#return-value_6","text":"bool : True if the set is a proper subset of other , False otherwise.","title":"Return value:"},{"location":"usage/set/#issupersetother","text":"Return True if every element in other is in the set.","title":"issuperset(other)"},{"location":"usage/set/#arguments_6","text":"other : Iterable[T] ; Iterable to check if the elements are contained.","title":"Arguments:"},{"location":"usage/set/#return-value_7","text":"bool : True if the set is superset of other , False otherwise.","title":"Return value:"},{"location":"usage/set/#s-other_2","text":"Return True if every element in other is in the set.","title":"s &gt;= other"},{"location":"usage/set/#argument_1","text":"other : Iterable[T] ; Iterable to check if the elements are contained.","title":"Argument:"},{"location":"usage/set/#return-value_8","text":"bool : True if the set is superset of other , False otherwise.","title":"Return value:"},{"location":"usage/set/#s-other_3","text":"Return True if every element in other is in the set and s is not equal to other .","title":"s &gt; other"},{"location":"usage/set/#arguments_7","text":"other : Iterable[T] ; Iterable to check if it all elements are in the set and is not equal to the set.","title":"Arguments:"},{"location":"usage/set/#return-value_9","text":"bool : True if the set is a proper superset of other , False otherwise.","title":"Return value:"},{"location":"usage/set/#unionothers","text":"Return a new set with elements from the set and all others .","title":"union(*others)"},{"location":"usage/set/#arguments_8","text":"others : Iterable[T] ; Iterables to take the union.","title":"Arguments:"},{"location":"usage/set/#return-value_10","text":"Set[T] : A new set with elements from the set and all others .","title":"Return value:"},{"location":"usage/set/#s-other_4","text":"Return a new set with elements from s and other .","title":"s | other"},{"location":"usage/set/#arguments_9","text":"other : Iterable[T] ; Iterable to take the union.","title":"Arguments:"},{"location":"usage/set/#return-value_11","text":"Set[T] : A new set with elements from s and other .","title":"Return value:"},{"location":"usage/set/#intersectionothers","text":"Return a new set with elements common to the set and all others .","title":"intersection(*others)"},{"location":"usage/set/#arguments_10","text":"others : Iterable[T] ; Iterables to take the intersection.","title":"Arguments:"},{"location":"usage/set/#return-value_12","text":"Set[T] : A new set with elements common to the set and all others .","title":"Return value:"},{"location":"usage/set/#s-other_5","text":"Return a new set with elements common to s and other .","title":"s &amp; other"},{"location":"usage/set/#arguments_11","text":"other : Iterable[T] ; Iterable to take the intersection.","title":"Arguments:"},{"location":"usage/set/#return-value_13","text":"Set[T] : A new set with elements common to s and other .","title":"Return value:"},{"location":"usage/set/#differenceothers","text":"Return a new set with elements in the set that are not in the others .","title":"difference(*others)"},{"location":"usage/set/#arguments_12","text":"others : Iterable[T] ; Iterables to take the difference.","title":"Arguments:"},{"location":"usage/set/#return-value_14","text":"Set[T] : A new set with elements in the set that are not in the others .","title":"Return value:"},{"location":"usage/set/#s-other_6","text":"Return a new set with elements in the set that are not in the other .","title":"s - other"},{"location":"usage/set/#arguments_13","text":"other : Iterable[T] ; Iterable to take the difference.","title":"Arguments:"},{"location":"usage/set/#return-value_15","text":"Set[T] : A new set with elements in the set that are not in the other .","title":"Return value:"},{"location":"usage/set/#symmetric_differenceother","text":"Return a new set with elements in either the set or other but not both.","title":"symmetric_difference(other)"},{"location":"usage/set/#arguments_14","text":"other : Iterable[T] ; Iterable to take the symmetric difference.","title":"Arguments:"},{"location":"usage/set/#return-value_16","text":"Set[T] : A new set with elements in either the set or other but not both.","title":"Return value:"},{"location":"usage/set/#s-other_7","text":"Return a new set with elements in either the set or other but not both.","title":"s ^ other"},{"location":"usage/set/#arguments_15","text":"other : Iterable[T] ; Iterable to take the symmetric difference.","title":"Arguments:"},{"location":"usage/set/#return-value_17","text":"Set[T] : A new set with elements in either the set or other but not both.","title":"Return value:"},{"location":"usage/set/#copy","text":"Return a copy of the set. The actual behavior is to create a table with a unique table name and copy the elements to the new table. Therefore, unlike the built-in set copy, the behavior is similar to deep copy. Be aware that the copied set is volatile.","title":"copy()"},{"location":"usage/set/#return-value_18","text":"Set[T] : A volatile copy of the set.","title":"Return value:"},{"location":"usage/set/#updateothers","text":"Update the set by adding elements from all others .","title":"update(*others)"},{"location":"usage/set/#arguments_16","text":"others : Iterable[T] ; Iterables to take the union.","title":"Arguments:"},{"location":"usage/set/#return-value_19","text":"None .","title":"Return value:"},{"location":"usage/set/#s-other_8","text":"Update the set by adding elements from other .","title":"s |= other"},{"location":"usage/set/#arguments_17","text":"other : Iterable[T] ; Iterable to take the union.","title":"Arguments:"},{"location":"usage/set/#return-value_20","text":"None .","title":"Return value:"},{"location":"usage/set/#intersection_updateothers","text":"Update the set by keeping only elements found in the set and all others .","title":"intersection_update(*others)"},{"location":"usage/set/#arguments_18","text":"others : Iterable[T] ; Iterables to take the intersection.","title":"Arguments:"},{"location":"usage/set/#return-value_21","text":"None .","title":"Return value:"},{"location":"usage/set/#s-other_9","text":"Update the set by keeping only elements found in the set and other .","title":"s &amp;= other"},{"location":"usage/set/#arguments_19","text":"other : Iterable[T] ; Iterable to take the intersection.","title":"Arguments:"},{"location":"usage/set/#return-value_22","text":"None .","title":"Return value:"},{"location":"usage/set/#symmetric_difference_updateother","text":"Update the set by keeping only elements found in either the set or other but not both.","title":"symmetric_difference_update(other)"},{"location":"usage/set/#arguments_20","text":"other : Iterable[T] ; Iterable to take the symmetric difference.","title":"Arguments:"},{"location":"usage/set/#return-value_23","text":"None .","title":"Return value:"},{"location":"usage/set/#s-other_10","text":"Update the set by keeping only elements found in either the set or other but not both.","title":"s ^= other"},{"location":"usage/set/#arguments_21","text":"other : Iterable[T] ; Iterable to take the symmetric difference.","title":"Arguments:"},{"location":"usage/set/#return-value_24","text":"None .","title":"Return value:"},{"location":"usage/set/#addelem","text":"Add an element elem to the set.","title":"add(elem)"},{"location":"usage/set/#arguments_22","text":"elem : T ; An element to be added.","title":"Arguments:"},{"location":"usage/set/#return-value_25","text":"None .","title":"Return value:"},{"location":"usage/set/#removeelem","text":"Remove an element elem from the set. Raises KeyError if elem is not contained in the set.","title":"remove(elem)"},{"location":"usage/set/#arguemnts","text":"elem : T ; An element to be removed.","title":"Arguemnts:"},{"location":"usage/set/#return-value_26","text":"None .","title":"Return value:"},{"location":"usage/set/#discardelem","text":"Remove an element elem from the set if it is present.","title":"discard(elem)"},{"location":"usage/set/#arguments_23","text":"elem : T ; An element to be removed.","title":"Arguments:"},{"location":"usage/set/#return-value_27","text":"None .","title":"Return value:"},{"location":"usage/set/#pop","text":"Remove and return an arbitrary element from the set. Raises KeyError if the set is empty.","title":"pop()"},{"location":"usage/set/#return-value_28","text":"T : An element in the set.","title":"Return value:"},{"location":"usage/set/#clear","text":"Remove all elements from the set.","title":"clear()"},{"location":"usage/set/#return-value_29","text":"None .","title":"Return value:"},{"location":"usage/dictview/itemsview/","text":"ItemsView ItemsView is a view object which is returned by dict.items() . It provides a dynamic view on the dictionary's (key, value) tuples, which means when dictionay changes, the view reflects these changes. len(itemsview) Return the number of items in the dictionary d: Dict[KT, VT] where itemsview=d.items() . Return value: int : The number of items in d iter(itemsview) Return an iterator over the (key, value) tuples in the dictionary. The order of the items is guaranteed to be inserted order. Return value: Iterable[Tuple[_KT_co, _VT_co]] : The iterator over the keys in the dictionary. item in itemsview Return whether if item is in the dictionary. Arguments: item : object ; An object to be checked Return value: bool : True if item is in the dictionary and False otherwise. reversed(itemsview) Return a reverse iterator over the (key, value) tuples of the dictionary. (provided only python version 3.8 and above) Return value: Iterator[Tuple[_KT_co, _VT_co]] : The reverse iterator over the (key, value) tuples in the dictonary. itemsview & other Return a set with elements common to itemsview and other . Arguments: other : Iterable[Any] ; Iterable to take the intersection. Return value: Set[Tuple[_KT_co, _VT_co]] : A set with elements common to itemsview and other . other & itemsview Return a set with elements common to itemsview and other . Arguments: other : Iterable[_T] ; Iterable to take the intersection. Return value: Set[_T] : A set with elements common to itemsview and other . itemsview | other Return a new set with elements from itemsview and other . Arguments: other : Iterable[_T] ; Iterable to take the union. Return value: Set[Union[Tuple[_KT_co, _VT_co], _T]] : A new set with elements from itemsview and other . other | itemsview Return a new set with elements from itemsview and other . Arguments: other : Iterable[_T] ; Iterable to take the union. Return value: Set[Union[Tuple[_KT_co, _VT_co], _T]] : A new set with elements from itemsview and other . itemsview - other Return a new set with elements in the itemsview that are not in the other . Arguments: other : Iterable[Any] ; Iterable to take the difference. Return value: Set[Tuple[_KT_co, _VT_co]] : A new set with elements in the set that are not in the other . other - itemsview Return a new set with elements in the other that are not in the itemsview . Arguments: other : Iterable[_T] ; Iterable to take the difference. Return value: Set[_T] : A new set with elements in the other that are not in the itemsview . itemsview ^ other Return a new set with elements in either the itemsview or other but not both. Arguments: other : Iterable[_T] ; Iterable to take the symmetric difference. Return value Set[Union[Tuple[_KT_co, _VT_co], _T]] : A new set with elements in either the itemsview or other but not both. other ^ itemsview Return a new set with elements in either the itemsview or other but not both. Arguments: other : Iterable[_T] ; Iterable to take the symmetric difference. Return value Set[Union[Tuple[_KT_co, _VT_co], _T]] : A new set with elements in either the itemsview or other but not both. itemsview.mapping Return a MappingProxyType that wraps the original dictionary to which the view refers. (provided only python version 3.10 and above) Return value MappingProxyType : A read-only proxy of the original dictionary.","title":"ItemsView"},{"location":"usage/dictview/itemsview/#itemsview","text":"ItemsView is a view object which is returned by dict.items() . It provides a dynamic view on the dictionary's (key, value) tuples, which means when dictionay changes, the view reflects these changes.","title":"ItemsView"},{"location":"usage/dictview/itemsview/#lenitemsview","text":"Return the number of items in the dictionary d: Dict[KT, VT] where itemsview=d.items() .","title":"len(itemsview)"},{"location":"usage/dictview/itemsview/#return-value","text":"int : The number of items in d","title":"Return value:"},{"location":"usage/dictview/itemsview/#iteritemsview","text":"Return an iterator over the (key, value) tuples in the dictionary. The order of the items is guaranteed to be inserted order.","title":"iter(itemsview)"},{"location":"usage/dictview/itemsview/#return-value_1","text":"Iterable[Tuple[_KT_co, _VT_co]] : The iterator over the keys in the dictionary.","title":"Return value:"},{"location":"usage/dictview/itemsview/#item-in-itemsview","text":"Return whether if item is in the dictionary.","title":"item in itemsview"},{"location":"usage/dictview/itemsview/#arguments","text":"item : object ; An object to be checked","title":"Arguments:"},{"location":"usage/dictview/itemsview/#return-value_2","text":"bool : True if item is in the dictionary and False otherwise.","title":"Return value:"},{"location":"usage/dictview/itemsview/#reverseditemsview","text":"Return a reverse iterator over the (key, value) tuples of the dictionary. (provided only python version 3.8 and above)","title":"reversed(itemsview)"},{"location":"usage/dictview/itemsview/#return-value_3","text":"Iterator[Tuple[_KT_co, _VT_co]] : The reverse iterator over the (key, value) tuples in the dictonary.","title":"Return value:"},{"location":"usage/dictview/itemsview/#itemsview-other","text":"Return a set with elements common to itemsview and other .","title":"itemsview &amp; other"},{"location":"usage/dictview/itemsview/#arguments_1","text":"other : Iterable[Any] ; Iterable to take the intersection.","title":"Arguments:"},{"location":"usage/dictview/itemsview/#return-value_4","text":"Set[Tuple[_KT_co, _VT_co]] : A set with elements common to itemsview and other .","title":"Return value:"},{"location":"usage/dictview/itemsview/#other-itemsview","text":"Return a set with elements common to itemsview and other .","title":"other &amp; itemsview"},{"location":"usage/dictview/itemsview/#arguments_2","text":"other : Iterable[_T] ; Iterable to take the intersection.","title":"Arguments:"},{"location":"usage/dictview/itemsview/#return-value_5","text":"Set[_T] : A set with elements common to itemsview and other .","title":"Return value:"},{"location":"usage/dictview/itemsview/#itemsview-other_1","text":"Return a new set with elements from itemsview and other .","title":"itemsview | other"},{"location":"usage/dictview/itemsview/#arguments_3","text":"other : Iterable[_T] ; Iterable to take the union.","title":"Arguments:"},{"location":"usage/dictview/itemsview/#return-value_6","text":"Set[Union[Tuple[_KT_co, _VT_co], _T]] : A new set with elements from itemsview and other .","title":"Return value:"},{"location":"usage/dictview/itemsview/#other-itemsview_1","text":"Return a new set with elements from itemsview and other .","title":"other | itemsview"},{"location":"usage/dictview/itemsview/#arguments_4","text":"other : Iterable[_T] ; Iterable to take the union.","title":"Arguments:"},{"location":"usage/dictview/itemsview/#return-value_7","text":"Set[Union[Tuple[_KT_co, _VT_co], _T]] : A new set with elements from itemsview and other .","title":"Return value:"},{"location":"usage/dictview/itemsview/#itemsview-other_2","text":"Return a new set with elements in the itemsview that are not in the other .","title":"itemsview - other"},{"location":"usage/dictview/itemsview/#arguments_5","text":"other : Iterable[Any] ; Iterable to take the difference.","title":"Arguments:"},{"location":"usage/dictview/itemsview/#return-value_8","text":"Set[Tuple[_KT_co, _VT_co]] : A new set with elements in the set that are not in the other .","title":"Return value:"},{"location":"usage/dictview/itemsview/#other-itemsview_2","text":"Return a new set with elements in the other that are not in the itemsview .","title":"other - itemsview"},{"location":"usage/dictview/itemsview/#arguments_6","text":"other : Iterable[_T] ; Iterable to take the difference.","title":"Arguments:"},{"location":"usage/dictview/itemsview/#return-value_9","text":"Set[_T] : A new set with elements in the other that are not in the itemsview .","title":"Return value:"},{"location":"usage/dictview/itemsview/#itemsview-other_3","text":"Return a new set with elements in either the itemsview or other but not both.","title":"itemsview ^ other"},{"location":"usage/dictview/itemsview/#arguments_7","text":"other : Iterable[_T] ; Iterable to take the symmetric difference.","title":"Arguments:"},{"location":"usage/dictview/itemsview/#return-value_10","text":"Set[Union[Tuple[_KT_co, _VT_co], _T]] : A new set with elements in either the itemsview or other but not both.","title":"Return value"},{"location":"usage/dictview/itemsview/#other-itemsview_3","text":"Return a new set with elements in either the itemsview or other but not both.","title":"other ^ itemsview"},{"location":"usage/dictview/itemsview/#arguments_8","text":"other : Iterable[_T] ; Iterable to take the symmetric difference.","title":"Arguments:"},{"location":"usage/dictview/itemsview/#return-value_11","text":"Set[Union[Tuple[_KT_co, _VT_co], _T]] : A new set with elements in either the itemsview or other but not both.","title":"Return value"},{"location":"usage/dictview/itemsview/#itemsviewmapping","text":"Return a MappingProxyType that wraps the original dictionary to which the view refers. (provided only python version 3.10 and above)","title":"itemsview.mapping"},{"location":"usage/dictview/itemsview/#return-value_12","text":"MappingProxyType : A read-only proxy of the original dictionary.","title":"Return value"},{"location":"usage/dictview/keysview/","text":"KeysView KeysView is a view object which is returned by dict.keys() . It provides a dynamic view on the dictionary's keys, which means when dictionay changes, the view reflects these changes. len(keysview) Return the number of items in the dictionary d: Dict[KT, VT] where keysview=d.keys() . Return value: int : The number of items in d iter(keysview) Return an iterator over the keys in the dictionary. The order of the keys is guaranteed to be inserted order. Return value: Iterator[_KT_co] : The iterator over the keys in the dictonary. key in keysview Return whether if key is in the dictionary. Arguments: key : object ; An object to be checked Return value: bool : True if key is in the dictionary and False otherwise. reversed(keysview) Return a reverse iterator over the keys of the dictionary. (provided only python version 3.8 and above) Return value: Iterator[_KT_co] : The reverse iterator over the keys in the dictonary. keysview & other Return a set with elements common to keysview and other . Arguments: other : Iterable[Any] ; Iterable to take the intersection. Return value: Set[_KT_co] : A set with elements common to keysview and other . other & keysview Return a set with elements common to keysview and other . Arguments: other : Iterable[_T] ; Iterable to take the intersection. Return value: Set[_T] : A set with elements common to keysview and other . keysview | other Return a new set with elements from keysview and other . Arguments: other : Iterable[_T] ; Iterable to take the union. Return value: Set[Union[_KT_co, _T]] : A new set with elements from keysview and other . other | keysview Return a new set with elements from keysview and other . Arguments: other : Iterable[_T] ; Iterable to take the union. Return value: Set[Union[_KT_co, _T]] : A new set with elements from keysview and other . keysview - other Return a new set with elements in the keysview that are not in the other . Arguments: other : Iterable[Any] ; Iterable to take the difference. Return value: Set[_KT_co] : A new set with elements in the set that are not in the other . other - keysview Return a new set with elements in the other that are not in the keysview . Arguments: other : Iterable[_T] ; Iterable to be taken the difference. Return value: Set[_T] : A new set with elements in other that are not in the keysview . keysview ^ other Return a new set with elements in either the keysview or other but not both. Arguments: other : Iterable[_T] ; Iterable to take the symmetric difference. Return value Set[Union[_KT_co, _T]] : A new set with elements in either the keysview or other but not both. other ^ keysview Return a new set with elements in either the keysview or other but not both. Arguments: other : Iterable[_T] ; Iterable to take the symmetric difference. Return value Set[Union[_KT_co, _T]] : A new set with elements in either the keysview or other but not both. keysview.mapping Return a MappingProxyType that wraps the original dictionary to which the view refers. (provided only python version 3.10 and above) Return value MappingProxyType : A read-only proxy of the original dictionary.","title":"KeysView"},{"location":"usage/dictview/keysview/#keysview","text":"KeysView is a view object which is returned by dict.keys() . It provides a dynamic view on the dictionary's keys, which means when dictionay changes, the view reflects these changes.","title":"KeysView"},{"location":"usage/dictview/keysview/#lenkeysview","text":"Return the number of items in the dictionary d: Dict[KT, VT] where keysview=d.keys() .","title":"len(keysview)"},{"location":"usage/dictview/keysview/#return-value","text":"int : The number of items in d","title":"Return value:"},{"location":"usage/dictview/keysview/#iterkeysview","text":"Return an iterator over the keys in the dictionary. The order of the keys is guaranteed to be inserted order.","title":"iter(keysview)"},{"location":"usage/dictview/keysview/#return-value_1","text":"Iterator[_KT_co] : The iterator over the keys in the dictonary.","title":"Return value:"},{"location":"usage/dictview/keysview/#key-in-keysview","text":"Return whether if key is in the dictionary.","title":"key in keysview"},{"location":"usage/dictview/keysview/#arguments","text":"key : object ; An object to be checked","title":"Arguments:"},{"location":"usage/dictview/keysview/#return-value_2","text":"bool : True if key is in the dictionary and False otherwise.","title":"Return value:"},{"location":"usage/dictview/keysview/#reversedkeysview","text":"Return a reverse iterator over the keys of the dictionary. (provided only python version 3.8 and above)","title":"reversed(keysview)"},{"location":"usage/dictview/keysview/#return-value_3","text":"Iterator[_KT_co] : The reverse iterator over the keys in the dictonary.","title":"Return value:"},{"location":"usage/dictview/keysview/#keysview-other","text":"Return a set with elements common to keysview and other .","title":"keysview &amp; other"},{"location":"usage/dictview/keysview/#arguments_1","text":"other : Iterable[Any] ; Iterable to take the intersection.","title":"Arguments:"},{"location":"usage/dictview/keysview/#return-value_4","text":"Set[_KT_co] : A set with elements common to keysview and other .","title":"Return value:"},{"location":"usage/dictview/keysview/#other-keysview","text":"Return a set with elements common to keysview and other .","title":"other &amp; keysview"},{"location":"usage/dictview/keysview/#arguments_2","text":"other : Iterable[_T] ; Iterable to take the intersection.","title":"Arguments:"},{"location":"usage/dictview/keysview/#return-value_5","text":"Set[_T] : A set with elements common to keysview and other .","title":"Return value:"},{"location":"usage/dictview/keysview/#keysview-other_1","text":"Return a new set with elements from keysview and other .","title":"keysview | other"},{"location":"usage/dictview/keysview/#arguments_3","text":"other : Iterable[_T] ; Iterable to take the union.","title":"Arguments:"},{"location":"usage/dictview/keysview/#return-value_6","text":"Set[Union[_KT_co, _T]] : A new set with elements from keysview and other .","title":"Return value:"},{"location":"usage/dictview/keysview/#other-keysview_1","text":"Return a new set with elements from keysview and other .","title":"other | keysview"},{"location":"usage/dictview/keysview/#arguments_4","text":"other : Iterable[_T] ; Iterable to take the union.","title":"Arguments:"},{"location":"usage/dictview/keysview/#return-value_7","text":"Set[Union[_KT_co, _T]] : A new set with elements from keysview and other .","title":"Return value:"},{"location":"usage/dictview/keysview/#keysview-other_2","text":"Return a new set with elements in the keysview that are not in the other .","title":"keysview - other"},{"location":"usage/dictview/keysview/#arguments_5","text":"other : Iterable[Any] ; Iterable to take the difference.","title":"Arguments:"},{"location":"usage/dictview/keysview/#return-value_8","text":"Set[_KT_co] : A new set with elements in the set that are not in the other .","title":"Return value:"},{"location":"usage/dictview/keysview/#other-keysview_2","text":"Return a new set with elements in the other that are not in the keysview .","title":"other - keysview"},{"location":"usage/dictview/keysview/#arguments_6","text":"other : Iterable[_T] ; Iterable to be taken the difference.","title":"Arguments:"},{"location":"usage/dictview/keysview/#return-value_9","text":"Set[_T] : A new set with elements in other that are not in the keysview .","title":"Return value:"},{"location":"usage/dictview/keysview/#keysview-other_3","text":"Return a new set with elements in either the keysview or other but not both.","title":"keysview ^ other"},{"location":"usage/dictview/keysview/#arguments_7","text":"other : Iterable[_T] ; Iterable to take the symmetric difference.","title":"Arguments:"},{"location":"usage/dictview/keysview/#return-value_10","text":"Set[Union[_KT_co, _T]] : A new set with elements in either the keysview or other but not both.","title":"Return value"},{"location":"usage/dictview/keysview/#other-keysview_3","text":"Return a new set with elements in either the keysview or other but not both.","title":"other ^ keysview"},{"location":"usage/dictview/keysview/#arguments_8","text":"other : Iterable[_T] ; Iterable to take the symmetric difference.","title":"Arguments:"},{"location":"usage/dictview/keysview/#return-value_11","text":"Set[Union[_KT_co, _T]] : A new set with elements in either the keysview or other but not both.","title":"Return value"},{"location":"usage/dictview/keysview/#keysviewmapping","text":"Return a MappingProxyType that wraps the original dictionary to which the view refers. (provided only python version 3.10 and above)","title":"keysview.mapping"},{"location":"usage/dictview/keysview/#return-value_12","text":"MappingProxyType : A read-only proxy of the original dictionary.","title":"Return value"},{"location":"usage/dictview/valuesview/","text":"ValuesView ValuesView is a view object which is returned by dict.views() . It provides a dynamic view on the dictionary's values, which means when dictionay changes, the view reflects these changes. len(valuesview) Return the number of items in the dictionay d: Dict[KT, VT] where valuesview=d.values() . Return value: int : The number of items in d iter(valuesview) Return an iterator over the values in the dictionary. The order of the values is guaranteed to be inserted order. Return value: Iterator[_VT_co] : The iterator over the values in the dictionary. value in valuesview Return whether if value is in the dictionary. Arguments: value : object ; An object to be checked Return value: bool : True if value is in the dictionary and False otherwise. reversed(valuesview) Return a reverse iterator over the values of the dictionary. (provided only python version 3.8 and above) Return value: Iterator[_VT_co] : The reverse iterator over the values in the dictonary. valuesview.mapping Return a MappingProxyType that wraps the original dictionary to which the view refers. (provided only python version 3.10 and above) Return value MappingProxyType : A read-only proxy of the original dictionary.","title":"ValuesView"},{"location":"usage/dictview/valuesview/#valuesview","text":"ValuesView is a view object which is returned by dict.views() . It provides a dynamic view on the dictionary's values, which means when dictionay changes, the view reflects these changes.","title":"ValuesView"},{"location":"usage/dictview/valuesview/#lenvaluesview","text":"Return the number of items in the dictionay d: Dict[KT, VT] where valuesview=d.values() .","title":"len(valuesview)"},{"location":"usage/dictview/valuesview/#return-value","text":"int : The number of items in d","title":"Return value:"},{"location":"usage/dictview/valuesview/#itervaluesview","text":"Return an iterator over the values in the dictionary. The order of the values is guaranteed to be inserted order.","title":"iter(valuesview)"},{"location":"usage/dictview/valuesview/#return-value_1","text":"Iterator[_VT_co] : The iterator over the values in the dictionary.","title":"Return value:"},{"location":"usage/dictview/valuesview/#value-in-valuesview","text":"Return whether if value is in the dictionary.","title":"value in valuesview"},{"location":"usage/dictview/valuesview/#arguments","text":"value : object ; An object to be checked","title":"Arguments:"},{"location":"usage/dictview/valuesview/#return-value_2","text":"bool : True if value is in the dictionary and False otherwise.","title":"Return value:"},{"location":"usage/dictview/valuesview/#reversedvaluesview","text":"Return a reverse iterator over the values of the dictionary. (provided only python version 3.8 and above)","title":"reversed(valuesview)"},{"location":"usage/dictview/valuesview/#return-value_3","text":"Iterator[_VT_co] : The reverse iterator over the values in the dictonary.","title":"Return value:"},{"location":"usage/dictview/valuesview/#valuesviewmapping","text":"Return a MappingProxyType that wraps the original dictionary to which the view refers. (provided only python version 3.10 and above)","title":"valuesview.mapping"},{"location":"usage/dictview/valuesview/#return-value_4","text":"MappingProxyType : A read-only proxy of the original dictionary.","title":"Return value"}]}