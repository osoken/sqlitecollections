{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Overview Documentation for version: 0.9.9 sqlitecollections is a sort of containers that are backended by sqlite3 DB and are compatible with corresponding built-in collections. Since containers consume disk space instead of RAM, they can handle large amounts of data even in environments with limited RAM. Migrating from existing code using the built-in container is as simple as importing the library and changing the constructor. The elements of the container are automatically serialized and stored in the sqlite3 database, and are automatically read from the sqlite3 database and deserialized when accessed. Current version supports List (mutable sequence), Dict (mutable mapping) and Set (mutable set) and almost all methods are compatible with list, dict and set respectively. Installation pip install sqlitecollections Example import sqlitecollections as sc l = sc . List [ str ]([ \"Alice\" , \"Bob\" , \"Carol\" ]) print ( l [ 2 ]) #> Carol print ( len ( l )) #> 3 l . append ( \"Dave\" ) print ( l . index ( \"Bob\" )) #> 1 print ( l . index ( \"Dave\" )) #> 3 d = sc . Dict [ str , str ]({ \"a\" : \"Alice\" , \"b\" : \"Bob\" }) print ( d [ \"a\" ]) #> Alice d [ \"c\" ] = \"Carol\" print ( list ( d . keys ())) #> ['a', 'b', 'c'] print ( list ( d . values ())) #> ['Alice', 'Bob', 'Carol'] s = sc . Set [ str ]([ \"Alice\" , \"Bob\" , \"Carol\" , \"Dave\" ]) print ( \"Ellen\" in s ) #> False print ( \"Alice\" in s ) #> True print ( list ( s . intersection ([ \"Alice\" , \"Carol\" ]))) #> ['Alice', 'Carol'] In the above example, a temporary file is created every time a container is created, and the elements are written to the sqlite3 database created on the file, thus consuming very little RAM. If you want to reuse the container you created, you can create it by specifying the file path and table name of the sqlite3 database. import sqlitecollections as sc l = sc . List [ str ]([ \"Alice\" , \"Bob\" , \"Carol\" ], connection = \"path/to/file.db\" , table_name = \"list_example\" ) l . append ( \"Dave\" ) exit () When you load it, you can restore the previous state by specifying the same file path and table name. import sqlitecollections as sc l = sc . List [ str ]( connection = \"path/to/file.db\" , table_name = \"list_example\" ) print ( len ( l )) #> 4 print ( list ( l )) #> ['Alice', 'Bob', 'Carol', 'Dave'] Pros and cons for built-in containers Pros Save memory usage. Once the database is built, loading time is almost zero, even for huge data. Cons Each operation has the overhead of serialize/deserialize. Some operations are incompatible and unavailable. For example, directly rewriting the mutable elements of a container.","title":"Overview"},{"location":"#overview","text":"Documentation for version: 0.9.9 sqlitecollections is a sort of containers that are backended by sqlite3 DB and are compatible with corresponding built-in collections. Since containers consume disk space instead of RAM, they can handle large amounts of data even in environments with limited RAM. Migrating from existing code using the built-in container is as simple as importing the library and changing the constructor. The elements of the container are automatically serialized and stored in the sqlite3 database, and are automatically read from the sqlite3 database and deserialized when accessed. Current version supports List (mutable sequence), Dict (mutable mapping) and Set (mutable set) and almost all methods are compatible with list, dict and set respectively.","title":"Overview"},{"location":"#installation","text":"pip install sqlitecollections","title":"Installation"},{"location":"#example","text":"import sqlitecollections as sc l = sc . List [ str ]([ \"Alice\" , \"Bob\" , \"Carol\" ]) print ( l [ 2 ]) #> Carol print ( len ( l )) #> 3 l . append ( \"Dave\" ) print ( l . index ( \"Bob\" )) #> 1 print ( l . index ( \"Dave\" )) #> 3 d = sc . Dict [ str , str ]({ \"a\" : \"Alice\" , \"b\" : \"Bob\" }) print ( d [ \"a\" ]) #> Alice d [ \"c\" ] = \"Carol\" print ( list ( d . keys ())) #> ['a', 'b', 'c'] print ( list ( d . values ())) #> ['Alice', 'Bob', 'Carol'] s = sc . Set [ str ]([ \"Alice\" , \"Bob\" , \"Carol\" , \"Dave\" ]) print ( \"Ellen\" in s ) #> False print ( \"Alice\" in s ) #> True print ( list ( s . intersection ([ \"Alice\" , \"Carol\" ]))) #> ['Alice', 'Carol'] In the above example, a temporary file is created every time a container is created, and the elements are written to the sqlite3 database created on the file, thus consuming very little RAM. If you want to reuse the container you created, you can create it by specifying the file path and table name of the sqlite3 database. import sqlitecollections as sc l = sc . List [ str ]([ \"Alice\" , \"Bob\" , \"Carol\" ], connection = \"path/to/file.db\" , table_name = \"list_example\" ) l . append ( \"Dave\" ) exit () When you load it, you can restore the previous state by specifying the same file path and table name. import sqlitecollections as sc l = sc . List [ str ]( connection = \"path/to/file.db\" , table_name = \"list_example\" ) print ( len ( l )) #> 4 print ( list ( l )) #> ['Alice', 'Bob', 'Carol', 'Dave']","title":"Example"},{"location":"#pros-and-cons-for-built-in-containers","text":"","title":"Pros and cons for built-in containers"},{"location":"#pros","text":"Save memory usage. Once the database is built, loading time is almost zero, even for huge data.","title":"Pros"},{"location":"#cons","text":"Each operation has the overhead of serialize/deserialize. Some operations are incompatible and unavailable. For example, directly rewriting the mutable elements of a container.","title":"Cons"},{"location":"benchmark/","text":"py36 dict timing subject builtin sqlitecollections ratio clear 0.00363 0.0074 2.03972 __contains__ 0.00365 0.00365 0.9982 copy 0.0037 0.06666 18.02148 __delitem__ 0.0038 0.00847 2.23129 get 0.00367 0.00369 1.00693 get (unsuccessful search) 0.0038 0.00372 0.97945 __getitem__ 0.00366 0.00371 1.01214 __init__ 0.00377 0.04691 12.43576 items 0.00422 0.01106 2.62174 __iter__ 0.00392 0.00773 1.9721 keys 0.0039 0.00773 1.98158 __len__ 0.00371 0.00378 1.01817 __contains__ (unsuccessful search) 0.00385 0.00378 0.98039 pop 0.0039 0.00748 1.92131 pop (unsuccessful search) 0.00391 0.00601 1.53688 popitem 0.00399 0.00748 1.87475 setdefault (unsuccessful search) 0.0039 0.00659 1.69047 setdefault 0.00415 0.0062 1.49247 __setitem__ (add new item) 0.0039 0.00733 1.87924 __setitem__ (replace) 0.0039 0.00828 2.12437 update 0.00391 0.00813 2.07801 update (many) 0.00463 0.04191 9.05382 values 0.00379 0.0074 1.95399 approximate memory usage subject builtin sqlitecollections ratio clear 0.0 0.0 1.0 __contains__ 0.0 0.0 1.0 copy 0.04688 0.01172 0.25 __delitem__ 0.0 0.0 1.0 get 0.0 0.0 1.0 get (unsuccessful search) 0.0 0.0 1.0 __getitem__ 0.0 0.0 1.0 __init__ 0.0 0.0 1.0 items 0.22656 0.28125 1.24138 __iter__ 0.0 0.0 1.0 keys 0.0 0.0 1.0 __len__ 0.0 0.0 1.0 __contains__ (unsuccessful search) 0.0 0.0 1.0 pop 0.0 0.0 1.0 pop (unsuccessful search) 0.0 0.0 1.0 popitem 0.0 0.0 1.0 setdefault (unsuccessful search) 0.0 0.0 1.0 setdefault 0.0 0.0 1.0 __setitem__ (add new item) 0.0 0.0 1.0 __setitem__ (replace) 0.0 0.0 1.0 update 0.0 0.0 1.0 update (many) 0.19922 0.0 0.0 values 0.125 0.0 0.0 list timing subject builtin sqlitecollections ratio __add__ 0.0038 0.03949 10.39313 append 0.00382 0.00836 2.18764 clear 0.0038 0.00893 2.35128 __contains__ 0.00408 0.00386 0.94645 copy 0.00381 0.04056 10.6588 count 0.00385 0.00393 1.02088 __init__ 0.00385 0.02726 7.07063 __delitem__ 0.00402 0.02154 5.36535 __delitem__ (slice) 0.00404 0.01649 4.0866 __delitem__ (slice with skip) 0.00381 0.01634 4.29127 extend 0.00384 0.00804 2.09517 __getitem__ 0.0038 0.00382 1.00388 __getitem__ (slice) 0.00378 0.02022 5.35303 __getitem__ (slice with skip) 0.00377 0.01918 5.0921 __iadd__ 0.00378 0.01094 2.89162 __imult__ 0.00392 0.02264 5.77953 index 0.00378 0.00405 1.07091 index (unsuccessful search) 0.00378 0.00391 1.03628 insert 0.0039 0.01415 3.62988 __len__ 0.00377 0.00386 1.02373 __mult__ 0.00376 0.05951 15.81665 __contains__ (unsuccessful search) 0.00373 0.00387 1.03741 pop 0.00383 0.01192 3.1133 remove 0.00383 0.01499 3.91892 __setitem__ 0.00383 0.00857 2.23852 __setitem__ (slice) 0.00384 0.80743 210.46511 __setitem__ (slice with skip) 0.00385 0.00915 2.37851 sort 0.00434 0.08783 20.24305 approximate memory usage subject builtin sqlitecollections ratio __add__ 0.0 0.0 1.0 append 0.0 0.0 1.0 clear 0.0 0.0 1.0 __contains__ 0.0 0.0 1.0 copy 0.0 0.0 1.0 count 0.0 0.0 1.0 __init__ 0.0 0.0 1.0 __delitem__ 0.0 0.0 1.0 __delitem__ (slice) 0.0 0.0 1.0 __delitem__ (slice with skip) 0.0 0.0 1.0 extend 0.0 0.0 1.0 __getitem__ 0.0 0.0 1.0 __getitem__ (slice) 0.0 0.0 1.0 __getitem__ (slice with skip) 0.0 0.0 1.0 __iadd__ 0.0 0.0 1.0 __imult__ 0.0 0.0 1.0 index 0.0 0.0 1.0 index (unsuccessful search) 0.0 0.0 1.0 insert 0.0 0.0 1.0 __len__ 0.0 0.0 1.0 __mult__ 0.0 0.01562 inf __contains__ (unsuccessful search) 0.0 0.0 1.0 pop 0.0 0.0 1.0 remove 0.0 0.0 1.0 __setitem__ 0.0 0.0 1.0 __setitem__ (slice) 0.0 0.0 1.0 __setitem__ (slice with skip) 0.0 0.0 1.0 sort 0.0 0.82031 inf set timing subject builtin sqlitecollections ratio add (existing item) 0.00382 0.00588 1.53862 add (new item) 0.00383 0.00712 1.85838 __and__ 0.00386 0.02425 6.29021 clear 0.00383 0.00704 1.83496 __contains__ 0.00368 0.00379 1.02966 copy 0.00382 0.0191 5.00449 difference 0.00379 0.01949 5.13585 discard 0.00452 0.00769 1.70151 discard (no changes) 0.00374 0.00638 1.70562 __ge__ 0.00377 0.00375 0.99359 __ge__ (not greater than or equals to) 0.00385 0.00396 1.02927 __gt__ 0.00384 0.00763 1.98734 __gt__ (not greater than) 0.00387 0.0198 5.12059 __iand__ 0.00392 0.00935 2.38403 __init__ 0.004 0.01828 4.56421 intersection 0.0039 0.02454 6.28798 intersection_update 0.00389 0.01342 3.45114 __ior__ 0.00402 0.00809 2.0146 isdisjoint 0.00386 0.00381 0.98626 isdisjoint (not disjoint) 0.00393 0.00381 0.9712 issubset 0.00384 0.04193 10.91179 issubset (not subset) 0.00376 0.02027 5.39294 issuperset 0.00378 0.0117 3.09392 issuperset (not superset) 0.004 0.00423 1.05737 __ixor__ 0.00391 0.02868 7.33628 __le__ 0.00377 0.00461 1.22163 __le__ (not less than or equals to) 0.00395 0.00403 1.01883 __len__ 0.00382 0.0039 1.02104 __lt__ 0.00392 0.00483 1.23464 __lt__ (not less than) 0.00388 0.00386 0.99281 __contains__ (unsuccessful search) 0.00374 0.00378 1.01004 __or__ 0.00382 0.02332 6.10726 pop 0.00382 0.00762 1.99394 remove 0.00378 0.00804 2.12343 __sub__ 0.00372 0.01996 5.361 symmetric_difference 0.00373 0.04705 12.61027 symmetric_difference_update 0.00373 0.02787 7.47875 union 0.00378 0.02127 5.62213 update 0.00373 0.00794 2.12789 __xor__ 0.00377 0.04659 12.36522 approximate memory usage subject builtin sqlitecollections ratio add (existing item) 0.0 0.0 1.0 add (new item) 0.0 0.0 1.0 __and__ 0.0 0.00391 inf clear 0.0 0.0 1.0 __contains__ 0.0 0.0 1.0 copy 0.0 0.0 1.0 difference 0.0 0.0 1.0 discard 0.0 0.0 1.0 discard (no changes) 0.0 0.0 1.0 __ge__ 0.0 0.0 1.0 __ge__ (not greater than or equals to) 0.0 0.0 1.0 __gt__ 0.0 0.0 1.0 __gt__ (not greater than) 0.0 0.0 1.0 __iand__ 0.0 0.0 1.0 __init__ 0.0 0.0 1.0 intersection 0.0 0.00781 inf intersection_update 0.0 0.0 1.0 __ior__ 0.0 0.0 1.0 isdisjoint 0.0 0.0 1.0 isdisjoint (not disjoint) 0.0 0.0 1.0 issubset 0.0 0.00391 inf issubset (not subset) 0.0 0.0 1.0 issuperset 0.0 0.0 1.0 issuperset (not superset) 0.0 0.0 1.0 __ixor__ 0.0 0.0 1.0 __le__ 0.0 0.0 1.0 __le__ (not less than or equals to) 0.0 0.0 1.0 __len__ 0.0 0.0 1.0 __lt__ 0.0 0.0 1.0 __lt__ (not less than) 0.0 0.0 1.0 __contains__ (unsuccessful search) 0.0 0.0 1.0 __or__ 0.0 0.0 1.0 pop 0.00391 0.0 0.0 remove 0.0 0.0 1.0 __sub__ 0.0 0.0 1.0 symmetric_difference 0.0 0.00781 inf symmetric_difference_update 0.0 0.0 1.0 union 0.0 0.0 1.0 update 0.0 0.0 1.0 __xor__ 0.0 0.00391 inf py37 dict timing subject builtin sqlitecollections ratio clear 0.00429 0.01004 2.33851 __contains__ 0.00468 0.00475 1.01522 copy 0.00473 0.09151 19.33211 __delitem__ 0.00458 0.00898 1.9619 get 0.00558 0.00465 0.83358 get (unsuccessful search) 0.00477 0.00412 0.86341 __getitem__ 0.00422 0.00475 1.12503 __init__ 0.0047 0.06785 14.43499 items 0.00564 0.01609 2.85422 __iter__ 0.00508 0.00981 1.92931 keys 0.00476 0.01023 2.14996 __len__ 0.00458 0.00462 1.00816 __contains__ (unsuccessful search) 0.00455 0.00456 1.00387 pop 0.00455 0.00929 2.0409 pop (unsuccessful search) 0.00447 0.00647 1.44748 popitem 0.00409 0.00822 2.01016 setdefault (unsuccessful search) 0.00415 0.00705 1.69881 setdefault 0.00402 0.00653 1.62619 __setitem__ (add new item) 0.00419 0.00841 2.0075 __setitem__ (replace) 0.00428 0.00945 2.20667 update 0.00397 0.00961 2.42173 update (many) 0.00578 0.05889 10.19187 values 0.00444 0.00872 1.96401 approximate memory usage subject builtin sqlitecollections ratio clear 0.0 0.0 1.0 __contains__ 0.0 0.0 1.0 copy 0.0625 0.0 0.0 __delitem__ 0.0 0.0 1.0 get 0.0 0.0 1.0 get (unsuccessful search) 0.0 0.0 1.0 __getitem__ 0.0 0.0 1.0 __init__ 0.0 0.0 1.0 items 0.11328 0.14453 1.27586 __iter__ 0.0 0.0 1.0 keys 0.0 0.0 1.0 __len__ 0.0 0.0 1.0 __contains__ (unsuccessful search) 0.0 0.0 1.0 pop 0.0 0.0 1.0 pop (unsuccessful search) 0.0 0.0 1.0 popitem 0.0 0.0 1.0 setdefault (unsuccessful search) 0.0 0.0 1.0 setdefault 0.0 0.0 1.0 __setitem__ (add new item) 0.0 0.0 1.0 __setitem__ (replace) 0.0 0.0 1.0 update 0.0 0.0 1.0 update (many) 0.00391 0.0 0.0 values 0.125 0.0 0.0 list timing subject builtin sqlitecollections ratio __add__ 0.00475 0.0511 10.76323 append 0.00526 0.0094 1.78778 clear 0.00457 0.01101 2.40834 __contains__ 0.005 0.00458 0.91651 copy 0.00478 0.04662 9.75897 count 0.0048 0.00488 1.01616 __init__ 0.00412 0.03085 7.48325 __delitem__ 0.00446 0.01352 3.03093 __delitem__ (slice) 0.00469 0.01798 3.83526 __delitem__ (slice with skip) 0.00456 0.0187 4.09968 extend 0.00446 0.00957 2.148 __getitem__ 0.00433 0.0049 1.13146 __getitem__ (slice) 0.00441 0.02743 6.22477 __getitem__ (slice with skip) 0.00447 0.01606 3.59001 __iadd__ 0.00432 0.00872 2.01987 __imult__ 0.0043 0.02699 6.27285 index 0.00429 0.00567 1.32082 index (unsuccessful search) 0.0047 0.00608 1.29405 insert 0.00429 0.01452 3.38004 __len__ 0.00437 0.00435 0.9943 __mult__ 0.00458 0.08011 17.48066 __contains__ (unsuccessful search) 0.00417 0.00448 1.07324 pop 0.00423 0.01381 3.26775 remove 0.00453 0.01821 4.02203 __setitem__ 0.00443 0.00834 1.88314 __setitem__ (slice) 0.00441 0.77235 175.03121 __setitem__ (slice with skip) 0.00415 0.00907 2.18758 sort 0.00419 0.10818 25.80808 approximate memory usage subject builtin sqlitecollections ratio __add__ 0.0 0.0 1.0 append 0.0 0.0 1.0 clear 0.0 0.0 1.0 __contains__ 0.0 0.0 1.0 copy 0.0 0.0 1.0 count 0.0 0.0 1.0 __init__ 0.0 0.0 1.0 __delitem__ 0.0 0.0 1.0 __delitem__ (slice) 0.0 0.0 1.0 __delitem__ (slice with skip) 0.0 0.0 1.0 extend 0.0 0.0 1.0 __getitem__ 0.0 0.0 1.0 __getitem__ (slice) 0.0 0.0 1.0 __getitem__ (slice with skip) 0.0 0.0 1.0 __iadd__ 0.0 0.0 1.0 __imult__ 0.0 0.0 1.0 index 0.0 0.0 1.0 index (unsuccessful search) 0.0 0.0 1.0 insert 0.0 0.0 1.0 __len__ 0.0 0.0 1.0 __mult__ 0.0 0.0 1.0 __contains__ (unsuccessful search) 0.0 0.0 1.0 pop 0.0 0.0 1.0 remove 0.0 0.0 1.0 __setitem__ 0.0 0.0 1.0 __setitem__ (slice) 0.0 0.0 1.0 __setitem__ (slice with skip) 0.0 0.0 1.0 sort 0.0 0.78516 inf set timing subject builtin sqlitecollections ratio add (existing item) 0.00382 0.00646 1.69155 add (new item) 0.00448 0.00823 1.8385 __and__ 0.00421 0.02887 6.85895 clear 0.00424 0.0083 1.95877 __contains__ 0.0047 0.00448 0.95374 copy 0.00436 0.02402 5.51593 difference 0.00479 0.02438 5.09103 discard 0.00461 0.00954 2.07046 discard (no changes) 0.00441 0.00669 1.51802 __ge__ 0.00443 0.00467 1.0531 __ge__ (not greater than or equals to) 0.00491 0.0044 0.89667 __gt__ 0.00415 0.00911 2.19483 __gt__ (not greater than) 0.00434 0.02447 5.63917 __iand__ 0.00503 0.01273 2.53252 __init__ 0.00456 0.02735 5.9929 intersection 0.00465 0.03383 7.27105 intersection_update 0.00436 0.01246 2.85959 __ior__ 0.00465 0.01119 2.40688 isdisjoint 0.00464 0.00466 1.00499 isdisjoint (not disjoint) 0.00455 0.00497 1.09146 issubset 0.00495 0.06065 12.26387 issubset (not subset) 0.00478 0.03544 7.40844 issuperset 0.00483 0.01587 3.28833 issuperset (not superset) 0.00491 0.00501 1.02017 __ixor__ 0.00462 0.0369 7.9786 __le__ 0.00513 0.00584 1.13898 __le__ (not less than or equals to) 0.00491 0.00496 1.01055 __len__ 0.00446 0.00481 1.0787 __lt__ 0.00453 0.0056 1.23647 __lt__ (not less than) 0.00463 0.00445 0.9614 __contains__ (unsuccessful search) 0.00451 0.00474 1.05074 __or__ 0.00485 0.02828 5.82874 pop 0.00473 0.00878 1.85705 remove 0.00451 0.00958 2.12257 __sub__ 0.00477 0.03228 6.77103 symmetric_difference 0.00563 0.06752 11.99566 symmetric_difference_update 0.00546 0.03943 7.22214 union 0.0048 0.0299 6.23205 update 0.00552 0.0115 2.08282 __xor__ 0.00454 0.06459 14.21504 approximate memory usage subject builtin sqlitecollections ratio add (existing item) 0.0 0.0 1.0 add (new item) 0.0 0.0 1.0 __and__ 0.0 0.0 1.0 clear 0.0 0.0 1.0 __contains__ 0.0 0.0 1.0 copy 0.0 0.0 1.0 difference 0.0 0.0 1.0 discard 0.0 0.0 1.0 discard (no changes) 0.0 0.0 1.0 __ge__ 0.0 0.0 1.0 __ge__ (not greater than or equals to) 0.0 0.0 1.0 __gt__ 0.0 0.0 1.0 __gt__ (not greater than) 0.0 0.0 1.0 __iand__ 0.0 0.0 1.0 __init__ 0.0 0.0 1.0 intersection 0.0 0.0 1.0 intersection_update 0.0 0.0 1.0 __ior__ 0.0 0.0 1.0 isdisjoint 0.0 0.0 1.0 isdisjoint (not disjoint) 0.0 0.0 1.0 issubset 0.0 0.0 1.0 issubset (not subset) 0.0 0.0 1.0 issuperset 0.0 0.0 1.0 issuperset (not superset) 0.0 0.0 1.0 __ixor__ 0.0 0.0 1.0 __le__ 0.0 0.0 1.0 __le__ (not less than or equals to) 0.0 0.0 1.0 __len__ 0.0 0.0 1.0 __lt__ 0.0 0.0 1.0 __lt__ (not less than) 0.0 0.0 1.0 __contains__ (unsuccessful search) 0.0 0.0 1.0 __or__ 0.0 0.0 1.0 pop 0.0 0.0 1.0 remove 0.0 0.0 1.0 __sub__ 0.0 0.0 1.0 symmetric_difference 0.0 0.0 1.0 symmetric_difference_update 0.0 0.0 1.0 union 0.0 0.0 1.0 update 0.0 0.0 1.0 __xor__ 0.0 0.0 1.0 py38 dict timing subject builtin sqlitecollections ratio clear 0.00331 0.00653 1.97271 __contains__ 0.00334 0.00332 0.9954 copy 0.00332 0.04734 14.24503 __delitem__ 0.00334 0.00629 1.88457 get 0.00329 0.00329 1.00045 get (unsuccessful search) 0.00325 0.00332 1.02045 __getitem__ 0.00331 0.0033 0.99761 __init__ 0.00341 0.03754 11.01653 items 0.00366 0.00942 2.57364 __iter__ 0.00341 0.00654 1.91716 keys 0.0034 0.00661 1.94427 __len__ 0.00337 0.00379 1.12553 __contains__ (unsuccessful search) 0.00328 0.00335 1.02092 pop 0.00337 0.00624 1.85252 pop (unsuccessful search) 0.00339 0.00516 1.52322 popitem 0.0034 0.00645 1.89878 reversed 0.00328 0.00639 1.94527 setdefault (unsuccessful search) 0.00338 0.00525 1.55138 setdefault 0.00341 0.006 1.76043 __setitem__ (add new item) 0.00344 0.0063 1.83358 __setitem__ (replace) 0.00344 0.00703 2.04187 update 0.00343 0.00633 1.84357 update (many) 0.00427 0.03485 8.16904 values 0.00349 0.0064 1.83236 approximate memory usage subject builtin sqlitecollections ratio clear 0.0 0.0 1.0 __contains__ 0.0 0.0 1.0 copy 0.06641 0.0 0.0 __delitem__ 0.0 0.0 1.0 get 0.0 0.0 1.0 get (unsuccessful search) 0.0 0.0 1.0 __getitem__ 0.0 0.0 1.0 __init__ 0.0 0.0 1.0 items 0.03125 0.13672 4.375 __iter__ 0.0 0.08594 inf keys 0.0 0.0 1.0 __len__ 0.0 0.0 1.0 __contains__ (unsuccessful search) 0.0 0.0 1.0 pop 0.0 0.0 1.0 pop (unsuccessful search) 0.0 0.0 1.0 popitem 0.0 0.0 1.0 reversed 0.0 0.0 1.0 setdefault (unsuccessful search) 0.0 0.0 1.0 setdefault 0.0 0.0 1.0 __setitem__ (add new item) 0.0 0.0 1.0 __setitem__ (replace) 0.0 0.0 1.0 update 0.0 0.0 1.0 update (many) 0.03125 0.0 0.0 values 0.125 0.0 0.0 list timing subject builtin sqlitecollections ratio __add__ 0.00349 0.02924 8.38856 append 0.00345 0.00567 1.64239 clear 0.00337 0.00589 1.74873 __contains__ 0.00344 0.00363 1.05626 copy 0.00341 0.02834 8.3093 count 0.00338 0.00345 1.02137 __init__ 0.00344 0.0185 5.37754 __delitem__ 0.00347 0.00968 2.79074 __delitem__ (slice) 0.00339 0.01344 3.96353 __delitem__ (slice with skip) 0.00339 0.01342 3.95734 extend 0.00344 0.00559 1.62524 __getitem__ 0.00341 0.00343 1.00752 __getitem__ (slice) 0.00339 0.01614 4.75603 __getitem__ (slice with skip) 0.0034 0.01021 3.00673 __iadd__ 0.00341 0.00578 1.69366 __imult__ 0.00342 0.01852 5.42201 index 0.00341 0.00354 1.03958 index (unsuccessful search) 0.00336 0.00363 1.08124 insert 0.00345 0.0112 3.24713 __len__ 0.0034 0.00335 0.98736 __mult__ 0.0034 0.04695 13.79959 __contains__ (unsuccessful search) 0.00337 0.00341 1.01338 pop 0.00341 0.00959 2.81238 remove 0.00341 0.01165 3.41821 __setitem__ 0.00346 0.00585 1.69105 __setitem__ (slice) 0.00345 0.64812 188.06562 __setitem__ (slice with skip) 0.00344 0.0066 1.91876 sort 0.00344 0.08369 24.3246 approximate memory usage subject builtin sqlitecollections ratio __add__ 0.0 0.0 1.0 append 0.0 0.0 1.0 clear 0.0 0.0 1.0 __contains__ 0.0 0.0 1.0 copy 0.0 0.0 1.0 count 0.0 0.0 1.0 __init__ 0.0 0.0 1.0 __delitem__ 0.0 0.0 1.0 __delitem__ (slice) 0.0 0.0 1.0 __delitem__ (slice with skip) 0.00391 0.0 0.0 extend 0.0 0.0 1.0 __getitem__ 0.0 0.0 1.0 __getitem__ (slice) 0.0 0.0 1.0 __getitem__ (slice with skip) 0.0 0.0 1.0 __iadd__ 0.0 0.0 1.0 __imult__ 0.0 0.0 1.0 index 0.0 0.0 1.0 index (unsuccessful search) 0.0 0.0 1.0 insert 0.0 0.0 1.0 __len__ 0.0 0.0 1.0 __mult__ 0.0 0.01172 inf __contains__ (unsuccessful search) 0.0 0.0 1.0 pop 0.0 0.0 1.0 remove 0.0 0.0 1.0 __setitem__ 0.0 0.0 1.0 __setitem__ (slice) 0.0 0.0 1.0 __setitem__ (slice with skip) 0.0 0.0 1.0 sort 0.0 0.73828 inf set timing subject builtin sqlitecollections ratio add (existing item) 0.00338 0.00501 1.48191 add (new item) 0.00342 0.00615 1.79768 __and__ 0.00334 0.0198 5.92045 clear 0.00338 0.00605 1.78807 __contains__ 0.00339 0.00335 0.98768 copy 0.00334 0.01473 4.40836 difference 0.00335 0.01532 4.57213 discard 0.00341 0.00653 1.91669 discard (no changes) 0.00334 0.00501 1.50178 __ge__ 0.00336 0.00335 0.99783 __ge__ (not greater than or equals to) 0.00336 0.00338 1.00399 __gt__ 0.00337 0.0059 1.75053 __gt__ (not greater than) 0.00339 0.01723 5.08855 __iand__ 0.00334 0.00762 2.27775 __init__ 0.00338 0.01537 4.54662 intersection 0.0034 0.02012 5.91826 intersection_update 0.00338 0.00802 2.37221 __ior__ 0.0034 0.00634 1.86441 isdisjoint 0.00341 0.00338 0.99026 isdisjoint (not disjoint) 0.00336 0.00344 1.0249 issubset 0.00336 0.03906 11.62506 issubset (not subset) 0.00346 0.01857 5.3741 issuperset 0.00342 0.01001 2.92389 issuperset (not superset) 0.00339 0.00337 0.99232 __ixor__ 0.00339 0.02416 7.12351 __le__ 0.00349 0.00404 1.15962 __le__ (not less than or equals to) 0.00338 0.00338 0.99895 __len__ 0.00341 0.00337 0.98995 __lt__ 0.00341 0.00413 1.21232 __lt__ (not less than) 0.00331 0.00335 1.01239 __contains__ (unsuccessful search) 0.00333 0.00338 1.01506 __or__ 0.00339 0.01652 4.8697 pop 0.00337 0.00585 1.73362 remove 0.0034 0.00606 1.78358 __sub__ 0.0034 0.01494 4.40013 symmetric_difference 0.00339 0.0397 11.70919 symmetric_difference_update 0.0034 0.02396 7.03801 union 0.00336 0.01665 4.95069 update 0.00343 0.00616 1.7932 __xor__ 0.00353 0.03941 11.18048 approximate memory usage subject builtin sqlitecollections ratio add (existing item) 0.0 0.0 1.0 add (new item) 0.0 0.0 1.0 __and__ 0.0 0.0 1.0 clear 0.0 0.0 1.0 __contains__ 0.0 0.0 1.0 copy 0.0 0.0 1.0 difference 0.0 0.0 1.0 discard 0.0 0.0 1.0 discard (no changes) 0.0 0.0 1.0 __ge__ 0.0 0.0 1.0 __ge__ (not greater than or equals to) 0.0 0.0 1.0 __gt__ 0.0 0.0 1.0 __gt__ (not greater than) 0.0 0.0 1.0 __iand__ 0.0 0.0 1.0 __init__ 0.0 0.0 1.0 intersection 0.0 0.0 1.0 intersection_update 0.0 0.0 1.0 __ior__ 0.0 0.0 1.0 isdisjoint 0.0 0.0 1.0 isdisjoint (not disjoint) 0.0 0.0 1.0 issubset 0.0 0.0 1.0 issubset (not subset) 0.0 0.0 1.0 issuperset 0.0 0.0 1.0 issuperset (not superset) 0.0 0.0 1.0 __ixor__ 0.0 0.0 1.0 __le__ 0.0 0.0 1.0 __le__ (not less than or equals to) 0.0 0.0 1.0 __len__ 0.0 0.0 1.0 __lt__ 0.0 0.0 1.0 __lt__ (not less than) 0.0 0.0 1.0 __contains__ (unsuccessful search) 0.0 0.0 1.0 __or__ 0.0 0.0 1.0 pop 0.0 0.0 1.0 remove 0.0 0.0 1.0 __sub__ 0.0 0.0 1.0 symmetric_difference 0.0 0.0 1.0 symmetric_difference_update 0.0 0.0 1.0 union 0.0 0.0 1.0 update 0.0 0.0 1.0 __xor__ 0.0 0.0 1.0 py39 dict timing subject builtin sqlitecollections ratio clear 0.00476 0.00824 1.73278 __contains__ 0.00482 0.00476 0.98637 copy 0.00501 0.05868 11.70617 __delitem__ 0.00485 0.00835 1.72081 get 0.00489 0.0048 0.98131 get (unsuccessful search) 0.00488 0.00482 0.98789 __getitem__ 0.00488 0.0049 1.0025 __init__ 0.00491 0.04518 9.20748 __ior__ 0.00489 0.00844 1.72589 __ior__ (many) 0.00628 0.0422 6.72311 items 0.00525 0.01233 2.35071 __iter__ 0.0049 0.00875 1.78783 keys 0.00486 0.00904 1.86031 __len__ 0.00483 0.00481 0.99525 __contains__ (unsuccessful search) 0.00489 0.00484 0.98886 __or__ 0.00486 0.06065 12.47129 __or__ (many) 0.00646 0.11232 17.3848 pop 0.00497 0.00933 1.87602 pop (unsuccessful search) 0.00492 0.00703 1.42766 popitem 0.00491 0.0089 1.81399 reversed 0.00618 0.00856 1.3844 setdefault (unsuccessful search) 0.00484 0.0071 1.46499 setdefault 0.00483 0.00707 1.46332 __setitem__ (add new item) 0.00495 0.00834 1.68388 __setitem__ (replace) 0.00492 0.00893 1.8168 update 0.00503 0.00833 1.65571 update (many) 0.00589 0.04279 7.26654 values 0.00479 0.00857 1.78913 approximate memory usage subject builtin sqlitecollections ratio clear 0.0 0.0 1.0 __contains__ 0.0 0.0 1.0 copy 0.0 0.0 1.0 __delitem__ 0.0 0.0 1.0 get 0.0 0.0 1.0 get (unsuccessful search) 0.0 0.0 1.0 __getitem__ 0.0 0.0 1.0 __init__ 0.0 0.0 1.0 __ior__ 0.0 0.0 1.0 __ior__ (many) 0.11328 0.0 0.0 items 0.10938 0.23438 2.14286 __iter__ 0.0 0.0 1.0 keys 0.0 0.0 1.0 __len__ 0.0 0.0 1.0 __contains__ (unsuccessful search) 0.0 0.0 1.0 __or__ 0.0 0.0 1.0 __or__ (many) 0.00391 0.0 0.0 pop 0.0 0.0 1.0 pop (unsuccessful search) 0.0 0.0 1.0 popitem 0.0 0.0 1.0 reversed 0.0 0.0 1.0 setdefault (unsuccessful search) 0.0 0.0 1.0 setdefault 0.0 0.0 1.0 __setitem__ (add new item) 0.0 0.0 1.0 __setitem__ (replace) 0.0 0.0 1.0 update 0.0 0.0 1.0 update (many) 0.0 0.0 1.0 values 0.0 0.0 1.0 list timing subject builtin sqlitecollections ratio __add__ 0.00489 0.03707 7.57677 append 0.00496 0.00771 1.55544 clear 0.00482 0.00817 1.69352 __contains__ 0.00487 0.00493 1.01117 copy 0.00491 0.03455 7.03899 count 0.00484 0.00491 1.01648 __init__ 0.0049 0.02544 5.18872 __delitem__ 0.0049 0.01248 2.54816 __delitem__ (slice) 0.00487 0.01665 3.42145 __delitem__ (slice with skip) 0.00488 0.01656 3.39052 extend 0.00491 0.00771 1.57049 __getitem__ 0.0049 0.00483 0.98547 __getitem__ (slice) 0.0049 0.02053 4.1933 __getitem__ (slice with skip) 0.00485 0.01295 2.66979 __iadd__ 0.00492 0.00774 1.57284 __imult__ 0.00486 0.02314 4.75685 index 0.00481 0.00513 1.06499 index (unsuccessful search) 0.00484 0.00514 1.06192 insert 0.00492 0.01415 2.87754 __len__ 0.00485 0.00485 1.00044 __mult__ 0.00491 0.05802 11.82526 __contains__ (unsuccessful search) 0.00489 0.00496 1.01421 pop 0.00498 0.01224 2.45672 remove 0.00486 0.01435 2.95026 __setitem__ 0.00495 0.00811 1.6397 __setitem__ (slice) 0.00495 0.74917 151.22877 __setitem__ (slice with skip) 0.00487 0.00841 1.72683 sort 0.00496 0.11201 22.57322 approximate memory usage subject builtin sqlitecollections ratio __add__ 0.0 0.0 1.0 append 0.0 0.0 1.0 clear 0.0 0.0 1.0 __contains__ 0.0 0.0 1.0 copy 0.0 0.0 1.0 count 0.0 0.0 1.0 __init__ 0.0 0.0 1.0 __delitem__ 0.0 0.0 1.0 __delitem__ (slice) 0.0 0.0 1.0 __delitem__ (slice with skip) 0.0 0.0 1.0 extend 0.0 0.0 1.0 __getitem__ 0.0 0.0 1.0 __getitem__ (slice) 0.0 0.0 1.0 __getitem__ (slice with skip) 0.0 0.0 1.0 __iadd__ 0.0 0.0 1.0 __imult__ 0.0 0.0 1.0 index 0.0 0.0 1.0 index (unsuccessful search) 0.0 0.0 1.0 insert 0.0 0.0 1.0 __len__ 0.0 0.0 1.0 __mult__ 0.0 0.00781 inf __contains__ (unsuccessful search) 0.0 0.0 1.0 pop 0.0 0.0 1.0 remove 0.0 0.0 1.0 __setitem__ 0.0 0.0 1.0 __setitem__ (slice) 0.0 0.0 1.0 __setitem__ (slice with skip) 0.0 0.0 1.0 sort 0.0 0.68359 inf set timing subject builtin sqlitecollections ratio add (existing item) 0.00562 0.00745 1.32579 add (new item) 0.00502 0.00813 1.61985 __and__ 0.0051 0.02467 4.83758 clear 0.00482 0.00793 1.64504 __contains__ 0.0048 0.00477 0.99375 copy 0.00484 0.01997 4.12639 difference 0.00479 0.01911 3.98584 discard 0.00485 0.00796 1.6436 discard (no changes) 0.00489 0.00653 1.33522 __ge__ 0.00486 0.00476 0.98016 __ge__ (not greater than or equals to) 0.00475 0.00482 1.0144 __gt__ 0.00483 0.00809 1.6756 __gt__ (not greater than) 0.00483 0.02119 4.38659 __iand__ 0.00486 0.01066 2.19231 __init__ 0.00479 0.0194 4.05307 intersection 0.00474 0.02424 5.11281 intersection_update 0.0048 0.01133 2.36028 __ior__ 0.00483 0.00879 1.82045 isdisjoint 0.00481 0.00472 0.98223 isdisjoint (not disjoint) 0.00476 0.00474 0.99588 issubset 0.00476 0.04902 10.28998 issubset (not subset) 0.00492 0.02415 4.91228 issuperset 0.00482 0.0128 2.65611 issuperset (not superset) 0.00478 0.00485 1.01463 __ixor__ 0.00481 0.02977 6.19205 __le__ 0.00479 0.00558 1.16559 __le__ (not less than or equals to) 0.00476 0.00472 0.99296 __len__ 0.00488 0.00489 1.0022 __lt__ 0.00486 0.0058 1.19434 __lt__ (not less than) 0.00484 0.0049 1.01145 __contains__ (unsuccessful search) 0.00479 0.00488 1.01951 __or__ 0.00523 0.0211 4.03314 pop 0.00477 0.00792 1.66051 remove 0.00514 0.00822 1.60017 __sub__ 0.00481 0.01933 4.01738 symmetric_difference 0.00484 0.04891 10.09548 symmetric_difference_update 0.00479 0.02922 6.09709 union 0.00479 0.0204 4.26068 update 0.00488 0.0093 1.90341 __xor__ 0.00473 0.04844 10.23437 approximate memory usage subject builtin sqlitecollections ratio add (existing item) 0.0 0.0 1.0 add (new item) 0.0 0.0 1.0 __and__ 0.0 0.0 1.0 clear 0.0 0.0 1.0 __contains__ 0.0 0.0 1.0 copy 0.0 0.0 1.0 difference 0.0 0.0 1.0 discard 0.0 0.0 1.0 discard (no changes) 0.0 0.0 1.0 __ge__ 0.0 0.0 1.0 __ge__ (not greater than or equals to) 0.0 0.0 1.0 __gt__ 0.0 0.0 1.0 __gt__ (not greater than) 0.0 0.0 1.0 __iand__ 0.0 0.0 1.0 __init__ 0.0 0.0 1.0 intersection 0.0 0.0 1.0 intersection_update 0.0 0.0 1.0 __ior__ 0.0 0.0 1.0 isdisjoint 0.0 0.0 1.0 isdisjoint (not disjoint) 0.0 0.0 1.0 issubset 0.0 0.0 1.0 issubset (not subset) 0.0 0.0 1.0 issuperset 0.0 0.0 1.0 issuperset (not superset) 0.0 0.0 1.0 __ixor__ 0.0 0.0 1.0 __le__ 0.0 0.0 1.0 __le__ (not less than or equals to) 0.0 0.0 1.0 __len__ 0.0 0.0 1.0 __lt__ 0.0 0.0 1.0 __lt__ (not less than) 0.0 0.0 1.0 __contains__ (unsuccessful search) 0.0 0.0 1.0 __or__ 0.0 0.0 1.0 pop 0.0 0.0 1.0 remove 0.0 0.0 1.0 __sub__ 0.0 0.0 1.0 symmetric_difference 0.0 0.0 1.0 symmetric_difference_update 0.0 0.0 1.0 union 0.0 0.0 1.0 update 0.0 0.0 1.0 __xor__ 0.0 0.0 1.0 py310 dict timing subject builtin sqlitecollections ratio clear 0.00504 0.00919 1.82418 __contains__ 0.00516 0.00482 0.9342 copy 0.00574 0.0585 10.19061 __delitem__ 0.00547 0.00919 1.67982 get 0.00483 0.00491 1.01692 get (unsuccessful search) 0.00497 0.00478 0.96113 __getitem__ 0.00476 0.00487 1.02265 __init__ 0.00482 0.04762 9.87648 __ior__ 0.00519 0.00883 1.7006 __ior__ (many) 0.00593 0.04225 7.12726 items 0.00518 0.01207 2.33005 __iter__ 0.0049 0.0088 1.79709 keys 0.00493 0.00883 1.78966 __len__ 0.00493 0.00518 1.04919 __contains__ (unsuccessful search) 0.00499 0.00473 0.94822 __or__ 0.00476 0.05979 12.55722 __or__ (many) 0.00629 0.1113 17.6942 pop 0.00483 0.00915 1.89381 pop (unsuccessful search) 0.00489 0.00755 1.54264 popitem 0.00513 0.00928 1.80926 reversed 0.0049 0.00861 1.75678 setdefault (unsuccessful search) 0.00493 0.00726 1.47153 setdefault 0.00498 0.00713 1.43117 __setitem__ (add new item) 0.00488 0.00887 1.817 __setitem__ (replace) 0.005 0.00934 1.86699 update 0.00486 0.009 1.85324 update (many) 0.00594 0.0421 7.0825 values 0.00479 0.00871 1.81788 approximate memory usage subject builtin sqlitecollections ratio clear 0.0 0.0 1.0 __contains__ 0.0 0.0 1.0 copy 0.0 0.0 1.0 __delitem__ 0.0 0.0 1.0 get 0.0 0.0 1.0 get (unsuccessful search) 0.0 0.0 1.0 __getitem__ 0.0 0.0 1.0 __init__ 0.0 0.0 1.0 __ior__ 0.0 0.0 1.0 __ior__ (many) 0.1875 0.0 0.0 items 0.0 0.21484 inf __iter__ 0.0 0.0 1.0 keys 0.0 0.0 1.0 __len__ 0.0 0.0 1.0 __contains__ (unsuccessful search) 0.0 0.0 1.0 __or__ 0.0 0.0 1.0 __or__ (many) 0.01562 0.0 0.0 pop 0.0 0.0 1.0 pop (unsuccessful search) 0.0 0.0 1.0 popitem 0.0 0.0 1.0 reversed 0.0 0.0 1.0 setdefault (unsuccessful search) 0.0 0.0 1.0 setdefault 0.0 0.0 1.0 __setitem__ (add new item) 0.0 0.0 1.0 __setitem__ (replace) 0.0 0.0 1.0 update 0.0 0.0 1.0 update (many) 0.0 0.0 1.0 values 0.0 0.0 1.0 list timing subject builtin sqlitecollections ratio __add__ 0.0049 0.03549 7.24425 append 0.00491 0.00834 1.69863 clear 0.00493 0.0092 1.86624 __contains__ 0.00491 0.00492 1.00233 copy 0.00502 0.03659 7.29321 count 0.00487 0.00494 1.015 __init__ 0.00493 0.02616 5.30399 __delitem__ 0.00509 0.01278 2.5104 __delitem__ (slice) 0.00495 0.01748 3.53147 __delitem__ (slice with skip) 0.00515 0.01713 3.32874 extend 0.005 0.00839 1.67797 __getitem__ 0.00489 0.0049 1.00178 __getitem__ (slice) 0.0049 0.02133 4.35215 __getitem__ (slice with skip) 0.00511 0.01436 2.81058 __iadd__ 0.00497 0.00854 1.71862 __imult__ 0.00485 0.02277 4.69854 index 0.00483 0.0051 1.05682 index (unsuccessful search) 0.00494 0.00516 1.04366 insert 0.00492 0.01493 3.03576 __len__ 0.00488 0.0049 1.00351 __mult__ 0.00492 0.05927 12.04539 __contains__ (unsuccessful search) 0.00498 0.00506 1.01703 pop 0.00508 0.01322 2.60096 remove 0.00512 0.0149 2.91126 __setitem__ 0.0052 0.00835 1.60687 __setitem__ (slice) 0.00503 0.76682 152.50235 __setitem__ (slice with skip) 0.00497 0.00903 1.81816 sort 0.00502 0.11257 22.43831 approximate memory usage subject builtin sqlitecollections ratio __add__ 0.0 0.0 1.0 append 0.0 0.0 1.0 clear 0.0 0.0 1.0 __contains__ 0.0 0.0 1.0 copy 0.0 0.0 1.0 count 0.0 0.0 1.0 __init__ 0.0 0.0 1.0 __delitem__ 0.0 0.0 1.0 __delitem__ (slice) 0.0 0.0 1.0 __delitem__ (slice with skip) 0.0 0.0 1.0 extend 0.0 0.0 1.0 __getitem__ 0.0 0.0 1.0 __getitem__ (slice) 0.0 0.0 1.0 __getitem__ (slice with skip) 0.0 0.0 1.0 __iadd__ 0.0 0.0 1.0 __imult__ 0.0 0.0 1.0 index 0.0 0.0 1.0 index (unsuccessful search) 0.0 0.0 1.0 insert 0.0 0.0 1.0 __len__ 0.0 0.0 1.0 __mult__ 0.0 0.00781 inf __contains__ (unsuccessful search) 0.0 0.0 1.0 pop 0.0 0.0 1.0 remove 0.0 0.0 1.0 __setitem__ 0.0 0.0 1.0 __setitem__ (slice) 0.0 0.0 1.0 __setitem__ (slice with skip) 0.0 0.0 1.0 sort 0.0 0.64453 inf set timing subject builtin sqlitecollections ratio add (existing item) 0.00501 0.00709 1.41512 add (new item) 0.00492 0.00866 1.75808 __and__ 0.00492 0.02662 5.41026 clear 0.00498 0.00862 1.73108 __contains__ 0.00499 0.00478 0.95707 copy 0.00489 0.02098 4.29121 difference 0.005 0.02202 4.40641 discard 0.00507 0.00888 1.75153 discard (no changes) 0.00498 0.00712 1.42822 __ge__ 0.00483 0.00487 1.0071 __ge__ (not greater than or equals to) 0.00498 0.00483 0.97106 __gt__ 0.00486 0.00882 1.81406 __gt__ (not greater than) 0.00488 0.02162 4.42906 __iand__ 0.00489 0.01157 2.36507 __init__ 0.00493 0.0216 4.38081 intersection 0.00499 0.02607 5.22911 intersection_update 0.00513 0.01151 2.24287 __ior__ 0.00499 0.00998 2.00037 isdisjoint 0.0049 0.00495 1.00971 isdisjoint (not disjoint) 0.005 0.00474 0.94846 issubset 0.00496 0.05111 10.31409 issubset (not subset) 0.00496 0.02637 5.3153 issuperset 0.00496 0.01283 2.58372 issuperset (not superset) 0.005 0.00501 1.00246 __ixor__ 0.00494 0.03101 6.27748 __le__ 0.00518 0.00566 1.09378 __le__ (not less than or equals to) 0.00529 0.00485 0.91783 __len__ 0.00489 0.00533 1.08941 __lt__ 0.00487 0.00563 1.15729 __lt__ (not less than) 0.00509 0.00496 0.97386 __contains__ (unsuccessful search) 0.00502 0.00488 0.97122 __or__ 0.00486 0.02171 4.46251 pop 0.00499 0.00858 1.72018 remove 0.00522 0.00866 1.65943 __sub__ 0.00496 0.0217 4.37478 symmetric_difference 0.00487 0.05112 10.49234 symmetric_difference_update 0.00496 0.03025 6.09254 union 0.00489 0.02239 4.578 update 0.00501 0.00976 1.94704 __xor__ 0.00565 0.05186 9.17512 approximate memory usage subject builtin sqlitecollections ratio add (existing item) 0.0 0.0 1.0 add (new item) 0.0 0.0 1.0 __and__ 0.0 0.0 1.0 clear 0.0 0.0 1.0 __contains__ 0.0 0.0 1.0 copy 0.0 0.0 1.0 difference 0.0 0.0 1.0 discard 0.0 0.0 1.0 discard (no changes) 0.0 0.0 1.0 __ge__ 0.0 0.0 1.0 __ge__ (not greater than or equals to) 0.0 0.0 1.0 __gt__ 0.0 0.0 1.0 __gt__ (not greater than) 0.0 0.0 1.0 __iand__ 0.0 0.0 1.0 __init__ 0.0 0.0 1.0 intersection 0.0 0.0 1.0 intersection_update 0.0 0.0 1.0 __ior__ 0.0 0.0 1.0 isdisjoint 0.0 0.0 1.0 isdisjoint (not disjoint) 0.0 0.0 1.0 issubset 0.0 0.0 1.0 issubset (not subset) 0.0 0.0 1.0 issuperset 0.0 0.0 1.0 issuperset (not superset) 0.0 0.0 1.0 __ixor__ 0.0 0.0 1.0 __le__ 0.0 0.0 1.0 __le__ (not less than or equals to) 0.0 0.0 1.0 __len__ 0.0 0.0 1.0 __lt__ 0.0 0.0 1.0 __lt__ (not less than) 0.0 0.0 1.0 __contains__ (unsuccessful search) 0.0 0.0 1.0 __or__ 0.0 0.0 1.0 pop 0.0 0.0 1.0 remove 0.0 0.0 1.0 __sub__ 0.0 0.0 1.0 symmetric_difference 0.0 0.0 1.0 symmetric_difference_update 0.0 0.0 1.0 union 0.0 0.0 1.0 update 0.0 0.0 1.0 __xor__ 0.0 0.0 1.0","title":"Benchmark"},{"location":"development/","text":"Development Tests, type checking and linting locally To run tests, type checking and linting locally, you'll need to have python 3.6 , 3.7 , 3.8 , 3.9 and 3.10 installed. We use tox to run tests and type checking on all the supported python versions. You can set up the development environment with the following commands: git clone git@github.com:osoken/sqlitecollections.git cd sqlitecollections python -m venv .venv source ./.venv/bin/activate pip install -e .[dev] Then, run tests is as easy as: tox After a while, you'll see the following message at the bottom of the long logs from pytest and others. __________________ summary __________________ lint: commands succeeded py36: commands succeeded py37: commands succeeded py38: commands succeeded py39: commands succeeded py310: commands succeeded congratulations :) Building documents We use mkdocs to build the documentation. To set up the environment for building the document, run the following commands: git clone git@github.com:osoken/sqlitecollections.git cd sqlitecollections python -m venv .venv source ./.venv/bin/activate pip install -e .[docs] Then, building the documentation can be done by the following command: mkdocs build The output will be located in site directory in your current directory. During development, you can also run mkdoc 's builtin development server with hot-reloading enabled with the following command: mkdocs serve In that case, you can check the result on http://127.0.0.1:8000 . Compatibility policy We aim to implement containers that are as compatible as possible with the built-in containers, but we have a few implementations that intentionally behave differently. Normal behavior will be compatible, but in case of errors it may be different. The constructor arguments are not compatible, as they require arguments specific to this package's container, such as sqlite3 DB file paths and serialization methods. copy method in each container behaves similarly to deep copy, since it copies the table containing serialized elements. Dict 's item order is guaranteed to be insertion order not only for python 3.7 and upper but for all versions. Dict.fromkeys class method is not provided. Any member in the container cannot be mutated directly. If you want to mutate any member, mutate it via temporary variable then write it back. import sqlitecollections as sc x = sc . Dict ({ \"a\" : []}) # create {\"a\": []} x [ \"a\" ] . append ( \"b\" ) # try to mutate the empty list print ( x [ \"a\" ]) # not [\"b\"] but [] temp = x [ \"a\" ] # temporarily substitute the list to a variable temp . append ( \"b\" ) # mutate the temporary variable x [ \"a\" ] = temp # then, write it back print ( x [ \"a\" ]) # now, we get [\"b\"]","title":"Development"},{"location":"development/#development","text":"","title":"Development"},{"location":"development/#tests-type-checking-and-linting-locally","text":"To run tests, type checking and linting locally, you'll need to have python 3.6 , 3.7 , 3.8 , 3.9 and 3.10 installed. We use tox to run tests and type checking on all the supported python versions. You can set up the development environment with the following commands: git clone git@github.com:osoken/sqlitecollections.git cd sqlitecollections python -m venv .venv source ./.venv/bin/activate pip install -e .[dev] Then, run tests is as easy as: tox After a while, you'll see the following message at the bottom of the long logs from pytest and others. __________________ summary __________________ lint: commands succeeded py36: commands succeeded py37: commands succeeded py38: commands succeeded py39: commands succeeded py310: commands succeeded congratulations :)","title":"Tests, type checking and linting locally"},{"location":"development/#building-documents","text":"We use mkdocs to build the documentation. To set up the environment for building the document, run the following commands: git clone git@github.com:osoken/sqlitecollections.git cd sqlitecollections python -m venv .venv source ./.venv/bin/activate pip install -e .[docs] Then, building the documentation can be done by the following command: mkdocs build The output will be located in site directory in your current directory. During development, you can also run mkdoc 's builtin development server with hot-reloading enabled with the following command: mkdocs serve In that case, you can check the result on http://127.0.0.1:8000 .","title":"Building documents"},{"location":"development/#compatibility-policy","text":"We aim to implement containers that are as compatible as possible with the built-in containers, but we have a few implementations that intentionally behave differently. Normal behavior will be compatible, but in case of errors it may be different. The constructor arguments are not compatible, as they require arguments specific to this package's container, such as sqlite3 DB file paths and serialization methods. copy method in each container behaves similarly to deep copy, since it copies the table containing serialized elements. Dict 's item order is guaranteed to be insertion order not only for python 3.7 and upper but for all versions. Dict.fromkeys class method is not provided. Any member in the container cannot be mutated directly. If you want to mutate any member, mutate it via temporary variable then write it back. import sqlitecollections as sc x = sc . Dict ({ \"a\" : []}) # create {\"a\": []} x [ \"a\" ] . append ( \"b\" ) # try to mutate the empty list print ( x [ \"a\" ]) # not [\"b\"] but [] temp = x [ \"a\" ] # temporarily substitute the list to a variable temp . append ( \"b\" ) # mutate the temporary variable x [ \"a\" ] = temp # then, write it back print ( x [ \"a\" ]) # now, we get [\"b\"]","title":"Compatibility policy"},{"location":"install/","text":"Install pip install sqlitecollections","title":"Install"},{"location":"install/#install","text":"pip install sqlitecollections","title":"Install"},{"location":"benchmark_results/py310/dict/","text":"timing | subject | `builtin` | `sqlitecollections` | ratio | | :------ | --------: | ------------------: | ----: | | `clear` | 0.00504 | 0.00919 | 1.82418 | | `__contains__` | 0.00516 | 0.00482 | 0.9342 | | `copy` | 0.00574 | 0.0585 | 10.19061 | | `__delitem__` | 0.00547 | 0.00919 | 1.67982 | | `get` | 0.00483 | 0.00491 | 1.01692 | | `get (unsuccessful search)` | 0.00497 | 0.00478 | 0.96113 | | `__getitem__` | 0.00476 | 0.00487 | 1.02265 | | `__init__` | 0.00482 | 0.04762 | 9.87648 | | `__ior__` | 0.00519 | 0.00883 | 1.7006 | | `__ior__` (many) | 0.00593 | 0.04225 | 7.12726 | | `items` | 0.00518 | 0.01207 | 2.33005 | | `__iter__` | 0.0049 | 0.0088 | 1.79709 | | `keys` | 0.00493 | 0.00883 | 1.78966 | | `__len__` | 0.00493 | 0.00518 | 1.04919 | | `__contains__` (unsuccessful search) | 0.00499 | 0.00473 | 0.94822 | | `__or__` | 0.00476 | 0.05979 | 12.55722 | | `__or__` (many) | 0.00629 | 0.1113 | 17.6942 | | `pop` | 0.00483 | 0.00915 | 1.89381 | | `pop (unsuccessful search)` | 0.00489 | 0.00755 | 1.54264 | | `popitem` | 0.00513 | 0.00928 | 1.80926 | | `reversed` | 0.0049 | 0.00861 | 1.75678 | | `setdefault (unsuccessful search)` | 0.00493 | 0.00726 | 1.47153 | | `setdefault` | 0.00498 | 0.00713 | 1.43117 | | `__setitem__` (add new item) | 0.00488 | 0.00887 | 1.817 | | `__setitem__` (replace) | 0.005 | 0.00934 | 1.86699 | | `update` | 0.00486 | 0.009 | 1.85324 | | `update` (many) | 0.00594 | 0.0421 | 7.0825 | | `values` | 0.00479 | 0.00871 | 1.81788 | approximate memory usage | subject | `builtin` | `sqlitecollections` | ratio | | :------ | --------: | ------------------: | ----: | | `clear` | 0.0 | 0.0 | 1.0 | | `__contains__` | 0.0 | 0.0 | 1.0 | | `copy` | 0.0 | 0.0 | 1.0 | | `__delitem__` | 0.0 | 0.0 | 1.0 | | `get` | 0.0 | 0.0 | 1.0 | | `get (unsuccessful search)` | 0.0 | 0.0 | 1.0 | | `__getitem__` | 0.0 | 0.0 | 1.0 | | `__init__` | 0.0 | 0.0 | 1.0 | | `__ior__` | 0.0 | 0.0 | 1.0 | | `__ior__` (many) | 0.1875 | 0.0 | 0.0 | | `items` | 0.0 | 0.21484 | inf | | `__iter__` | 0.0 | 0.0 | 1.0 | | `keys` | 0.0 | 0.0 | 1.0 | | `__len__` | 0.0 | 0.0 | 1.0 | | `__contains__` (unsuccessful search) | 0.0 | 0.0 | 1.0 | | `__or__` | 0.0 | 0.0 | 1.0 | | `__or__` (many) | 0.01562 | 0.0 | 0.0 | | `pop` | 0.0 | 0.0 | 1.0 | | `pop (unsuccessful search)` | 0.0 | 0.0 | 1.0 | | `popitem` | 0.0 | 0.0 | 1.0 | | `reversed` | 0.0 | 0.0 | 1.0 | | `setdefault (unsuccessful search)` | 0.0 | 0.0 | 1.0 | | `setdefault` | 0.0 | 0.0 | 1.0 | | `__setitem__` (add new item) | 0.0 | 0.0 | 1.0 | | `__setitem__` (replace) | 0.0 | 0.0 | 1.0 | | `update` | 0.0 | 0.0 | 1.0 | | `update` (many) | 0.0 | 0.0 | 1.0 | | `values` | 0.0 | 0.0 | 1.0 |","title":"Dict"},{"location":"benchmark_results/py310/list/","text":"timing | subject | `builtin` | `sqlitecollections` | ratio | | :------ | --------: | ------------------: | ----: | | `__add__` | 0.0049 | 0.03549 | 7.24425 | | `append` | 0.00491 | 0.00834 | 1.69863 | | `clear` | 0.00493 | 0.0092 | 1.86624 | | `__contains__` | 0.00491 | 0.00492 | 1.00233 | | `copy` | 0.00502 | 0.03659 | 7.29321 | | `count` | 0.00487 | 0.00494 | 1.015 | | `__init__` | 0.00493 | 0.02616 | 5.30399 | | `__delitem__` | 0.00509 | 0.01278 | 2.5104 | | `__delitem__` (slice) | 0.00495 | 0.01748 | 3.53147 | | `__delitem__` (slice with skip) | 0.00515 | 0.01713 | 3.32874 | | `extend` | 0.005 | 0.00839 | 1.67797 | | `__getitem__` | 0.00489 | 0.0049 | 1.00178 | | `__getitem__` (slice) | 0.0049 | 0.02133 | 4.35215 | | `__getitem__` (slice with skip) | 0.00511 | 0.01436 | 2.81058 | | `__iadd__` | 0.00497 | 0.00854 | 1.71862 | | `__imult__` | 0.00485 | 0.02277 | 4.69854 | | `index` | 0.00483 | 0.0051 | 1.05682 | | `index` (unsuccessful search) | 0.00494 | 0.00516 | 1.04366 | | `insert` | 0.00492 | 0.01493 | 3.03576 | | `__len__` | 0.00488 | 0.0049 | 1.00351 | | `__mult__` | 0.00492 | 0.05927 | 12.04539 | | `__contains__` (unsuccessful search) | 0.00498 | 0.00506 | 1.01703 | | `pop` | 0.00508 | 0.01322 | 2.60096 | | `remove` | 0.00512 | 0.0149 | 2.91126 | | `__setitem__` | 0.0052 | 0.00835 | 1.60687 | | `__setitem__` (slice) | 0.00503 | 0.76682 | 152.50235 | | `__setitem__` (slice with skip) | 0.00497 | 0.00903 | 1.81816 | | `sort` | 0.00502 | 0.11257 | 22.43831 | approximate memory usage | subject | `builtin` | `sqlitecollections` | ratio | | :------ | --------: | ------------------: | ----: | | `__add__` | 0.0 | 0.0 | 1.0 | | `append` | 0.0 | 0.0 | 1.0 | | `clear` | 0.0 | 0.0 | 1.0 | | `__contains__` | 0.0 | 0.0 | 1.0 | | `copy` | 0.0 | 0.0 | 1.0 | | `count` | 0.0 | 0.0 | 1.0 | | `__init__` | 0.0 | 0.0 | 1.0 | | `__delitem__` | 0.0 | 0.0 | 1.0 | | `__delitem__` (slice) | 0.0 | 0.0 | 1.0 | | `__delitem__` (slice with skip) | 0.0 | 0.0 | 1.0 | | `extend` | 0.0 | 0.0 | 1.0 | | `__getitem__` | 0.0 | 0.0 | 1.0 | | `__getitem__` (slice) | 0.0 | 0.0 | 1.0 | | `__getitem__` (slice with skip) | 0.0 | 0.0 | 1.0 | | `__iadd__` | 0.0 | 0.0 | 1.0 | | `__imult__` | 0.0 | 0.0 | 1.0 | | `index` | 0.0 | 0.0 | 1.0 | | `index` (unsuccessful search) | 0.0 | 0.0 | 1.0 | | `insert` | 0.0 | 0.0 | 1.0 | | `__len__` | 0.0 | 0.0 | 1.0 | | `__mult__` | 0.0 | 0.00781 | inf | | `__contains__` (unsuccessful search) | 0.0 | 0.0 | 1.0 | | `pop` | 0.0 | 0.0 | 1.0 | | `remove` | 0.0 | 0.0 | 1.0 | | `__setitem__` | 0.0 | 0.0 | 1.0 | | `__setitem__` (slice) | 0.0 | 0.0 | 1.0 | | `__setitem__` (slice with skip) | 0.0 | 0.0 | 1.0 | | `sort` | 0.0 | 0.64453 | inf |","title":"List"},{"location":"benchmark_results/py310/set/","text":"timing | subject | `builtin` | `sqlitecollections` | ratio | | :------ | --------: | ------------------: | ----: | | `add (existing item)` | 0.00501 | 0.00709 | 1.41512 | | `add (new item)` | 0.00492 | 0.00866 | 1.75808 | | `__and__` | 0.00492 | 0.02662 | 5.41026 | | `clear` | 0.00498 | 0.00862 | 1.73108 | | `__contains__` | 0.00499 | 0.00478 | 0.95707 | | `copy` | 0.00489 | 0.02098 | 4.29121 | | `difference` | 0.005 | 0.02202 | 4.40641 | | `discard` | 0.00507 | 0.00888 | 1.75153 | | `discard (no changes)` | 0.00498 | 0.00712 | 1.42822 | | `__ge__` | 0.00483 | 0.00487 | 1.0071 | | `__ge__` (not greater than or equals to) | 0.00498 | 0.00483 | 0.97106 | | `__gt__` | 0.00486 | 0.00882 | 1.81406 | | `__gt__` (not greater than) | 0.00488 | 0.02162 | 4.42906 | | `__iand__` | 0.00489 | 0.01157 | 2.36507 | | `__init__` | 0.00493 | 0.0216 | 4.38081 | | `intersection` | 0.00499 | 0.02607 | 5.22911 | | `intersection_update` | 0.00513 | 0.01151 | 2.24287 | | `__ior__` | 0.00499 | 0.00998 | 2.00037 | | `isdisjoint` | 0.0049 | 0.00495 | 1.00971 | | `isdisjoint` (not disjoint) | 0.005 | 0.00474 | 0.94846 | | `issubset` | 0.00496 | 0.05111 | 10.31409 | | `issubset` (not subset) | 0.00496 | 0.02637 | 5.3153 | | `issuperset` | 0.00496 | 0.01283 | 2.58372 | | `issuperset` (not superset) | 0.005 | 0.00501 | 1.00246 | | `__ixor__` | 0.00494 | 0.03101 | 6.27748 | | `__le__` | 0.00518 | 0.00566 | 1.09378 | | `__le__` (not less than or equals to) | 0.00529 | 0.00485 | 0.91783 | | `__len__` | 0.00489 | 0.00533 | 1.08941 | | `__lt__` | 0.00487 | 0.00563 | 1.15729 | | `__lt__` (not less than) | 0.00509 | 0.00496 | 0.97386 | | `__contains__` (unsuccessful search) | 0.00502 | 0.00488 | 0.97122 | | `__or__` | 0.00486 | 0.02171 | 4.46251 | | `pop` | 0.00499 | 0.00858 | 1.72018 | | `remove` | 0.00522 | 0.00866 | 1.65943 | | `__sub__` | 0.00496 | 0.0217 | 4.37478 | | `symmetric_difference` | 0.00487 | 0.05112 | 10.49234 | | `symmetric_difference_update` | 0.00496 | 0.03025 | 6.09254 | | `union` | 0.00489 | 0.02239 | 4.578 | | `update` | 0.00501 | 0.00976 | 1.94704 | | `__xor__` | 0.00565 | 0.05186 | 9.17512 | approximate memory usage | subject | `builtin` | `sqlitecollections` | ratio | | :------ | --------: | ------------------: | ----: | | `add (existing item)` | 0.0 | 0.0 | 1.0 | | `add (new item)` | 0.0 | 0.0 | 1.0 | | `__and__` | 0.0 | 0.0 | 1.0 | | `clear` | 0.0 | 0.0 | 1.0 | | `__contains__` | 0.0 | 0.0 | 1.0 | | `copy` | 0.0 | 0.0 | 1.0 | | `difference` | 0.0 | 0.0 | 1.0 | | `discard` | 0.0 | 0.0 | 1.0 | | `discard (no changes)` | 0.0 | 0.0 | 1.0 | | `__ge__` | 0.0 | 0.0 | 1.0 | | `__ge__` (not greater than or equals to) | 0.0 | 0.0 | 1.0 | | `__gt__` | 0.0 | 0.0 | 1.0 | | `__gt__` (not greater than) | 0.0 | 0.0 | 1.0 | | `__iand__` | 0.0 | 0.0 | 1.0 | | `__init__` | 0.0 | 0.0 | 1.0 | | `intersection` | 0.0 | 0.0 | 1.0 | | `intersection_update` | 0.0 | 0.0 | 1.0 | | `__ior__` | 0.0 | 0.0 | 1.0 | | `isdisjoint` | 0.0 | 0.0 | 1.0 | | `isdisjoint` (not disjoint) | 0.0 | 0.0 | 1.0 | | `issubset` | 0.0 | 0.0 | 1.0 | | `issubset` (not subset) | 0.0 | 0.0 | 1.0 | | `issuperset` | 0.0 | 0.0 | 1.0 | | `issuperset` (not superset) | 0.0 | 0.0 | 1.0 | | `__ixor__` | 0.0 | 0.0 | 1.0 | | `__le__` | 0.0 | 0.0 | 1.0 | | `__le__` (not less than or equals to) | 0.0 | 0.0 | 1.0 | | `__len__` | 0.0 | 0.0 | 1.0 | | `__lt__` | 0.0 | 0.0 | 1.0 | | `__lt__` (not less than) | 0.0 | 0.0 | 1.0 | | `__contains__` (unsuccessful search) | 0.0 | 0.0 | 1.0 | | `__or__` | 0.0 | 0.0 | 1.0 | | `pop` | 0.0 | 0.0 | 1.0 | | `remove` | 0.0 | 0.0 | 1.0 | | `__sub__` | 0.0 | 0.0 | 1.0 | | `symmetric_difference` | 0.0 | 0.0 | 1.0 | | `symmetric_difference_update` | 0.0 | 0.0 | 1.0 | | `union` | 0.0 | 0.0 | 1.0 | | `update` | 0.0 | 0.0 | 1.0 | | `__xor__` | 0.0 | 0.0 | 1.0 |","title":"Set"},{"location":"benchmark_results/py36/dict/","text":"timing | subject | `builtin` | `sqlitecollections` | ratio | | :------ | --------: | ------------------: | ----: | | `clear` | 0.00363 | 0.0074 | 2.03972 | | `__contains__` | 0.00365 | 0.00365 | 0.9982 | | `copy` | 0.0037 | 0.06666 | 18.02148 | | `__delitem__` | 0.0038 | 0.00847 | 2.23129 | | `get` | 0.00367 | 0.00369 | 1.00693 | | `get (unsuccessful search)` | 0.0038 | 0.00372 | 0.97945 | | `__getitem__` | 0.00366 | 0.00371 | 1.01214 | | `__init__` | 0.00377 | 0.04691 | 12.43576 | | `items` | 0.00422 | 0.01106 | 2.62174 | | `__iter__` | 0.00392 | 0.00773 | 1.9721 | | `keys` | 0.0039 | 0.00773 | 1.98158 | | `__len__` | 0.00371 | 0.00378 | 1.01817 | | `__contains__` (unsuccessful search) | 0.00385 | 0.00378 | 0.98039 | | `pop` | 0.0039 | 0.00748 | 1.92131 | | `pop (unsuccessful search)` | 0.00391 | 0.00601 | 1.53688 | | `popitem` | 0.00399 | 0.00748 | 1.87475 | | `setdefault (unsuccessful search)` | 0.0039 | 0.00659 | 1.69047 | | `setdefault` | 0.00415 | 0.0062 | 1.49247 | | `__setitem__` (add new item) | 0.0039 | 0.00733 | 1.87924 | | `__setitem__` (replace) | 0.0039 | 0.00828 | 2.12437 | | `update` | 0.00391 | 0.00813 | 2.07801 | | `update` (many) | 0.00463 | 0.04191 | 9.05382 | | `values` | 0.00379 | 0.0074 | 1.95399 | approximate memory usage | subject | `builtin` | `sqlitecollections` | ratio | | :------ | --------: | ------------------: | ----: | | `clear` | 0.0 | 0.0 | 1.0 | | `__contains__` | 0.0 | 0.0 | 1.0 | | `copy` | 0.04688 | 0.01172 | 0.25 | | `__delitem__` | 0.0 | 0.0 | 1.0 | | `get` | 0.0 | 0.0 | 1.0 | | `get (unsuccessful search)` | 0.0 | 0.0 | 1.0 | | `__getitem__` | 0.0 | 0.0 | 1.0 | | `__init__` | 0.0 | 0.0 | 1.0 | | `items` | 0.22656 | 0.28125 | 1.24138 | | `__iter__` | 0.0 | 0.0 | 1.0 | | `keys` | 0.0 | 0.0 | 1.0 | | `__len__` | 0.0 | 0.0 | 1.0 | | `__contains__` (unsuccessful search) | 0.0 | 0.0 | 1.0 | | `pop` | 0.0 | 0.0 | 1.0 | | `pop (unsuccessful search)` | 0.0 | 0.0 | 1.0 | | `popitem` | 0.0 | 0.0 | 1.0 | | `setdefault (unsuccessful search)` | 0.0 | 0.0 | 1.0 | | `setdefault` | 0.0 | 0.0 | 1.0 | | `__setitem__` (add new item) | 0.0 | 0.0 | 1.0 | | `__setitem__` (replace) | 0.0 | 0.0 | 1.0 | | `update` | 0.0 | 0.0 | 1.0 | | `update` (many) | 0.19922 | 0.0 | 0.0 | | `values` | 0.125 | 0.0 | 0.0 |","title":"Dict"},{"location":"benchmark_results/py36/list/","text":"timing | subject | `builtin` | `sqlitecollections` | ratio | | :------ | --------: | ------------------: | ----: | | `__add__` | 0.0038 | 0.03949 | 10.39313 | | `append` | 0.00382 | 0.00836 | 2.18764 | | `clear` | 0.0038 | 0.00893 | 2.35128 | | `__contains__` | 0.00408 | 0.00386 | 0.94645 | | `copy` | 0.00381 | 0.04056 | 10.6588 | | `count` | 0.00385 | 0.00393 | 1.02088 | | `__init__` | 0.00385 | 0.02726 | 7.07063 | | `__delitem__` | 0.00402 | 0.02154 | 5.36535 | | `__delitem__` (slice) | 0.00404 | 0.01649 | 4.0866 | | `__delitem__` (slice with skip) | 0.00381 | 0.01634 | 4.29127 | | `extend` | 0.00384 | 0.00804 | 2.09517 | | `__getitem__` | 0.0038 | 0.00382 | 1.00388 | | `__getitem__` (slice) | 0.00378 | 0.02022 | 5.35303 | | `__getitem__` (slice with skip) | 0.00377 | 0.01918 | 5.0921 | | `__iadd__` | 0.00378 | 0.01094 | 2.89162 | | `__imult__` | 0.00392 | 0.02264 | 5.77953 | | `index` | 0.00378 | 0.00405 | 1.07091 | | `index` (unsuccessful search) | 0.00378 | 0.00391 | 1.03628 | | `insert` | 0.0039 | 0.01415 | 3.62988 | | `__len__` | 0.00377 | 0.00386 | 1.02373 | | `__mult__` | 0.00376 | 0.05951 | 15.81665 | | `__contains__` (unsuccessful search) | 0.00373 | 0.00387 | 1.03741 | | `pop` | 0.00383 | 0.01192 | 3.1133 | | `remove` | 0.00383 | 0.01499 | 3.91892 | | `__setitem__` | 0.00383 | 0.00857 | 2.23852 | | `__setitem__` (slice) | 0.00384 | 0.80743 | 210.46511 | | `__setitem__` (slice with skip) | 0.00385 | 0.00915 | 2.37851 | | `sort` | 0.00434 | 0.08783 | 20.24305 | approximate memory usage | subject | `builtin` | `sqlitecollections` | ratio | | :------ | --------: | ------------------: | ----: | | `__add__` | 0.0 | 0.0 | 1.0 | | `append` | 0.0 | 0.0 | 1.0 | | `clear` | 0.0 | 0.0 | 1.0 | | `__contains__` | 0.0 | 0.0 | 1.0 | | `copy` | 0.0 | 0.0 | 1.0 | | `count` | 0.0 | 0.0 | 1.0 | | `__init__` | 0.0 | 0.0 | 1.0 | | `__delitem__` | 0.0 | 0.0 | 1.0 | | `__delitem__` (slice) | 0.0 | 0.0 | 1.0 | | `__delitem__` (slice with skip) | 0.0 | 0.0 | 1.0 | | `extend` | 0.0 | 0.0 | 1.0 | | `__getitem__` | 0.0 | 0.0 | 1.0 | | `__getitem__` (slice) | 0.0 | 0.0 | 1.0 | | `__getitem__` (slice with skip) | 0.0 | 0.0 | 1.0 | | `__iadd__` | 0.0 | 0.0 | 1.0 | | `__imult__` | 0.0 | 0.0 | 1.0 | | `index` | 0.0 | 0.0 | 1.0 | | `index` (unsuccessful search) | 0.0 | 0.0 | 1.0 | | `insert` | 0.0 | 0.0 | 1.0 | | `__len__` | 0.0 | 0.0 | 1.0 | | `__mult__` | 0.0 | 0.01562 | inf | | `__contains__` (unsuccessful search) | 0.0 | 0.0 | 1.0 | | `pop` | 0.0 | 0.0 | 1.0 | | `remove` | 0.0 | 0.0 | 1.0 | | `__setitem__` | 0.0 | 0.0 | 1.0 | | `__setitem__` (slice) | 0.0 | 0.0 | 1.0 | | `__setitem__` (slice with skip) | 0.0 | 0.0 | 1.0 | | `sort` | 0.0 | 0.82031 | inf |","title":"List"},{"location":"benchmark_results/py36/set/","text":"timing | subject | `builtin` | `sqlitecollections` | ratio | | :------ | --------: | ------------------: | ----: | | `add (existing item)` | 0.00382 | 0.00588 | 1.53862 | | `add (new item)` | 0.00383 | 0.00712 | 1.85838 | | `__and__` | 0.00386 | 0.02425 | 6.29021 | | `clear` | 0.00383 | 0.00704 | 1.83496 | | `__contains__` | 0.00368 | 0.00379 | 1.02966 | | `copy` | 0.00382 | 0.0191 | 5.00449 | | `difference` | 0.00379 | 0.01949 | 5.13585 | | `discard` | 0.00452 | 0.00769 | 1.70151 | | `discard (no changes)` | 0.00374 | 0.00638 | 1.70562 | | `__ge__` | 0.00377 | 0.00375 | 0.99359 | | `__ge__` (not greater than or equals to) | 0.00385 | 0.00396 | 1.02927 | | `__gt__` | 0.00384 | 0.00763 | 1.98734 | | `__gt__` (not greater than) | 0.00387 | 0.0198 | 5.12059 | | `__iand__` | 0.00392 | 0.00935 | 2.38403 | | `__init__` | 0.004 | 0.01828 | 4.56421 | | `intersection` | 0.0039 | 0.02454 | 6.28798 | | `intersection_update` | 0.00389 | 0.01342 | 3.45114 | | `__ior__` | 0.00402 | 0.00809 | 2.0146 | | `isdisjoint` | 0.00386 | 0.00381 | 0.98626 | | `isdisjoint` (not disjoint) | 0.00393 | 0.00381 | 0.9712 | | `issubset` | 0.00384 | 0.04193 | 10.91179 | | `issubset` (not subset) | 0.00376 | 0.02027 | 5.39294 | | `issuperset` | 0.00378 | 0.0117 | 3.09392 | | `issuperset` (not superset) | 0.004 | 0.00423 | 1.05737 | | `__ixor__` | 0.00391 | 0.02868 | 7.33628 | | `__le__` | 0.00377 | 0.00461 | 1.22163 | | `__le__` (not less than or equals to) | 0.00395 | 0.00403 | 1.01883 | | `__len__` | 0.00382 | 0.0039 | 1.02104 | | `__lt__` | 0.00392 | 0.00483 | 1.23464 | | `__lt__` (not less than) | 0.00388 | 0.00386 | 0.99281 | | `__contains__` (unsuccessful search) | 0.00374 | 0.00378 | 1.01004 | | `__or__` | 0.00382 | 0.02332 | 6.10726 | | `pop` | 0.00382 | 0.00762 | 1.99394 | | `remove` | 0.00378 | 0.00804 | 2.12343 | | `__sub__` | 0.00372 | 0.01996 | 5.361 | | `symmetric_difference` | 0.00373 | 0.04705 | 12.61027 | | `symmetric_difference_update` | 0.00373 | 0.02787 | 7.47875 | | `union` | 0.00378 | 0.02127 | 5.62213 | | `update` | 0.00373 | 0.00794 | 2.12789 | | `__xor__` | 0.00377 | 0.04659 | 12.36522 | approximate memory usage | subject | `builtin` | `sqlitecollections` | ratio | | :------ | --------: | ------------------: | ----: | | `add (existing item)` | 0.0 | 0.0 | 1.0 | | `add (new item)` | 0.0 | 0.0 | 1.0 | | `__and__` | 0.0 | 0.00391 | inf | | `clear` | 0.0 | 0.0 | 1.0 | | `__contains__` | 0.0 | 0.0 | 1.0 | | `copy` | 0.0 | 0.0 | 1.0 | | `difference` | 0.0 | 0.0 | 1.0 | | `discard` | 0.0 | 0.0 | 1.0 | | `discard (no changes)` | 0.0 | 0.0 | 1.0 | | `__ge__` | 0.0 | 0.0 | 1.0 | | `__ge__` (not greater than or equals to) | 0.0 | 0.0 | 1.0 | | `__gt__` | 0.0 | 0.0 | 1.0 | | `__gt__` (not greater than) | 0.0 | 0.0 | 1.0 | | `__iand__` | 0.0 | 0.0 | 1.0 | | `__init__` | 0.0 | 0.0 | 1.0 | | `intersection` | 0.0 | 0.00781 | inf | | `intersection_update` | 0.0 | 0.0 | 1.0 | | `__ior__` | 0.0 | 0.0 | 1.0 | | `isdisjoint` | 0.0 | 0.0 | 1.0 | | `isdisjoint` (not disjoint) | 0.0 | 0.0 | 1.0 | | `issubset` | 0.0 | 0.00391 | inf | | `issubset` (not subset) | 0.0 | 0.0 | 1.0 | | `issuperset` | 0.0 | 0.0 | 1.0 | | `issuperset` (not superset) | 0.0 | 0.0 | 1.0 | | `__ixor__` | 0.0 | 0.0 | 1.0 | | `__le__` | 0.0 | 0.0 | 1.0 | | `__le__` (not less than or equals to) | 0.0 | 0.0 | 1.0 | | `__len__` | 0.0 | 0.0 | 1.0 | | `__lt__` | 0.0 | 0.0 | 1.0 | | `__lt__` (not less than) | 0.0 | 0.0 | 1.0 | | `__contains__` (unsuccessful search) | 0.0 | 0.0 | 1.0 | | `__or__` | 0.0 | 0.0 | 1.0 | | `pop` | 0.00391 | 0.0 | 0.0 | | `remove` | 0.0 | 0.0 | 1.0 | | `__sub__` | 0.0 | 0.0 | 1.0 | | `symmetric_difference` | 0.0 | 0.00781 | inf | | `symmetric_difference_update` | 0.0 | 0.0 | 1.0 | | `union` | 0.0 | 0.0 | 1.0 | | `update` | 0.0 | 0.0 | 1.0 | | `__xor__` | 0.0 | 0.00391 | inf |","title":"Set"},{"location":"benchmark_results/py37/dict/","text":"timing | subject | `builtin` | `sqlitecollections` | ratio | | :------ | --------: | ------------------: | ----: | | `clear` | 0.00429 | 0.01004 | 2.33851 | | `__contains__` | 0.00468 | 0.00475 | 1.01522 | | `copy` | 0.00473 | 0.09151 | 19.33211 | | `__delitem__` | 0.00458 | 0.00898 | 1.9619 | | `get` | 0.00558 | 0.00465 | 0.83358 | | `get (unsuccessful search)` | 0.00477 | 0.00412 | 0.86341 | | `__getitem__` | 0.00422 | 0.00475 | 1.12503 | | `__init__` | 0.0047 | 0.06785 | 14.43499 | | `items` | 0.00564 | 0.01609 | 2.85422 | | `__iter__` | 0.00508 | 0.00981 | 1.92931 | | `keys` | 0.00476 | 0.01023 | 2.14996 | | `__len__` | 0.00458 | 0.00462 | 1.00816 | | `__contains__` (unsuccessful search) | 0.00455 | 0.00456 | 1.00387 | | `pop` | 0.00455 | 0.00929 | 2.0409 | | `pop (unsuccessful search)` | 0.00447 | 0.00647 | 1.44748 | | `popitem` | 0.00409 | 0.00822 | 2.01016 | | `setdefault (unsuccessful search)` | 0.00415 | 0.00705 | 1.69881 | | `setdefault` | 0.00402 | 0.00653 | 1.62619 | | `__setitem__` (add new item) | 0.00419 | 0.00841 | 2.0075 | | `__setitem__` (replace) | 0.00428 | 0.00945 | 2.20667 | | `update` | 0.00397 | 0.00961 | 2.42173 | | `update` (many) | 0.00578 | 0.05889 | 10.19187 | | `values` | 0.00444 | 0.00872 | 1.96401 | approximate memory usage | subject | `builtin` | `sqlitecollections` | ratio | | :------ | --------: | ------------------: | ----: | | `clear` | 0.0 | 0.0 | 1.0 | | `__contains__` | 0.0 | 0.0 | 1.0 | | `copy` | 0.0625 | 0.0 | 0.0 | | `__delitem__` | 0.0 | 0.0 | 1.0 | | `get` | 0.0 | 0.0 | 1.0 | | `get (unsuccessful search)` | 0.0 | 0.0 | 1.0 | | `__getitem__` | 0.0 | 0.0 | 1.0 | | `__init__` | 0.0 | 0.0 | 1.0 | | `items` | 0.11328 | 0.14453 | 1.27586 | | `__iter__` | 0.0 | 0.0 | 1.0 | | `keys` | 0.0 | 0.0 | 1.0 | | `__len__` | 0.0 | 0.0 | 1.0 | | `__contains__` (unsuccessful search) | 0.0 | 0.0 | 1.0 | | `pop` | 0.0 | 0.0 | 1.0 | | `pop (unsuccessful search)` | 0.0 | 0.0 | 1.0 | | `popitem` | 0.0 | 0.0 | 1.0 | | `setdefault (unsuccessful search)` | 0.0 | 0.0 | 1.0 | | `setdefault` | 0.0 | 0.0 | 1.0 | | `__setitem__` (add new item) | 0.0 | 0.0 | 1.0 | | `__setitem__` (replace) | 0.0 | 0.0 | 1.0 | | `update` | 0.0 | 0.0 | 1.0 | | `update` (many) | 0.00391 | 0.0 | 0.0 | | `values` | 0.125 | 0.0 | 0.0 |","title":"Dict"},{"location":"benchmark_results/py37/list/","text":"timing | subject | `builtin` | `sqlitecollections` | ratio | | :------ | --------: | ------------------: | ----: | | `__add__` | 0.00475 | 0.0511 | 10.76323 | | `append` | 0.00526 | 0.0094 | 1.78778 | | `clear` | 0.00457 | 0.01101 | 2.40834 | | `__contains__` | 0.005 | 0.00458 | 0.91651 | | `copy` | 0.00478 | 0.04662 | 9.75897 | | `count` | 0.0048 | 0.00488 | 1.01616 | | `__init__` | 0.00412 | 0.03085 | 7.48325 | | `__delitem__` | 0.00446 | 0.01352 | 3.03093 | | `__delitem__` (slice) | 0.00469 | 0.01798 | 3.83526 | | `__delitem__` (slice with skip) | 0.00456 | 0.0187 | 4.09968 | | `extend` | 0.00446 | 0.00957 | 2.148 | | `__getitem__` | 0.00433 | 0.0049 | 1.13146 | | `__getitem__` (slice) | 0.00441 | 0.02743 | 6.22477 | | `__getitem__` (slice with skip) | 0.00447 | 0.01606 | 3.59001 | | `__iadd__` | 0.00432 | 0.00872 | 2.01987 | | `__imult__` | 0.0043 | 0.02699 | 6.27285 | | `index` | 0.00429 | 0.00567 | 1.32082 | | `index` (unsuccessful search) | 0.0047 | 0.00608 | 1.29405 | | `insert` | 0.00429 | 0.01452 | 3.38004 | | `__len__` | 0.00437 | 0.00435 | 0.9943 | | `__mult__` | 0.00458 | 0.08011 | 17.48066 | | `__contains__` (unsuccessful search) | 0.00417 | 0.00448 | 1.07324 | | `pop` | 0.00423 | 0.01381 | 3.26775 | | `remove` | 0.00453 | 0.01821 | 4.02203 | | `__setitem__` | 0.00443 | 0.00834 | 1.88314 | | `__setitem__` (slice) | 0.00441 | 0.77235 | 175.03121 | | `__setitem__` (slice with skip) | 0.00415 | 0.00907 | 2.18758 | | `sort` | 0.00419 | 0.10818 | 25.80808 | approximate memory usage | subject | `builtin` | `sqlitecollections` | ratio | | :------ | --------: | ------------------: | ----: | | `__add__` | 0.0 | 0.0 | 1.0 | | `append` | 0.0 | 0.0 | 1.0 | | `clear` | 0.0 | 0.0 | 1.0 | | `__contains__` | 0.0 | 0.0 | 1.0 | | `copy` | 0.0 | 0.0 | 1.0 | | `count` | 0.0 | 0.0 | 1.0 | | `__init__` | 0.0 | 0.0 | 1.0 | | `__delitem__` | 0.0 | 0.0 | 1.0 | | `__delitem__` (slice) | 0.0 | 0.0 | 1.0 | | `__delitem__` (slice with skip) | 0.0 | 0.0 | 1.0 | | `extend` | 0.0 | 0.0 | 1.0 | | `__getitem__` | 0.0 | 0.0 | 1.0 | | `__getitem__` (slice) | 0.0 | 0.0 | 1.0 | | `__getitem__` (slice with skip) | 0.0 | 0.0 | 1.0 | | `__iadd__` | 0.0 | 0.0 | 1.0 | | `__imult__` | 0.0 | 0.0 | 1.0 | | `index` | 0.0 | 0.0 | 1.0 | | `index` (unsuccessful search) | 0.0 | 0.0 | 1.0 | | `insert` | 0.0 | 0.0 | 1.0 | | `__len__` | 0.0 | 0.0 | 1.0 | | `__mult__` | 0.0 | 0.0 | 1.0 | | `__contains__` (unsuccessful search) | 0.0 | 0.0 | 1.0 | | `pop` | 0.0 | 0.0 | 1.0 | | `remove` | 0.0 | 0.0 | 1.0 | | `__setitem__` | 0.0 | 0.0 | 1.0 | | `__setitem__` (slice) | 0.0 | 0.0 | 1.0 | | `__setitem__` (slice with skip) | 0.0 | 0.0 | 1.0 | | `sort` | 0.0 | 0.78516 | inf |","title":"List"},{"location":"benchmark_results/py37/set/","text":"timing | subject | `builtin` | `sqlitecollections` | ratio | | :------ | --------: | ------------------: | ----: | | `add (existing item)` | 0.00382 | 0.00646 | 1.69155 | | `add (new item)` | 0.00448 | 0.00823 | 1.8385 | | `__and__` | 0.00421 | 0.02887 | 6.85895 | | `clear` | 0.00424 | 0.0083 | 1.95877 | | `__contains__` | 0.0047 | 0.00448 | 0.95374 | | `copy` | 0.00436 | 0.02402 | 5.51593 | | `difference` | 0.00479 | 0.02438 | 5.09103 | | `discard` | 0.00461 | 0.00954 | 2.07046 | | `discard (no changes)` | 0.00441 | 0.00669 | 1.51802 | | `__ge__` | 0.00443 | 0.00467 | 1.0531 | | `__ge__` (not greater than or equals to) | 0.00491 | 0.0044 | 0.89667 | | `__gt__` | 0.00415 | 0.00911 | 2.19483 | | `__gt__` (not greater than) | 0.00434 | 0.02447 | 5.63917 | | `__iand__` | 0.00503 | 0.01273 | 2.53252 | | `__init__` | 0.00456 | 0.02735 | 5.9929 | | `intersection` | 0.00465 | 0.03383 | 7.27105 | | `intersection_update` | 0.00436 | 0.01246 | 2.85959 | | `__ior__` | 0.00465 | 0.01119 | 2.40688 | | `isdisjoint` | 0.00464 | 0.00466 | 1.00499 | | `isdisjoint` (not disjoint) | 0.00455 | 0.00497 | 1.09146 | | `issubset` | 0.00495 | 0.06065 | 12.26387 | | `issubset` (not subset) | 0.00478 | 0.03544 | 7.40844 | | `issuperset` | 0.00483 | 0.01587 | 3.28833 | | `issuperset` (not superset) | 0.00491 | 0.00501 | 1.02017 | | `__ixor__` | 0.00462 | 0.0369 | 7.9786 | | `__le__` | 0.00513 | 0.00584 | 1.13898 | | `__le__` (not less than or equals to) | 0.00491 | 0.00496 | 1.01055 | | `__len__` | 0.00446 | 0.00481 | 1.0787 | | `__lt__` | 0.00453 | 0.0056 | 1.23647 | | `__lt__` (not less than) | 0.00463 | 0.00445 | 0.9614 | | `__contains__` (unsuccessful search) | 0.00451 | 0.00474 | 1.05074 | | `__or__` | 0.00485 | 0.02828 | 5.82874 | | `pop` | 0.00473 | 0.00878 | 1.85705 | | `remove` | 0.00451 | 0.00958 | 2.12257 | | `__sub__` | 0.00477 | 0.03228 | 6.77103 | | `symmetric_difference` | 0.00563 | 0.06752 | 11.99566 | | `symmetric_difference_update` | 0.00546 | 0.03943 | 7.22214 | | `union` | 0.0048 | 0.0299 | 6.23205 | | `update` | 0.00552 | 0.0115 | 2.08282 | | `__xor__` | 0.00454 | 0.06459 | 14.21504 | approximate memory usage | subject | `builtin` | `sqlitecollections` | ratio | | :------ | --------: | ------------------: | ----: | | `add (existing item)` | 0.0 | 0.0 | 1.0 | | `add (new item)` | 0.0 | 0.0 | 1.0 | | `__and__` | 0.0 | 0.0 | 1.0 | | `clear` | 0.0 | 0.0 | 1.0 | | `__contains__` | 0.0 | 0.0 | 1.0 | | `copy` | 0.0 | 0.0 | 1.0 | | `difference` | 0.0 | 0.0 | 1.0 | | `discard` | 0.0 | 0.0 | 1.0 | | `discard (no changes)` | 0.0 | 0.0 | 1.0 | | `__ge__` | 0.0 | 0.0 | 1.0 | | `__ge__` (not greater than or equals to) | 0.0 | 0.0 | 1.0 | | `__gt__` | 0.0 | 0.0 | 1.0 | | `__gt__` (not greater than) | 0.0 | 0.0 | 1.0 | | `__iand__` | 0.0 | 0.0 | 1.0 | | `__init__` | 0.0 | 0.0 | 1.0 | | `intersection` | 0.0 | 0.0 | 1.0 | | `intersection_update` | 0.0 | 0.0 | 1.0 | | `__ior__` | 0.0 | 0.0 | 1.0 | | `isdisjoint` | 0.0 | 0.0 | 1.0 | | `isdisjoint` (not disjoint) | 0.0 | 0.0 | 1.0 | | `issubset` | 0.0 | 0.0 | 1.0 | | `issubset` (not subset) | 0.0 | 0.0 | 1.0 | | `issuperset` | 0.0 | 0.0 | 1.0 | | `issuperset` (not superset) | 0.0 | 0.0 | 1.0 | | `__ixor__` | 0.0 | 0.0 | 1.0 | | `__le__` | 0.0 | 0.0 | 1.0 | | `__le__` (not less than or equals to) | 0.0 | 0.0 | 1.0 | | `__len__` | 0.0 | 0.0 | 1.0 | | `__lt__` | 0.0 | 0.0 | 1.0 | | `__lt__` (not less than) | 0.0 | 0.0 | 1.0 | | `__contains__` (unsuccessful search) | 0.0 | 0.0 | 1.0 | | `__or__` | 0.0 | 0.0 | 1.0 | | `pop` | 0.0 | 0.0 | 1.0 | | `remove` | 0.0 | 0.0 | 1.0 | | `__sub__` | 0.0 | 0.0 | 1.0 | | `symmetric_difference` | 0.0 | 0.0 | 1.0 | | `symmetric_difference_update` | 0.0 | 0.0 | 1.0 | | `union` | 0.0 | 0.0 | 1.0 | | `update` | 0.0 | 0.0 | 1.0 | | `__xor__` | 0.0 | 0.0 | 1.0 |","title":"Set"},{"location":"benchmark_results/py38/dict/","text":"timing | subject | `builtin` | `sqlitecollections` | ratio | | :------ | --------: | ------------------: | ----: | | `clear` | 0.00331 | 0.00653 | 1.97271 | | `__contains__` | 0.00334 | 0.00332 | 0.9954 | | `copy` | 0.00332 | 0.04734 | 14.24503 | | `__delitem__` | 0.00334 | 0.00629 | 1.88457 | | `get` | 0.00329 | 0.00329 | 1.00045 | | `get (unsuccessful search)` | 0.00325 | 0.00332 | 1.02045 | | `__getitem__` | 0.00331 | 0.0033 | 0.99761 | | `__init__` | 0.00341 | 0.03754 | 11.01653 | | `items` | 0.00366 | 0.00942 | 2.57364 | | `__iter__` | 0.00341 | 0.00654 | 1.91716 | | `keys` | 0.0034 | 0.00661 | 1.94427 | | `__len__` | 0.00337 | 0.00379 | 1.12553 | | `__contains__` (unsuccessful search) | 0.00328 | 0.00335 | 1.02092 | | `pop` | 0.00337 | 0.00624 | 1.85252 | | `pop (unsuccessful search)` | 0.00339 | 0.00516 | 1.52322 | | `popitem` | 0.0034 | 0.00645 | 1.89878 | | `reversed` | 0.00328 | 0.00639 | 1.94527 | | `setdefault (unsuccessful search)` | 0.00338 | 0.00525 | 1.55138 | | `setdefault` | 0.00341 | 0.006 | 1.76043 | | `__setitem__` (add new item) | 0.00344 | 0.0063 | 1.83358 | | `__setitem__` (replace) | 0.00344 | 0.00703 | 2.04187 | | `update` | 0.00343 | 0.00633 | 1.84357 | | `update` (many) | 0.00427 | 0.03485 | 8.16904 | | `values` | 0.00349 | 0.0064 | 1.83236 | approximate memory usage | subject | `builtin` | `sqlitecollections` | ratio | | :------ | --------: | ------------------: | ----: | | `clear` | 0.0 | 0.0 | 1.0 | | `__contains__` | 0.0 | 0.0 | 1.0 | | `copy` | 0.06641 | 0.0 | 0.0 | | `__delitem__` | 0.0 | 0.0 | 1.0 | | `get` | 0.0 | 0.0 | 1.0 | | `get (unsuccessful search)` | 0.0 | 0.0 | 1.0 | | `__getitem__` | 0.0 | 0.0 | 1.0 | | `__init__` | 0.0 | 0.0 | 1.0 | | `items` | 0.03125 | 0.13672 | 4.375 | | `__iter__` | 0.0 | 0.08594 | inf | | `keys` | 0.0 | 0.0 | 1.0 | | `__len__` | 0.0 | 0.0 | 1.0 | | `__contains__` (unsuccessful search) | 0.0 | 0.0 | 1.0 | | `pop` | 0.0 | 0.0 | 1.0 | | `pop (unsuccessful search)` | 0.0 | 0.0 | 1.0 | | `popitem` | 0.0 | 0.0 | 1.0 | | `reversed` | 0.0 | 0.0 | 1.0 | | `setdefault (unsuccessful search)` | 0.0 | 0.0 | 1.0 | | `setdefault` | 0.0 | 0.0 | 1.0 | | `__setitem__` (add new item) | 0.0 | 0.0 | 1.0 | | `__setitem__` (replace) | 0.0 | 0.0 | 1.0 | | `update` | 0.0 | 0.0 | 1.0 | | `update` (many) | 0.03125 | 0.0 | 0.0 | | `values` | 0.125 | 0.0 | 0.0 |","title":"Dict"},{"location":"benchmark_results/py38/list/","text":"timing | subject | `builtin` | `sqlitecollections` | ratio | | :------ | --------: | ------------------: | ----: | | `__add__` | 0.00349 | 0.02924 | 8.38856 | | `append` | 0.00345 | 0.00567 | 1.64239 | | `clear` | 0.00337 | 0.00589 | 1.74873 | | `__contains__` | 0.00344 | 0.00363 | 1.05626 | | `copy` | 0.00341 | 0.02834 | 8.3093 | | `count` | 0.00338 | 0.00345 | 1.02137 | | `__init__` | 0.00344 | 0.0185 | 5.37754 | | `__delitem__` | 0.00347 | 0.00968 | 2.79074 | | `__delitem__` (slice) | 0.00339 | 0.01344 | 3.96353 | | `__delitem__` (slice with skip) | 0.00339 | 0.01342 | 3.95734 | | `extend` | 0.00344 | 0.00559 | 1.62524 | | `__getitem__` | 0.00341 | 0.00343 | 1.00752 | | `__getitem__` (slice) | 0.00339 | 0.01614 | 4.75603 | | `__getitem__` (slice with skip) | 0.0034 | 0.01021 | 3.00673 | | `__iadd__` | 0.00341 | 0.00578 | 1.69366 | | `__imult__` | 0.00342 | 0.01852 | 5.42201 | | `index` | 0.00341 | 0.00354 | 1.03958 | | `index` (unsuccessful search) | 0.00336 | 0.00363 | 1.08124 | | `insert` | 0.00345 | 0.0112 | 3.24713 | | `__len__` | 0.0034 | 0.00335 | 0.98736 | | `__mult__` | 0.0034 | 0.04695 | 13.79959 | | `__contains__` (unsuccessful search) | 0.00337 | 0.00341 | 1.01338 | | `pop` | 0.00341 | 0.00959 | 2.81238 | | `remove` | 0.00341 | 0.01165 | 3.41821 | | `__setitem__` | 0.00346 | 0.00585 | 1.69105 | | `__setitem__` (slice) | 0.00345 | 0.64812 | 188.06562 | | `__setitem__` (slice with skip) | 0.00344 | 0.0066 | 1.91876 | | `sort` | 0.00344 | 0.08369 | 24.3246 | approximate memory usage | subject | `builtin` | `sqlitecollections` | ratio | | :------ | --------: | ------------------: | ----: | | `__add__` | 0.0 | 0.0 | 1.0 | | `append` | 0.0 | 0.0 | 1.0 | | `clear` | 0.0 | 0.0 | 1.0 | | `__contains__` | 0.0 | 0.0 | 1.0 | | `copy` | 0.0 | 0.0 | 1.0 | | `count` | 0.0 | 0.0 | 1.0 | | `__init__` | 0.0 | 0.0 | 1.0 | | `__delitem__` | 0.0 | 0.0 | 1.0 | | `__delitem__` (slice) | 0.0 | 0.0 | 1.0 | | `__delitem__` (slice with skip) | 0.00391 | 0.0 | 0.0 | | `extend` | 0.0 | 0.0 | 1.0 | | `__getitem__` | 0.0 | 0.0 | 1.0 | | `__getitem__` (slice) | 0.0 | 0.0 | 1.0 | | `__getitem__` (slice with skip) | 0.0 | 0.0 | 1.0 | | `__iadd__` | 0.0 | 0.0 | 1.0 | | `__imult__` | 0.0 | 0.0 | 1.0 | | `index` | 0.0 | 0.0 | 1.0 | | `index` (unsuccessful search) | 0.0 | 0.0 | 1.0 | | `insert` | 0.0 | 0.0 | 1.0 | | `__len__` | 0.0 | 0.0 | 1.0 | | `__mult__` | 0.0 | 0.01172 | inf | | `__contains__` (unsuccessful search) | 0.0 | 0.0 | 1.0 | | `pop` | 0.0 | 0.0 | 1.0 | | `remove` | 0.0 | 0.0 | 1.0 | | `__setitem__` | 0.0 | 0.0 | 1.0 | | `__setitem__` (slice) | 0.0 | 0.0 | 1.0 | | `__setitem__` (slice with skip) | 0.0 | 0.0 | 1.0 | | `sort` | 0.0 | 0.73828 | inf |","title":"List"},{"location":"benchmark_results/py38/set/","text":"timing | subject | `builtin` | `sqlitecollections` | ratio | | :------ | --------: | ------------------: | ----: | | `add (existing item)` | 0.00338 | 0.00501 | 1.48191 | | `add (new item)` | 0.00342 | 0.00615 | 1.79768 | | `__and__` | 0.00334 | 0.0198 | 5.92045 | | `clear` | 0.00338 | 0.00605 | 1.78807 | | `__contains__` | 0.00339 | 0.00335 | 0.98768 | | `copy` | 0.00334 | 0.01473 | 4.40836 | | `difference` | 0.00335 | 0.01532 | 4.57213 | | `discard` | 0.00341 | 0.00653 | 1.91669 | | `discard (no changes)` | 0.00334 | 0.00501 | 1.50178 | | `__ge__` | 0.00336 | 0.00335 | 0.99783 | | `__ge__` (not greater than or equals to) | 0.00336 | 0.00338 | 1.00399 | | `__gt__` | 0.00337 | 0.0059 | 1.75053 | | `__gt__` (not greater than) | 0.00339 | 0.01723 | 5.08855 | | `__iand__` | 0.00334 | 0.00762 | 2.27775 | | `__init__` | 0.00338 | 0.01537 | 4.54662 | | `intersection` | 0.0034 | 0.02012 | 5.91826 | | `intersection_update` | 0.00338 | 0.00802 | 2.37221 | | `__ior__` | 0.0034 | 0.00634 | 1.86441 | | `isdisjoint` | 0.00341 | 0.00338 | 0.99026 | | `isdisjoint` (not disjoint) | 0.00336 | 0.00344 | 1.0249 | | `issubset` | 0.00336 | 0.03906 | 11.62506 | | `issubset` (not subset) | 0.00346 | 0.01857 | 5.3741 | | `issuperset` | 0.00342 | 0.01001 | 2.92389 | | `issuperset` (not superset) | 0.00339 | 0.00337 | 0.99232 | | `__ixor__` | 0.00339 | 0.02416 | 7.12351 | | `__le__` | 0.00349 | 0.00404 | 1.15962 | | `__le__` (not less than or equals to) | 0.00338 | 0.00338 | 0.99895 | | `__len__` | 0.00341 | 0.00337 | 0.98995 | | `__lt__` | 0.00341 | 0.00413 | 1.21232 | | `__lt__` (not less than) | 0.00331 | 0.00335 | 1.01239 | | `__contains__` (unsuccessful search) | 0.00333 | 0.00338 | 1.01506 | | `__or__` | 0.00339 | 0.01652 | 4.8697 | | `pop` | 0.00337 | 0.00585 | 1.73362 | | `remove` | 0.0034 | 0.00606 | 1.78358 | | `__sub__` | 0.0034 | 0.01494 | 4.40013 | | `symmetric_difference` | 0.00339 | 0.0397 | 11.70919 | | `symmetric_difference_update` | 0.0034 | 0.02396 | 7.03801 | | `union` | 0.00336 | 0.01665 | 4.95069 | | `update` | 0.00343 | 0.00616 | 1.7932 | | `__xor__` | 0.00353 | 0.03941 | 11.18048 | approximate memory usage | subject | `builtin` | `sqlitecollections` | ratio | | :------ | --------: | ------------------: | ----: | | `add (existing item)` | 0.0 | 0.0 | 1.0 | | `add (new item)` | 0.0 | 0.0 | 1.0 | | `__and__` | 0.0 | 0.0 | 1.0 | | `clear` | 0.0 | 0.0 | 1.0 | | `__contains__` | 0.0 | 0.0 | 1.0 | | `copy` | 0.0 | 0.0 | 1.0 | | `difference` | 0.0 | 0.0 | 1.0 | | `discard` | 0.0 | 0.0 | 1.0 | | `discard (no changes)` | 0.0 | 0.0 | 1.0 | | `__ge__` | 0.0 | 0.0 | 1.0 | | `__ge__` (not greater than or equals to) | 0.0 | 0.0 | 1.0 | | `__gt__` | 0.0 | 0.0 | 1.0 | | `__gt__` (not greater than) | 0.0 | 0.0 | 1.0 | | `__iand__` | 0.0 | 0.0 | 1.0 | | `__init__` | 0.0 | 0.0 | 1.0 | | `intersection` | 0.0 | 0.0 | 1.0 | | `intersection_update` | 0.0 | 0.0 | 1.0 | | `__ior__` | 0.0 | 0.0 | 1.0 | | `isdisjoint` | 0.0 | 0.0 | 1.0 | | `isdisjoint` (not disjoint) | 0.0 | 0.0 | 1.0 | | `issubset` | 0.0 | 0.0 | 1.0 | | `issubset` (not subset) | 0.0 | 0.0 | 1.0 | | `issuperset` | 0.0 | 0.0 | 1.0 | | `issuperset` (not superset) | 0.0 | 0.0 | 1.0 | | `__ixor__` | 0.0 | 0.0 | 1.0 | | `__le__` | 0.0 | 0.0 | 1.0 | | `__le__` (not less than or equals to) | 0.0 | 0.0 | 1.0 | | `__len__` | 0.0 | 0.0 | 1.0 | | `__lt__` | 0.0 | 0.0 | 1.0 | | `__lt__` (not less than) | 0.0 | 0.0 | 1.0 | | `__contains__` (unsuccessful search) | 0.0 | 0.0 | 1.0 | | `__or__` | 0.0 | 0.0 | 1.0 | | `pop` | 0.0 | 0.0 | 1.0 | | `remove` | 0.0 | 0.0 | 1.0 | | `__sub__` | 0.0 | 0.0 | 1.0 | | `symmetric_difference` | 0.0 | 0.0 | 1.0 | | `symmetric_difference_update` | 0.0 | 0.0 | 1.0 | | `union` | 0.0 | 0.0 | 1.0 | | `update` | 0.0 | 0.0 | 1.0 | | `__xor__` | 0.0 | 0.0 | 1.0 |","title":"Set"},{"location":"benchmark_results/py39/dict/","text":"timing | subject | `builtin` | `sqlitecollections` | ratio | | :------ | --------: | ------------------: | ----: | | `clear` | 0.00476 | 0.00824 | 1.73278 | | `__contains__` | 0.00482 | 0.00476 | 0.98637 | | `copy` | 0.00501 | 0.05868 | 11.70617 | | `__delitem__` | 0.00485 | 0.00835 | 1.72081 | | `get` | 0.00489 | 0.0048 | 0.98131 | | `get (unsuccessful search)` | 0.00488 | 0.00482 | 0.98789 | | `__getitem__` | 0.00488 | 0.0049 | 1.0025 | | `__init__` | 0.00491 | 0.04518 | 9.20748 | | `__ior__` | 0.00489 | 0.00844 | 1.72589 | | `__ior__` (many) | 0.00628 | 0.0422 | 6.72311 | | `items` | 0.00525 | 0.01233 | 2.35071 | | `__iter__` | 0.0049 | 0.00875 | 1.78783 | | `keys` | 0.00486 | 0.00904 | 1.86031 | | `__len__` | 0.00483 | 0.00481 | 0.99525 | | `__contains__` (unsuccessful search) | 0.00489 | 0.00484 | 0.98886 | | `__or__` | 0.00486 | 0.06065 | 12.47129 | | `__or__` (many) | 0.00646 | 0.11232 | 17.3848 | | `pop` | 0.00497 | 0.00933 | 1.87602 | | `pop (unsuccessful search)` | 0.00492 | 0.00703 | 1.42766 | | `popitem` | 0.00491 | 0.0089 | 1.81399 | | `reversed` | 0.00618 | 0.00856 | 1.3844 | | `setdefault (unsuccessful search)` | 0.00484 | 0.0071 | 1.46499 | | `setdefault` | 0.00483 | 0.00707 | 1.46332 | | `__setitem__` (add new item) | 0.00495 | 0.00834 | 1.68388 | | `__setitem__` (replace) | 0.00492 | 0.00893 | 1.8168 | | `update` | 0.00503 | 0.00833 | 1.65571 | | `update` (many) | 0.00589 | 0.04279 | 7.26654 | | `values` | 0.00479 | 0.00857 | 1.78913 | approximate memory usage | subject | `builtin` | `sqlitecollections` | ratio | | :------ | --------: | ------------------: | ----: | | `clear` | 0.0 | 0.0 | 1.0 | | `__contains__` | 0.0 | 0.0 | 1.0 | | `copy` | 0.0 | 0.0 | 1.0 | | `__delitem__` | 0.0 | 0.0 | 1.0 | | `get` | 0.0 | 0.0 | 1.0 | | `get (unsuccessful search)` | 0.0 | 0.0 | 1.0 | | `__getitem__` | 0.0 | 0.0 | 1.0 | | `__init__` | 0.0 | 0.0 | 1.0 | | `__ior__` | 0.0 | 0.0 | 1.0 | | `__ior__` (many) | 0.11328 | 0.0 | 0.0 | | `items` | 0.10938 | 0.23438 | 2.14286 | | `__iter__` | 0.0 | 0.0 | 1.0 | | `keys` | 0.0 | 0.0 | 1.0 | | `__len__` | 0.0 | 0.0 | 1.0 | | `__contains__` (unsuccessful search) | 0.0 | 0.0 | 1.0 | | `__or__` | 0.0 | 0.0 | 1.0 | | `__or__` (many) | 0.00391 | 0.0 | 0.0 | | `pop` | 0.0 | 0.0 | 1.0 | | `pop (unsuccessful search)` | 0.0 | 0.0 | 1.0 | | `popitem` | 0.0 | 0.0 | 1.0 | | `reversed` | 0.0 | 0.0 | 1.0 | | `setdefault (unsuccessful search)` | 0.0 | 0.0 | 1.0 | | `setdefault` | 0.0 | 0.0 | 1.0 | | `__setitem__` (add new item) | 0.0 | 0.0 | 1.0 | | `__setitem__` (replace) | 0.0 | 0.0 | 1.0 | | `update` | 0.0 | 0.0 | 1.0 | | `update` (many) | 0.0 | 0.0 | 1.0 | | `values` | 0.0 | 0.0 | 1.0 |","title":"Dict"},{"location":"benchmark_results/py39/list/","text":"timing | subject | `builtin` | `sqlitecollections` | ratio | | :------ | --------: | ------------------: | ----: | | `__add__` | 0.00489 | 0.03707 | 7.57677 | | `append` | 0.00496 | 0.00771 | 1.55544 | | `clear` | 0.00482 | 0.00817 | 1.69352 | | `__contains__` | 0.00487 | 0.00493 | 1.01117 | | `copy` | 0.00491 | 0.03455 | 7.03899 | | `count` | 0.00484 | 0.00491 | 1.01648 | | `__init__` | 0.0049 | 0.02544 | 5.18872 | | `__delitem__` | 0.0049 | 0.01248 | 2.54816 | | `__delitem__` (slice) | 0.00487 | 0.01665 | 3.42145 | | `__delitem__` (slice with skip) | 0.00488 | 0.01656 | 3.39052 | | `extend` | 0.00491 | 0.00771 | 1.57049 | | `__getitem__` | 0.0049 | 0.00483 | 0.98547 | | `__getitem__` (slice) | 0.0049 | 0.02053 | 4.1933 | | `__getitem__` (slice with skip) | 0.00485 | 0.01295 | 2.66979 | | `__iadd__` | 0.00492 | 0.00774 | 1.57284 | | `__imult__` | 0.00486 | 0.02314 | 4.75685 | | `index` | 0.00481 | 0.00513 | 1.06499 | | `index` (unsuccessful search) | 0.00484 | 0.00514 | 1.06192 | | `insert` | 0.00492 | 0.01415 | 2.87754 | | `__len__` | 0.00485 | 0.00485 | 1.00044 | | `__mult__` | 0.00491 | 0.05802 | 11.82526 | | `__contains__` (unsuccessful search) | 0.00489 | 0.00496 | 1.01421 | | `pop` | 0.00498 | 0.01224 | 2.45672 | | `remove` | 0.00486 | 0.01435 | 2.95026 | | `__setitem__` | 0.00495 | 0.00811 | 1.6397 | | `__setitem__` (slice) | 0.00495 | 0.74917 | 151.22877 | | `__setitem__` (slice with skip) | 0.00487 | 0.00841 | 1.72683 | | `sort` | 0.00496 | 0.11201 | 22.57322 | approximate memory usage | subject | `builtin` | `sqlitecollections` | ratio | | :------ | --------: | ------------------: | ----: | | `__add__` | 0.0 | 0.0 | 1.0 | | `append` | 0.0 | 0.0 | 1.0 | | `clear` | 0.0 | 0.0 | 1.0 | | `__contains__` | 0.0 | 0.0 | 1.0 | | `copy` | 0.0 | 0.0 | 1.0 | | `count` | 0.0 | 0.0 | 1.0 | | `__init__` | 0.0 | 0.0 | 1.0 | | `__delitem__` | 0.0 | 0.0 | 1.0 | | `__delitem__` (slice) | 0.0 | 0.0 | 1.0 | | `__delitem__` (slice with skip) | 0.0 | 0.0 | 1.0 | | `extend` | 0.0 | 0.0 | 1.0 | | `__getitem__` | 0.0 | 0.0 | 1.0 | | `__getitem__` (slice) | 0.0 | 0.0 | 1.0 | | `__getitem__` (slice with skip) | 0.0 | 0.0 | 1.0 | | `__iadd__` | 0.0 | 0.0 | 1.0 | | `__imult__` | 0.0 | 0.0 | 1.0 | | `index` | 0.0 | 0.0 | 1.0 | | `index` (unsuccessful search) | 0.0 | 0.0 | 1.0 | | `insert` | 0.0 | 0.0 | 1.0 | | `__len__` | 0.0 | 0.0 | 1.0 | | `__mult__` | 0.0 | 0.00781 | inf | | `__contains__` (unsuccessful search) | 0.0 | 0.0 | 1.0 | | `pop` | 0.0 | 0.0 | 1.0 | | `remove` | 0.0 | 0.0 | 1.0 | | `__setitem__` | 0.0 | 0.0 | 1.0 | | `__setitem__` (slice) | 0.0 | 0.0 | 1.0 | | `__setitem__` (slice with skip) | 0.0 | 0.0 | 1.0 | | `sort` | 0.0 | 0.68359 | inf |","title":"List"},{"location":"benchmark_results/py39/set/","text":"timing | subject | `builtin` | `sqlitecollections` | ratio | | :------ | --------: | ------------------: | ----: | | `add (existing item)` | 0.00562 | 0.00745 | 1.32579 | | `add (new item)` | 0.00502 | 0.00813 | 1.61985 | | `__and__` | 0.0051 | 0.02467 | 4.83758 | | `clear` | 0.00482 | 0.00793 | 1.64504 | | `__contains__` | 0.0048 | 0.00477 | 0.99375 | | `copy` | 0.00484 | 0.01997 | 4.12639 | | `difference` | 0.00479 | 0.01911 | 3.98584 | | `discard` | 0.00485 | 0.00796 | 1.6436 | | `discard (no changes)` | 0.00489 | 0.00653 | 1.33522 | | `__ge__` | 0.00486 | 0.00476 | 0.98016 | | `__ge__` (not greater than or equals to) | 0.00475 | 0.00482 | 1.0144 | | `__gt__` | 0.00483 | 0.00809 | 1.6756 | | `__gt__` (not greater than) | 0.00483 | 0.02119 | 4.38659 | | `__iand__` | 0.00486 | 0.01066 | 2.19231 | | `__init__` | 0.00479 | 0.0194 | 4.05307 | | `intersection` | 0.00474 | 0.02424 | 5.11281 | | `intersection_update` | 0.0048 | 0.01133 | 2.36028 | | `__ior__` | 0.00483 | 0.00879 | 1.82045 | | `isdisjoint` | 0.00481 | 0.00472 | 0.98223 | | `isdisjoint` (not disjoint) | 0.00476 | 0.00474 | 0.99588 | | `issubset` | 0.00476 | 0.04902 | 10.28998 | | `issubset` (not subset) | 0.00492 | 0.02415 | 4.91228 | | `issuperset` | 0.00482 | 0.0128 | 2.65611 | | `issuperset` (not superset) | 0.00478 | 0.00485 | 1.01463 | | `__ixor__` | 0.00481 | 0.02977 | 6.19205 | | `__le__` | 0.00479 | 0.00558 | 1.16559 | | `__le__` (not less than or equals to) | 0.00476 | 0.00472 | 0.99296 | | `__len__` | 0.00488 | 0.00489 | 1.0022 | | `__lt__` | 0.00486 | 0.0058 | 1.19434 | | `__lt__` (not less than) | 0.00484 | 0.0049 | 1.01145 | | `__contains__` (unsuccessful search) | 0.00479 | 0.00488 | 1.01951 | | `__or__` | 0.00523 | 0.0211 | 4.03314 | | `pop` | 0.00477 | 0.00792 | 1.66051 | | `remove` | 0.00514 | 0.00822 | 1.60017 | | `__sub__` | 0.00481 | 0.01933 | 4.01738 | | `symmetric_difference` | 0.00484 | 0.04891 | 10.09548 | | `symmetric_difference_update` | 0.00479 | 0.02922 | 6.09709 | | `union` | 0.00479 | 0.0204 | 4.26068 | | `update` | 0.00488 | 0.0093 | 1.90341 | | `__xor__` | 0.00473 | 0.04844 | 10.23437 | approximate memory usage | subject | `builtin` | `sqlitecollections` | ratio | | :------ | --------: | ------------------: | ----: | | `add (existing item)` | 0.0 | 0.0 | 1.0 | | `add (new item)` | 0.0 | 0.0 | 1.0 | | `__and__` | 0.0 | 0.0 | 1.0 | | `clear` | 0.0 | 0.0 | 1.0 | | `__contains__` | 0.0 | 0.0 | 1.0 | | `copy` | 0.0 | 0.0 | 1.0 | | `difference` | 0.0 | 0.0 | 1.0 | | `discard` | 0.0 | 0.0 | 1.0 | | `discard (no changes)` | 0.0 | 0.0 | 1.0 | | `__ge__` | 0.0 | 0.0 | 1.0 | | `__ge__` (not greater than or equals to) | 0.0 | 0.0 | 1.0 | | `__gt__` | 0.0 | 0.0 | 1.0 | | `__gt__` (not greater than) | 0.0 | 0.0 | 1.0 | | `__iand__` | 0.0 | 0.0 | 1.0 | | `__init__` | 0.0 | 0.0 | 1.0 | | `intersection` | 0.0 | 0.0 | 1.0 | | `intersection_update` | 0.0 | 0.0 | 1.0 | | `__ior__` | 0.0 | 0.0 | 1.0 | | `isdisjoint` | 0.0 | 0.0 | 1.0 | | `isdisjoint` (not disjoint) | 0.0 | 0.0 | 1.0 | | `issubset` | 0.0 | 0.0 | 1.0 | | `issubset` (not subset) | 0.0 | 0.0 | 1.0 | | `issuperset` | 0.0 | 0.0 | 1.0 | | `issuperset` (not superset) | 0.0 | 0.0 | 1.0 | | `__ixor__` | 0.0 | 0.0 | 1.0 | | `__le__` | 0.0 | 0.0 | 1.0 | | `__le__` (not less than or equals to) | 0.0 | 0.0 | 1.0 | | `__len__` | 0.0 | 0.0 | 1.0 | | `__lt__` | 0.0 | 0.0 | 1.0 | | `__lt__` (not less than) | 0.0 | 0.0 | 1.0 | | `__contains__` (unsuccessful search) | 0.0 | 0.0 | 1.0 | | `__or__` | 0.0 | 0.0 | 1.0 | | `pop` | 0.0 | 0.0 | 1.0 | | `remove` | 0.0 | 0.0 | 1.0 | | `__sub__` | 0.0 | 0.0 | 1.0 | | `symmetric_difference` | 0.0 | 0.0 | 1.0 | | `symmetric_difference_update` | 0.0 | 0.0 | 1.0 | | `union` | 0.0 | 0.0 | 1.0 | | `update` | 0.0 | 0.0 | 1.0 | | `__xor__` | 0.0 | 0.0 | 1.0 |","title":"Set"},{"location":"usage/common/","text":"Common Features","title":"common features"},{"location":"usage/common/#common-features","text":"","title":"Common Features"},{"location":"usage/dict/","text":"Dict Dict is a container compatible with the built-in dict , which serializes keys and values and stores them in a sqlite3 database. It preserves insertion order for all supported python versions. Dict[KT, VT](...) Constructor. Type Parameters: KT : key type VT : value type Arguments: data : Mapping[KT, VT] or Iterable[Tuple[KT, VT]] , optional, positional-only argument, defualt= None ; Initial data. If None or no argument is given, persistent data is used as is if available, otherwise persistent data in the corresponding table is cleared and given data is stored instead. connection : str or sqlite3.Connection , optional, default= None ; If None , temporary file is automatically created. If connection is a str , it will be used as the sqlite3 database file name. You can pass a sqlite3.Connection directly. table_name : str , optional, default= None ; Table name of this container. If None , an auto-generated unique name will be used. Available characters are letters, numbers, and underscores ( _ ). key_serializer : Callable[[KT], bytes] , optional, default= None ; Function to serialize key. If None , pickle.dumps is used. key_deserializer : Callable[[bytes], KT] , optional, default= None ; Function to deserialize key. If None , pickle.loads is used. value_serializer : Callable[[VT], bytes] , optional, default= None ; Function to serialize value. If None , key_serializer is used. value_deserializer : Callable[[bytes], VT] , optional, default= None ; Function to deserialize value. If None , key_deserializer is used. persist : bool , optional, default= True ; If True , table won't be deleted even when the object is deleted. If False , the table is deleted when this object is deleted. len(d) Return the number of items in d: Dict[KT, VT] Return value: int : The number of items in d d[key] Get item of d with key key . Raises a KeyError if key is not in the map. Arguments: key : KT ; Key to retrieve corresponding value Return value: VT : Item of d with key key d[key] = value Set d[key] to value . Arguments: key : KT ; Key to be set value : VT ; Value to be set Return value: None del d[key] Delete d[key] . Arguments: key : KT ; Key to be deleted Return value: None key in d Return whether if key is in d Arguments: key : KT ; Key to be checked Return value: bool : True if key is in d and False otherwise. key not in d Return whether if key is not in d Arguments: key : KT ; Key to be checked Return value: bool : True if key is not in d and False otherwise. iter(d) Return an iterator over the keys of d Return value: Iterator[KT] : an iterator over the keys of d clear() Remove all items from the dictionary Return value: None copy() Return a copy of the dictionary. The actual behavior is to create a table with a unique table name and copy the keys and the values to the new table. Therefore, unlike the built-in dict copy, the behavior is similar to deep copy. Be aware that the copied dictionary is volatile. Return value: Dict[KT, VT] : A volatile copy of the dictionary. get(key[, default]) Return the value for key if key is in the dictionary, else default . If default is not given, it defaults to None , so that this method never raises a KeyError . Arguments: key : KT ; Key to retrieve corresponding value if exists. default : VT , optional, default= None ; Default value in case that key is not in the dictionary Return value: VT : Item of the dictionary with key key if key is in the dictionary, default otherwise. items() Return a new view of the dictionary\u2019s items (key-value pairs). Return value: ItemsView : View object of the dictionary's items keys() Return a new view of the dictionary's keys. Return value: KeysView[KT] : View object of the dictionary's keys. pop(key[, default]) If key is in the dictionary, remove it and return its value, else return default . If default is not given and key is not in the dictionary, a KeyError is raised. Arguments: key : KT ; Key to retrieve corresponding value if exists. default : VT , optional, default= None ; Default value in case that key is not in the dictionary Return value: VT : Item of the dictionary with key key if key is in the dictionary, default otherwise. popitem() Remove and return a key-value pair from the dictionary. Pairs are returned in LIFO order. If the dictionary is empty, raises a KeyError . Return value: Tuple[KT, VT] : Key-value pair that were last inserted into the dictionary reversed(d) Return a reverse iterator over the keys of the dictionary. (provided only python version 3.8 and above) Return value: Iterator[KT] : Reverse iterator over the keys of the dictionary setdefault(key[, default]) If key is in the dictionary, return its value. If not, insert key with a value of default and return default . Arguments: key : KT ; Key to retrieve or set the value default : VT , optional, default= None ; Value to be set if key is not in the dictionary Return value: VT : Item of the dictionary with key key if key is in the dictionary, default otherwise. update([other, **kwargs]) Update the dictionary with the key-value pairs from other , overwriting existing keys. Arguments: other : Mapping[KT, VT] or Iterable[Tuple[KT, VT]] , optional; Key-value pairs to be added kwargs : VT , optional; values to be added Return value: None values() Return a new view of the dictionary's values. Return value: ValuesView : View object of the dictionary's values d | other Create a new dictionary with the merged keys and values of d and other , which must both be dictionaries. The values of other take priority when d and other share keys. The return value is volatile by default. (provided only python version 3.9 and above) Arguments: other : Mapping[KT, VT] or Iterable[Tuple[KT, VT]] ; Key-value pairs to be merged Return value: Dict[KT, VT] : A new volatile dictionary object. d |= other Update the dictionary d with keys and values from other . (provided only python version 3.9 and above) Arguments: other : Mapping[KT, VT] or Iterable[Tuple[KT, VT]] ; Key-value pairs to be merged Return value: Dict[KT, VT] : The dictionary object.","title":"Dict"},{"location":"usage/dict/#dict","text":"Dict is a container compatible with the built-in dict , which serializes keys and values and stores them in a sqlite3 database. It preserves insertion order for all supported python versions.","title":"Dict"},{"location":"usage/dict/#dictkt-vt","text":"Constructor.","title":"Dict[KT, VT](...)"},{"location":"usage/dict/#type-parameters","text":"KT : key type VT : value type","title":"Type Parameters:"},{"location":"usage/dict/#arguments","text":"data : Mapping[KT, VT] or Iterable[Tuple[KT, VT]] , optional, positional-only argument, defualt= None ; Initial data. If None or no argument is given, persistent data is used as is if available, otherwise persistent data in the corresponding table is cleared and given data is stored instead. connection : str or sqlite3.Connection , optional, default= None ; If None , temporary file is automatically created. If connection is a str , it will be used as the sqlite3 database file name. You can pass a sqlite3.Connection directly. table_name : str , optional, default= None ; Table name of this container. If None , an auto-generated unique name will be used. Available characters are letters, numbers, and underscores ( _ ). key_serializer : Callable[[KT], bytes] , optional, default= None ; Function to serialize key. If None , pickle.dumps is used. key_deserializer : Callable[[bytes], KT] , optional, default= None ; Function to deserialize key. If None , pickle.loads is used. value_serializer : Callable[[VT], bytes] , optional, default= None ; Function to serialize value. If None , key_serializer is used. value_deserializer : Callable[[bytes], VT] , optional, default= None ; Function to deserialize value. If None , key_deserializer is used. persist : bool , optional, default= True ; If True , table won't be deleted even when the object is deleted. If False , the table is deleted when this object is deleted.","title":"Arguments:"},{"location":"usage/dict/#lend","text":"Return the number of items in d: Dict[KT, VT]","title":"len(d)"},{"location":"usage/dict/#return-value","text":"int : The number of items in d","title":"Return value:"},{"location":"usage/dict/#dkey","text":"Get item of d with key key . Raises a KeyError if key is not in the map.","title":"d[key]"},{"location":"usage/dict/#arguments_1","text":"key : KT ; Key to retrieve corresponding value","title":"Arguments:"},{"location":"usage/dict/#return-value_1","text":"VT : Item of d with key key","title":"Return value:"},{"location":"usage/dict/#dkey-value","text":"Set d[key] to value .","title":"d[key] = value"},{"location":"usage/dict/#arguments_2","text":"key : KT ; Key to be set value : VT ; Value to be set","title":"Arguments:"},{"location":"usage/dict/#return-value_2","text":"None","title":"Return value:"},{"location":"usage/dict/#del-dkey","text":"Delete d[key] .","title":"del d[key]"},{"location":"usage/dict/#arguments_3","text":"key : KT ; Key to be deleted","title":"Arguments:"},{"location":"usage/dict/#return-value_3","text":"None","title":"Return value:"},{"location":"usage/dict/#key-in-d","text":"Return whether if key is in d","title":"key in d"},{"location":"usage/dict/#arguments_4","text":"key : KT ; Key to be checked","title":"Arguments:"},{"location":"usage/dict/#return-value_4","text":"bool : True if key is in d and False otherwise.","title":"Return value:"},{"location":"usage/dict/#key-not-in-d","text":"Return whether if key is not in d","title":"key not in d"},{"location":"usage/dict/#arguments_5","text":"key : KT ; Key to be checked","title":"Arguments:"},{"location":"usage/dict/#return-value_5","text":"bool : True if key is not in d and False otherwise.","title":"Return value:"},{"location":"usage/dict/#iterd","text":"Return an iterator over the keys of d","title":"iter(d)"},{"location":"usage/dict/#return-value_6","text":"Iterator[KT] : an iterator over the keys of d","title":"Return value:"},{"location":"usage/dict/#clear","text":"Remove all items from the dictionary","title":"clear()"},{"location":"usage/dict/#return-value_7","text":"None","title":"Return value:"},{"location":"usage/dict/#copy","text":"Return a copy of the dictionary. The actual behavior is to create a table with a unique table name and copy the keys and the values to the new table. Therefore, unlike the built-in dict copy, the behavior is similar to deep copy. Be aware that the copied dictionary is volatile.","title":"copy()"},{"location":"usage/dict/#return-value_8","text":"Dict[KT, VT] : A volatile copy of the dictionary.","title":"Return value:"},{"location":"usage/dict/#getkey-default","text":"Return the value for key if key is in the dictionary, else default . If default is not given, it defaults to None , so that this method never raises a KeyError .","title":"get(key[, default])"},{"location":"usage/dict/#arguments_6","text":"key : KT ; Key to retrieve corresponding value if exists. default : VT , optional, default= None ; Default value in case that key is not in the dictionary","title":"Arguments:"},{"location":"usage/dict/#return-value_9","text":"VT : Item of the dictionary with key key if key is in the dictionary, default otherwise.","title":"Return value:"},{"location":"usage/dict/#items","text":"Return a new view of the dictionary\u2019s items (key-value pairs).","title":"items()"},{"location":"usage/dict/#return-value_10","text":"ItemsView : View object of the dictionary's items","title":"Return value:"},{"location":"usage/dict/#keys","text":"Return a new view of the dictionary's keys.","title":"keys()"},{"location":"usage/dict/#return-value_11","text":"KeysView[KT] : View object of the dictionary's keys.","title":"Return value:"},{"location":"usage/dict/#popkey-default","text":"If key is in the dictionary, remove it and return its value, else return default . If default is not given and key is not in the dictionary, a KeyError is raised.","title":"pop(key[, default])"},{"location":"usage/dict/#arguments_7","text":"key : KT ; Key to retrieve corresponding value if exists. default : VT , optional, default= None ; Default value in case that key is not in the dictionary","title":"Arguments:"},{"location":"usage/dict/#return-value_12","text":"VT : Item of the dictionary with key key if key is in the dictionary, default otherwise.","title":"Return value:"},{"location":"usage/dict/#popitem","text":"Remove and return a key-value pair from the dictionary. Pairs are returned in LIFO order. If the dictionary is empty, raises a KeyError .","title":"popitem()"},{"location":"usage/dict/#return-value_13","text":"Tuple[KT, VT] : Key-value pair that were last inserted into the dictionary","title":"Return value:"},{"location":"usage/dict/#reversedd","text":"Return a reverse iterator over the keys of the dictionary. (provided only python version 3.8 and above)","title":"reversed(d)"},{"location":"usage/dict/#return-value_14","text":"Iterator[KT] : Reverse iterator over the keys of the dictionary","title":"Return value:"},{"location":"usage/dict/#setdefaultkey-default","text":"If key is in the dictionary, return its value. If not, insert key with a value of default and return default .","title":"setdefault(key[, default])"},{"location":"usage/dict/#arguments_8","text":"key : KT ; Key to retrieve or set the value default : VT , optional, default= None ; Value to be set if key is not in the dictionary","title":"Arguments:"},{"location":"usage/dict/#return-value_15","text":"VT : Item of the dictionary with key key if key is in the dictionary, default otherwise.","title":"Return value:"},{"location":"usage/dict/#updateother-kwargs","text":"Update the dictionary with the key-value pairs from other , overwriting existing keys.","title":"update([other, **kwargs])"},{"location":"usage/dict/#arguments_9","text":"other : Mapping[KT, VT] or Iterable[Tuple[KT, VT]] , optional; Key-value pairs to be added kwargs : VT , optional; values to be added","title":"Arguments:"},{"location":"usage/dict/#return-value_16","text":"None","title":"Return value:"},{"location":"usage/dict/#values","text":"Return a new view of the dictionary's values.","title":"values()"},{"location":"usage/dict/#return-value_17","text":"ValuesView : View object of the dictionary's values","title":"Return value:"},{"location":"usage/dict/#d-other","text":"Create a new dictionary with the merged keys and values of d and other , which must both be dictionaries. The values of other take priority when d and other share keys. The return value is volatile by default. (provided only python version 3.9 and above)","title":"d | other"},{"location":"usage/dict/#arguments_10","text":"other : Mapping[KT, VT] or Iterable[Tuple[KT, VT]] ; Key-value pairs to be merged","title":"Arguments:"},{"location":"usage/dict/#return-value_18","text":"Dict[KT, VT] : A new volatile dictionary object.","title":"Return value:"},{"location":"usage/dict/#d-other_1","text":"Update the dictionary d with keys and values from other . (provided only python version 3.9 and above)","title":"d |= other"},{"location":"usage/dict/#arguments_11","text":"other : Mapping[KT, VT] or Iterable[Tuple[KT, VT]] ; Key-value pairs to be merged","title":"Arguments:"},{"location":"usage/dict/#return-value_19","text":"Dict[KT, VT] : The dictionary object.","title":"Return value:"},{"location":"usage/factory/","text":"factory module factory module contains a factory for each container: ListFactory for List , SetFactory for Set and DictFactory for Dict . They replace constructors of each container that require extra arguments such as connection , serializer , deserializer etc., and allow users to construct a container without specifying those extra arguments. Example The results of the following two examples are almost the same (except for the auto-generated table names). Without factory: import sqlite3 import sqlitecollections as sc conn = sqlite3.connect(\"path/to/file.db\") def encode(x: str) -> bytes: return x.encode(\"utf-8\") def decode(x: bytes) -> str: return x.decode(\"utf-8\") l1 = sc.List[str]([\"Alice\", \"Bob\", \"Carol\"], connection=conn, serializer=encode, deserializer=decode) l2 = sc.List[str]([\"Dave\"], connection=conn, serializer=encode, deserializer=decode) l3 = sc.List[str]([\"Erin\"], connection=conn, serializer=encode, deserializer=decode) With factory: import sqlite3 from sqlitecollections import factory conn = sqlite3.connect(\"path/to/file.db\") def encode(x: str) -> bytes: return x.encode(\"utf-8\") def decode(x: bytes) -> str: return x.decode(\"utf-8\") list_ = factory.ListFactory[str](connection=conn, serializer=encode, deserializer=decode) l1 = list_([\"Alice\", \"Bob\", \"Carol\"]) l2 = list_([\"Dave\"]) l3 = list_([\"Erin\"]) ListFactory ListFactory[T](...) Constructor of ListFactory which constructs List . Type Parameters: T : value type of the List Arguments: connection : str or sqlite3.Connection , optional, default= None ; If None , temporary file is automatically created. If connection is a str , it will be used as the sqlite3 database file name. You can pass a sqlite3.Connection directly. serializer : Callable[[T], bytes] , optional, default= None ; Function to serialize value. If None , pickle.dumps is used. deserializer : Callable[[bytes], T] , optional, default= None ; Function to deserialize value. If None , pickle.loads is used. list_(data) Construct List[T] with connection, serializer and deserializer preset from ListFactory[T] list_ . Arguments: data : Iterable[T] , optional, defualt= None ; Initial data. Return value: List[T] : connection, serializer and deserializer are the same as those of the factory list_ . create(data) Construct List[T] with connection, serializer and deserializer preset from the factory. Arguments: data : Iterable[T] , optional, defualt= None ; Initial data. Return value: List[T] : connection, serializer and deserializer are the same as those of the factory. === DictFactory DictFactory[KT, VT](...) Constructor of DictFactory which constructs Dict . Type Parameters: KT : key type of the Dict VT : value type of the Dict Arguments: connection : str or sqlite3.Connection , optional, default= None ; If None , temporary file is automatically created. If connection is a str , it will be used as the sqlite3 database file name. You can pass a sqlite3.Connection directly. key_serializer : Callable[[KT], bytes] , optional, default= None ; Function to serialize key. If None , pickle.dumps is used. key_deserializer : Callable[[bytes], KT] , optional, default= None ; Function to deserialize key. If None , pickle.loads is used. value_serializer : Callable[[VT], bytes] , optional, default= None ; Function to serialize value. If None , key_serializer is used. value_deserializer : Callable[[bytes], VT] , optional, default= None ; Function to deserialize value. If None , key_deserializer is used. dict_(data, **kwargs) Construct Dict[KT, VT] with connection, key*serializer, etc., preset from DictFactory[KT, VT] dict* . Arguments: data : Mapping[KT, VT] or Iterable[Tuple[KT, VT]] , optional, defualt= None ; Initial data. **kwargs : VT , optional; Appended to initial data. Return value: Dict[KT, VT] : connection, key*serializers, etc., are the same as those of the factory dict* . create(data, **kwargs) Construct Dict[KT, VT] with connection, key_serializer, etc., preset from the factory. Arguments: data : Mapping[KT, VT] or Iterable[Tuple[KT, VT]] , optional, defualt= None ; Initial data. **kwargs : VT , optional; Appended to initial data. Return value: Dict[KT, VT] : connection, key_serializers, etc., are the same as those of the factory. === SetFactory SetFactory[T](...) Constructor of SetFactory which constructs Set . Type Parameters: T : value type of the Set Arguments: connection : str or sqlite3.Connection , optional, default= None ; If None , temporary file is automatically created. If connection is a str , it will be used as the sqlite3 database file name. You can pass a sqlite3.Connection directly. serializer : Callable[[T], bytes] , optional, default= None ; Function to serialize value. If None , pickle.dumps is used. deserializer : Callable[[bytes], T] , optional, default= None ; Function to deserialize value. If None , pickle.loads is used. set_(data) Construct Set[T] with connection, serializer and deserializer preset from SetFactory[T] set_ . Arguments: data : Iterable[T] , optional, defualt= None ; Initial data. Return value: Set[T] : connection, serializer and deserializer are the same as those of the factory set_ . create(data) Construct Set[T] with connection, serializer and deserializer preset from the factory. Arguments: data : Iterable[T] , optional, defualt= None ; Initial data. Return value: Set[T] : connection, serializer and deserializer are the same as those of the factory. ===","title":"factory"},{"location":"usage/factory/#factory-module","text":"factory module contains a factory for each container: ListFactory for List , SetFactory for Set and DictFactory for Dict . They replace constructors of each container that require extra arguments such as connection , serializer , deserializer etc., and allow users to construct a container without specifying those extra arguments.","title":"factory module"},{"location":"usage/factory/#example","text":"The results of the following two examples are almost the same (except for the auto-generated table names). Without factory: import sqlite3 import sqlitecollections as sc conn = sqlite3.connect(\"path/to/file.db\") def encode(x: str) -> bytes: return x.encode(\"utf-8\") def decode(x: bytes) -> str: return x.decode(\"utf-8\") l1 = sc.List[str]([\"Alice\", \"Bob\", \"Carol\"], connection=conn, serializer=encode, deserializer=decode) l2 = sc.List[str]([\"Dave\"], connection=conn, serializer=encode, deserializer=decode) l3 = sc.List[str]([\"Erin\"], connection=conn, serializer=encode, deserializer=decode) With factory: import sqlite3 from sqlitecollections import factory conn = sqlite3.connect(\"path/to/file.db\") def encode(x: str) -> bytes: return x.encode(\"utf-8\") def decode(x: bytes) -> str: return x.decode(\"utf-8\") list_ = factory.ListFactory[str](connection=conn, serializer=encode, deserializer=decode) l1 = list_([\"Alice\", \"Bob\", \"Carol\"]) l2 = list_([\"Dave\"]) l3 = list_([\"Erin\"])","title":"Example"},{"location":"usage/factory/#listfactory","text":"","title":"ListFactory"},{"location":"usage/factory/#listfactoryt","text":"Constructor of ListFactory which constructs List .","title":"ListFactory[T](...)"},{"location":"usage/factory/#type-parameters","text":"T : value type of the List","title":"Type Parameters:"},{"location":"usage/factory/#arguments","text":"connection : str or sqlite3.Connection , optional, default= None ; If None , temporary file is automatically created. If connection is a str , it will be used as the sqlite3 database file name. You can pass a sqlite3.Connection directly. serializer : Callable[[T], bytes] , optional, default= None ; Function to serialize value. If None , pickle.dumps is used. deserializer : Callable[[bytes], T] , optional, default= None ; Function to deserialize value. If None , pickle.loads is used.","title":"Arguments:"},{"location":"usage/factory/#list_data","text":"Construct List[T] with connection, serializer and deserializer preset from ListFactory[T] list_ .","title":"list_(data)"},{"location":"usage/factory/#arguments_1","text":"data : Iterable[T] , optional, defualt= None ; Initial data.","title":"Arguments:"},{"location":"usage/factory/#return-value","text":"List[T] : connection, serializer and deserializer are the same as those of the factory list_ .","title":"Return value:"},{"location":"usage/factory/#createdata","text":"Construct List[T] with connection, serializer and deserializer preset from the factory.","title":"create(data)"},{"location":"usage/factory/#arguments_2","text":"data : Iterable[T] , optional, defualt= None ; Initial data.","title":"Arguments:"},{"location":"usage/factory/#return-value_1","text":"List[T] : connection, serializer and deserializer are the same as those of the factory. ===","title":"Return value:"},{"location":"usage/factory/#dictfactory","text":"","title":"DictFactory"},{"location":"usage/factory/#dictfactorykt-vt","text":"Constructor of DictFactory which constructs Dict .","title":"DictFactory[KT, VT](...)"},{"location":"usage/factory/#type-parameters_1","text":"KT : key type of the Dict VT : value type of the Dict","title":"Type Parameters:"},{"location":"usage/factory/#arguments_3","text":"connection : str or sqlite3.Connection , optional, default= None ; If None , temporary file is automatically created. If connection is a str , it will be used as the sqlite3 database file name. You can pass a sqlite3.Connection directly. key_serializer : Callable[[KT], bytes] , optional, default= None ; Function to serialize key. If None , pickle.dumps is used. key_deserializer : Callable[[bytes], KT] , optional, default= None ; Function to deserialize key. If None , pickle.loads is used. value_serializer : Callable[[VT], bytes] , optional, default= None ; Function to serialize value. If None , key_serializer is used. value_deserializer : Callable[[bytes], VT] , optional, default= None ; Function to deserialize value. If None , key_deserializer is used.","title":"Arguments:"},{"location":"usage/factory/#dict_data-kwargs","text":"Construct Dict[KT, VT] with connection, key*serializer, etc., preset from DictFactory[KT, VT] dict* .","title":"dict_(data, **kwargs)"},{"location":"usage/factory/#arguments_4","text":"data : Mapping[KT, VT] or Iterable[Tuple[KT, VT]] , optional, defualt= None ; Initial data. **kwargs : VT , optional; Appended to initial data.","title":"Arguments:"},{"location":"usage/factory/#return-value_2","text":"Dict[KT, VT] : connection, key*serializers, etc., are the same as those of the factory dict* .","title":"Return value:"},{"location":"usage/factory/#createdata-kwargs","text":"Construct Dict[KT, VT] with connection, key_serializer, etc., preset from the factory.","title":"create(data, **kwargs)"},{"location":"usage/factory/#arguments_5","text":"data : Mapping[KT, VT] or Iterable[Tuple[KT, VT]] , optional, defualt= None ; Initial data. **kwargs : VT , optional; Appended to initial data.","title":"Arguments:"},{"location":"usage/factory/#return-value_3","text":"Dict[KT, VT] : connection, key_serializers, etc., are the same as those of the factory. ===","title":"Return value:"},{"location":"usage/factory/#setfactory","text":"","title":"SetFactory"},{"location":"usage/factory/#setfactoryt","text":"Constructor of SetFactory which constructs Set .","title":"SetFactory[T](...)"},{"location":"usage/factory/#type-parameters_2","text":"T : value type of the Set","title":"Type Parameters:"},{"location":"usage/factory/#arguments_6","text":"connection : str or sqlite3.Connection , optional, default= None ; If None , temporary file is automatically created. If connection is a str , it will be used as the sqlite3 database file name. You can pass a sqlite3.Connection directly. serializer : Callable[[T], bytes] , optional, default= None ; Function to serialize value. If None , pickle.dumps is used. deserializer : Callable[[bytes], T] , optional, default= None ; Function to deserialize value. If None , pickle.loads is used.","title":"Arguments:"},{"location":"usage/factory/#set_data","text":"Construct Set[T] with connection, serializer and deserializer preset from SetFactory[T] set_ .","title":"set_(data)"},{"location":"usage/factory/#arguments_7","text":"data : Iterable[T] , optional, defualt= None ; Initial data.","title":"Arguments:"},{"location":"usage/factory/#return-value_4","text":"Set[T] : connection, serializer and deserializer are the same as those of the factory set_ .","title":"Return value:"},{"location":"usage/factory/#createdata_1","text":"Construct Set[T] with connection, serializer and deserializer preset from the factory.","title":"create(data)"},{"location":"usage/factory/#arguments_8","text":"data : Iterable[T] , optional, defualt= None ; Initial data.","title":"Arguments:"},{"location":"usage/factory/#return-value_5","text":"Set[T] : connection, serializer and deserializer are the same as those of the factory. ===","title":"Return value:"},{"location":"usage/list/","text":"List List is a container compatible with the built-in list , which serializes values and stores them in a sqlite3 database. List[T](...) Constructor. Type Parameters: T : value type Arguments: data : Iterable[T] , optional, positional-only argument, defualt= None ; Initial data. If None or no argument is given, persistent data is used as is if available, otherwise persistent data in the corresponding table is cleared and given data is stored instead. connection : str or sqlite3.Connection , optional, default= None ; If None , temporary file is automatically created. If connection is a str , it will be used as the sqlite3 database file name. You can pass a sqlite3.Connection directly. table_name : str , optional, default= None ; Table name of this container. If None , an auto-generated unique name will be used. Available characters are letters, numbers, and underscores ( _ ). serializer : Callable[[T], bytes] , optional, default= None ; Function to serialize value. If None , pickle.dumps is used. deserializer : Callable[[bytes], T] , optional, default= None ; Function to deserialize value. If None , pickle.loads is used. persist : bool , optional, default= True ; If True , table won't be deleted even when the object is deleted. If False , the table is deleted when this object is deleted. x in s True if an item of s is equal to x , else False Arguments: x : object ; an object to be checked Return value: bool : True if x is in s and False otherwise. x not in s False if an item of s is equal to x , else True Arguments: x : object ; an object to be checked Return value: bool : False if x is in s and True otherwise. s + t The concatenation of s and t Arguments: t : Iterable[T] ; An iterable to be concatenated. Return value: List[T] : The concatenation of s and t . s * n or n * s equivalent to adding s to itself n times. Arguments: n : int ; Number of times to repeat. Return value: List[T] : a list of n times s was repeated. s[i] i -th item of s , origin 0 . Arguments: i : int ; Item index. If it is negative, it is equivalent to len(s) + i . Return value: T : i -th item of s , origin 0 . s[i:j] Slice of s from i to j . Arguments: i : int or None ; Item index where the slice starts from. If None , it is treated as 0 . j : int or None ; Item index where the slice stops at. If None , it is treated as len(s) . Return value: List[T] : Slice of s from i to j . s[i:j:k] Slice of s from i to j with step k Arguments: i : int or None ; Item index where the slice starts from. If None , it is treated as 0 . j : int or None ; Item index where the slice stops at. If None , it is treated as len(s) . k : int or None ; Step of the slice. If None , it is treated as 1 . Return value: List[T] : Slice of s from i to j with step k . len(s) Return the number of items in s: List[T] Return value: int : The number of items in s index(x[, i[, j]]]) Return index of the first occurrence of x in the list (at or after index i and before index j ). Raise ValueError if x is not in the list. Arguments: x : T ; Value to retrieve corresponding index if exists. i : int , optional, default= None ; First index to look up the value. If it is None , start from the first element of the list. j : int , optional, default= None ; Index before the last one to look for a value. If None , search to the end. Return value: int : Index of the first occurrence of x in the list. count(x) Return total number of occurrences of x in the list. Arguments: x : T ; Value that counts the number of occurrences. Return value: int : The number of occurrences of x in the list. s[i] = x Replace item i of s by x . Arguments: i : int ; Item index to be set. If it is negative, it is equivalent to len(s) + i x : T ; Value to be set. Return value: None . del s[i] Remove item i of s . Arguments: i : int ; Item index to be removed. If it is negative, it is equivalent to len(s) + i . Return value: None . s[i:j] = t Replace slice of s from i to j by the contents of the iterable t . Arguments: i : int or None ; Item index where the slice starts from. If None , it is treated as 0 . j : int or None ; Item index where the slice stops at. If None , it is treated as len(s) . t : Iterable[T] ; Iterable to be inserted. Return value: None . del s[i:j] Remove slice of s from i to j . Arguments: i : int or None ; Item index where the slice starts from. If None , it is treated as 0 . j : int or None ; Item index where the slice stops at. If None , it is treated as len(s) . Return value: None . s[i:j:k] = t Replace the elements of s[i:j:k] by those ofthe iterable t . The length must be the same. Otherwise, ValueError will be raised. Arguments: i : int or None ; Item index where the slice starts from. If None , it is treated as 0 . j : int or None ; Item index where the slice stops at. If None , it is treated as len(s) . k : int or None ; Step of the slice. If None , it is treated as 1 . t : Iterable[T] ; Iterable to be substituted. The length must be the same as that of the slice. Return value: None . del s[i:j:k] Remove the elements of s[i:j:k] from the list. Arguments: i : int or None ; Item index where the slice starts from. If None , it is treated as 0 . j : int or None ; Item index where the slice stops at. If None , it is treated as len(s) . k : int or None ; Step of the slice. If None , it is treated as 1 . Return value: None . append(x) Append x to the end of the sequence. Arguments: x : T ; Item to be appended. Return value; None . clear() Remove all items from the list. Return value: None . copy() Return a copy of the list. The actual behavior is to create a table with a unique table name and copy the items to the new table. Therefore, unlike the built-in list copy, the behavior is similar to deep copy. Be aware that the copied list is volatile. Return value: List[T] : A volatile copy of the list. extend(t) Concatenate the list and t . Arguments: t : Iterable[T] ; An iterable to be concatenated. Return value: None . s += t Concatenate s and t . Arguments: t : Iterable[T] ; An iterable to be concatenated. Return value: None . s *= n Update s with its contents repeated n times. Arguments: n : int ; Number of times to repeat. Return value: None . insert(i, x) Insert x into the list at the index i . Arguments: i : int ; Index to be inserted. x : T ; Item to be inserted. Return value: None . pop(i) Retrieve the item at i and also remove it from s. Arguments: i : int or None , optional, default= None ; Index to be retrieved and removed. If it is None , it is treated as the last index of the list. Return value: T : i -th item of s , origin 0 . remove(x) Remove the first item of s whose value is equal to x . Arguments: x : T ; Item to be removed. Return value: None . reverse() Reverse the items of the list in place. Return value: None . sort(reverse, key) Sort the items of the list in place. The value of reverse can be either True or False , resulting in descending or ascending order, respectively. key specifies a function of one argument that is used to extract a comparison key from each list element. Arguments: reverse : bool , optional, default= False ; By default, the order is ascending, but if this value is True , the order will be descending. key : Callable[[T], Any] , optional, default= None ; Function to extract a comparison key from each list element. Return value: None .","title":"List"},{"location":"usage/list/#list","text":"List is a container compatible with the built-in list , which serializes values and stores them in a sqlite3 database.","title":"List"},{"location":"usage/list/#listt","text":"Constructor.","title":"List[T](...)"},{"location":"usage/list/#type-parameters","text":"T : value type","title":"Type Parameters:"},{"location":"usage/list/#arguments","text":"data : Iterable[T] , optional, positional-only argument, defualt= None ; Initial data. If None or no argument is given, persistent data is used as is if available, otherwise persistent data in the corresponding table is cleared and given data is stored instead. connection : str or sqlite3.Connection , optional, default= None ; If None , temporary file is automatically created. If connection is a str , it will be used as the sqlite3 database file name. You can pass a sqlite3.Connection directly. table_name : str , optional, default= None ; Table name of this container. If None , an auto-generated unique name will be used. Available characters are letters, numbers, and underscores ( _ ). serializer : Callable[[T], bytes] , optional, default= None ; Function to serialize value. If None , pickle.dumps is used. deserializer : Callable[[bytes], T] , optional, default= None ; Function to deserialize value. If None , pickle.loads is used. persist : bool , optional, default= True ; If True , table won't be deleted even when the object is deleted. If False , the table is deleted when this object is deleted.","title":"Arguments:"},{"location":"usage/list/#x-in-s","text":"True if an item of s is equal to x , else False","title":"x in s"},{"location":"usage/list/#arguments_1","text":"x : object ; an object to be checked","title":"Arguments:"},{"location":"usage/list/#return-value","text":"bool : True if x is in s and False otherwise.","title":"Return value:"},{"location":"usage/list/#x-not-in-s","text":"False if an item of s is equal to x , else True","title":"x not in s"},{"location":"usage/list/#arguments_2","text":"x : object ; an object to be checked","title":"Arguments:"},{"location":"usage/list/#return-value_1","text":"bool : False if x is in s and True otherwise.","title":"Return value:"},{"location":"usage/list/#s-t","text":"The concatenation of s and t","title":"s + t"},{"location":"usage/list/#arguments_3","text":"t : Iterable[T] ; An iterable to be concatenated.","title":"Arguments:"},{"location":"usage/list/#return-value_2","text":"List[T] : The concatenation of s and t .","title":"Return value:"},{"location":"usage/list/#s-n-or-n-s","text":"equivalent to adding s to itself n times.","title":"s * n or n * s"},{"location":"usage/list/#arguments_4","text":"n : int ; Number of times to repeat.","title":"Arguments:"},{"location":"usage/list/#return-value_3","text":"List[T] : a list of n times s was repeated.","title":"Return value:"},{"location":"usage/list/#si","text":"i -th item of s , origin 0 .","title":"s[i]"},{"location":"usage/list/#arguments_5","text":"i : int ; Item index. If it is negative, it is equivalent to len(s) + i .","title":"Arguments:"},{"location":"usage/list/#return-value_4","text":"T : i -th item of s , origin 0 .","title":"Return value:"},{"location":"usage/list/#sij","text":"Slice of s from i to j .","title":"s[i:j]"},{"location":"usage/list/#arguments_6","text":"i : int or None ; Item index where the slice starts from. If None , it is treated as 0 . j : int or None ; Item index where the slice stops at. If None , it is treated as len(s) .","title":"Arguments:"},{"location":"usage/list/#return-value_5","text":"List[T] : Slice of s from i to j .","title":"Return value:"},{"location":"usage/list/#sijk","text":"Slice of s from i to j with step k","title":"s[i:j:k]"},{"location":"usage/list/#arguments_7","text":"i : int or None ; Item index where the slice starts from. If None , it is treated as 0 . j : int or None ; Item index where the slice stops at. If None , it is treated as len(s) . k : int or None ; Step of the slice. If None , it is treated as 1 .","title":"Arguments:"},{"location":"usage/list/#return-value_6","text":"List[T] : Slice of s from i to j with step k .","title":"Return value:"},{"location":"usage/list/#lens","text":"Return the number of items in s: List[T]","title":"len(s)"},{"location":"usage/list/#return-value_7","text":"int : The number of items in s","title":"Return value:"},{"location":"usage/list/#indexx-i-j","text":"Return index of the first occurrence of x in the list (at or after index i and before index j ). Raise ValueError if x is not in the list.","title":"index(x[, i[, j]]])"},{"location":"usage/list/#arguments_8","text":"x : T ; Value to retrieve corresponding index if exists. i : int , optional, default= None ; First index to look up the value. If it is None , start from the first element of the list. j : int , optional, default= None ; Index before the last one to look for a value. If None , search to the end.","title":"Arguments:"},{"location":"usage/list/#return-value_8","text":"int : Index of the first occurrence of x in the list.","title":"Return value:"},{"location":"usage/list/#countx","text":"Return total number of occurrences of x in the list.","title":"count(x)"},{"location":"usage/list/#arguments_9","text":"x : T ; Value that counts the number of occurrences.","title":"Arguments:"},{"location":"usage/list/#return-value_9","text":"int : The number of occurrences of x in the list.","title":"Return value:"},{"location":"usage/list/#si-x","text":"Replace item i of s by x .","title":"s[i] = x"},{"location":"usage/list/#arguments_10","text":"i : int ; Item index to be set. If it is negative, it is equivalent to len(s) + i x : T ; Value to be set.","title":"Arguments:"},{"location":"usage/list/#return-value_10","text":"None .","title":"Return value:"},{"location":"usage/list/#del-si","text":"Remove item i of s .","title":"del s[i]"},{"location":"usage/list/#arguments_11","text":"i : int ; Item index to be removed. If it is negative, it is equivalent to len(s) + i .","title":"Arguments:"},{"location":"usage/list/#return-value_11","text":"None .","title":"Return value:"},{"location":"usage/list/#sij-t","text":"Replace slice of s from i to j by the contents of the iterable t .","title":"s[i:j] = t"},{"location":"usage/list/#arguments_12","text":"i : int or None ; Item index where the slice starts from. If None , it is treated as 0 . j : int or None ; Item index where the slice stops at. If None , it is treated as len(s) . t : Iterable[T] ; Iterable to be inserted.","title":"Arguments:"},{"location":"usage/list/#return-value_12","text":"None .","title":"Return value:"},{"location":"usage/list/#del-sij","text":"Remove slice of s from i to j .","title":"del s[i:j]"},{"location":"usage/list/#arguments_13","text":"i : int or None ; Item index where the slice starts from. If None , it is treated as 0 . j : int or None ; Item index where the slice stops at. If None , it is treated as len(s) .","title":"Arguments:"},{"location":"usage/list/#return-value_13","text":"None .","title":"Return value:"},{"location":"usage/list/#sijk-t","text":"Replace the elements of s[i:j:k] by those ofthe iterable t . The length must be the same. Otherwise, ValueError will be raised.","title":"s[i:j:k] = t"},{"location":"usage/list/#arguments_14","text":"i : int or None ; Item index where the slice starts from. If None , it is treated as 0 . j : int or None ; Item index where the slice stops at. If None , it is treated as len(s) . k : int or None ; Step of the slice. If None , it is treated as 1 . t : Iterable[T] ; Iterable to be substituted. The length must be the same as that of the slice.","title":"Arguments:"},{"location":"usage/list/#return-value_14","text":"None .","title":"Return value:"},{"location":"usage/list/#del-sijk","text":"Remove the elements of s[i:j:k] from the list.","title":"del s[i:j:k]"},{"location":"usage/list/#arguments_15","text":"i : int or None ; Item index where the slice starts from. If None , it is treated as 0 . j : int or None ; Item index where the slice stops at. If None , it is treated as len(s) . k : int or None ; Step of the slice. If None , it is treated as 1 .","title":"Arguments:"},{"location":"usage/list/#return-value_15","text":"None .","title":"Return value:"},{"location":"usage/list/#appendx","text":"Append x to the end of the sequence.","title":"append(x)"},{"location":"usage/list/#arguments_16","text":"x : T ; Item to be appended.","title":"Arguments:"},{"location":"usage/list/#return-value_16","text":"None .","title":"Return value;"},{"location":"usage/list/#clear","text":"Remove all items from the list.","title":"clear()"},{"location":"usage/list/#return-value_17","text":"None .","title":"Return value:"},{"location":"usage/list/#copy","text":"Return a copy of the list. The actual behavior is to create a table with a unique table name and copy the items to the new table. Therefore, unlike the built-in list copy, the behavior is similar to deep copy. Be aware that the copied list is volatile.","title":"copy()"},{"location":"usage/list/#return-value_18","text":"List[T] : A volatile copy of the list.","title":"Return value:"},{"location":"usage/list/#extendt","text":"Concatenate the list and t .","title":"extend(t)"},{"location":"usage/list/#arguments_17","text":"t : Iterable[T] ; An iterable to be concatenated.","title":"Arguments:"},{"location":"usage/list/#return-value_19","text":"None .","title":"Return value:"},{"location":"usage/list/#s-t_1","text":"Concatenate s and t .","title":"s += t"},{"location":"usage/list/#arguments_18","text":"t : Iterable[T] ; An iterable to be concatenated.","title":"Arguments:"},{"location":"usage/list/#return-value_20","text":"None .","title":"Return value:"},{"location":"usage/list/#s-n","text":"Update s with its contents repeated n times.","title":"s *= n"},{"location":"usage/list/#arguments_19","text":"n : int ; Number of times to repeat.","title":"Arguments:"},{"location":"usage/list/#return-value_21","text":"None .","title":"Return value:"},{"location":"usage/list/#inserti-x","text":"Insert x into the list at the index i .","title":"insert(i, x)"},{"location":"usage/list/#arguments_20","text":"i : int ; Index to be inserted. x : T ; Item to be inserted.","title":"Arguments:"},{"location":"usage/list/#return-value_22","text":"None .","title":"Return value:"},{"location":"usage/list/#popi","text":"Retrieve the item at i and also remove it from s.","title":"pop(i)"},{"location":"usage/list/#arguments_21","text":"i : int or None , optional, default= None ; Index to be retrieved and removed. If it is None , it is treated as the last index of the list.","title":"Arguments:"},{"location":"usage/list/#return-value_23","text":"T : i -th item of s , origin 0 .","title":"Return value:"},{"location":"usage/list/#removex","text":"Remove the first item of s whose value is equal to x .","title":"remove(x)"},{"location":"usage/list/#arguments_22","text":"x : T ; Item to be removed.","title":"Arguments:"},{"location":"usage/list/#return-value_24","text":"None .","title":"Return value:"},{"location":"usage/list/#reverse","text":"Reverse the items of the list in place.","title":"reverse()"},{"location":"usage/list/#return-value_25","text":"None .","title":"Return value:"},{"location":"usage/list/#sortreverse-key","text":"Sort the items of the list in place. The value of reverse can be either True or False , resulting in descending or ascending order, respectively. key specifies a function of one argument that is used to extract a comparison key from each list element.","title":"sort(reverse, key)"},{"location":"usage/list/#arguments_23","text":"reverse : bool , optional, default= False ; By default, the order is ascending, but if this value is True , the order will be descending. key : Callable[[T], Any] , optional, default= None ; Function to extract a comparison key from each list element.","title":"Arguments:"},{"location":"usage/list/#return-value_26","text":"None .","title":"Return value:"},{"location":"usage/metadata/","text":"Metadata MetadataItem MetadataItem(...) Constructor for MetadataItem. Instances of this class are not supposed to be created directly by the user. Arguments: table_name : str ; table name. container_type : str ; container type name. schema_version : str ; schema version. table_name Read-only property for the table name. Return value: str : The table name. container_type Read-only property for the container type. Return value: str : The container type. schema_version Read-only property for the schema version Return value: str : The schema version. MetadataReader MetadataReader(...) Constructor for MetadataReader class which can iterate over all records in the given connection. Arguments: connection : str or sqlite3.Connection ; Connection to sqlite3 to get metadata. If connection is a str , it will be used as the sqlite3 database file name. You can pass a sqlite3.Connection directly. len(metadata_reader) Return the number of records in the metadata table read by metadata_reader . It coincides the number of collections in the sqlite3 database connected by metadata_reader._connection . Return value: int : The number of items in the metadata table. obj in metadata_reader Return whether if obj is in metadata_reader Arguments: obj : object ; object to be checked the membership. Return value: bool : Boolean value whether if metadata_item is in the metadata table. iter(metadata_reader) Return an iterator over the MetadataItem 's in metadata_reader It coincides the records of metadata table in the sqlite3 database connected by metadata_reader._connection . Return value: Iterator[MetadataItem] : an iterator over the MetadataItem 's in metadata_reader","title":"metadata"},{"location":"usage/metadata/#metadata","text":"","title":"Metadata"},{"location":"usage/metadata/#metadataitem","text":"","title":"MetadataItem"},{"location":"usage/metadata/#metadataitem_1","text":"Constructor for MetadataItem. Instances of this class are not supposed to be created directly by the user.","title":"MetadataItem(...)"},{"location":"usage/metadata/#arguments","text":"table_name : str ; table name. container_type : str ; container type name. schema_version : str ; schema version.","title":"Arguments:"},{"location":"usage/metadata/#table_name","text":"Read-only property for the table name.","title":"table_name"},{"location":"usage/metadata/#return-value","text":"str : The table name.","title":"Return value:"},{"location":"usage/metadata/#container_type","text":"Read-only property for the container type.","title":"container_type"},{"location":"usage/metadata/#return-value_1","text":"str : The container type.","title":"Return value:"},{"location":"usage/metadata/#schema_version","text":"Read-only property for the schema version","title":"schema_version"},{"location":"usage/metadata/#return-value_2","text":"str : The schema version.","title":"Return value:"},{"location":"usage/metadata/#metadatareader","text":"","title":"MetadataReader"},{"location":"usage/metadata/#metadatareader_1","text":"Constructor for MetadataReader class which can iterate over all records in the given connection.","title":"MetadataReader(...)"},{"location":"usage/metadata/#arguments_1","text":"connection : str or sqlite3.Connection ; Connection to sqlite3 to get metadata. If connection is a str , it will be used as the sqlite3 database file name. You can pass a sqlite3.Connection directly.","title":"Arguments:"},{"location":"usage/metadata/#lenmetadata_reader","text":"Return the number of records in the metadata table read by metadata_reader . It coincides the number of collections in the sqlite3 database connected by metadata_reader._connection .","title":"len(metadata_reader)"},{"location":"usage/metadata/#return-value_3","text":"int : The number of items in the metadata table.","title":"Return value:"},{"location":"usage/metadata/#obj-in-metadata_reader","text":"Return whether if obj is in metadata_reader","title":"obj in metadata_reader"},{"location":"usage/metadata/#arguments_2","text":"obj : object ; object to be checked the membership.","title":"Arguments:"},{"location":"usage/metadata/#return-value_4","text":"bool : Boolean value whether if metadata_item is in the metadata table.","title":"Return value:"},{"location":"usage/metadata/#itermetadata_reader","text":"Return an iterator over the MetadataItem 's in metadata_reader It coincides the records of metadata table in the sqlite3 database connected by metadata_reader._connection .","title":"iter(metadata_reader)"},{"location":"usage/metadata/#return-value_5","text":"Iterator[MetadataItem] : an iterator over the MetadataItem 's in metadata_reader","title":"Return value:"},{"location":"usage/set/","text":"Set Set is a container compatible with the built-in set , which serializes values and stores them in a sqlite3 database. Set[T](...) Constructor. Type Parameters: T : value type Arguments: data : Iterable[T] , optional, positional-only argument, defualt= None ; Initial data. If None or no argument is given, persistent data is used as is if available, otherwise persistent data in the corresponding table is cleared and given data is stored instead. connection : str or sqlite3.Connection , optional, default= None ; If None , temporary file is automatically created. If connection is a str , it will be used as the sqlite3 database file name. You can pass a sqlite3.Connection directly. table_name : str , optional, default= None ; Table name of this container. If None , an auto-generated unique name will be used. Available characters are letters, numbers, and underscores ( _ ). serializer : Callable[[T], bytes] , optional, default= None ; Function to serialize value. If None , pickle.dumps is used. deserializer : Callable[[bytes], T] , optional, default= None ; Function to deserialize value. If None , pickle.loads is used. persist : bool , optional, default= True ; If True , table won't be deleted even when the object is deleted. If False , the table is deleted when this object is deleted. len(s) Return the number of items in s: Set[T] Return value: int : The number of items in s x in s True if x is in s , else False Arguments: x : object ; an object to be checked Return value: bool : True if x is in s and False otherwise. x not in s False if x is in s , else True Arguments: x : object ; an object to be checked Return value: bool : False if x is in s and True otherwise. isdisjoint(other) Return True if the set has no elements in common with other . Arguments: other : Iterable[T] ; Iterable to check if disjoint. Return value: bool : True if the set is disjoint with other , False otherwise. issubset(other) Return True if every element in the set is in other . Arguments: other : Iterable[T] ; Iterable to check if this one contains the set. Return value: bool : True if the set is subset of other , False otherwise. s <= other Return True if every element in the set is in other . Argument: other : Iterable[T] ; Iterable to check if this one contains all the elements in the set. Return value: bool : True if the set is subset of other , False otherwise. s < other Return True if every element in the set is in other and s is not equal to other . Arguments: other : Iterable[T] ; Iterable to check if it contains all elements of the set and is not equal to the set. Return value: bool : True if the set is a proper subset of other , False otherwise. issuperset(other) Return True if every element in other is in the set. Arguments: other : Iterable[T] ; Iterable to check if the elements are contained. Return value: bool : True if the set is superset of other , False otherwise. s >= other Return True if every element in other is in the set. Argument: other : Iterable[T] ; Iterable to check if the elements are contained. Return value: bool : True if the set is superset of other , False otherwise. s > other Return True if every element in other is in the set and s is not equal to other . Arguments: other : Iterable[T] ; Iterable to check if it all elements are in the set and is not equal to the set. Return value: bool : True if the set is a proper superset of other , False otherwise. union(*others) Return a new set with elements from the set and all others . Arguments: others : Iterable[T] ; Iterables to take the union. Return value: Set[T] : A new set with elements from the set and all others . s | other Return a new set with elements from s and other . Arguments: other : Iterable[T] ; Iterable to take the union. Return value: Set[T] : A new set with elements from s and other . intersection(*others) Return a new set with elements common to the set and all others . Arguments: others : Iterable[T] ; Iterables to take the intersection. Return value: Set[T] : A new set with elements common to the set and all others . s & other Return a new set with elements common to s and other . Arguments: other : Iterable[T] ; Iterable to take the intersection. Return value: Set[T] : A new set with elements common to s and other . difference(*others) Return a new set with elements in the set that are not in the others . Arguments: others : Iterable[T] ; Iterables to take the difference. Return value: Set[T] : A new set with elements in the set that are not in the others . s - other Return a new set with elements in the set that are not in the other . Arguments: other : Iterable[T] ; Iterable to take the difference. Return value: Set[T] : A new set with elements in the set that are not in the other . symmetric_difference(other) Return a new set with elements in either the set or other but not both. Arguments: other : Iterable[T] ; Iterable to take the symmetric difference. Return value: Set[T] : A new set with elements in either the set or other but not both. s ^ other Return a new set with elements in either the set or other but not both. Arguments: other : Iterable[T] ; Iterable to take the symmetric difference. Return value: Set[T] : A new set with elements in either the set or other but not both. copy() Return a copy of the set. The actual behavior is to create a table with a unique table name and copy the elements to the new table. Therefore, unlike the built-in set copy, the behavior is similar to deep copy. Be aware that the copied set is volatile. Return value: Set[T] : A volatile copy of the set. update(*others) Update the set by adding elements from all others . Arguments: others : Iterable[T] ; Iterables to take the union. Return value: None . s |= other Update the set by adding elements from other . Arguments: other : Iterable[T] ; Iterable to take the union. Return value: None . intersection_update(*others) Update the set by keeping only elements found in the set and all others . Arguments: others : Iterable[T] ; Iterables to take the intersection. Return value: None . s &= other Update the set by keeping only elements found in the set and other . Arguments: other : Iterable[T] ; Iterable to take the intersection. Return value: None . symmetric_difference_update(other) Update the set by keeping only elements found in either the set or other but not both. Arguments: other : Iterable[T] ; Iterable to take the symmetric difference. Return value: None . s ^= other Update the set by keeping only elements found in either the set or other but not both. Arguments: other : Iterable[T] ; Iterable to take the symmetric difference. Return value: None . add(elem) Add an element elem to the set. Arguments: elem : T ; An element to be added. Return value: None . remove(elem) Remove an element elem from the set. Raises KeyError if elem is not contained in the set. Arguemnts: elem : T ; An element to be removed. Return value: None . discard(elem) Remove an element elem from the set if it is present. Arguments: elem : T ; An element to be removed. Return value: None . pop() Remove and return an arbitrary element from the set. Raises KeyError if the set is empty. Return value: T : An element in the set. clear() Remove all elements from the set. Return value: None .","title":"Set"},{"location":"usage/set/#set","text":"Set is a container compatible with the built-in set , which serializes values and stores them in a sqlite3 database.","title":"Set"},{"location":"usage/set/#sett","text":"Constructor.","title":"Set[T](...)"},{"location":"usage/set/#type-parameters","text":"T : value type","title":"Type Parameters:"},{"location":"usage/set/#arguments","text":"data : Iterable[T] , optional, positional-only argument, defualt= None ; Initial data. If None or no argument is given, persistent data is used as is if available, otherwise persistent data in the corresponding table is cleared and given data is stored instead. connection : str or sqlite3.Connection , optional, default= None ; If None , temporary file is automatically created. If connection is a str , it will be used as the sqlite3 database file name. You can pass a sqlite3.Connection directly. table_name : str , optional, default= None ; Table name of this container. If None , an auto-generated unique name will be used. Available characters are letters, numbers, and underscores ( _ ). serializer : Callable[[T], bytes] , optional, default= None ; Function to serialize value. If None , pickle.dumps is used. deserializer : Callable[[bytes], T] , optional, default= None ; Function to deserialize value. If None , pickle.loads is used. persist : bool , optional, default= True ; If True , table won't be deleted even when the object is deleted. If False , the table is deleted when this object is deleted.","title":"Arguments:"},{"location":"usage/set/#lens","text":"Return the number of items in s: Set[T]","title":"len(s)"},{"location":"usage/set/#return-value","text":"int : The number of items in s","title":"Return value:"},{"location":"usage/set/#x-in-s","text":"True if x is in s , else False","title":"x in s"},{"location":"usage/set/#arguments_1","text":"x : object ; an object to be checked","title":"Arguments:"},{"location":"usage/set/#return-value_1","text":"bool : True if x is in s and False otherwise.","title":"Return value:"},{"location":"usage/set/#x-not-in-s","text":"False if x is in s , else True","title":"x not in s"},{"location":"usage/set/#arguments_2","text":"x : object ; an object to be checked","title":"Arguments:"},{"location":"usage/set/#return-value_2","text":"bool : False if x is in s and True otherwise.","title":"Return value:"},{"location":"usage/set/#isdisjointother","text":"Return True if the set has no elements in common with other .","title":"isdisjoint(other)"},{"location":"usage/set/#arguments_3","text":"other : Iterable[T] ; Iterable to check if disjoint.","title":"Arguments:"},{"location":"usage/set/#return-value_3","text":"bool : True if the set is disjoint with other , False otherwise.","title":"Return value:"},{"location":"usage/set/#issubsetother","text":"Return True if every element in the set is in other .","title":"issubset(other)"},{"location":"usage/set/#arguments_4","text":"other : Iterable[T] ; Iterable to check if this one contains the set.","title":"Arguments:"},{"location":"usage/set/#return-value_4","text":"bool : True if the set is subset of other , False otherwise.","title":"Return value:"},{"location":"usage/set/#s-other","text":"Return True if every element in the set is in other .","title":"s &lt;= other"},{"location":"usage/set/#argument","text":"other : Iterable[T] ; Iterable to check if this one contains all the elements in the set.","title":"Argument:"},{"location":"usage/set/#return-value_5","text":"bool : True if the set is subset of other , False otherwise.","title":"Return value:"},{"location":"usage/set/#s-other_1","text":"Return True if every element in the set is in other and s is not equal to other .","title":"s &lt; other"},{"location":"usage/set/#arguments_5","text":"other : Iterable[T] ; Iterable to check if it contains all elements of the set and is not equal to the set.","title":"Arguments:"},{"location":"usage/set/#return-value_6","text":"bool : True if the set is a proper subset of other , False otherwise.","title":"Return value:"},{"location":"usage/set/#issupersetother","text":"Return True if every element in other is in the set.","title":"issuperset(other)"},{"location":"usage/set/#arguments_6","text":"other : Iterable[T] ; Iterable to check if the elements are contained.","title":"Arguments:"},{"location":"usage/set/#return-value_7","text":"bool : True if the set is superset of other , False otherwise.","title":"Return value:"},{"location":"usage/set/#s-other_2","text":"Return True if every element in other is in the set.","title":"s &gt;= other"},{"location":"usage/set/#argument_1","text":"other : Iterable[T] ; Iterable to check if the elements are contained.","title":"Argument:"},{"location":"usage/set/#return-value_8","text":"bool : True if the set is superset of other , False otherwise.","title":"Return value:"},{"location":"usage/set/#s-other_3","text":"Return True if every element in other is in the set and s is not equal to other .","title":"s &gt; other"},{"location":"usage/set/#arguments_7","text":"other : Iterable[T] ; Iterable to check if it all elements are in the set and is not equal to the set.","title":"Arguments:"},{"location":"usage/set/#return-value_9","text":"bool : True if the set is a proper superset of other , False otherwise.","title":"Return value:"},{"location":"usage/set/#unionothers","text":"Return a new set with elements from the set and all others .","title":"union(*others)"},{"location":"usage/set/#arguments_8","text":"others : Iterable[T] ; Iterables to take the union.","title":"Arguments:"},{"location":"usage/set/#return-value_10","text":"Set[T] : A new set with elements from the set and all others .","title":"Return value:"},{"location":"usage/set/#s-other_4","text":"Return a new set with elements from s and other .","title":"s | other"},{"location":"usage/set/#arguments_9","text":"other : Iterable[T] ; Iterable to take the union.","title":"Arguments:"},{"location":"usage/set/#return-value_11","text":"Set[T] : A new set with elements from s and other .","title":"Return value:"},{"location":"usage/set/#intersectionothers","text":"Return a new set with elements common to the set and all others .","title":"intersection(*others)"},{"location":"usage/set/#arguments_10","text":"others : Iterable[T] ; Iterables to take the intersection.","title":"Arguments:"},{"location":"usage/set/#return-value_12","text":"Set[T] : A new set with elements common to the set and all others .","title":"Return value:"},{"location":"usage/set/#s-other_5","text":"Return a new set with elements common to s and other .","title":"s &amp; other"},{"location":"usage/set/#arguments_11","text":"other : Iterable[T] ; Iterable to take the intersection.","title":"Arguments:"},{"location":"usage/set/#return-value_13","text":"Set[T] : A new set with elements common to s and other .","title":"Return value:"},{"location":"usage/set/#differenceothers","text":"Return a new set with elements in the set that are not in the others .","title":"difference(*others)"},{"location":"usage/set/#arguments_12","text":"others : Iterable[T] ; Iterables to take the difference.","title":"Arguments:"},{"location":"usage/set/#return-value_14","text":"Set[T] : A new set with elements in the set that are not in the others .","title":"Return value:"},{"location":"usage/set/#s-other_6","text":"Return a new set with elements in the set that are not in the other .","title":"s - other"},{"location":"usage/set/#arguments_13","text":"other : Iterable[T] ; Iterable to take the difference.","title":"Arguments:"},{"location":"usage/set/#return-value_15","text":"Set[T] : A new set with elements in the set that are not in the other .","title":"Return value:"},{"location":"usage/set/#symmetric_differenceother","text":"Return a new set with elements in either the set or other but not both.","title":"symmetric_difference(other)"},{"location":"usage/set/#arguments_14","text":"other : Iterable[T] ; Iterable to take the symmetric difference.","title":"Arguments:"},{"location":"usage/set/#return-value_16","text":"Set[T] : A new set with elements in either the set or other but not both.","title":"Return value:"},{"location":"usage/set/#s-other_7","text":"Return a new set with elements in either the set or other but not both.","title":"s ^ other"},{"location":"usage/set/#arguments_15","text":"other : Iterable[T] ; Iterable to take the symmetric difference.","title":"Arguments:"},{"location":"usage/set/#return-value_17","text":"Set[T] : A new set with elements in either the set or other but not both.","title":"Return value:"},{"location":"usage/set/#copy","text":"Return a copy of the set. The actual behavior is to create a table with a unique table name and copy the elements to the new table. Therefore, unlike the built-in set copy, the behavior is similar to deep copy. Be aware that the copied set is volatile.","title":"copy()"},{"location":"usage/set/#return-value_18","text":"Set[T] : A volatile copy of the set.","title":"Return value:"},{"location":"usage/set/#updateothers","text":"Update the set by adding elements from all others .","title":"update(*others)"},{"location":"usage/set/#arguments_16","text":"others : Iterable[T] ; Iterables to take the union.","title":"Arguments:"},{"location":"usage/set/#return-value_19","text":"None .","title":"Return value:"},{"location":"usage/set/#s-other_8","text":"Update the set by adding elements from other .","title":"s |= other"},{"location":"usage/set/#arguments_17","text":"other : Iterable[T] ; Iterable to take the union.","title":"Arguments:"},{"location":"usage/set/#return-value_20","text":"None .","title":"Return value:"},{"location":"usage/set/#intersection_updateothers","text":"Update the set by keeping only elements found in the set and all others .","title":"intersection_update(*others)"},{"location":"usage/set/#arguments_18","text":"others : Iterable[T] ; Iterables to take the intersection.","title":"Arguments:"},{"location":"usage/set/#return-value_21","text":"None .","title":"Return value:"},{"location":"usage/set/#s-other_9","text":"Update the set by keeping only elements found in the set and other .","title":"s &amp;= other"},{"location":"usage/set/#arguments_19","text":"other : Iterable[T] ; Iterable to take the intersection.","title":"Arguments:"},{"location":"usage/set/#return-value_22","text":"None .","title":"Return value:"},{"location":"usage/set/#symmetric_difference_updateother","text":"Update the set by keeping only elements found in either the set or other but not both.","title":"symmetric_difference_update(other)"},{"location":"usage/set/#arguments_20","text":"other : Iterable[T] ; Iterable to take the symmetric difference.","title":"Arguments:"},{"location":"usage/set/#return-value_23","text":"None .","title":"Return value:"},{"location":"usage/set/#s-other_10","text":"Update the set by keeping only elements found in either the set or other but not both.","title":"s ^= other"},{"location":"usage/set/#arguments_21","text":"other : Iterable[T] ; Iterable to take the symmetric difference.","title":"Arguments:"},{"location":"usage/set/#return-value_24","text":"None .","title":"Return value:"},{"location":"usage/set/#addelem","text":"Add an element elem to the set.","title":"add(elem)"},{"location":"usage/set/#arguments_22","text":"elem : T ; An element to be added.","title":"Arguments:"},{"location":"usage/set/#return-value_25","text":"None .","title":"Return value:"},{"location":"usage/set/#removeelem","text":"Remove an element elem from the set. Raises KeyError if elem is not contained in the set.","title":"remove(elem)"},{"location":"usage/set/#arguemnts","text":"elem : T ; An element to be removed.","title":"Arguemnts:"},{"location":"usage/set/#return-value_26","text":"None .","title":"Return value:"},{"location":"usage/set/#discardelem","text":"Remove an element elem from the set if it is present.","title":"discard(elem)"},{"location":"usage/set/#arguments_23","text":"elem : T ; An element to be removed.","title":"Arguments:"},{"location":"usage/set/#return-value_27","text":"None .","title":"Return value:"},{"location":"usage/set/#pop","text":"Remove and return an arbitrary element from the set. Raises KeyError if the set is empty.","title":"pop()"},{"location":"usage/set/#return-value_28","text":"T : An element in the set.","title":"Return value:"},{"location":"usage/set/#clear","text":"Remove all elements from the set.","title":"clear()"},{"location":"usage/set/#return-value_29","text":"None .","title":"Return value:"},{"location":"usage/dictview/itemsview/","text":"ItemsView ItemsView is a view object which is returned by dict.items() . It provides a dynamic view on the dictionary's (key, value) tuples, which means when dictionay changes, the view reflects these changes. len(itemsview) Return the number of items in the dictionary d: Dict[KT, VT] where itemsview=d.items() . Return value: int : The number of items in d iter(itemsview) Return an iterator over the (key, value) tuples in the dictionary. The order of the items is guaranteed to be inserted order. Return value: Iterable[Tuple[_KT_co, _VT_co]] : The iterator over the keys in the dictionary. item in itemsview Return whether if item is in the dictionary. Arguments: item : object ; An object to be checked Return value: bool : True if item is in the dictionary and False otherwise. reversed(itemsview) Return a reverse iterator over the (key, value) tuples of the dictionary. (provided only python version 3.8 and above) Return value: Iterator[Tuple[_KT_co, _VT_co]] : The reverse iterator over the (key, value) tuples in the dictonary. itemsview & other Return a set with elements common to itemsview and other . Arguments: other : Iterable[Any] ; Iterable to take the intersection. Return value: Set[Tuple[_KT_co, _VT_co]] : A set with elements common to itemsview and other . other & itemsview Return a set with elements common to itemsview and other . Arguments: other : Iterable[_T] ; Iterable to take the intersection. Return value: Set[_T] : A set with elements common to itemsview and other . itemsview | other Return a new set with elements from itemsview and other . Arguments: other : Iterable[_T] ; Iterable to take the union. Return value: Set[Union[Tuple[_KT_co, _VT_co], _T]] : A new set with elements from itemsview and other . other | itemsview Return a new set with elements from itemsview and other . Arguments: other : Iterable[_T] ; Iterable to take the union. Return value: Set[Union[Tuple[_KT_co, _VT_co], _T]] : A new set with elements from itemsview and other . itemsview - other Return a new set with elements in the itemsview that are not in the other . Arguments: other : Iterable[Any] ; Iterable to take the difference. Return value: Set[Tuple[_KT_co, _VT_co]] : A new set with elements in the set that are not in the other . other - itemsview Return a new set with elements in the other that are not in the itemsview . Arguments: other : Iterable[_T] ; Iterable to take the difference. Return value: Set[_T] : A new set with elements in the other that are not in the itemsview . itemsview ^ other Return a new set with elements in either the itemsview or other but not both. Arguments: other : Iterable[_T] ; Iterable to take the symmetric difference. Return value Set[Union[Tuple[_KT_co, _VT_co], _T]] : A new set with elements in either the itemsview or other but not both. other ^ itemsview Return a new set with elements in either the itemsview or other but not both. Arguments: other : Iterable[_T] ; Iterable to take the symmetric difference. Return value Set[Union[Tuple[_KT_co, _VT_co], _T]] : A new set with elements in either the itemsview or other but not both. itemsview.mapping Return a MappingProxyType that wraps the original dictionary to which the view refers. (provided only python version 3.10 and above) Return value MappingProxyType : A read-only proxy of the original dictionary.","title":"ItemsView"},{"location":"usage/dictview/itemsview/#itemsview","text":"ItemsView is a view object which is returned by dict.items() . It provides a dynamic view on the dictionary's (key, value) tuples, which means when dictionay changes, the view reflects these changes.","title":"ItemsView"},{"location":"usage/dictview/itemsview/#lenitemsview","text":"Return the number of items in the dictionary d: Dict[KT, VT] where itemsview=d.items() .","title":"len(itemsview)"},{"location":"usage/dictview/itemsview/#return-value","text":"int : The number of items in d","title":"Return value:"},{"location":"usage/dictview/itemsview/#iteritemsview","text":"Return an iterator over the (key, value) tuples in the dictionary. The order of the items is guaranteed to be inserted order.","title":"iter(itemsview)"},{"location":"usage/dictview/itemsview/#return-value_1","text":"Iterable[Tuple[_KT_co, _VT_co]] : The iterator over the keys in the dictionary.","title":"Return value:"},{"location":"usage/dictview/itemsview/#item-in-itemsview","text":"Return whether if item is in the dictionary.","title":"item in itemsview"},{"location":"usage/dictview/itemsview/#arguments","text":"item : object ; An object to be checked","title":"Arguments:"},{"location":"usage/dictview/itemsview/#return-value_2","text":"bool : True if item is in the dictionary and False otherwise.","title":"Return value:"},{"location":"usage/dictview/itemsview/#reverseditemsview","text":"Return a reverse iterator over the (key, value) tuples of the dictionary. (provided only python version 3.8 and above)","title":"reversed(itemsview)"},{"location":"usage/dictview/itemsview/#return-value_3","text":"Iterator[Tuple[_KT_co, _VT_co]] : The reverse iterator over the (key, value) tuples in the dictonary.","title":"Return value:"},{"location":"usage/dictview/itemsview/#itemsview-other","text":"Return a set with elements common to itemsview and other .","title":"itemsview &amp; other"},{"location":"usage/dictview/itemsview/#arguments_1","text":"other : Iterable[Any] ; Iterable to take the intersection.","title":"Arguments:"},{"location":"usage/dictview/itemsview/#return-value_4","text":"Set[Tuple[_KT_co, _VT_co]] : A set with elements common to itemsview and other .","title":"Return value:"},{"location":"usage/dictview/itemsview/#other-itemsview","text":"Return a set with elements common to itemsview and other .","title":"other &amp; itemsview"},{"location":"usage/dictview/itemsview/#arguments_2","text":"other : Iterable[_T] ; Iterable to take the intersection.","title":"Arguments:"},{"location":"usage/dictview/itemsview/#return-value_5","text":"Set[_T] : A set with elements common to itemsview and other .","title":"Return value:"},{"location":"usage/dictview/itemsview/#itemsview-other_1","text":"Return a new set with elements from itemsview and other .","title":"itemsview | other"},{"location":"usage/dictview/itemsview/#arguments_3","text":"other : Iterable[_T] ; Iterable to take the union.","title":"Arguments:"},{"location":"usage/dictview/itemsview/#return-value_6","text":"Set[Union[Tuple[_KT_co, _VT_co], _T]] : A new set with elements from itemsview and other .","title":"Return value:"},{"location":"usage/dictview/itemsview/#other-itemsview_1","text":"Return a new set with elements from itemsview and other .","title":"other | itemsview"},{"location":"usage/dictview/itemsview/#arguments_4","text":"other : Iterable[_T] ; Iterable to take the union.","title":"Arguments:"},{"location":"usage/dictview/itemsview/#return-value_7","text":"Set[Union[Tuple[_KT_co, _VT_co], _T]] : A new set with elements from itemsview and other .","title":"Return value:"},{"location":"usage/dictview/itemsview/#itemsview-other_2","text":"Return a new set with elements in the itemsview that are not in the other .","title":"itemsview - other"},{"location":"usage/dictview/itemsview/#arguments_5","text":"other : Iterable[Any] ; Iterable to take the difference.","title":"Arguments:"},{"location":"usage/dictview/itemsview/#return-value_8","text":"Set[Tuple[_KT_co, _VT_co]] : A new set with elements in the set that are not in the other .","title":"Return value:"},{"location":"usage/dictview/itemsview/#other-itemsview_2","text":"Return a new set with elements in the other that are not in the itemsview .","title":"other - itemsview"},{"location":"usage/dictview/itemsview/#arguments_6","text":"other : Iterable[_T] ; Iterable to take the difference.","title":"Arguments:"},{"location":"usage/dictview/itemsview/#return-value_9","text":"Set[_T] : A new set with elements in the other that are not in the itemsview .","title":"Return value:"},{"location":"usage/dictview/itemsview/#itemsview-other_3","text":"Return a new set with elements in either the itemsview or other but not both.","title":"itemsview ^ other"},{"location":"usage/dictview/itemsview/#arguments_7","text":"other : Iterable[_T] ; Iterable to take the symmetric difference.","title":"Arguments:"},{"location":"usage/dictview/itemsview/#return-value_10","text":"Set[Union[Tuple[_KT_co, _VT_co], _T]] : A new set with elements in either the itemsview or other but not both.","title":"Return value"},{"location":"usage/dictview/itemsview/#other-itemsview_3","text":"Return a new set with elements in either the itemsview or other but not both.","title":"other ^ itemsview"},{"location":"usage/dictview/itemsview/#arguments_8","text":"other : Iterable[_T] ; Iterable to take the symmetric difference.","title":"Arguments:"},{"location":"usage/dictview/itemsview/#return-value_11","text":"Set[Union[Tuple[_KT_co, _VT_co], _T]] : A new set with elements in either the itemsview or other but not both.","title":"Return value"},{"location":"usage/dictview/itemsview/#itemsviewmapping","text":"Return a MappingProxyType that wraps the original dictionary to which the view refers. (provided only python version 3.10 and above)","title":"itemsview.mapping"},{"location":"usage/dictview/itemsview/#return-value_12","text":"MappingProxyType : A read-only proxy of the original dictionary.","title":"Return value"},{"location":"usage/dictview/keysview/","text":"KeysView KeysView is a view object which is returned by dict.keys() . It provides a dynamic view on the dictionary's keys, which means when dictionay changes, the view reflects these changes. len(keysview) Return the number of items in the dictionary d: Dict[KT, VT] where keysview=d.keys() . Return value: int : The number of items in d iter(keysview) Return an iterator over the keys in the dictionary. The order of the keys is guaranteed to be inserted order. Return value: Iterator[_KT_co] : The iterator over the keys in the dictonary. key in keysview Return whether if key is in the dictionary. Arguments: key : object ; An object to be checked Return value: bool : True if key is in the dictionary and False otherwise. reversed(keysview) Return a reverse iterator over the keys of the dictionary. (provided only python version 3.8 and above) Return value: Iterator[_KT_co] : The reverse iterator over the keys in the dictonary. keysview & other Return a set with elements common to keysview and other . Arguments: other : Iterable[Any] ; Iterable to take the intersection. Return value: Set[_KT_co] : A set with elements common to keysview and other . other & keysview Return a set with elements common to keysview and other . Arguments: other : Iterable[_T] ; Iterable to take the intersection. Return value: Set[_T] : A set with elements common to keysview and other . keysview | other Return a new set with elements from keysview and other . Arguments: other : Iterable[_T] ; Iterable to take the union. Return value: Set[Union[_KT_co, _T]] : A new set with elements from keysview and other . other | keysview Return a new set with elements from keysview and other . Arguments: other : Iterable[_T] ; Iterable to take the union. Return value: Set[Union[_KT_co, _T]] : A new set with elements from keysview and other . keysview - other Return a new set with elements in the keysview that are not in the other . Arguments: other : Iterable[Any] ; Iterable to take the difference. Return value: Set[_KT_co] : A new set with elements in the set that are not in the other . other - keysview Return a new set with elements in the other that are not in the keysview . Arguments: other : Iterable[_T] ; Iterable to be taken the difference. Return value: Set[_T] : A new set with elements in other that are not in the keysview . keysview ^ other Return a new set with elements in either the keysview or other but not both. Arguments: other : Iterable[_T] ; Iterable to take the symmetric difference. Return value Set[Union[_KT_co, _T]] : A new set with elements in either the keysview or other but not both. other ^ keysview Return a new set with elements in either the keysview or other but not both. Arguments: other : Iterable[_T] ; Iterable to take the symmetric difference. Return value Set[Union[_KT_co, _T]] : A new set with elements in either the keysview or other but not both. keysview.mapping Return a MappingProxyType that wraps the original dictionary to which the view refers. (provided only python version 3.10 and above) Return value MappingProxyType : A read-only proxy of the original dictionary.","title":"KeysView"},{"location":"usage/dictview/keysview/#keysview","text":"KeysView is a view object which is returned by dict.keys() . It provides a dynamic view on the dictionary's keys, which means when dictionay changes, the view reflects these changes.","title":"KeysView"},{"location":"usage/dictview/keysview/#lenkeysview","text":"Return the number of items in the dictionary d: Dict[KT, VT] where keysview=d.keys() .","title":"len(keysview)"},{"location":"usage/dictview/keysview/#return-value","text":"int : The number of items in d","title":"Return value:"},{"location":"usage/dictview/keysview/#iterkeysview","text":"Return an iterator over the keys in the dictionary. The order of the keys is guaranteed to be inserted order.","title":"iter(keysview)"},{"location":"usage/dictview/keysview/#return-value_1","text":"Iterator[_KT_co] : The iterator over the keys in the dictonary.","title":"Return value:"},{"location":"usage/dictview/keysview/#key-in-keysview","text":"Return whether if key is in the dictionary.","title":"key in keysview"},{"location":"usage/dictview/keysview/#arguments","text":"key : object ; An object to be checked","title":"Arguments:"},{"location":"usage/dictview/keysview/#return-value_2","text":"bool : True if key is in the dictionary and False otherwise.","title":"Return value:"},{"location":"usage/dictview/keysview/#reversedkeysview","text":"Return a reverse iterator over the keys of the dictionary. (provided only python version 3.8 and above)","title":"reversed(keysview)"},{"location":"usage/dictview/keysview/#return-value_3","text":"Iterator[_KT_co] : The reverse iterator over the keys in the dictonary.","title":"Return value:"},{"location":"usage/dictview/keysview/#keysview-other","text":"Return a set with elements common to keysview and other .","title":"keysview &amp; other"},{"location":"usage/dictview/keysview/#arguments_1","text":"other : Iterable[Any] ; Iterable to take the intersection.","title":"Arguments:"},{"location":"usage/dictview/keysview/#return-value_4","text":"Set[_KT_co] : A set with elements common to keysview and other .","title":"Return value:"},{"location":"usage/dictview/keysview/#other-keysview","text":"Return a set with elements common to keysview and other .","title":"other &amp; keysview"},{"location":"usage/dictview/keysview/#arguments_2","text":"other : Iterable[_T] ; Iterable to take the intersection.","title":"Arguments:"},{"location":"usage/dictview/keysview/#return-value_5","text":"Set[_T] : A set with elements common to keysview and other .","title":"Return value:"},{"location":"usage/dictview/keysview/#keysview-other_1","text":"Return a new set with elements from keysview and other .","title":"keysview | other"},{"location":"usage/dictview/keysview/#arguments_3","text":"other : Iterable[_T] ; Iterable to take the union.","title":"Arguments:"},{"location":"usage/dictview/keysview/#return-value_6","text":"Set[Union[_KT_co, _T]] : A new set with elements from keysview and other .","title":"Return value:"},{"location":"usage/dictview/keysview/#other-keysview_1","text":"Return a new set with elements from keysview and other .","title":"other | keysview"},{"location":"usage/dictview/keysview/#arguments_4","text":"other : Iterable[_T] ; Iterable to take the union.","title":"Arguments:"},{"location":"usage/dictview/keysview/#return-value_7","text":"Set[Union[_KT_co, _T]] : A new set with elements from keysview and other .","title":"Return value:"},{"location":"usage/dictview/keysview/#keysview-other_2","text":"Return a new set with elements in the keysview that are not in the other .","title":"keysview - other"},{"location":"usage/dictview/keysview/#arguments_5","text":"other : Iterable[Any] ; Iterable to take the difference.","title":"Arguments:"},{"location":"usage/dictview/keysview/#return-value_8","text":"Set[_KT_co] : A new set with elements in the set that are not in the other .","title":"Return value:"},{"location":"usage/dictview/keysview/#other-keysview_2","text":"Return a new set with elements in the other that are not in the keysview .","title":"other - keysview"},{"location":"usage/dictview/keysview/#arguments_6","text":"other : Iterable[_T] ; Iterable to be taken the difference.","title":"Arguments:"},{"location":"usage/dictview/keysview/#return-value_9","text":"Set[_T] : A new set with elements in other that are not in the keysview .","title":"Return value:"},{"location":"usage/dictview/keysview/#keysview-other_3","text":"Return a new set with elements in either the keysview or other but not both.","title":"keysview ^ other"},{"location":"usage/dictview/keysview/#arguments_7","text":"other : Iterable[_T] ; Iterable to take the symmetric difference.","title":"Arguments:"},{"location":"usage/dictview/keysview/#return-value_10","text":"Set[Union[_KT_co, _T]] : A new set with elements in either the keysview or other but not both.","title":"Return value"},{"location":"usage/dictview/keysview/#other-keysview_3","text":"Return a new set with elements in either the keysview or other but not both.","title":"other ^ keysview"},{"location":"usage/dictview/keysview/#arguments_8","text":"other : Iterable[_T] ; Iterable to take the symmetric difference.","title":"Arguments:"},{"location":"usage/dictview/keysview/#return-value_11","text":"Set[Union[_KT_co, _T]] : A new set with elements in either the keysview or other but not both.","title":"Return value"},{"location":"usage/dictview/keysview/#keysviewmapping","text":"Return a MappingProxyType that wraps the original dictionary to which the view refers. (provided only python version 3.10 and above)","title":"keysview.mapping"},{"location":"usage/dictview/keysview/#return-value_12","text":"MappingProxyType : A read-only proxy of the original dictionary.","title":"Return value"},{"location":"usage/dictview/valuesview/","text":"ValuesView ValuesView is a view object which is returned by dict.views() . It provides a dynamic view on the dictionary's values, which means when dictionay changes, the view reflects these changes. len(valuesview) Return the number of items in the dictionay d: Dict[KT, VT] where valuesview=d.values() . Return value: int : The number of items in d iter(valuesview) Return an iterator over the values in the dictionary. The order of the values is guaranteed to be inserted order. Return value: Iterator[_VT_co] : The iterator over the values in the dictionary. value in valuesview Return whether if value is in the dictionary. Arguments: value : object ; An object to be checked Return value: bool : True if value is in the dictionary and False otherwise. reversed(valuesview) Return a reverse iterator over the values of the dictionary. (provided only python version 3.8 and above) Return value: Iterator[_VT_co] : The reverse iterator over the values in the dictonary. valuesview.mapping Return a MappingProxyType that wraps the original dictionary to which the view refers. (provided only python version 3.10 and above) Return value MappingProxyType : A read-only proxy of the original dictionary.","title":"ValuesView"},{"location":"usage/dictview/valuesview/#valuesview","text":"ValuesView is a view object which is returned by dict.views() . It provides a dynamic view on the dictionary's values, which means when dictionay changes, the view reflects these changes.","title":"ValuesView"},{"location":"usage/dictview/valuesview/#lenvaluesview","text":"Return the number of items in the dictionay d: Dict[KT, VT] where valuesview=d.values() .","title":"len(valuesview)"},{"location":"usage/dictview/valuesview/#return-value","text":"int : The number of items in d","title":"Return value:"},{"location":"usage/dictview/valuesview/#itervaluesview","text":"Return an iterator over the values in the dictionary. The order of the values is guaranteed to be inserted order.","title":"iter(valuesview)"},{"location":"usage/dictview/valuesview/#return-value_1","text":"Iterator[_VT_co] : The iterator over the values in the dictionary.","title":"Return value:"},{"location":"usage/dictview/valuesview/#value-in-valuesview","text":"Return whether if value is in the dictionary.","title":"value in valuesview"},{"location":"usage/dictview/valuesview/#arguments","text":"value : object ; An object to be checked","title":"Arguments:"},{"location":"usage/dictview/valuesview/#return-value_2","text":"bool : True if value is in the dictionary and False otherwise.","title":"Return value:"},{"location":"usage/dictview/valuesview/#reversedvaluesview","text":"Return a reverse iterator over the values of the dictionary. (provided only python version 3.8 and above)","title":"reversed(valuesview)"},{"location":"usage/dictview/valuesview/#return-value_3","text":"Iterator[_VT_co] : The reverse iterator over the values in the dictonary.","title":"Return value:"},{"location":"usage/dictview/valuesview/#valuesviewmapping","text":"Return a MappingProxyType that wraps the original dictionary to which the view refers. (provided only python version 3.10 and above)","title":"valuesview.mapping"},{"location":"usage/dictview/valuesview/#return-value_4","text":"MappingProxyType : A read-only proxy of the original dictionary.","title":"Return value"}]}