{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Overview Documentation for version: 1.0.2 sqlitecollections is a sort of containers that are backended by sqlite3 DB and are compatible with corresponding built-in collections. Since containers consume disk space instead of RAM, they can handle large amounts of data even in environments with limited RAM. Migrating from existing code using the built-in container is as simple as importing the library and changing the constructor. The elements of the container are automatically serialized and stored in the sqlite3 database, and are automatically read from the sqlite3 database and deserialized when accessed. Current version supports List (mutable sequence), Dict (mutable mapping) and Set (mutable set) and almost all methods are compatible with list, dict and set respectively. Installation pip install sqlitecollections Example import sqlitecollections as sc l = sc . List [ str ]([ \"Alice\" , \"Bob\" , \"Carol\" ]) print ( l [ 2 ]) #> Carol print ( len ( l )) #> 3 l . append ( \"Dave\" ) print ( l . index ( \"Bob\" )) #> 1 print ( l . index ( \"Dave\" )) #> 3 d = sc . Dict [ str , str ]({ \"a\" : \"Alice\" , \"b\" : \"Bob\" }) print ( d [ \"a\" ]) #> Alice d [ \"c\" ] = \"Carol\" print ( list ( d . keys ())) #> ['a', 'b', 'c'] print ( list ( d . values ())) #> ['Alice', 'Bob', 'Carol'] s = sc . Set [ str ]([ \"Alice\" , \"Bob\" , \"Carol\" , \"Dave\" ]) print ( \"Ellen\" in s ) #> False print ( \"Alice\" in s ) #> True print ( list ( s . intersection ([ \"Alice\" , \"Carol\" ]))) #> ['Alice', 'Carol'] In the above example, a temporary file is created every time a container is created, and the elements are written to the sqlite3 database created on the file, thus consuming very little RAM. If you want to reuse the container you created, you can create it by specifying the file path and table name of the sqlite3 database. import sqlitecollections as sc l = sc . List [ str ]([ \"Alice\" , \"Bob\" , \"Carol\" ], connection = \"path/to/file.db\" , table_name = \"list_example\" ) l . append ( \"Dave\" ) exit () When you load it, you can restore the previous state by specifying the same file path and table name. import sqlitecollections as sc l = sc . List [ str ]( connection = \"path/to/file.db\" , table_name = \"list_example\" ) print ( len ( l )) #> 4 print ( list ( l )) #> ['Alice', 'Bob', 'Carol', 'Dave'] Pros and cons for built-in containers Pros Save memory usage. Once the database is built, loading time is almost zero, even for huge data. Cons Each operation has the overhead of serialize/deserialize. Some operations are incompatible and unavailable. For example, directly rewriting the mutable elements of a container.","title":"Overview"},{"location":"#overview","text":"Documentation for version: 1.0.2 sqlitecollections is a sort of containers that are backended by sqlite3 DB and are compatible with corresponding built-in collections. Since containers consume disk space instead of RAM, they can handle large amounts of data even in environments with limited RAM. Migrating from existing code using the built-in container is as simple as importing the library and changing the constructor. The elements of the container are automatically serialized and stored in the sqlite3 database, and are automatically read from the sqlite3 database and deserialized when accessed. Current version supports List (mutable sequence), Dict (mutable mapping) and Set (mutable set) and almost all methods are compatible with list, dict and set respectively.","title":"Overview"},{"location":"#installation","text":"pip install sqlitecollections","title":"Installation"},{"location":"#example","text":"import sqlitecollections as sc l = sc . List [ str ]([ \"Alice\" , \"Bob\" , \"Carol\" ]) print ( l [ 2 ]) #> Carol print ( len ( l )) #> 3 l . append ( \"Dave\" ) print ( l . index ( \"Bob\" )) #> 1 print ( l . index ( \"Dave\" )) #> 3 d = sc . Dict [ str , str ]({ \"a\" : \"Alice\" , \"b\" : \"Bob\" }) print ( d [ \"a\" ]) #> Alice d [ \"c\" ] = \"Carol\" print ( list ( d . keys ())) #> ['a', 'b', 'c'] print ( list ( d . values ())) #> ['Alice', 'Bob', 'Carol'] s = sc . Set [ str ]([ \"Alice\" , \"Bob\" , \"Carol\" , \"Dave\" ]) print ( \"Ellen\" in s ) #> False print ( \"Alice\" in s ) #> True print ( list ( s . intersection ([ \"Alice\" , \"Carol\" ]))) #> ['Alice', 'Carol'] In the above example, a temporary file is created every time a container is created, and the elements are written to the sqlite3 database created on the file, thus consuming very little RAM. If you want to reuse the container you created, you can create it by specifying the file path and table name of the sqlite3 database. import sqlitecollections as sc l = sc . List [ str ]([ \"Alice\" , \"Bob\" , \"Carol\" ], connection = \"path/to/file.db\" , table_name = \"list_example\" ) l . append ( \"Dave\" ) exit () When you load it, you can restore the previous state by specifying the same file path and table name. import sqlitecollections as sc l = sc . List [ str ]( connection = \"path/to/file.db\" , table_name = \"list_example\" ) print ( len ( l )) #> 4 print ( list ( l )) #> ['Alice', 'Bob', 'Carol', 'Dave']","title":"Example"},{"location":"#pros-and-cons-for-built-in-containers","text":"","title":"Pros and cons for built-in containers"},{"location":"#pros","text":"Save memory usage. Once the database is built, loading time is almost zero, even for huge data.","title":"Pros"},{"location":"#cons","text":"Each operation has the overhead of serialize/deserialize. Some operations are incompatible and unavailable. For example, directly rewriting the mutable elements of a container.","title":"Cons"},{"location":"benchmark/","text":"py36 py37 py38 py39 py310 dict list set timing subject builtin sqlitecollections ratio clear 0.00414 0.00676 1.63462 __contains__ 0.00411 0.00425 1.03371 copy 0.00504 0.01067 2.11706 __delitem__ 0.00425 0.00805 1.89317 get 0.00425 0.00438 1.02951 get (unsuccessful search) 0.00437 0.00415 0.95115 __getitem__ 0.00387 0.00403 1.04274 __init__ 0.00395 0.04189 10.59416 items 0.00438 0.01107 2.52653 __iter__ 0.00386 0.00822 2.13083 keys 0.00416 0.00816 1.96061 __len__ 0.00405 0.00419 1.0346 __contains__ (unsuccessful search) 0.00421 0.00434 1.03269 pop 0.00426 0.00868 2.03811 pop (unsuccessful search) 0.00442 0.00679 1.53755 popitem 0.00453 0.00989 2.18431 setdefault 0.00406 0.00591 1.45759 setdefault (unsuccessful search) 0.0042 0.00662 1.57471 __setitem__ (add new item) 0.00391 0.00819 2.09343 __setitem__ (replace) 0.00418 0.00903 2.15976 update 0.00496 0.00952 1.91659 update (many) 0.00554 0.53089 95.81559 values 0.00473 0.00899 1.8997 approximate memory usage subject builtin sqlitecollections ratio clear 0.0 0.0 1.0 __contains__ 0.0 0.0 1.0 copy 0.0 0.0 1.0 __delitem__ 0.0 0.0 1.0 get 0.0 0.0 1.0 get (unsuccessful search) 0.0 0.0 1.0 __getitem__ 0.0 0.0 1.0 __init__ 0.0 0.0 1.0 items 0.16797 0.26172 1.55814 __iter__ 0.0 0.01562 inf keys 0.0 0.0 1.0 __len__ 0.0 0.0 1.0 __contains__ (unsuccessful search) 0.0 0.0 1.0 pop 0.0 0.0 1.0 pop (unsuccessful search) 0.0 0.0 1.0 popitem 0.0 0.0 1.0 setdefault 0.0 0.0 1.0 setdefault (unsuccessful search) 0.0 0.0 1.0 __setitem__ (add new item) 0.0 0.0 1.0 __setitem__ (replace) 0.0 0.0 1.0 update 0.0 0.0 1.0 update (many) 0.03516 0.0 0.0 values 0.0 0.0 1.0 timing subject builtin sqlitecollections ratio __add__ 0.00374 0.03569 9.55342 append 0.00403 0.00711 1.76601 clear 0.00395 0.00731 1.85183 __contains__ 0.00388 0.00385 0.99216 copy 0.00392 0.03461 8.8306 count 0.00424 0.00411 0.96971 __init__ 0.00402 0.02522 6.26673 __delitem__ 0.00425 0.01119 2.63404 __delitem__ (slice) 0.00384 0.01415 3.69035 __delitem__ (slice with skip) 0.0037 0.01889 5.10504 extend 0.00405 0.00819 2.02398 __getitem__ 0.00403 0.00387 0.95937 __getitem__ (slice) 0.00385 0.02478 6.44228 __getitem__ (slice with skip) 0.00379 0.01275 3.3646 __iadd__ 0.00399 0.00832 2.08448 __imult__ 0.00419 0.0207 4.94108 index 0.0039 0.00436 1.11877 index (unsuccessful search) 0.00416 0.00403 0.96943 insert 0.00402 0.0136 3.38686 __len__ 0.00371 0.00455 1.22612 __mult__ 0.00371 0.0515 13.89328 __contains__ (unsuccessful search) 0.00385 0.00403 1.04663 pop 0.00413 0.01132 2.74315 remove 0.00408 0.0136 3.33518 __setitem__ 0.00442 0.00823 1.8617 __setitem__ (slice) 0.00404 0.65712 162.50343 __setitem__ (slice with skip) 0.00439 0.00826 1.88127 sort 0.00406 0.08883 21.86022 approximate memory usage subject builtin sqlitecollections ratio __add__ 0.01172 0.03516 3.0 append 0.0 0.0 1.0 clear 0.0 0.0 1.0 __contains__ 0.0 0.0 1.0 copy 0.0 0.0 1.0 count 0.0 0.0 1.0 __init__ 0.0 0.07031 inf __delitem__ 0.0 0.00391 inf __delitem__ (slice) 0.0 0.0 1.0 __delitem__ (slice with skip) 0.0 0.0 1.0 extend 0.0 0.0 1.0 __getitem__ 0.0 0.0 1.0 __getitem__ (slice) 0.0 0.0 1.0 __getitem__ (slice with skip) 0.0 0.0 1.0 __iadd__ 0.0 0.0 1.0 __imult__ 0.0 0.0 1.0 index 0.0 0.0 1.0 index (unsuccessful search) 0.0 0.0 1.0 insert 0.0 0.0 1.0 __len__ 0.0 0.0 1.0 __mult__ 0.0 0.01172 inf __contains__ (unsuccessful search) 0.0 0.0 1.0 pop 0.0 0.0 1.0 remove 0.0 0.0 1.0 __setitem__ 0.0 0.0 1.0 __setitem__ (slice) 0.0 0.0 1.0 __setitem__ (slice with skip) 0.0 0.0 1.0 sort 0.0 1.28516 inf timing subject builtin sqlitecollections ratio add (existing item) 0.00444 0.00646 1.45301 add (new item) 0.00448 0.00855 1.90936 __and__ 0.00449 0.02908 6.47999 clear 0.00408 0.00809 1.98585 __contains__ 0.00408 0.00407 0.99852 copy 0.00469 0.02106 4.48789 difference 0.00423 0.01897 4.48601 discard 0.00393 0.00814 2.06964 discard (no changes) 0.00395 0.00614 1.55516 __ge__ 0.00447 0.00459 1.02606 __ge__ (not greater than or equals to) 0.0042 0.00404 0.96181 __gt__ 0.00396 0.00759 1.9164 __gt__ (not greater than) 0.00364 0.01785 4.89893 __iand__ 0.00373 0.01037 2.78387 __init__ 0.00394 0.01879 4.76612 intersection 0.0039 0.02484 6.37696 intersection_update 0.00386 0.0113 2.92956 __ior__ 0.00459 0.00917 2.00014 isdisjoint 0.00431 0.00426 0.98742 isdisjoint (not disjoint) 0.00396 0.00399 1.00821 issubset 0.00403 0.04575 11.35525 issubset (not subset) 0.00399 0.02308 5.78168 issuperset 0.00423 0.01088 2.57114 issuperset (not superset) 0.0042 0.00394 0.93804 __ixor__ 0.0041 0.02694 6.5654 __le__ 0.0039 0.00457 1.17342 __le__ (not less than or equals to) 0.00412 0.00453 1.09908 __len__ 0.00428 0.00419 0.97975 __lt__ 0.00387 0.00465 1.20056 __lt__ (not less than) 0.00389 0.00383 0.98681 __contains__ (unsuccessful search) 0.00388 0.00383 0.98695 __or__ 0.00388 0.02192 5.6528 pop 0.00381 0.00755 1.97962 remove 0.0041 0.00787 1.91964 __sub__ 0.00424 0.02046 4.82235 symmetric_difference 0.00418 0.04604 11.02085 symmetric_difference_update 0.00455 0.02895 6.36111 union 0.00406 0.02229 5.48743 update 0.00388 0.00811 2.09269 __xor__ 0.00446 0.0476 10.67883 approximate memory usage subject builtin sqlitecollections ratio add (existing item) 0.0 0.0 1.0 add (new item) 0.0 0.0 1.0 __and__ 0.0 0.01562 inf clear 0.0 0.0 1.0 __contains__ 0.0 0.0 1.0 copy 0.0 0.0 1.0 difference 0.0 0.0 1.0 discard 0.0 0.0 1.0 discard (no changes) 0.0 0.0 1.0 __ge__ 0.0 0.0 1.0 __ge__ (not greater than or equals to) 0.0 0.0 1.0 __gt__ 0.0 0.0 1.0 __gt__ (not greater than) 0.0 0.0 1.0 __iand__ 0.0 0.0 1.0 __init__ 0.0 0.0 1.0 intersection 0.0 0.01172 inf intersection_update 0.0 0.0 1.0 __ior__ 0.0 0.0 1.0 isdisjoint 0.0 0.0 1.0 isdisjoint (not disjoint) 0.0 0.0 1.0 issubset 0.0 0.00391 inf issubset (not subset) 0.0 0.0 1.0 issuperset 0.0 0.0 1.0 issuperset (not superset) 0.0 0.0 1.0 __ixor__ 0.0 0.0 1.0 __le__ 0.0 0.0 1.0 __le__ (not less than or equals to) 0.0 0.0 1.0 __len__ 0.0 0.0 1.0 __lt__ 0.0 0.0 1.0 __lt__ (not less than) 0.0 0.0 1.0 __contains__ (unsuccessful search) 0.0 0.0 1.0 __or__ 0.0 0.0 1.0 pop 0.0 0.0 1.0 remove 0.0 0.0 1.0 __sub__ 0.0 0.0 1.0 symmetric_difference 0.0 0.0 1.0 symmetric_difference_update 0.0 0.0 1.0 union 0.0 0.0 1.0 update 0.0 0.0 1.0 __xor__ 0.0 0.00391 inf dict list set timing subject builtin sqlitecollections ratio clear 0.00437 0.00736 1.68501 __contains__ 0.00412 0.00432 1.04774 copy 0.0043 0.00993 2.31079 __delitem__ 0.00426 0.00781 1.83375 get 0.00427 0.00442 1.03338 get (unsuccessful search) 0.00438 0.00463 1.05518 __getitem__ 0.00419 0.00429 1.02496 __init__ 0.00427 0.04599 10.77386 items 0.00466 0.01322 2.83504 __iter__ 0.00424 0.00882 2.08143 keys 0.00422 0.0092 2.17889 __len__ 0.00431 0.00422 0.97949 __contains__ (unsuccessful search) 0.00429 0.00445 1.03713 pop 0.00426 0.00745 1.74725 pop (unsuccessful search) 0.00448 0.00601 1.34108 popitem 0.00426 0.00798 1.87132 setdefault 0.00423 0.00608 1.43803 setdefault (unsuccessful search) 0.00428 0.00669 1.56283 __setitem__ (add new item) 0.0042 0.00742 1.76657 __setitem__ (replace) 0.00424 0.00764 1.79929 update 0.00428 0.00762 1.78195 update (many) 0.00514 0.59575 115.83862 values 0.00414 0.00855 2.067 approximate memory usage subject builtin sqlitecollections ratio clear 0.0 0.0 1.0 __contains__ 0.0 0.0 1.0 copy 0.0 0.0 1.0 __delitem__ 0.0 0.0 1.0 get 0.0 0.0 1.0 get (unsuccessful search) 0.0 0.0 1.0 __getitem__ 0.0 0.0 1.0 __init__ 0.0 0.0 1.0 items 0.19922 0.32812 1.64706 __iter__ 0.0 0.0 1.0 keys 0.0 0.0 1.0 __len__ 0.0 0.0 1.0 __contains__ (unsuccessful search) 0.0 0.0 1.0 pop 0.0 0.0 1.0 pop (unsuccessful search) 0.0 0.0 1.0 popitem 0.0 0.0 1.0 setdefault 0.0 0.0 1.0 setdefault (unsuccessful search) 0.0 0.0 1.0 __setitem__ (add new item) 0.0 0.0 1.0 __setitem__ (replace) 0.0 0.0 1.0 update 0.0 0.0 1.0 update (many) 0.0 0.0 1.0 values 0.0 0.0 1.0 timing subject builtin sqlitecollections ratio __add__ 0.00401 0.03578 8.9175 append 0.00417 0.00988 2.37282 clear 0.00408 0.00705 1.72731 __contains__ 0.00405 0.004 0.98673 copy 0.00402 0.03458 8.60074 count 0.00402 0.00405 1.00929 __init__ 0.00405 0.02307 5.70273 __delitem__ 0.00415 0.01075 2.59279 __delitem__ (slice) 0.00408 0.01464 3.5921 __delitem__ (slice with skip) 0.0041 0.01446 3.53009 extend 0.00419 0.00679 1.61921 __getitem__ 0.0041 0.00407 0.99225 __getitem__ (slice) 0.0041 0.01906 4.653 __getitem__ (slice with skip) 0.00414 0.01093 2.63939 __iadd__ 0.00409 0.00673 1.64441 __imult__ 0.00408 0.02259 5.53751 index 0.00417 0.00427 1.02341 index (unsuccessful search) 0.00412 0.00443 1.07496 insert 0.00414 0.01368 3.30367 __len__ 0.00421 0.00406 0.9635 __mult__ 0.00406 0.05668 13.94565 __contains__ (unsuccessful search) 0.00411 0.0042 1.02027 pop 0.00409 0.01079 2.64042 remove 0.00413 0.01276 3.08821 __setitem__ 0.00419 0.00736 1.75657 __setitem__ (slice) 0.00406 0.64267 158.47185 __setitem__ (slice with skip) 0.0041 0.00765 1.86576 sort 0.00418 0.09577 22.89184 approximate memory usage subject builtin sqlitecollections ratio __add__ 0.0 0.0 1.0 append 0.0 0.0 1.0 clear 0.0 0.0 1.0 __contains__ 0.0 0.0 1.0 copy 0.0 0.0 1.0 count 0.0 0.0 1.0 __init__ 0.0 0.08203 inf __delitem__ 0.0 0.0 1.0 __delitem__ (slice) 0.0 0.0 1.0 __delitem__ (slice with skip) 0.0 0.0 1.0 extend 0.0 0.0 1.0 __getitem__ 0.0 0.0 1.0 __getitem__ (slice) 0.0 0.0 1.0 __getitem__ (slice with skip) 0.0 0.0 1.0 __iadd__ 0.0 0.0 1.0 __imult__ 0.0 0.0 1.0 index 0.0 0.0 1.0 index (unsuccessful search) 0.0 0.0 1.0 insert 0.0 0.0 1.0 __len__ 0.0 0.0 1.0 __mult__ 0.0 0.0 1.0 __contains__ (unsuccessful search) 0.0 0.0 1.0 pop 0.0 0.0 1.0 remove 0.0 0.0 1.0 __setitem__ 0.0 0.0 1.0 __setitem__ (slice) 0.0 0.0 1.0 __setitem__ (slice with skip) 0.0 0.0 1.0 sort 0.0 0.95703 inf timing subject builtin sqlitecollections ratio add (existing item) 0.00423 0.00596 1.41027 add (new item) 0.0042 0.00723 1.7237 __and__ 0.00417 0.02302 5.52557 clear 0.00422 0.00692 1.63807 __contains__ 0.00416 0.00422 1.01462 copy 0.00423 0.01878 4.44251 difference 0.00413 0.01812 4.39198 discard 0.00421 0.00703 1.66724 discard (no changes) 0.00419 0.00624 1.49088 __ge__ 0.0041 0.00413 1.00537 __ge__ (not greater than or equals to) 0.00414 0.00443 1.07043 __gt__ 0.00417 0.00706 1.69602 __gt__ (not greater than) 0.00417 0.02017 4.838 __iand__ 0.00423 0.0101 2.3867 __init__ 0.00418 0.01843 4.40851 intersection 0.00427 0.02307 5.40659 intersection_update 0.00421 0.00953 2.26498 __ior__ 0.0043 0.00795 1.84755 isdisjoint 0.00416 0.00418 1.00627 isdisjoint (not disjoint) 0.00412 0.00416 1.00833 issubset 0.00419 0.04483 10.69698 issubset (not subset) 0.00414 0.0225 5.43515 issuperset 0.00423 0.01206 2.85269 issuperset (not superset) 0.00415 0.00445 1.07284 __ixor__ 0.0042 0.02757 6.56177 __le__ 0.00416 0.00502 1.20443 __le__ (not less than or equals to) 0.00423 0.00413 0.9775 __len__ 0.00419 0.00415 0.98996 __lt__ 0.00417 0.00505 1.21285 __lt__ (not less than) 0.00417 0.00417 0.99992 __contains__ (unsuccessful search) 0.00418 0.00416 0.99521 __or__ 0.00413 0.02009 4.86966 pop 0.00414 0.00707 1.70789 remove 0.00412 0.00707 1.71536 __sub__ 0.00417 0.01762 4.22307 symmetric_difference 0.00414 0.04629 11.18844 symmetric_difference_update 0.00417 0.02784 6.67791 union 0.00415 0.02003 4.82214 update 0.00422 0.00755 1.78769 __xor__ 0.00416 0.04508 10.84165 approximate memory usage subject builtin sqlitecollections ratio add (existing item) 0.0 0.0 1.0 add (new item) 0.0 0.0 1.0 __and__ 0.0 0.0 1.0 clear 0.0 0.0 1.0 __contains__ 0.0 0.0 1.0 copy 0.0 0.0 1.0 difference 0.0 0.0 1.0 discard 0.0 0.0 1.0 discard (no changes) 0.0 0.0 1.0 __ge__ 0.0 0.0 1.0 __ge__ (not greater than or equals to) 0.0 0.0 1.0 __gt__ 0.0 0.0 1.0 __gt__ (not greater than) 0.0 0.0 1.0 __iand__ 0.0 0.0 1.0 __init__ 0.0 0.0 1.0 intersection 0.0 0.0 1.0 intersection_update 0.0 0.0 1.0 __ior__ 0.0 0.0 1.0 isdisjoint 0.0 0.0 1.0 isdisjoint (not disjoint) 0.0 0.0 1.0 issubset 0.0 0.0 1.0 issubset (not subset) 0.0 0.0 1.0 issuperset 0.0 0.0 1.0 issuperset (not superset) 0.0 0.0 1.0 __ixor__ 0.0 0.0 1.0 __le__ 0.0 0.0 1.0 __le__ (not less than or equals to) 0.0 0.0 1.0 __len__ 0.0 0.0 1.0 __lt__ 0.0 0.0 1.0 __lt__ (not less than) 0.0 0.0 1.0 __contains__ (unsuccessful search) 0.0 0.0 1.0 __or__ 0.0 0.0 1.0 pop 0.0 0.0 1.0 remove 0.0 0.0 1.0 __sub__ 0.0 0.0 1.0 symmetric_difference 0.0 0.0 1.0 symmetric_difference_update 0.0 0.0 1.0 union 0.0 0.0 1.0 update 0.0 0.0 1.0 __xor__ 0.0 0.0 1.0 dict list set timing subject builtin sqlitecollections ratio clear 0.00442 0.00972 2.19756 __contains__ 0.00412 0.00432 1.04854 copy 0.00412 0.00966 2.34527 __delitem__ 0.00419 0.0074 1.76604 get 0.00404 0.00425 1.05337 get (unsuccessful search) 0.00401 0.00414 1.03268 __getitem__ 0.00405 0.00434 1.07354 __init__ 0.00421 0.03874 9.19389 items 0.00456 0.01111 2.43736 __iter__ 0.0041 0.00794 1.93324 keys 0.0041 0.00794 1.93667 __len__ 0.00403 0.00404 1.00268 __contains__ (unsuccessful search) 0.0041 0.00425 1.03637 pop 0.00417 0.0069 1.65451 pop (unsuccessful search) 0.00425 0.0057 1.3424 popitem 0.00416 0.00776 1.86447 reversed 0.00405 0.0078 1.92421 setdefault 0.00409 0.00604 1.47696 setdefault (unsuccessful search) 0.0041 0.00604 1.47243 __setitem__ (add new item) 0.0041 0.00706 1.72127 __setitem__ (replace) 0.00391 0.00705 1.80613 update 0.00409 0.00759 1.85657 update (many) 0.0051 0.5869 115.00387 values 0.00406 0.00762 1.87666 approximate memory usage subject builtin sqlitecollections ratio clear 0.0 0.0 1.0 __contains__ 0.0 0.0 1.0 copy 0.0 0.0 1.0 __delitem__ 0.0 0.0 1.0 get 0.0 0.0 1.0 get (unsuccessful search) 0.0 0.0 1.0 __getitem__ 0.0 0.0 1.0 __init__ 0.0 0.0 1.0 items 0.0 0.09375 inf __iter__ 0.0 0.04297 inf keys 0.0 0.0 1.0 __len__ 0.0 0.0 1.0 __contains__ (unsuccessful search) 0.0 0.0 1.0 pop 0.0 0.0 1.0 pop (unsuccessful search) 0.0 0.0 1.0 popitem 0.0 0.0 1.0 reversed 0.0 0.0 1.0 setdefault 0.0 0.0 1.0 setdefault (unsuccessful search) 0.0 0.0 1.0 __setitem__ (add new item) 0.0 0.0 1.0 __setitem__ (replace) 0.0 0.0 1.0 update 0.0 0.0 1.0 update (many) 0.0 0.0 1.0 values 0.0 0.0 1.0 timing subject builtin sqlitecollections ratio __add__ 0.00371 0.02923 7.87661 append 0.00373 0.00651 1.74658 clear 0.00396 0.00691 1.74366 __contains__ 0.0039 0.00398 1.01966 copy 0.004 0.02835 7.09391 count 0.00364 0.00402 1.10344 __init__ 0.00399 0.02023 5.06733 __delitem__ 0.00395 0.00997 2.52147 __delitem__ (slice) 0.00391 0.01439 3.68497 __delitem__ (slice with skip) 0.00396 0.01455 3.67436 extend 0.00395 0.00662 1.67505 __getitem__ 0.004 0.00392 0.98069 __getitem__ (slice) 0.00396 0.0178 4.49062 __getitem__ (slice with skip) 0.00398 0.01074 2.69898 __iadd__ 0.00404 0.0066 1.63349 __imult__ 0.00407 0.01973 4.84658 index 0.00396 0.00419 1.0564 index (unsuccessful search) 0.00398 0.00418 1.04953 insert 0.00404 0.01218 3.01304 __len__ 0.00396 0.00396 1.00207 __mult__ 0.00457 0.04959 10.85112 __contains__ (unsuccessful search) 0.00394 0.00398 1.01016 pop 0.0041 0.01048 2.55384 remove 0.00396 0.01231 3.10953 __setitem__ 0.00396 0.00735 1.85654 __setitem__ (slice) 0.00399 0.64702 162.33645 __setitem__ (slice with skip) 0.00396 0.00745 1.8802 sort 0.00402 0.09425 23.44524 approximate memory usage subject builtin sqlitecollections ratio __add__ 0.0 0.0 1.0 append 0.0 0.0 1.0 clear 0.0 0.0 1.0 __contains__ 0.0 0.0 1.0 copy 0.0 0.0 1.0 count 0.0 0.0 1.0 __init__ 0.0 0.07422 inf __delitem__ 0.0 0.0 1.0 __delitem__ (slice) 0.0 0.0 1.0 __delitem__ (slice with skip) 0.0 0.0 1.0 extend 0.0 0.0 1.0 __getitem__ 0.0 0.0 1.0 __getitem__ (slice) 0.0 0.0 1.0 __getitem__ (slice with skip) 0.0 0.0 1.0 __iadd__ 0.0 0.0 1.0 __imult__ 0.0 0.0 1.0 index 0.0 0.0 1.0 index (unsuccessful search) 0.0 0.0 1.0 insert 0.0 0.0 1.0 __len__ 0.0 0.0 1.0 __mult__ 0.0 0.0 1.0 __contains__ (unsuccessful search) 0.0 0.0 1.0 pop 0.0 0.0 1.0 remove 0.0 0.0 1.0 __setitem__ 0.0 0.0 1.0 __setitem__ (slice) 0.0 0.0 1.0 __setitem__ (slice with skip) 0.0 0.0 1.0 sort 0.0 0.83594 inf timing subject builtin sqlitecollections ratio add (existing item) 0.00407 0.00569 1.39919 add (new item) 0.00403 0.00657 1.6311 __and__ 0.00407 0.02125 5.22793 clear 0.00404 0.00693 1.71561 __contains__ 0.00399 0.00402 1.00866 copy 0.00416 0.01654 3.97988 difference 0.00406 0.01719 4.2321 discard 0.00403 0.00725 1.79774 discard (no changes) 0.00413 0.00568 1.37514 __ge__ 0.00401 0.00386 0.96248 __ge__ (not greater than or equals to) 0.00377 0.00439 1.16459 __gt__ 0.00418 0.00705 1.68702 __gt__ (not greater than) 0.00431 0.0182 4.21962 __iand__ 0.004 0.00895 2.23965 __init__ 0.00396 0.01842 4.65564 intersection 0.00407 0.02242 5.50526 intersection_update 0.00405 0.00981 2.42442 __ior__ 0.00408 0.00797 1.95414 isdisjoint 0.00411 0.00405 0.98623 isdisjoint (not disjoint) 0.00403 0.00406 1.0053 issubset 0.0041 0.04299 10.48274 issubset (not subset) 0.00417 0.02291 5.49408 issuperset 0.00403 0.01058 2.62686 issuperset (not superset) 0.00392 0.0042 1.07081 __ixor__ 0.00382 0.02413 6.31883 __le__ 0.00412 0.00478 1.16101 __le__ (not less than or equals to) 0.00407 0.00409 1.00512 __len__ 0.00411 0.00406 0.98727 __lt__ 0.00409 0.00485 1.18738 __lt__ (not less than) 0.00406 0.00401 0.98828 __contains__ (unsuccessful search) 0.00406 0.00403 0.99352 __or__ 0.00407 0.01895 4.65611 pop 0.00419 0.00706 1.68644 remove 0.00407 0.00728 1.78956 __sub__ 0.00413 0.0169 4.08997 symmetric_difference 0.00402 0.04286 10.65482 symmetric_difference_update 0.00418 0.02536 6.06169 union 0.00388 0.01768 4.55673 update 0.00392 0.00752 1.91706 __xor__ 0.00383 0.03879 10.12294 approximate memory usage subject builtin sqlitecollections ratio add (existing item) 0.0 0.0 1.0 add (new item) 0.0 0.0 1.0 __and__ 0.0 0.0 1.0 clear 0.0 0.0 1.0 __contains__ 0.0 0.0 1.0 copy 0.0 0.0 1.0 difference 0.0 0.0 1.0 discard 0.0 0.0 1.0 discard (no changes) 0.0 0.0 1.0 __ge__ 0.0 0.0 1.0 __ge__ (not greater than or equals to) 0.0 0.0 1.0 __gt__ 0.0 0.0 1.0 __gt__ (not greater than) 0.0 0.0 1.0 __iand__ 0.0 0.0 1.0 __init__ 0.0 0.0 1.0 intersection 0.0 0.0 1.0 intersection_update 0.0 0.0 1.0 __ior__ 0.0 0.0 1.0 isdisjoint 0.0 0.0 1.0 isdisjoint (not disjoint) 0.0 0.0 1.0 issubset 0.0 0.0 1.0 issubset (not subset) 0.0 0.0 1.0 issuperset 0.0 0.0 1.0 issuperset (not superset) 0.0 0.0 1.0 __ixor__ 0.0 0.0 1.0 __le__ 0.0 0.0 1.0 __le__ (not less than or equals to) 0.0 0.0 1.0 __len__ 0.0 0.0 1.0 __lt__ 0.0 0.0 1.0 __lt__ (not less than) 0.0 0.0 1.0 __contains__ (unsuccessful search) 0.0 0.0 1.0 __or__ 0.0 0.0 1.0 pop 0.0 0.0 1.0 remove 0.0 0.0 1.0 __sub__ 0.0 0.0 1.0 symmetric_difference 0.0 0.0 1.0 symmetric_difference_update 0.0 0.0 1.0 union 0.0 0.0 1.0 update 0.0 0.0 1.0 __xor__ 0.0 0.0 1.0 dict list set timing subject builtin sqlitecollections ratio clear 0.00396 0.0071 1.79446 __contains__ 0.00388 0.00405 1.04418 copy 0.0039 0.01091 2.79899 __delitem__ 0.004 0.00767 1.91895 get 0.00391 0.00406 1.04011 get (unsuccessful search) 0.00392 0.00403 1.02882 __getitem__ 0.00389 0.00409 1.05038 __init__ 0.00402 0.03972 9.87046 __ior__ 0.004 0.00751 1.87846 __ior__ (many) 0.00509 0.59102 116.09881 items 0.00447 0.01086 2.42954 __iter__ 0.00399 0.00795 1.99379 keys 0.00399 0.00805 2.01472 __len__ 0.00396 0.00402 1.01441 __contains__ (unsuccessful search) 0.00392 0.00412 1.05051 __or__ 0.00394 0.01273 3.23418 __or__ (many) 0.00548 0.59682 108.85171 pop 0.00405 0.00769 1.90052 pop (unsuccessful search) 0.00401 0.00566 1.41163 popitem 0.004 0.00766 1.9157 reversed 0.00396 0.00778 1.96467 setdefault 0.00403 0.00609 1.51285 setdefault (unsuccessful search) 0.00403 0.0061 1.51452 __setitem__ (add new item) 0.00401 0.00728 1.81435 __setitem__ (replace) 0.00398 0.00762 1.91569 update 0.00406 0.00781 1.92493 update (many) 0.00493 0.58935 119.59424 values 0.00392 0.00742 1.89333 approximate memory usage subject builtin sqlitecollections ratio clear 0.0 0.0 1.0 __contains__ 0.0 0.0 1.0 copy 0.0 0.0 1.0 __delitem__ 0.0 0.0 1.0 get 0.0 0.0 1.0 get (unsuccessful search) 0.0 0.0 1.0 __getitem__ 0.0 0.0 1.0 __init__ 0.0 0.0 1.0 __ior__ 0.0 0.0 1.0 __ior__ (many) 0.1875 0.0 0.0 items 0.0 0.13672 inf __iter__ 0.0 0.0 1.0 keys 0.0 0.0 1.0 __len__ 0.0 0.0 1.0 __contains__ (unsuccessful search) 0.0 0.0 1.0 __or__ 0.0 0.0 1.0 __or__ (many) 0.0 0.0 1.0 pop 0.0 0.0 1.0 pop (unsuccessful search) 0.0 0.0 1.0 popitem 0.0 0.0 1.0 reversed 0.0 0.0 1.0 setdefault 0.0 0.0 1.0 setdefault (unsuccessful search) 0.0 0.0 1.0 __setitem__ (add new item) 0.0 0.0 1.0 __setitem__ (replace) 0.0 0.0 1.0 update 0.0 0.0 1.0 update (many) 0.0 0.0 1.0 values 0.0 0.0 1.0 timing subject builtin sqlitecollections ratio __add__ 0.00388 0.03051 7.86824 append 0.00392 0.00707 1.80434 clear 0.00385 0.0073 1.89368 __contains__ 0.00399 0.00385 0.96515 copy 0.00384 0.02993 7.79584 count 0.00388 0.00388 1.001 __init__ 0.00385 0.02002 5.20514 __delitem__ 0.00392 0.00987 2.52033 __delitem__ (slice) 0.00386 0.01459 3.77736 __delitem__ (slice with skip) 0.00385 0.01423 3.69585 extend 0.00391 0.00728 1.86121 __getitem__ 0.00384 0.00385 1.00394 __getitem__ (slice) 0.00391 0.01793 4.58239 __getitem__ (slice with skip) 0.00388 0.01142 2.94637 __iadd__ 0.00393 0.00705 1.79357 __imult__ 0.00386 0.01938 5.01449 index 0.00391 0.00399 1.02032 index (unsuccessful search) 0.00381 0.00423 1.11199 insert 0.00442 0.01186 2.68182 __len__ 0.00387 0.00389 1.0065 __mult__ 0.00384 0.0516 13.44979 __contains__ (unsuccessful search) 0.00385 0.00394 1.02408 pop 0.0039 0.01065 2.73162 remove 0.00391 0.01238 3.16761 __setitem__ 0.00392 0.00654 1.66988 __setitem__ (slice) 0.00395 0.63271 160.32523 __setitem__ (slice with skip) 0.00389 0.00724 1.85835 sort 0.00388 0.09205 23.74273 approximate memory usage subject builtin sqlitecollections ratio __add__ 0.0 0.0 1.0 append 0.0 0.0 1.0 clear 0.0 0.0 1.0 __contains__ 0.0 0.0 1.0 copy 0.0 0.0 1.0 count 0.0 0.0 1.0 __init__ 0.0 0.0 1.0 __delitem__ 0.0 0.0 1.0 __delitem__ (slice) 0.0 0.0 1.0 __delitem__ (slice with skip) 0.0 0.0 1.0 extend 0.0 0.0 1.0 __getitem__ 0.0 0.0 1.0 __getitem__ (slice) 0.0 0.0 1.0 __getitem__ (slice with skip) 0.0 0.0 1.0 __iadd__ 0.0 0.0 1.0 __imult__ 0.0 0.0 1.0 index 0.0 0.0 1.0 index (unsuccessful search) 0.0 0.0 1.0 insert 0.0 0.0 1.0 __len__ 0.0 0.0 1.0 __mult__ 0.0 0.0 1.0 __contains__ (unsuccessful search) 0.0 0.0 1.0 pop 0.0 0.0 1.0 remove 0.0 0.0 1.0 __setitem__ 0.0 0.0 1.0 __setitem__ (slice) 0.0 0.0 1.0 __setitem__ (slice with skip) 0.0 0.0 1.0 sort 0.0 0.62109 inf timing subject builtin sqlitecollections ratio add (existing item) 0.00398 0.00587 1.47551 add (new item) 0.00399 0.00743 1.86119 __and__ 0.0042 0.02226 5.30413 clear 0.00396 0.00705 1.77748 __contains__ 0.00394 0.00395 1.00465 copy 0.00398 0.0179 4.50214 difference 0.00396 0.01785 4.50233 discard 0.00397 0.00697 1.75483 discard (no changes) 0.00399 0.00595 1.49216 __ge__ 0.00401 0.00391 0.97434 __ge__ (not greater than or equals to) 0.00395 0.00422 1.06878 __gt__ 0.00393 0.00716 1.82113 __gt__ (not greater than) 0.00394 0.01821 4.62058 __iand__ 0.00397 0.00896 2.25686 __init__ 0.00393 0.01739 4.42416 intersection 0.00391 0.02212 5.65479 intersection_update 0.00395 0.00949 2.40435 __ior__ 0.00398 0.0103 2.58572 isdisjoint 0.00392 0.0039 0.99688 isdisjoint (not disjoint) 0.00394 0.00394 1.00023 issubset 0.00389 0.04279 10.98952 issubset (not subset) 0.00394 0.0219 5.5657 issuperset 0.00396 0.01069 2.69806 issuperset (not superset) 0.00393 0.00427 1.08668 __ixor__ 0.00397 0.03132 7.88991 __le__ 0.00392 0.0046 1.17531 __le__ (not less than or equals to) 0.00399 0.00395 0.98917 __len__ 0.00392 0.00394 1.00613 __lt__ 0.00393 0.00466 1.18489 __lt__ (not less than) 0.00395 0.00394 0.9983 __contains__ (unsuccessful search) 0.00395 0.00396 1.00321 __or__ 0.00396 0.01876 4.74103 pop 0.00396 0.00786 1.98573 remove 0.00397 0.00742 1.86778 __sub__ 0.00395 0.01822 4.61211 symmetric_difference 0.00401 0.04411 11.00874 symmetric_difference_update 0.00393 0.02701 6.87224 union 0.00392 0.01908 4.86653 update 0.00397 0.00807 2.03407 __xor__ 0.00396 0.04488 11.33789 approximate memory usage subject builtin sqlitecollections ratio add (existing item) 0.0 0.0 1.0 add (new item) 0.0 0.0 1.0 __and__ 0.0 0.0 1.0 clear 0.0 0.0 1.0 __contains__ 0.0 0.0 1.0 copy 0.0 0.0 1.0 difference 0.0 0.0 1.0 discard 0.0 0.0 1.0 discard (no changes) 0.0 0.0 1.0 __ge__ 0.0 0.0 1.0 __ge__ (not greater than or equals to) 0.0 0.0 1.0 __gt__ 0.0 0.0 1.0 __gt__ (not greater than) 0.0 0.0 1.0 __iand__ 0.0 0.0 1.0 __init__ 0.0 0.0 1.0 intersection 0.0 0.0 1.0 intersection_update 0.0 0.0 1.0 __ior__ 0.0 0.0 1.0 isdisjoint 0.0 0.0 1.0 isdisjoint (not disjoint) 0.0 0.0 1.0 issubset 0.0 0.0 1.0 issubset (not subset) 0.0 0.0 1.0 issuperset 0.0 0.0 1.0 issuperset (not superset) 0.0 0.0 1.0 __ixor__ 0.0 0.0 1.0 __le__ 0.0 0.0 1.0 __le__ (not less than or equals to) 0.0 0.0 1.0 __len__ 0.0 0.0 1.0 __lt__ 0.0 0.0 1.0 __lt__ (not less than) 0.0 0.0 1.0 __contains__ (unsuccessful search) 0.0 0.0 1.0 __or__ 0.0 0.0 1.0 pop 0.0 0.0 1.0 remove 0.0 0.0 1.0 __sub__ 0.0 0.0 1.0 symmetric_difference 0.0 0.0 1.0 symmetric_difference_update 0.0 0.0 1.0 union 0.0 0.0 1.0 update 0.0 0.0 1.0 __xor__ 0.0 0.0 1.0 dict list set timing subject builtin sqlitecollections ratio clear 0.00488 0.00974 1.99409 __contains__ 0.00482 0.00606 1.25777 copy 0.00505 0.01415 2.80014 __delitem__ 0.00499 0.00914 1.83302 get 0.00477 0.00482 1.01063 get (unsuccessful search) 0.00487 0.00491 1.00821 __getitem__ 0.00507 0.00496 0.97678 __init__ 0.00488 0.05083 10.41817 __ior__ 0.00479 0.00998 2.0839 __ior__ (many) 0.00635 0.76343 120.2102 items 0.00534 0.0136 2.54528 __iter__ 0.00483 0.00967 2.00086 keys 0.0051 0.00961 1.88547 __len__ 0.005 0.00529 1.05951 __contains__ (unsuccessful search) 0.0048 0.00494 1.0281 __or__ 0.00498 0.01551 3.11423 __or__ (many) 0.00713 0.73897 103.61121 pop 0.00527 0.0092 1.74669 pop (unsuccessful search) 0.00531 0.00713 1.34259 popitem 0.00474 0.00977 2.05918 reversed 0.00472 0.00929 1.96627 setdefault 0.00489 0.00736 1.5042 setdefault (unsuccessful search) 0.00522 0.00853 1.63536 __setitem__ (add new item) 0.00489 0.00978 2.00217 __setitem__ (replace) 0.00502 0.00922 1.83764 update 0.00491 0.0096 1.9579 update (many) 0.00622 0.74089 119.19047 values 0.00507 0.00925 1.82631 approximate memory usage subject builtin sqlitecollections ratio clear 0.0 0.0 1.0 __contains__ 0.0 0.0 1.0 copy 0.0 0.0 1.0 __delitem__ 0.0 0.0 1.0 get 0.0 0.0 1.0 get (unsuccessful search) 0.0 0.0 1.0 __getitem__ 0.0 0.0 1.0 __init__ 0.0 0.0 1.0 __ior__ 0.0 0.0 1.0 __ior__ (many) 0.21484 0.0 0.0 items 0.0 0.20312 inf __iter__ 0.0 0.0 1.0 keys 0.0 0.0 1.0 __len__ 0.0 0.0 1.0 __contains__ (unsuccessful search) 0.0 0.0 1.0 __or__ 0.0 0.0 1.0 __or__ (many) 0.0 0.0 1.0 pop 0.0 0.0 1.0 pop (unsuccessful search) 0.0 0.0 1.0 popitem 0.0 0.0 1.0 reversed 0.0 0.0 1.0 setdefault 0.0 0.0 1.0 setdefault (unsuccessful search) 0.0 0.0 1.0 __setitem__ (add new item) 0.0 0.0 1.0 __setitem__ (replace) 0.0 0.0 1.0 update 0.0 0.0 1.0 update (many) 0.0 0.0 1.0 values 0.0 0.0 1.0 timing subject builtin sqlitecollections ratio __add__ 0.00517 0.04134 7.99608 append 0.00562 0.01144 2.03535 clear 0.00481 0.00955 1.98747 __contains__ 0.00476 0.00475 0.9997 copy 0.00486 0.03848 7.91981 count 0.00497 0.00471 0.94748 __init__ 0.00482 0.02844 5.90087 __delitem__ 0.005 0.01375 2.74968 __delitem__ (slice) 0.00474 0.018 3.7992 __delitem__ (slice with skip) 0.00493 0.01773 3.59461 extend 0.00465 0.00871 1.87122 __getitem__ 0.00481 0.00499 1.03811 __getitem__ (slice) 0.0046 0.02376 5.15931 __getitem__ (slice with skip) 0.00474 0.0161 3.39944 __iadd__ 0.00476 0.00881 1.85194 __imult__ 0.00465 0.0261 5.61125 index 0.00475 0.00488 1.02762 index (unsuccessful search) 0.00467 0.00465 0.9953 insert 0.00471 0.01596 3.39034 __len__ 0.00455 0.00457 1.00407 __mult__ 0.00502 0.06547 13.03307 __contains__ (unsuccessful search) 0.0046 0.00521 1.13188 pop 0.0048 0.01324 2.75853 remove 0.00472 0.01589 3.36526 __setitem__ 0.00487 0.00896 1.84099 __setitem__ (slice) 0.00481 0.79884 166.16464 __setitem__ (slice with skip) 0.0052 0.00997 1.91666 sort 0.00471 0.10685 22.68402 approximate memory usage subject builtin sqlitecollections ratio __add__ 0.0 0.0 1.0 append 0.0 0.0 1.0 clear 0.0 0.0 1.0 __contains__ 0.0 0.0 1.0 copy 0.0 0.0 1.0 count 0.0 0.0 1.0 __init__ 0.0 0.0 1.0 __delitem__ 0.0 0.0 1.0 __delitem__ (slice) 0.0 0.0 1.0 __delitem__ (slice with skip) 0.0 0.0 1.0 extend 0.0 0.0 1.0 __getitem__ 0.0 0.0 1.0 __getitem__ (slice) 0.0 0.0 1.0 __getitem__ (slice with skip) 0.0 0.0 1.0 __iadd__ 0.0 0.0 1.0 __imult__ 0.0 0.0 1.0 index 0.0 0.0 1.0 index (unsuccessful search) 0.0 0.0 1.0 insert 0.0 0.0 1.0 __len__ 0.0 0.0 1.0 __mult__ 0.0 0.0 1.0 __contains__ (unsuccessful search) 0.0 0.0 1.0 pop 0.0 0.0 1.0 remove 0.0 0.0 1.0 __setitem__ 0.0 0.0 1.0 __setitem__ (slice) 0.0 0.0 1.0 __setitem__ (slice with skip) 0.0 0.0 1.0 sort 0.0 0.66406 inf timing subject builtin sqlitecollections ratio add (existing item) 0.00501 0.00744 1.48519 add (new item) 0.00474 0.00922 1.94362 __and__ 0.00481 0.03118 6.47903 clear 0.00495 0.00991 2.00281 __contains__ 0.00503 0.00481 0.95696 copy 0.00496 0.02333 4.70361 difference 0.00485 0.02326 4.79119 discard 0.00496 0.00929 1.87497 discard (no changes) 0.00634 0.00771 1.21606 __ge__ 0.00497 0.00493 0.99288 __ge__ (not greater than or equals to) 0.00497 0.00522 1.05052 __gt__ 0.00497 0.00932 1.8759 __gt__ (not greater than) 0.00496 0.022 4.44034 __iand__ 0.0051 0.01394 2.73392 __init__ 0.0049 0.02555 5.20914 intersection 0.00496 0.03174 6.39742 intersection_update 0.00548 0.01227 2.24026 __ior__ 0.00494 0.01009 2.04057 isdisjoint 0.00474 0.00474 1.0013 isdisjoint (not disjoint) 0.00509 0.00514 1.00855 issubset 0.00486 0.05853 12.05195 issubset (not subset) 0.00505 0.03351 6.6402 issuperset 0.00571 0.01566 2.74305 issuperset (not superset) 0.00507 0.00534 1.05351 __ixor__ 0.00519 0.03188 6.14441 __le__ 0.00505 0.00603 1.19438 __le__ (not less than or equals to) 0.00501 0.00543 1.08407 __len__ 0.00549 0.00531 0.96772 __lt__ 0.00492 0.00633 1.2851 __lt__ (not less than) 0.0053 0.00535 1.00935 __contains__ (unsuccessful search) 0.00532 0.0053 0.99775 __or__ 0.00503 0.0256 5.09021 pop 0.00498 0.00974 1.95596 remove 0.00545 0.00957 1.75641 __sub__ 0.00522 0.02308 4.42445 symmetric_difference 0.00524 0.05742 10.95217 symmetric_difference_update 0.0053 0.03205 6.04434 union 0.00526 0.02589 4.92243 update 0.00531 0.01024 1.92976 __xor__ 0.00569 0.06076 10.68724 approximate memory usage subject builtin sqlitecollections ratio add (existing item) 0.0 0.0 1.0 add (new item) 0.0 0.0 1.0 __and__ 0.0 0.0 1.0 clear 0.0 0.0 1.0 __contains__ 0.0 0.0 1.0 copy 0.0 0.0 1.0 difference 0.0 0.0 1.0 discard 0.0 0.0 1.0 discard (no changes) 0.0 0.0 1.0 __ge__ 0.0 0.0 1.0 __ge__ (not greater than or equals to) 0.0 0.0 1.0 __gt__ 0.0 0.0 1.0 __gt__ (not greater than) 0.0 0.0 1.0 __iand__ 0.0 0.0 1.0 __init__ 0.0 0.0 1.0 intersection 0.0 0.0 1.0 intersection_update 0.0 0.0 1.0 __ior__ 0.0 0.0 1.0 isdisjoint 0.0 0.0 1.0 isdisjoint (not disjoint) 0.0 0.0 1.0 issubset 0.0 0.0 1.0 issubset (not subset) 0.0 0.0 1.0 issuperset 0.0 0.0 1.0 issuperset (not superset) 0.0 0.0 1.0 __ixor__ 0.0 0.0 1.0 __le__ 0.0 0.0 1.0 __le__ (not less than or equals to) 0.0 0.0 1.0 __len__ 0.0 0.0 1.0 __lt__ 0.0 0.0 1.0 __lt__ (not less than) 0.0 0.0 1.0 __contains__ (unsuccessful search) 0.0 0.0 1.0 __or__ 0.0 0.0 1.0 pop 0.0 0.0 1.0 remove 0.0 0.0 1.0 __sub__ 0.0 0.0 1.0 symmetric_difference 0.0 0.0 1.0 symmetric_difference_update 0.0 0.0 1.0 union 0.0 0.0 1.0 update 0.0 0.0 1.0 __xor__ 0.0 0.0 1.0","title":"Benchmark"},{"location":"development/","text":"Development Tests, type checking and linting locally To run tests, type checking and linting locally, you'll need to have python 3.6 , 3.7 , 3.8 , 3.9 and 3.10 installed. We use tox to run tests and type checking on all the supported python versions. You can set up the development environment with the following commands: git clone git@github.com:osoken/sqlitecollections.git cd sqlitecollections python -m venv .venv source ./.venv/bin/activate pip install -e .[dev] Then, run tests is as easy as: tox After a while, you'll see the following message at the bottom of the long logs from pytest and others. __________________ summary __________________ lint: commands succeeded py36: commands succeeded py37: commands succeeded py38: commands succeeded py39: commands succeeded py310: commands succeeded congratulations :) Building documents We use mkdocs to build the documentation. To set up the environment for building the document, run the following commands: git clone git@github.com:osoken/sqlitecollections.git cd sqlitecollections python -m venv .venv source ./.venv/bin/activate pip install -e .[docs] Then, building the documentation can be done by the following command: mkdocs build The output will be located in site directory in your current directory. During development, you can also run mkdoc 's builtin development server with hot-reloading enabled with the following command: mkdocs serve In that case, you can check the result on http://127.0.0.1:8000 . Compatibility policy We aim to implement containers that are as compatible as possible with the built-in containers, but we have a few implementations that intentionally behave differently. Normal behavior will be compatible, but in case of errors it may be different. The constructor arguments are not compatible, as they require arguments specific to this package's container, such as sqlite3 DB file paths and serialization methods. copy method in each container behaves similarly to deep copy, since it copies the table containing serialized elements. Dict 's item order is guaranteed to be insertion order not only for python 3.7 and upper but for all versions. Dict.fromkeys class method is not provided. Any member in the container cannot be mutated directly. If you want to mutate any member, mutate it via temporary variable then write it back. import sqlitecollections as sc x = sc . Dict ({ \"a\" : []}) # create {\"a\": []} x [ \"a\" ] . append ( \"b\" ) # try to mutate the empty list print ( x [ \"a\" ]) # not [\"b\"] but [] temp = x [ \"a\" ] # temporarily substitute the list to a variable temp . append ( \"b\" ) # mutate the temporary variable x [ \"a\" ] = temp # then, write it back print ( x [ \"a\" ]) # now, we get [\"b\"]","title":"Development"},{"location":"development/#development","text":"","title":"Development"},{"location":"development/#tests-type-checking-and-linting-locally","text":"To run tests, type checking and linting locally, you'll need to have python 3.6 , 3.7 , 3.8 , 3.9 and 3.10 installed. We use tox to run tests and type checking on all the supported python versions. You can set up the development environment with the following commands: git clone git@github.com:osoken/sqlitecollections.git cd sqlitecollections python -m venv .venv source ./.venv/bin/activate pip install -e .[dev] Then, run tests is as easy as: tox After a while, you'll see the following message at the bottom of the long logs from pytest and others. __________________ summary __________________ lint: commands succeeded py36: commands succeeded py37: commands succeeded py38: commands succeeded py39: commands succeeded py310: commands succeeded congratulations :)","title":"Tests, type checking and linting locally"},{"location":"development/#building-documents","text":"We use mkdocs to build the documentation. To set up the environment for building the document, run the following commands: git clone git@github.com:osoken/sqlitecollections.git cd sqlitecollections python -m venv .venv source ./.venv/bin/activate pip install -e .[docs] Then, building the documentation can be done by the following command: mkdocs build The output will be located in site directory in your current directory. During development, you can also run mkdoc 's builtin development server with hot-reloading enabled with the following command: mkdocs serve In that case, you can check the result on http://127.0.0.1:8000 .","title":"Building documents"},{"location":"development/#compatibility-policy","text":"We aim to implement containers that are as compatible as possible with the built-in containers, but we have a few implementations that intentionally behave differently. Normal behavior will be compatible, but in case of errors it may be different. The constructor arguments are not compatible, as they require arguments specific to this package's container, such as sqlite3 DB file paths and serialization methods. copy method in each container behaves similarly to deep copy, since it copies the table containing serialized elements. Dict 's item order is guaranteed to be insertion order not only for python 3.7 and upper but for all versions. Dict.fromkeys class method is not provided. Any member in the container cannot be mutated directly. If you want to mutate any member, mutate it via temporary variable then write it back. import sqlitecollections as sc x = sc . Dict ({ \"a\" : []}) # create {\"a\": []} x [ \"a\" ] . append ( \"b\" ) # try to mutate the empty list print ( x [ \"a\" ]) # not [\"b\"] but [] temp = x [ \"a\" ] # temporarily substitute the list to a variable temp . append ( \"b\" ) # mutate the temporary variable x [ \"a\" ] = temp # then, write it back print ( x [ \"a\" ]) # now, we get [\"b\"]","title":"Compatibility policy"},{"location":"install/","text":"Install pip install sqlitecollections","title":"Install"},{"location":"install/#install","text":"pip install sqlitecollections","title":"Install"},{"location":"benchmark_results/py310/dict/","text":"timing | subject | `builtin` | `sqlitecollections` | ratio | | :------ | --------: | ------------------: | ----: | | `clear` | 0.00488 | 0.00974 | 1.99409 | | `__contains__` | 0.00482 | 0.00606 | 1.25777 | | `copy` | 0.00505 | 0.01415 | 2.80014 | | `__delitem__` | 0.00499 | 0.00914 | 1.83302 | | `get` | 0.00477 | 0.00482 | 1.01063 | | `get (unsuccessful search)` | 0.00487 | 0.00491 | 1.00821 | | `__getitem__` | 0.00507 | 0.00496 | 0.97678 | | `__init__` | 0.00488 | 0.05083 | 10.41817 | | `__ior__` | 0.00479 | 0.00998 | 2.0839 | | `__ior__` (many) | 0.00635 | 0.76343 | 120.2102 | | `items` | 0.00534 | 0.0136 | 2.54528 | | `__iter__` | 0.00483 | 0.00967 | 2.00086 | | `keys` | 0.0051 | 0.00961 | 1.88547 | | `__len__` | 0.005 | 0.00529 | 1.05951 | | `__contains__` (unsuccessful search) | 0.0048 | 0.00494 | 1.0281 | | `__or__` | 0.00498 | 0.01551 | 3.11423 | | `__or__` (many) | 0.00713 | 0.73897 | 103.61121 | | `pop` | 0.00527 | 0.0092 | 1.74669 | | `pop (unsuccessful search)` | 0.00531 | 0.00713 | 1.34259 | | `popitem` | 0.00474 | 0.00977 | 2.05918 | | `reversed` | 0.00472 | 0.00929 | 1.96627 | | `setdefault` | 0.00489 | 0.00736 | 1.5042 | | `setdefault (unsuccessful search)` | 0.00522 | 0.00853 | 1.63536 | | `__setitem__` (add new item) | 0.00489 | 0.00978 | 2.00217 | | `__setitem__` (replace) | 0.00502 | 0.00922 | 1.83764 | | `update` | 0.00491 | 0.0096 | 1.9579 | | `update` (many) | 0.00622 | 0.74089 | 119.19047 | | `values` | 0.00507 | 0.00925 | 1.82631 | approximate memory usage | subject | `builtin` | `sqlitecollections` | ratio | | :------ | --------: | ------------------: | ----: | | `clear` | 0.0 | 0.0 | 1.0 | | `__contains__` | 0.0 | 0.0 | 1.0 | | `copy` | 0.0 | 0.0 | 1.0 | | `__delitem__` | 0.0 | 0.0 | 1.0 | | `get` | 0.0 | 0.0 | 1.0 | | `get (unsuccessful search)` | 0.0 | 0.0 | 1.0 | | `__getitem__` | 0.0 | 0.0 | 1.0 | | `__init__` | 0.0 | 0.0 | 1.0 | | `__ior__` | 0.0 | 0.0 | 1.0 | | `__ior__` (many) | 0.21484 | 0.0 | 0.0 | | `items` | 0.0 | 0.20312 | inf | | `__iter__` | 0.0 | 0.0 | 1.0 | | `keys` | 0.0 | 0.0 | 1.0 | | `__len__` | 0.0 | 0.0 | 1.0 | | `__contains__` (unsuccessful search) | 0.0 | 0.0 | 1.0 | | `__or__` | 0.0 | 0.0 | 1.0 | | `__or__` (many) | 0.0 | 0.0 | 1.0 | | `pop` | 0.0 | 0.0 | 1.0 | | `pop (unsuccessful search)` | 0.0 | 0.0 | 1.0 | | `popitem` | 0.0 | 0.0 | 1.0 | | `reversed` | 0.0 | 0.0 | 1.0 | | `setdefault` | 0.0 | 0.0 | 1.0 | | `setdefault (unsuccessful search)` | 0.0 | 0.0 | 1.0 | | `__setitem__` (add new item) | 0.0 | 0.0 | 1.0 | | `__setitem__` (replace) | 0.0 | 0.0 | 1.0 | | `update` | 0.0 | 0.0 | 1.0 | | `update` (many) | 0.0 | 0.0 | 1.0 | | `values` | 0.0 | 0.0 | 1.0 |","title":"Dict"},{"location":"benchmark_results/py310/list/","text":"timing | subject | `builtin` | `sqlitecollections` | ratio | | :------ | --------: | ------------------: | ----: | | `__add__` | 0.00517 | 0.04134 | 7.99608 | | `append` | 0.00562 | 0.01144 | 2.03535 | | `clear` | 0.00481 | 0.00955 | 1.98747 | | `__contains__` | 0.00476 | 0.00475 | 0.9997 | | `copy` | 0.00486 | 0.03848 | 7.91981 | | `count` | 0.00497 | 0.00471 | 0.94748 | | `__init__` | 0.00482 | 0.02844 | 5.90087 | | `__delitem__` | 0.005 | 0.01375 | 2.74968 | | `__delitem__` (slice) | 0.00474 | 0.018 | 3.7992 | | `__delitem__` (slice with skip) | 0.00493 | 0.01773 | 3.59461 | | `extend` | 0.00465 | 0.00871 | 1.87122 | | `__getitem__` | 0.00481 | 0.00499 | 1.03811 | | `__getitem__` (slice) | 0.0046 | 0.02376 | 5.15931 | | `__getitem__` (slice with skip) | 0.00474 | 0.0161 | 3.39944 | | `__iadd__` | 0.00476 | 0.00881 | 1.85194 | | `__imult__` | 0.00465 | 0.0261 | 5.61125 | | `index` | 0.00475 | 0.00488 | 1.02762 | | `index` (unsuccessful search) | 0.00467 | 0.00465 | 0.9953 | | `insert` | 0.00471 | 0.01596 | 3.39034 | | `__len__` | 0.00455 | 0.00457 | 1.00407 | | `__mult__` | 0.00502 | 0.06547 | 13.03307 | | `__contains__` (unsuccessful search) | 0.0046 | 0.00521 | 1.13188 | | `pop` | 0.0048 | 0.01324 | 2.75853 | | `remove` | 0.00472 | 0.01589 | 3.36526 | | `__setitem__` | 0.00487 | 0.00896 | 1.84099 | | `__setitem__` (slice) | 0.00481 | 0.79884 | 166.16464 | | `__setitem__` (slice with skip) | 0.0052 | 0.00997 | 1.91666 | | `sort` | 0.00471 | 0.10685 | 22.68402 | approximate memory usage | subject | `builtin` | `sqlitecollections` | ratio | | :------ | --------: | ------------------: | ----: | | `__add__` | 0.0 | 0.0 | 1.0 | | `append` | 0.0 | 0.0 | 1.0 | | `clear` | 0.0 | 0.0 | 1.0 | | `__contains__` | 0.0 | 0.0 | 1.0 | | `copy` | 0.0 | 0.0 | 1.0 | | `count` | 0.0 | 0.0 | 1.0 | | `__init__` | 0.0 | 0.0 | 1.0 | | `__delitem__` | 0.0 | 0.0 | 1.0 | | `__delitem__` (slice) | 0.0 | 0.0 | 1.0 | | `__delitem__` (slice with skip) | 0.0 | 0.0 | 1.0 | | `extend` | 0.0 | 0.0 | 1.0 | | `__getitem__` | 0.0 | 0.0 | 1.0 | | `__getitem__` (slice) | 0.0 | 0.0 | 1.0 | | `__getitem__` (slice with skip) | 0.0 | 0.0 | 1.0 | | `__iadd__` | 0.0 | 0.0 | 1.0 | | `__imult__` | 0.0 | 0.0 | 1.0 | | `index` | 0.0 | 0.0 | 1.0 | | `index` (unsuccessful search) | 0.0 | 0.0 | 1.0 | | `insert` | 0.0 | 0.0 | 1.0 | | `__len__` | 0.0 | 0.0 | 1.0 | | `__mult__` | 0.0 | 0.0 | 1.0 | | `__contains__` (unsuccessful search) | 0.0 | 0.0 | 1.0 | | `pop` | 0.0 | 0.0 | 1.0 | | `remove` | 0.0 | 0.0 | 1.0 | | `__setitem__` | 0.0 | 0.0 | 1.0 | | `__setitem__` (slice) | 0.0 | 0.0 | 1.0 | | `__setitem__` (slice with skip) | 0.0 | 0.0 | 1.0 | | `sort` | 0.0 | 0.66406 | inf |","title":"List"},{"location":"benchmark_results/py310/set/","text":"timing | subject | `builtin` | `sqlitecollections` | ratio | | :------ | --------: | ------------------: | ----: | | `add (existing item)` | 0.00501 | 0.00744 | 1.48519 | | `add (new item)` | 0.00474 | 0.00922 | 1.94362 | | `__and__` | 0.00481 | 0.03118 | 6.47903 | | `clear` | 0.00495 | 0.00991 | 2.00281 | | `__contains__` | 0.00503 | 0.00481 | 0.95696 | | `copy` | 0.00496 | 0.02333 | 4.70361 | | `difference` | 0.00485 | 0.02326 | 4.79119 | | `discard` | 0.00496 | 0.00929 | 1.87497 | | `discard (no changes)` | 0.00634 | 0.00771 | 1.21606 | | `__ge__` | 0.00497 | 0.00493 | 0.99288 | | `__ge__` (not greater than or equals to) | 0.00497 | 0.00522 | 1.05052 | | `__gt__` | 0.00497 | 0.00932 | 1.8759 | | `__gt__` (not greater than) | 0.00496 | 0.022 | 4.44034 | | `__iand__` | 0.0051 | 0.01394 | 2.73392 | | `__init__` | 0.0049 | 0.02555 | 5.20914 | | `intersection` | 0.00496 | 0.03174 | 6.39742 | | `intersection_update` | 0.00548 | 0.01227 | 2.24026 | | `__ior__` | 0.00494 | 0.01009 | 2.04057 | | `isdisjoint` | 0.00474 | 0.00474 | 1.0013 | | `isdisjoint` (not disjoint) | 0.00509 | 0.00514 | 1.00855 | | `issubset` | 0.00486 | 0.05853 | 12.05195 | | `issubset` (not subset) | 0.00505 | 0.03351 | 6.6402 | | `issuperset` | 0.00571 | 0.01566 | 2.74305 | | `issuperset` (not superset) | 0.00507 | 0.00534 | 1.05351 | | `__ixor__` | 0.00519 | 0.03188 | 6.14441 | | `__le__` | 0.00505 | 0.00603 | 1.19438 | | `__le__` (not less than or equals to) | 0.00501 | 0.00543 | 1.08407 | | `__len__` | 0.00549 | 0.00531 | 0.96772 | | `__lt__` | 0.00492 | 0.00633 | 1.2851 | | `__lt__` (not less than) | 0.0053 | 0.00535 | 1.00935 | | `__contains__` (unsuccessful search) | 0.00532 | 0.0053 | 0.99775 | | `__or__` | 0.00503 | 0.0256 | 5.09021 | | `pop` | 0.00498 | 0.00974 | 1.95596 | | `remove` | 0.00545 | 0.00957 | 1.75641 | | `__sub__` | 0.00522 | 0.02308 | 4.42445 | | `symmetric_difference` | 0.00524 | 0.05742 | 10.95217 | | `symmetric_difference_update` | 0.0053 | 0.03205 | 6.04434 | | `union` | 0.00526 | 0.02589 | 4.92243 | | `update` | 0.00531 | 0.01024 | 1.92976 | | `__xor__` | 0.00569 | 0.06076 | 10.68724 | approximate memory usage | subject | `builtin` | `sqlitecollections` | ratio | | :------ | --------: | ------------------: | ----: | | `add (existing item)` | 0.0 | 0.0 | 1.0 | | `add (new item)` | 0.0 | 0.0 | 1.0 | | `__and__` | 0.0 | 0.0 | 1.0 | | `clear` | 0.0 | 0.0 | 1.0 | | `__contains__` | 0.0 | 0.0 | 1.0 | | `copy` | 0.0 | 0.0 | 1.0 | | `difference` | 0.0 | 0.0 | 1.0 | | `discard` | 0.0 | 0.0 | 1.0 | | `discard (no changes)` | 0.0 | 0.0 | 1.0 | | `__ge__` | 0.0 | 0.0 | 1.0 | | `__ge__` (not greater than or equals to) | 0.0 | 0.0 | 1.0 | | `__gt__` | 0.0 | 0.0 | 1.0 | | `__gt__` (not greater than) | 0.0 | 0.0 | 1.0 | | `__iand__` | 0.0 | 0.0 | 1.0 | | `__init__` | 0.0 | 0.0 | 1.0 | | `intersection` | 0.0 | 0.0 | 1.0 | | `intersection_update` | 0.0 | 0.0 | 1.0 | | `__ior__` | 0.0 | 0.0 | 1.0 | | `isdisjoint` | 0.0 | 0.0 | 1.0 | | `isdisjoint` (not disjoint) | 0.0 | 0.0 | 1.0 | | `issubset` | 0.0 | 0.0 | 1.0 | | `issubset` (not subset) | 0.0 | 0.0 | 1.0 | | `issuperset` | 0.0 | 0.0 | 1.0 | | `issuperset` (not superset) | 0.0 | 0.0 | 1.0 | | `__ixor__` | 0.0 | 0.0 | 1.0 | | `__le__` | 0.0 | 0.0 | 1.0 | | `__le__` (not less than or equals to) | 0.0 | 0.0 | 1.0 | | `__len__` | 0.0 | 0.0 | 1.0 | | `__lt__` | 0.0 | 0.0 | 1.0 | | `__lt__` (not less than) | 0.0 | 0.0 | 1.0 | | `__contains__` (unsuccessful search) | 0.0 | 0.0 | 1.0 | | `__or__` | 0.0 | 0.0 | 1.0 | | `pop` | 0.0 | 0.0 | 1.0 | | `remove` | 0.0 | 0.0 | 1.0 | | `__sub__` | 0.0 | 0.0 | 1.0 | | `symmetric_difference` | 0.0 | 0.0 | 1.0 | | `symmetric_difference_update` | 0.0 | 0.0 | 1.0 | | `union` | 0.0 | 0.0 | 1.0 | | `update` | 0.0 | 0.0 | 1.0 | | `__xor__` | 0.0 | 0.0 | 1.0 |","title":"Set"},{"location":"benchmark_results/py36/dict/","text":"timing | subject | `builtin` | `sqlitecollections` | ratio | | :------ | --------: | ------------------: | ----: | | `clear` | 0.00414 | 0.00676 | 1.63462 | | `__contains__` | 0.00411 | 0.00425 | 1.03371 | | `copy` | 0.00504 | 0.01067 | 2.11706 | | `__delitem__` | 0.00425 | 0.00805 | 1.89317 | | `get` | 0.00425 | 0.00438 | 1.02951 | | `get (unsuccessful search)` | 0.00437 | 0.00415 | 0.95115 | | `__getitem__` | 0.00387 | 0.00403 | 1.04274 | | `__init__` | 0.00395 | 0.04189 | 10.59416 | | `items` | 0.00438 | 0.01107 | 2.52653 | | `__iter__` | 0.00386 | 0.00822 | 2.13083 | | `keys` | 0.00416 | 0.00816 | 1.96061 | | `__len__` | 0.00405 | 0.00419 | 1.0346 | | `__contains__` (unsuccessful search) | 0.00421 | 0.00434 | 1.03269 | | `pop` | 0.00426 | 0.00868 | 2.03811 | | `pop (unsuccessful search)` | 0.00442 | 0.00679 | 1.53755 | | `popitem` | 0.00453 | 0.00989 | 2.18431 | | `setdefault` | 0.00406 | 0.00591 | 1.45759 | | `setdefault (unsuccessful search)` | 0.0042 | 0.00662 | 1.57471 | | `__setitem__` (add new item) | 0.00391 | 0.00819 | 2.09343 | | `__setitem__` (replace) | 0.00418 | 0.00903 | 2.15976 | | `update` | 0.00496 | 0.00952 | 1.91659 | | `update` (many) | 0.00554 | 0.53089 | 95.81559 | | `values` | 0.00473 | 0.00899 | 1.8997 | approximate memory usage | subject | `builtin` | `sqlitecollections` | ratio | | :------ | --------: | ------------------: | ----: | | `clear` | 0.0 | 0.0 | 1.0 | | `__contains__` | 0.0 | 0.0 | 1.0 | | `copy` | 0.0 | 0.0 | 1.0 | | `__delitem__` | 0.0 | 0.0 | 1.0 | | `get` | 0.0 | 0.0 | 1.0 | | `get (unsuccessful search)` | 0.0 | 0.0 | 1.0 | | `__getitem__` | 0.0 | 0.0 | 1.0 | | `__init__` | 0.0 | 0.0 | 1.0 | | `items` | 0.16797 | 0.26172 | 1.55814 | | `__iter__` | 0.0 | 0.01562 | inf | | `keys` | 0.0 | 0.0 | 1.0 | | `__len__` | 0.0 | 0.0 | 1.0 | | `__contains__` (unsuccessful search) | 0.0 | 0.0 | 1.0 | | `pop` | 0.0 | 0.0 | 1.0 | | `pop (unsuccessful search)` | 0.0 | 0.0 | 1.0 | | `popitem` | 0.0 | 0.0 | 1.0 | | `setdefault` | 0.0 | 0.0 | 1.0 | | `setdefault (unsuccessful search)` | 0.0 | 0.0 | 1.0 | | `__setitem__` (add new item) | 0.0 | 0.0 | 1.0 | | `__setitem__` (replace) | 0.0 | 0.0 | 1.0 | | `update` | 0.0 | 0.0 | 1.0 | | `update` (many) | 0.03516 | 0.0 | 0.0 | | `values` | 0.0 | 0.0 | 1.0 |","title":"Dict"},{"location":"benchmark_results/py36/list/","text":"timing | subject | `builtin` | `sqlitecollections` | ratio | | :------ | --------: | ------------------: | ----: | | `__add__` | 0.00374 | 0.03569 | 9.55342 | | `append` | 0.00403 | 0.00711 | 1.76601 | | `clear` | 0.00395 | 0.00731 | 1.85183 | | `__contains__` | 0.00388 | 0.00385 | 0.99216 | | `copy` | 0.00392 | 0.03461 | 8.8306 | | `count` | 0.00424 | 0.00411 | 0.96971 | | `__init__` | 0.00402 | 0.02522 | 6.26673 | | `__delitem__` | 0.00425 | 0.01119 | 2.63404 | | `__delitem__` (slice) | 0.00384 | 0.01415 | 3.69035 | | `__delitem__` (slice with skip) | 0.0037 | 0.01889 | 5.10504 | | `extend` | 0.00405 | 0.00819 | 2.02398 | | `__getitem__` | 0.00403 | 0.00387 | 0.95937 | | `__getitem__` (slice) | 0.00385 | 0.02478 | 6.44228 | | `__getitem__` (slice with skip) | 0.00379 | 0.01275 | 3.3646 | | `__iadd__` | 0.00399 | 0.00832 | 2.08448 | | `__imult__` | 0.00419 | 0.0207 | 4.94108 | | `index` | 0.0039 | 0.00436 | 1.11877 | | `index` (unsuccessful search) | 0.00416 | 0.00403 | 0.96943 | | `insert` | 0.00402 | 0.0136 | 3.38686 | | `__len__` | 0.00371 | 0.00455 | 1.22612 | | `__mult__` | 0.00371 | 0.0515 | 13.89328 | | `__contains__` (unsuccessful search) | 0.00385 | 0.00403 | 1.04663 | | `pop` | 0.00413 | 0.01132 | 2.74315 | | `remove` | 0.00408 | 0.0136 | 3.33518 | | `__setitem__` | 0.00442 | 0.00823 | 1.8617 | | `__setitem__` (slice) | 0.00404 | 0.65712 | 162.50343 | | `__setitem__` (slice with skip) | 0.00439 | 0.00826 | 1.88127 | | `sort` | 0.00406 | 0.08883 | 21.86022 | approximate memory usage | subject | `builtin` | `sqlitecollections` | ratio | | :------ | --------: | ------------------: | ----: | | `__add__` | 0.01172 | 0.03516 | 3.0 | | `append` | 0.0 | 0.0 | 1.0 | | `clear` | 0.0 | 0.0 | 1.0 | | `__contains__` | 0.0 | 0.0 | 1.0 | | `copy` | 0.0 | 0.0 | 1.0 | | `count` | 0.0 | 0.0 | 1.0 | | `__init__` | 0.0 | 0.07031 | inf | | `__delitem__` | 0.0 | 0.00391 | inf | | `__delitem__` (slice) | 0.0 | 0.0 | 1.0 | | `__delitem__` (slice with skip) | 0.0 | 0.0 | 1.0 | | `extend` | 0.0 | 0.0 | 1.0 | | `__getitem__` | 0.0 | 0.0 | 1.0 | | `__getitem__` (slice) | 0.0 | 0.0 | 1.0 | | `__getitem__` (slice with skip) | 0.0 | 0.0 | 1.0 | | `__iadd__` | 0.0 | 0.0 | 1.0 | | `__imult__` | 0.0 | 0.0 | 1.0 | | `index` | 0.0 | 0.0 | 1.0 | | `index` (unsuccessful search) | 0.0 | 0.0 | 1.0 | | `insert` | 0.0 | 0.0 | 1.0 | | `__len__` | 0.0 | 0.0 | 1.0 | | `__mult__` | 0.0 | 0.01172 | inf | | `__contains__` (unsuccessful search) | 0.0 | 0.0 | 1.0 | | `pop` | 0.0 | 0.0 | 1.0 | | `remove` | 0.0 | 0.0 | 1.0 | | `__setitem__` | 0.0 | 0.0 | 1.0 | | `__setitem__` (slice) | 0.0 | 0.0 | 1.0 | | `__setitem__` (slice with skip) | 0.0 | 0.0 | 1.0 | | `sort` | 0.0 | 1.28516 | inf |","title":"List"},{"location":"benchmark_results/py36/set/","text":"timing | subject | `builtin` | `sqlitecollections` | ratio | | :------ | --------: | ------------------: | ----: | | `add (existing item)` | 0.00444 | 0.00646 | 1.45301 | | `add (new item)` | 0.00448 | 0.00855 | 1.90936 | | `__and__` | 0.00449 | 0.02908 | 6.47999 | | `clear` | 0.00408 | 0.00809 | 1.98585 | | `__contains__` | 0.00408 | 0.00407 | 0.99852 | | `copy` | 0.00469 | 0.02106 | 4.48789 | | `difference` | 0.00423 | 0.01897 | 4.48601 | | `discard` | 0.00393 | 0.00814 | 2.06964 | | `discard (no changes)` | 0.00395 | 0.00614 | 1.55516 | | `__ge__` | 0.00447 | 0.00459 | 1.02606 | | `__ge__` (not greater than or equals to) | 0.0042 | 0.00404 | 0.96181 | | `__gt__` | 0.00396 | 0.00759 | 1.9164 | | `__gt__` (not greater than) | 0.00364 | 0.01785 | 4.89893 | | `__iand__` | 0.00373 | 0.01037 | 2.78387 | | `__init__` | 0.00394 | 0.01879 | 4.76612 | | `intersection` | 0.0039 | 0.02484 | 6.37696 | | `intersection_update` | 0.00386 | 0.0113 | 2.92956 | | `__ior__` | 0.00459 | 0.00917 | 2.00014 | | `isdisjoint` | 0.00431 | 0.00426 | 0.98742 | | `isdisjoint` (not disjoint) | 0.00396 | 0.00399 | 1.00821 | | `issubset` | 0.00403 | 0.04575 | 11.35525 | | `issubset` (not subset) | 0.00399 | 0.02308 | 5.78168 | | `issuperset` | 0.00423 | 0.01088 | 2.57114 | | `issuperset` (not superset) | 0.0042 | 0.00394 | 0.93804 | | `__ixor__` | 0.0041 | 0.02694 | 6.5654 | | `__le__` | 0.0039 | 0.00457 | 1.17342 | | `__le__` (not less than or equals to) | 0.00412 | 0.00453 | 1.09908 | | `__len__` | 0.00428 | 0.00419 | 0.97975 | | `__lt__` | 0.00387 | 0.00465 | 1.20056 | | `__lt__` (not less than) | 0.00389 | 0.00383 | 0.98681 | | `__contains__` (unsuccessful search) | 0.00388 | 0.00383 | 0.98695 | | `__or__` | 0.00388 | 0.02192 | 5.6528 | | `pop` | 0.00381 | 0.00755 | 1.97962 | | `remove` | 0.0041 | 0.00787 | 1.91964 | | `__sub__` | 0.00424 | 0.02046 | 4.82235 | | `symmetric_difference` | 0.00418 | 0.04604 | 11.02085 | | `symmetric_difference_update` | 0.00455 | 0.02895 | 6.36111 | | `union` | 0.00406 | 0.02229 | 5.48743 | | `update` | 0.00388 | 0.00811 | 2.09269 | | `__xor__` | 0.00446 | 0.0476 | 10.67883 | approximate memory usage | subject | `builtin` | `sqlitecollections` | ratio | | :------ | --------: | ------------------: | ----: | | `add (existing item)` | 0.0 | 0.0 | 1.0 | | `add (new item)` | 0.0 | 0.0 | 1.0 | | `__and__` | 0.0 | 0.01562 | inf | | `clear` | 0.0 | 0.0 | 1.0 | | `__contains__` | 0.0 | 0.0 | 1.0 | | `copy` | 0.0 | 0.0 | 1.0 | | `difference` | 0.0 | 0.0 | 1.0 | | `discard` | 0.0 | 0.0 | 1.0 | | `discard (no changes)` | 0.0 | 0.0 | 1.0 | | `__ge__` | 0.0 | 0.0 | 1.0 | | `__ge__` (not greater than or equals to) | 0.0 | 0.0 | 1.0 | | `__gt__` | 0.0 | 0.0 | 1.0 | | `__gt__` (not greater than) | 0.0 | 0.0 | 1.0 | | `__iand__` | 0.0 | 0.0 | 1.0 | | `__init__` | 0.0 | 0.0 | 1.0 | | `intersection` | 0.0 | 0.01172 | inf | | `intersection_update` | 0.0 | 0.0 | 1.0 | | `__ior__` | 0.0 | 0.0 | 1.0 | | `isdisjoint` | 0.0 | 0.0 | 1.0 | | `isdisjoint` (not disjoint) | 0.0 | 0.0 | 1.0 | | `issubset` | 0.0 | 0.00391 | inf | | `issubset` (not subset) | 0.0 | 0.0 | 1.0 | | `issuperset` | 0.0 | 0.0 | 1.0 | | `issuperset` (not superset) | 0.0 | 0.0 | 1.0 | | `__ixor__` | 0.0 | 0.0 | 1.0 | | `__le__` | 0.0 | 0.0 | 1.0 | | `__le__` (not less than or equals to) | 0.0 | 0.0 | 1.0 | | `__len__` | 0.0 | 0.0 | 1.0 | | `__lt__` | 0.0 | 0.0 | 1.0 | | `__lt__` (not less than) | 0.0 | 0.0 | 1.0 | | `__contains__` (unsuccessful search) | 0.0 | 0.0 | 1.0 | | `__or__` | 0.0 | 0.0 | 1.0 | | `pop` | 0.0 | 0.0 | 1.0 | | `remove` | 0.0 | 0.0 | 1.0 | | `__sub__` | 0.0 | 0.0 | 1.0 | | `symmetric_difference` | 0.0 | 0.0 | 1.0 | | `symmetric_difference_update` | 0.0 | 0.0 | 1.0 | | `union` | 0.0 | 0.0 | 1.0 | | `update` | 0.0 | 0.0 | 1.0 | | `__xor__` | 0.0 | 0.00391 | inf |","title":"Set"},{"location":"benchmark_results/py37/dict/","text":"timing | subject | `builtin` | `sqlitecollections` | ratio | | :------ | --------: | ------------------: | ----: | | `clear` | 0.00437 | 0.00736 | 1.68501 | | `__contains__` | 0.00412 | 0.00432 | 1.04774 | | `copy` | 0.0043 | 0.00993 | 2.31079 | | `__delitem__` | 0.00426 | 0.00781 | 1.83375 | | `get` | 0.00427 | 0.00442 | 1.03338 | | `get (unsuccessful search)` | 0.00438 | 0.00463 | 1.05518 | | `__getitem__` | 0.00419 | 0.00429 | 1.02496 | | `__init__` | 0.00427 | 0.04599 | 10.77386 | | `items` | 0.00466 | 0.01322 | 2.83504 | | `__iter__` | 0.00424 | 0.00882 | 2.08143 | | `keys` | 0.00422 | 0.0092 | 2.17889 | | `__len__` | 0.00431 | 0.00422 | 0.97949 | | `__contains__` (unsuccessful search) | 0.00429 | 0.00445 | 1.03713 | | `pop` | 0.00426 | 0.00745 | 1.74725 | | `pop (unsuccessful search)` | 0.00448 | 0.00601 | 1.34108 | | `popitem` | 0.00426 | 0.00798 | 1.87132 | | `setdefault` | 0.00423 | 0.00608 | 1.43803 | | `setdefault (unsuccessful search)` | 0.00428 | 0.00669 | 1.56283 | | `__setitem__` (add new item) | 0.0042 | 0.00742 | 1.76657 | | `__setitem__` (replace) | 0.00424 | 0.00764 | 1.79929 | | `update` | 0.00428 | 0.00762 | 1.78195 | | `update` (many) | 0.00514 | 0.59575 | 115.83862 | | `values` | 0.00414 | 0.00855 | 2.067 | approximate memory usage | subject | `builtin` | `sqlitecollections` | ratio | | :------ | --------: | ------------------: | ----: | | `clear` | 0.0 | 0.0 | 1.0 | | `__contains__` | 0.0 | 0.0 | 1.0 | | `copy` | 0.0 | 0.0 | 1.0 | | `__delitem__` | 0.0 | 0.0 | 1.0 | | `get` | 0.0 | 0.0 | 1.0 | | `get (unsuccessful search)` | 0.0 | 0.0 | 1.0 | | `__getitem__` | 0.0 | 0.0 | 1.0 | | `__init__` | 0.0 | 0.0 | 1.0 | | `items` | 0.19922 | 0.32812 | 1.64706 | | `__iter__` | 0.0 | 0.0 | 1.0 | | `keys` | 0.0 | 0.0 | 1.0 | | `__len__` | 0.0 | 0.0 | 1.0 | | `__contains__` (unsuccessful search) | 0.0 | 0.0 | 1.0 | | `pop` | 0.0 | 0.0 | 1.0 | | `pop (unsuccessful search)` | 0.0 | 0.0 | 1.0 | | `popitem` | 0.0 | 0.0 | 1.0 | | `setdefault` | 0.0 | 0.0 | 1.0 | | `setdefault (unsuccessful search)` | 0.0 | 0.0 | 1.0 | | `__setitem__` (add new item) | 0.0 | 0.0 | 1.0 | | `__setitem__` (replace) | 0.0 | 0.0 | 1.0 | | `update` | 0.0 | 0.0 | 1.0 | | `update` (many) | 0.0 | 0.0 | 1.0 | | `values` | 0.0 | 0.0 | 1.0 |","title":"Dict"},{"location":"benchmark_results/py37/list/","text":"timing | subject | `builtin` | `sqlitecollections` | ratio | | :------ | --------: | ------------------: | ----: | | `__add__` | 0.00401 | 0.03578 | 8.9175 | | `append` | 0.00417 | 0.00988 | 2.37282 | | `clear` | 0.00408 | 0.00705 | 1.72731 | | `__contains__` | 0.00405 | 0.004 | 0.98673 | | `copy` | 0.00402 | 0.03458 | 8.60074 | | `count` | 0.00402 | 0.00405 | 1.00929 | | `__init__` | 0.00405 | 0.02307 | 5.70273 | | `__delitem__` | 0.00415 | 0.01075 | 2.59279 | | `__delitem__` (slice) | 0.00408 | 0.01464 | 3.5921 | | `__delitem__` (slice with skip) | 0.0041 | 0.01446 | 3.53009 | | `extend` | 0.00419 | 0.00679 | 1.61921 | | `__getitem__` | 0.0041 | 0.00407 | 0.99225 | | `__getitem__` (slice) | 0.0041 | 0.01906 | 4.653 | | `__getitem__` (slice with skip) | 0.00414 | 0.01093 | 2.63939 | | `__iadd__` | 0.00409 | 0.00673 | 1.64441 | | `__imult__` | 0.00408 | 0.02259 | 5.53751 | | `index` | 0.00417 | 0.00427 | 1.02341 | | `index` (unsuccessful search) | 0.00412 | 0.00443 | 1.07496 | | `insert` | 0.00414 | 0.01368 | 3.30367 | | `__len__` | 0.00421 | 0.00406 | 0.9635 | | `__mult__` | 0.00406 | 0.05668 | 13.94565 | | `__contains__` (unsuccessful search) | 0.00411 | 0.0042 | 1.02027 | | `pop` | 0.00409 | 0.01079 | 2.64042 | | `remove` | 0.00413 | 0.01276 | 3.08821 | | `__setitem__` | 0.00419 | 0.00736 | 1.75657 | | `__setitem__` (slice) | 0.00406 | 0.64267 | 158.47185 | | `__setitem__` (slice with skip) | 0.0041 | 0.00765 | 1.86576 | | `sort` | 0.00418 | 0.09577 | 22.89184 | approximate memory usage | subject | `builtin` | `sqlitecollections` | ratio | | :------ | --------: | ------------------: | ----: | | `__add__` | 0.0 | 0.0 | 1.0 | | `append` | 0.0 | 0.0 | 1.0 | | `clear` | 0.0 | 0.0 | 1.0 | | `__contains__` | 0.0 | 0.0 | 1.0 | | `copy` | 0.0 | 0.0 | 1.0 | | `count` | 0.0 | 0.0 | 1.0 | | `__init__` | 0.0 | 0.08203 | inf | | `__delitem__` | 0.0 | 0.0 | 1.0 | | `__delitem__` (slice) | 0.0 | 0.0 | 1.0 | | `__delitem__` (slice with skip) | 0.0 | 0.0 | 1.0 | | `extend` | 0.0 | 0.0 | 1.0 | | `__getitem__` | 0.0 | 0.0 | 1.0 | | `__getitem__` (slice) | 0.0 | 0.0 | 1.0 | | `__getitem__` (slice with skip) | 0.0 | 0.0 | 1.0 | | `__iadd__` | 0.0 | 0.0 | 1.0 | | `__imult__` | 0.0 | 0.0 | 1.0 | | `index` | 0.0 | 0.0 | 1.0 | | `index` (unsuccessful search) | 0.0 | 0.0 | 1.0 | | `insert` | 0.0 | 0.0 | 1.0 | | `__len__` | 0.0 | 0.0 | 1.0 | | `__mult__` | 0.0 | 0.0 | 1.0 | | `__contains__` (unsuccessful search) | 0.0 | 0.0 | 1.0 | | `pop` | 0.0 | 0.0 | 1.0 | | `remove` | 0.0 | 0.0 | 1.0 | | `__setitem__` | 0.0 | 0.0 | 1.0 | | `__setitem__` (slice) | 0.0 | 0.0 | 1.0 | | `__setitem__` (slice with skip) | 0.0 | 0.0 | 1.0 | | `sort` | 0.0 | 0.95703 | inf |","title":"List"},{"location":"benchmark_results/py37/set/","text":"timing | subject | `builtin` | `sqlitecollections` | ratio | | :------ | --------: | ------------------: | ----: | | `add (existing item)` | 0.00423 | 0.00596 | 1.41027 | | `add (new item)` | 0.0042 | 0.00723 | 1.7237 | | `__and__` | 0.00417 | 0.02302 | 5.52557 | | `clear` | 0.00422 | 0.00692 | 1.63807 | | `__contains__` | 0.00416 | 0.00422 | 1.01462 | | `copy` | 0.00423 | 0.01878 | 4.44251 | | `difference` | 0.00413 | 0.01812 | 4.39198 | | `discard` | 0.00421 | 0.00703 | 1.66724 | | `discard (no changes)` | 0.00419 | 0.00624 | 1.49088 | | `__ge__` | 0.0041 | 0.00413 | 1.00537 | | `__ge__` (not greater than or equals to) | 0.00414 | 0.00443 | 1.07043 | | `__gt__` | 0.00417 | 0.00706 | 1.69602 | | `__gt__` (not greater than) | 0.00417 | 0.02017 | 4.838 | | `__iand__` | 0.00423 | 0.0101 | 2.3867 | | `__init__` | 0.00418 | 0.01843 | 4.40851 | | `intersection` | 0.00427 | 0.02307 | 5.40659 | | `intersection_update` | 0.00421 | 0.00953 | 2.26498 | | `__ior__` | 0.0043 | 0.00795 | 1.84755 | | `isdisjoint` | 0.00416 | 0.00418 | 1.00627 | | `isdisjoint` (not disjoint) | 0.00412 | 0.00416 | 1.00833 | | `issubset` | 0.00419 | 0.04483 | 10.69698 | | `issubset` (not subset) | 0.00414 | 0.0225 | 5.43515 | | `issuperset` | 0.00423 | 0.01206 | 2.85269 | | `issuperset` (not superset) | 0.00415 | 0.00445 | 1.07284 | | `__ixor__` | 0.0042 | 0.02757 | 6.56177 | | `__le__` | 0.00416 | 0.00502 | 1.20443 | | `__le__` (not less than or equals to) | 0.00423 | 0.00413 | 0.9775 | | `__len__` | 0.00419 | 0.00415 | 0.98996 | | `__lt__` | 0.00417 | 0.00505 | 1.21285 | | `__lt__` (not less than) | 0.00417 | 0.00417 | 0.99992 | | `__contains__` (unsuccessful search) | 0.00418 | 0.00416 | 0.99521 | | `__or__` | 0.00413 | 0.02009 | 4.86966 | | `pop` | 0.00414 | 0.00707 | 1.70789 | | `remove` | 0.00412 | 0.00707 | 1.71536 | | `__sub__` | 0.00417 | 0.01762 | 4.22307 | | `symmetric_difference` | 0.00414 | 0.04629 | 11.18844 | | `symmetric_difference_update` | 0.00417 | 0.02784 | 6.67791 | | `union` | 0.00415 | 0.02003 | 4.82214 | | `update` | 0.00422 | 0.00755 | 1.78769 | | `__xor__` | 0.00416 | 0.04508 | 10.84165 | approximate memory usage | subject | `builtin` | `sqlitecollections` | ratio | | :------ | --------: | ------------------: | ----: | | `add (existing item)` | 0.0 | 0.0 | 1.0 | | `add (new item)` | 0.0 | 0.0 | 1.0 | | `__and__` | 0.0 | 0.0 | 1.0 | | `clear` | 0.0 | 0.0 | 1.0 | | `__contains__` | 0.0 | 0.0 | 1.0 | | `copy` | 0.0 | 0.0 | 1.0 | | `difference` | 0.0 | 0.0 | 1.0 | | `discard` | 0.0 | 0.0 | 1.0 | | `discard (no changes)` | 0.0 | 0.0 | 1.0 | | `__ge__` | 0.0 | 0.0 | 1.0 | | `__ge__` (not greater than or equals to) | 0.0 | 0.0 | 1.0 | | `__gt__` | 0.0 | 0.0 | 1.0 | | `__gt__` (not greater than) | 0.0 | 0.0 | 1.0 | | `__iand__` | 0.0 | 0.0 | 1.0 | | `__init__` | 0.0 | 0.0 | 1.0 | | `intersection` | 0.0 | 0.0 | 1.0 | | `intersection_update` | 0.0 | 0.0 | 1.0 | | `__ior__` | 0.0 | 0.0 | 1.0 | | `isdisjoint` | 0.0 | 0.0 | 1.0 | | `isdisjoint` (not disjoint) | 0.0 | 0.0 | 1.0 | | `issubset` | 0.0 | 0.0 | 1.0 | | `issubset` (not subset) | 0.0 | 0.0 | 1.0 | | `issuperset` | 0.0 | 0.0 | 1.0 | | `issuperset` (not superset) | 0.0 | 0.0 | 1.0 | | `__ixor__` | 0.0 | 0.0 | 1.0 | | `__le__` | 0.0 | 0.0 | 1.0 | | `__le__` (not less than or equals to) | 0.0 | 0.0 | 1.0 | | `__len__` | 0.0 | 0.0 | 1.0 | | `__lt__` | 0.0 | 0.0 | 1.0 | | `__lt__` (not less than) | 0.0 | 0.0 | 1.0 | | `__contains__` (unsuccessful search) | 0.0 | 0.0 | 1.0 | | `__or__` | 0.0 | 0.0 | 1.0 | | `pop` | 0.0 | 0.0 | 1.0 | | `remove` | 0.0 | 0.0 | 1.0 | | `__sub__` | 0.0 | 0.0 | 1.0 | | `symmetric_difference` | 0.0 | 0.0 | 1.0 | | `symmetric_difference_update` | 0.0 | 0.0 | 1.0 | | `union` | 0.0 | 0.0 | 1.0 | | `update` | 0.0 | 0.0 | 1.0 | | `__xor__` | 0.0 | 0.0 | 1.0 |","title":"Set"},{"location":"benchmark_results/py38/dict/","text":"timing | subject | `builtin` | `sqlitecollections` | ratio | | :------ | --------: | ------------------: | ----: | | `clear` | 0.00442 | 0.00972 | 2.19756 | | `__contains__` | 0.00412 | 0.00432 | 1.04854 | | `copy` | 0.00412 | 0.00966 | 2.34527 | | `__delitem__` | 0.00419 | 0.0074 | 1.76604 | | `get` | 0.00404 | 0.00425 | 1.05337 | | `get (unsuccessful search)` | 0.00401 | 0.00414 | 1.03268 | | `__getitem__` | 0.00405 | 0.00434 | 1.07354 | | `__init__` | 0.00421 | 0.03874 | 9.19389 | | `items` | 0.00456 | 0.01111 | 2.43736 | | `__iter__` | 0.0041 | 0.00794 | 1.93324 | | `keys` | 0.0041 | 0.00794 | 1.93667 | | `__len__` | 0.00403 | 0.00404 | 1.00268 | | `__contains__` (unsuccessful search) | 0.0041 | 0.00425 | 1.03637 | | `pop` | 0.00417 | 0.0069 | 1.65451 | | `pop (unsuccessful search)` | 0.00425 | 0.0057 | 1.3424 | | `popitem` | 0.00416 | 0.00776 | 1.86447 | | `reversed` | 0.00405 | 0.0078 | 1.92421 | | `setdefault` | 0.00409 | 0.00604 | 1.47696 | | `setdefault (unsuccessful search)` | 0.0041 | 0.00604 | 1.47243 | | `__setitem__` (add new item) | 0.0041 | 0.00706 | 1.72127 | | `__setitem__` (replace) | 0.00391 | 0.00705 | 1.80613 | | `update` | 0.00409 | 0.00759 | 1.85657 | | `update` (many) | 0.0051 | 0.5869 | 115.00387 | | `values` | 0.00406 | 0.00762 | 1.87666 | approximate memory usage | subject | `builtin` | `sqlitecollections` | ratio | | :------ | --------: | ------------------: | ----: | | `clear` | 0.0 | 0.0 | 1.0 | | `__contains__` | 0.0 | 0.0 | 1.0 | | `copy` | 0.0 | 0.0 | 1.0 | | `__delitem__` | 0.0 | 0.0 | 1.0 | | `get` | 0.0 | 0.0 | 1.0 | | `get (unsuccessful search)` | 0.0 | 0.0 | 1.0 | | `__getitem__` | 0.0 | 0.0 | 1.0 | | `__init__` | 0.0 | 0.0 | 1.0 | | `items` | 0.0 | 0.09375 | inf | | `__iter__` | 0.0 | 0.04297 | inf | | `keys` | 0.0 | 0.0 | 1.0 | | `__len__` | 0.0 | 0.0 | 1.0 | | `__contains__` (unsuccessful search) | 0.0 | 0.0 | 1.0 | | `pop` | 0.0 | 0.0 | 1.0 | | `pop (unsuccessful search)` | 0.0 | 0.0 | 1.0 | | `popitem` | 0.0 | 0.0 | 1.0 | | `reversed` | 0.0 | 0.0 | 1.0 | | `setdefault` | 0.0 | 0.0 | 1.0 | | `setdefault (unsuccessful search)` | 0.0 | 0.0 | 1.0 | | `__setitem__` (add new item) | 0.0 | 0.0 | 1.0 | | `__setitem__` (replace) | 0.0 | 0.0 | 1.0 | | `update` | 0.0 | 0.0 | 1.0 | | `update` (many) | 0.0 | 0.0 | 1.0 | | `values` | 0.0 | 0.0 | 1.0 |","title":"Dict"},{"location":"benchmark_results/py38/list/","text":"timing | subject | `builtin` | `sqlitecollections` | ratio | | :------ | --------: | ------------------: | ----: | | `__add__` | 0.00371 | 0.02923 | 7.87661 | | `append` | 0.00373 | 0.00651 | 1.74658 | | `clear` | 0.00396 | 0.00691 | 1.74366 | | `__contains__` | 0.0039 | 0.00398 | 1.01966 | | `copy` | 0.004 | 0.02835 | 7.09391 | | `count` | 0.00364 | 0.00402 | 1.10344 | | `__init__` | 0.00399 | 0.02023 | 5.06733 | | `__delitem__` | 0.00395 | 0.00997 | 2.52147 | | `__delitem__` (slice) | 0.00391 | 0.01439 | 3.68497 | | `__delitem__` (slice with skip) | 0.00396 | 0.01455 | 3.67436 | | `extend` | 0.00395 | 0.00662 | 1.67505 | | `__getitem__` | 0.004 | 0.00392 | 0.98069 | | `__getitem__` (slice) | 0.00396 | 0.0178 | 4.49062 | | `__getitem__` (slice with skip) | 0.00398 | 0.01074 | 2.69898 | | `__iadd__` | 0.00404 | 0.0066 | 1.63349 | | `__imult__` | 0.00407 | 0.01973 | 4.84658 | | `index` | 0.00396 | 0.00419 | 1.0564 | | `index` (unsuccessful search) | 0.00398 | 0.00418 | 1.04953 | | `insert` | 0.00404 | 0.01218 | 3.01304 | | `__len__` | 0.00396 | 0.00396 | 1.00207 | | `__mult__` | 0.00457 | 0.04959 | 10.85112 | | `__contains__` (unsuccessful search) | 0.00394 | 0.00398 | 1.01016 | | `pop` | 0.0041 | 0.01048 | 2.55384 | | `remove` | 0.00396 | 0.01231 | 3.10953 | | `__setitem__` | 0.00396 | 0.00735 | 1.85654 | | `__setitem__` (slice) | 0.00399 | 0.64702 | 162.33645 | | `__setitem__` (slice with skip) | 0.00396 | 0.00745 | 1.8802 | | `sort` | 0.00402 | 0.09425 | 23.44524 | approximate memory usage | subject | `builtin` | `sqlitecollections` | ratio | | :------ | --------: | ------------------: | ----: | | `__add__` | 0.0 | 0.0 | 1.0 | | `append` | 0.0 | 0.0 | 1.0 | | `clear` | 0.0 | 0.0 | 1.0 | | `__contains__` | 0.0 | 0.0 | 1.0 | | `copy` | 0.0 | 0.0 | 1.0 | | `count` | 0.0 | 0.0 | 1.0 | | `__init__` | 0.0 | 0.07422 | inf | | `__delitem__` | 0.0 | 0.0 | 1.0 | | `__delitem__` (slice) | 0.0 | 0.0 | 1.0 | | `__delitem__` (slice with skip) | 0.0 | 0.0 | 1.0 | | `extend` | 0.0 | 0.0 | 1.0 | | `__getitem__` | 0.0 | 0.0 | 1.0 | | `__getitem__` (slice) | 0.0 | 0.0 | 1.0 | | `__getitem__` (slice with skip) | 0.0 | 0.0 | 1.0 | | `__iadd__` | 0.0 | 0.0 | 1.0 | | `__imult__` | 0.0 | 0.0 | 1.0 | | `index` | 0.0 | 0.0 | 1.0 | | `index` (unsuccessful search) | 0.0 | 0.0 | 1.0 | | `insert` | 0.0 | 0.0 | 1.0 | | `__len__` | 0.0 | 0.0 | 1.0 | | `__mult__` | 0.0 | 0.0 | 1.0 | | `__contains__` (unsuccessful search) | 0.0 | 0.0 | 1.0 | | `pop` | 0.0 | 0.0 | 1.0 | | `remove` | 0.0 | 0.0 | 1.0 | | `__setitem__` | 0.0 | 0.0 | 1.0 | | `__setitem__` (slice) | 0.0 | 0.0 | 1.0 | | `__setitem__` (slice with skip) | 0.0 | 0.0 | 1.0 | | `sort` | 0.0 | 0.83594 | inf |","title":"List"},{"location":"benchmark_results/py38/set/","text":"timing | subject | `builtin` | `sqlitecollections` | ratio | | :------ | --------: | ------------------: | ----: | | `add (existing item)` | 0.00407 | 0.00569 | 1.39919 | | `add (new item)` | 0.00403 | 0.00657 | 1.6311 | | `__and__` | 0.00407 | 0.02125 | 5.22793 | | `clear` | 0.00404 | 0.00693 | 1.71561 | | `__contains__` | 0.00399 | 0.00402 | 1.00866 | | `copy` | 0.00416 | 0.01654 | 3.97988 | | `difference` | 0.00406 | 0.01719 | 4.2321 | | `discard` | 0.00403 | 0.00725 | 1.79774 | | `discard (no changes)` | 0.00413 | 0.00568 | 1.37514 | | `__ge__` | 0.00401 | 0.00386 | 0.96248 | | `__ge__` (not greater than or equals to) | 0.00377 | 0.00439 | 1.16459 | | `__gt__` | 0.00418 | 0.00705 | 1.68702 | | `__gt__` (not greater than) | 0.00431 | 0.0182 | 4.21962 | | `__iand__` | 0.004 | 0.00895 | 2.23965 | | `__init__` | 0.00396 | 0.01842 | 4.65564 | | `intersection` | 0.00407 | 0.02242 | 5.50526 | | `intersection_update` | 0.00405 | 0.00981 | 2.42442 | | `__ior__` | 0.00408 | 0.00797 | 1.95414 | | `isdisjoint` | 0.00411 | 0.00405 | 0.98623 | | `isdisjoint` (not disjoint) | 0.00403 | 0.00406 | 1.0053 | | `issubset` | 0.0041 | 0.04299 | 10.48274 | | `issubset` (not subset) | 0.00417 | 0.02291 | 5.49408 | | `issuperset` | 0.00403 | 0.01058 | 2.62686 | | `issuperset` (not superset) | 0.00392 | 0.0042 | 1.07081 | | `__ixor__` | 0.00382 | 0.02413 | 6.31883 | | `__le__` | 0.00412 | 0.00478 | 1.16101 | | `__le__` (not less than or equals to) | 0.00407 | 0.00409 | 1.00512 | | `__len__` | 0.00411 | 0.00406 | 0.98727 | | `__lt__` | 0.00409 | 0.00485 | 1.18738 | | `__lt__` (not less than) | 0.00406 | 0.00401 | 0.98828 | | `__contains__` (unsuccessful search) | 0.00406 | 0.00403 | 0.99352 | | `__or__` | 0.00407 | 0.01895 | 4.65611 | | `pop` | 0.00419 | 0.00706 | 1.68644 | | `remove` | 0.00407 | 0.00728 | 1.78956 | | `__sub__` | 0.00413 | 0.0169 | 4.08997 | | `symmetric_difference` | 0.00402 | 0.04286 | 10.65482 | | `symmetric_difference_update` | 0.00418 | 0.02536 | 6.06169 | | `union` | 0.00388 | 0.01768 | 4.55673 | | `update` | 0.00392 | 0.00752 | 1.91706 | | `__xor__` | 0.00383 | 0.03879 | 10.12294 | approximate memory usage | subject | `builtin` | `sqlitecollections` | ratio | | :------ | --------: | ------------------: | ----: | | `add (existing item)` | 0.0 | 0.0 | 1.0 | | `add (new item)` | 0.0 | 0.0 | 1.0 | | `__and__` | 0.0 | 0.0 | 1.0 | | `clear` | 0.0 | 0.0 | 1.0 | | `__contains__` | 0.0 | 0.0 | 1.0 | | `copy` | 0.0 | 0.0 | 1.0 | | `difference` | 0.0 | 0.0 | 1.0 | | `discard` | 0.0 | 0.0 | 1.0 | | `discard (no changes)` | 0.0 | 0.0 | 1.0 | | `__ge__` | 0.0 | 0.0 | 1.0 | | `__ge__` (not greater than or equals to) | 0.0 | 0.0 | 1.0 | | `__gt__` | 0.0 | 0.0 | 1.0 | | `__gt__` (not greater than) | 0.0 | 0.0 | 1.0 | | `__iand__` | 0.0 | 0.0 | 1.0 | | `__init__` | 0.0 | 0.0 | 1.0 | | `intersection` | 0.0 | 0.0 | 1.0 | | `intersection_update` | 0.0 | 0.0 | 1.0 | | `__ior__` | 0.0 | 0.0 | 1.0 | | `isdisjoint` | 0.0 | 0.0 | 1.0 | | `isdisjoint` (not disjoint) | 0.0 | 0.0 | 1.0 | | `issubset` | 0.0 | 0.0 | 1.0 | | `issubset` (not subset) | 0.0 | 0.0 | 1.0 | | `issuperset` | 0.0 | 0.0 | 1.0 | | `issuperset` (not superset) | 0.0 | 0.0 | 1.0 | | `__ixor__` | 0.0 | 0.0 | 1.0 | | `__le__` | 0.0 | 0.0 | 1.0 | | `__le__` (not less than or equals to) | 0.0 | 0.0 | 1.0 | | `__len__` | 0.0 | 0.0 | 1.0 | | `__lt__` | 0.0 | 0.0 | 1.0 | | `__lt__` (not less than) | 0.0 | 0.0 | 1.0 | | `__contains__` (unsuccessful search) | 0.0 | 0.0 | 1.0 | | `__or__` | 0.0 | 0.0 | 1.0 | | `pop` | 0.0 | 0.0 | 1.0 | | `remove` | 0.0 | 0.0 | 1.0 | | `__sub__` | 0.0 | 0.0 | 1.0 | | `symmetric_difference` | 0.0 | 0.0 | 1.0 | | `symmetric_difference_update` | 0.0 | 0.0 | 1.0 | | `union` | 0.0 | 0.0 | 1.0 | | `update` | 0.0 | 0.0 | 1.0 | | `__xor__` | 0.0 | 0.0 | 1.0 |","title":"Set"},{"location":"benchmark_results/py39/dict/","text":"timing | subject | `builtin` | `sqlitecollections` | ratio | | :------ | --------: | ------------------: | ----: | | `clear` | 0.00396 | 0.0071 | 1.79446 | | `__contains__` | 0.00388 | 0.00405 | 1.04418 | | `copy` | 0.0039 | 0.01091 | 2.79899 | | `__delitem__` | 0.004 | 0.00767 | 1.91895 | | `get` | 0.00391 | 0.00406 | 1.04011 | | `get (unsuccessful search)` | 0.00392 | 0.00403 | 1.02882 | | `__getitem__` | 0.00389 | 0.00409 | 1.05038 | | `__init__` | 0.00402 | 0.03972 | 9.87046 | | `__ior__` | 0.004 | 0.00751 | 1.87846 | | `__ior__` (many) | 0.00509 | 0.59102 | 116.09881 | | `items` | 0.00447 | 0.01086 | 2.42954 | | `__iter__` | 0.00399 | 0.00795 | 1.99379 | | `keys` | 0.00399 | 0.00805 | 2.01472 | | `__len__` | 0.00396 | 0.00402 | 1.01441 | | `__contains__` (unsuccessful search) | 0.00392 | 0.00412 | 1.05051 | | `__or__` | 0.00394 | 0.01273 | 3.23418 | | `__or__` (many) | 0.00548 | 0.59682 | 108.85171 | | `pop` | 0.00405 | 0.00769 | 1.90052 | | `pop (unsuccessful search)` | 0.00401 | 0.00566 | 1.41163 | | `popitem` | 0.004 | 0.00766 | 1.9157 | | `reversed` | 0.00396 | 0.00778 | 1.96467 | | `setdefault` | 0.00403 | 0.00609 | 1.51285 | | `setdefault (unsuccessful search)` | 0.00403 | 0.0061 | 1.51452 | | `__setitem__` (add new item) | 0.00401 | 0.00728 | 1.81435 | | `__setitem__` (replace) | 0.00398 | 0.00762 | 1.91569 | | `update` | 0.00406 | 0.00781 | 1.92493 | | `update` (many) | 0.00493 | 0.58935 | 119.59424 | | `values` | 0.00392 | 0.00742 | 1.89333 | approximate memory usage | subject | `builtin` | `sqlitecollections` | ratio | | :------ | --------: | ------------------: | ----: | | `clear` | 0.0 | 0.0 | 1.0 | | `__contains__` | 0.0 | 0.0 | 1.0 | | `copy` | 0.0 | 0.0 | 1.0 | | `__delitem__` | 0.0 | 0.0 | 1.0 | | `get` | 0.0 | 0.0 | 1.0 | | `get (unsuccessful search)` | 0.0 | 0.0 | 1.0 | | `__getitem__` | 0.0 | 0.0 | 1.0 | | `__init__` | 0.0 | 0.0 | 1.0 | | `__ior__` | 0.0 | 0.0 | 1.0 | | `__ior__` (many) | 0.1875 | 0.0 | 0.0 | | `items` | 0.0 | 0.13672 | inf | | `__iter__` | 0.0 | 0.0 | 1.0 | | `keys` | 0.0 | 0.0 | 1.0 | | `__len__` | 0.0 | 0.0 | 1.0 | | `__contains__` (unsuccessful search) | 0.0 | 0.0 | 1.0 | | `__or__` | 0.0 | 0.0 | 1.0 | | `__or__` (many) | 0.0 | 0.0 | 1.0 | | `pop` | 0.0 | 0.0 | 1.0 | | `pop (unsuccessful search)` | 0.0 | 0.0 | 1.0 | | `popitem` | 0.0 | 0.0 | 1.0 | | `reversed` | 0.0 | 0.0 | 1.0 | | `setdefault` | 0.0 | 0.0 | 1.0 | | `setdefault (unsuccessful search)` | 0.0 | 0.0 | 1.0 | | `__setitem__` (add new item) | 0.0 | 0.0 | 1.0 | | `__setitem__` (replace) | 0.0 | 0.0 | 1.0 | | `update` | 0.0 | 0.0 | 1.0 | | `update` (many) | 0.0 | 0.0 | 1.0 | | `values` | 0.0 | 0.0 | 1.0 |","title":"Dict"},{"location":"benchmark_results/py39/list/","text":"timing | subject | `builtin` | `sqlitecollections` | ratio | | :------ | --------: | ------------------: | ----: | | `__add__` | 0.00388 | 0.03051 | 7.86824 | | `append` | 0.00392 | 0.00707 | 1.80434 | | `clear` | 0.00385 | 0.0073 | 1.89368 | | `__contains__` | 0.00399 | 0.00385 | 0.96515 | | `copy` | 0.00384 | 0.02993 | 7.79584 | | `count` | 0.00388 | 0.00388 | 1.001 | | `__init__` | 0.00385 | 0.02002 | 5.20514 | | `__delitem__` | 0.00392 | 0.00987 | 2.52033 | | `__delitem__` (slice) | 0.00386 | 0.01459 | 3.77736 | | `__delitem__` (slice with skip) | 0.00385 | 0.01423 | 3.69585 | | `extend` | 0.00391 | 0.00728 | 1.86121 | | `__getitem__` | 0.00384 | 0.00385 | 1.00394 | | `__getitem__` (slice) | 0.00391 | 0.01793 | 4.58239 | | `__getitem__` (slice with skip) | 0.00388 | 0.01142 | 2.94637 | | `__iadd__` | 0.00393 | 0.00705 | 1.79357 | | `__imult__` | 0.00386 | 0.01938 | 5.01449 | | `index` | 0.00391 | 0.00399 | 1.02032 | | `index` (unsuccessful search) | 0.00381 | 0.00423 | 1.11199 | | `insert` | 0.00442 | 0.01186 | 2.68182 | | `__len__` | 0.00387 | 0.00389 | 1.0065 | | `__mult__` | 0.00384 | 0.0516 | 13.44979 | | `__contains__` (unsuccessful search) | 0.00385 | 0.00394 | 1.02408 | | `pop` | 0.0039 | 0.01065 | 2.73162 | | `remove` | 0.00391 | 0.01238 | 3.16761 | | `__setitem__` | 0.00392 | 0.00654 | 1.66988 | | `__setitem__` (slice) | 0.00395 | 0.63271 | 160.32523 | | `__setitem__` (slice with skip) | 0.00389 | 0.00724 | 1.85835 | | `sort` | 0.00388 | 0.09205 | 23.74273 | approximate memory usage | subject | `builtin` | `sqlitecollections` | ratio | | :------ | --------: | ------------------: | ----: | | `__add__` | 0.0 | 0.0 | 1.0 | | `append` | 0.0 | 0.0 | 1.0 | | `clear` | 0.0 | 0.0 | 1.0 | | `__contains__` | 0.0 | 0.0 | 1.0 | | `copy` | 0.0 | 0.0 | 1.0 | | `count` | 0.0 | 0.0 | 1.0 | | `__init__` | 0.0 | 0.0 | 1.0 | | `__delitem__` | 0.0 | 0.0 | 1.0 | | `__delitem__` (slice) | 0.0 | 0.0 | 1.0 | | `__delitem__` (slice with skip) | 0.0 | 0.0 | 1.0 | | `extend` | 0.0 | 0.0 | 1.0 | | `__getitem__` | 0.0 | 0.0 | 1.0 | | `__getitem__` (slice) | 0.0 | 0.0 | 1.0 | | `__getitem__` (slice with skip) | 0.0 | 0.0 | 1.0 | | `__iadd__` | 0.0 | 0.0 | 1.0 | | `__imult__` | 0.0 | 0.0 | 1.0 | | `index` | 0.0 | 0.0 | 1.0 | | `index` (unsuccessful search) | 0.0 | 0.0 | 1.0 | | `insert` | 0.0 | 0.0 | 1.0 | | `__len__` | 0.0 | 0.0 | 1.0 | | `__mult__` | 0.0 | 0.0 | 1.0 | | `__contains__` (unsuccessful search) | 0.0 | 0.0 | 1.0 | | `pop` | 0.0 | 0.0 | 1.0 | | `remove` | 0.0 | 0.0 | 1.0 | | `__setitem__` | 0.0 | 0.0 | 1.0 | | `__setitem__` (slice) | 0.0 | 0.0 | 1.0 | | `__setitem__` (slice with skip) | 0.0 | 0.0 | 1.0 | | `sort` | 0.0 | 0.62109 | inf |","title":"List"},{"location":"benchmark_results/py39/set/","text":"timing | subject | `builtin` | `sqlitecollections` | ratio | | :------ | --------: | ------------------: | ----: | | `add (existing item)` | 0.00398 | 0.00587 | 1.47551 | | `add (new item)` | 0.00399 | 0.00743 | 1.86119 | | `__and__` | 0.0042 | 0.02226 | 5.30413 | | `clear` | 0.00396 | 0.00705 | 1.77748 | | `__contains__` | 0.00394 | 0.00395 | 1.00465 | | `copy` | 0.00398 | 0.0179 | 4.50214 | | `difference` | 0.00396 | 0.01785 | 4.50233 | | `discard` | 0.00397 | 0.00697 | 1.75483 | | `discard (no changes)` | 0.00399 | 0.00595 | 1.49216 | | `__ge__` | 0.00401 | 0.00391 | 0.97434 | | `__ge__` (not greater than or equals to) | 0.00395 | 0.00422 | 1.06878 | | `__gt__` | 0.00393 | 0.00716 | 1.82113 | | `__gt__` (not greater than) | 0.00394 | 0.01821 | 4.62058 | | `__iand__` | 0.00397 | 0.00896 | 2.25686 | | `__init__` | 0.00393 | 0.01739 | 4.42416 | | `intersection` | 0.00391 | 0.02212 | 5.65479 | | `intersection_update` | 0.00395 | 0.00949 | 2.40435 | | `__ior__` | 0.00398 | 0.0103 | 2.58572 | | `isdisjoint` | 0.00392 | 0.0039 | 0.99688 | | `isdisjoint` (not disjoint) | 0.00394 | 0.00394 | 1.00023 | | `issubset` | 0.00389 | 0.04279 | 10.98952 | | `issubset` (not subset) | 0.00394 | 0.0219 | 5.5657 | | `issuperset` | 0.00396 | 0.01069 | 2.69806 | | `issuperset` (not superset) | 0.00393 | 0.00427 | 1.08668 | | `__ixor__` | 0.00397 | 0.03132 | 7.88991 | | `__le__` | 0.00392 | 0.0046 | 1.17531 | | `__le__` (not less than or equals to) | 0.00399 | 0.00395 | 0.98917 | | `__len__` | 0.00392 | 0.00394 | 1.00613 | | `__lt__` | 0.00393 | 0.00466 | 1.18489 | | `__lt__` (not less than) | 0.00395 | 0.00394 | 0.9983 | | `__contains__` (unsuccessful search) | 0.00395 | 0.00396 | 1.00321 | | `__or__` | 0.00396 | 0.01876 | 4.74103 | | `pop` | 0.00396 | 0.00786 | 1.98573 | | `remove` | 0.00397 | 0.00742 | 1.86778 | | `__sub__` | 0.00395 | 0.01822 | 4.61211 | | `symmetric_difference` | 0.00401 | 0.04411 | 11.00874 | | `symmetric_difference_update` | 0.00393 | 0.02701 | 6.87224 | | `union` | 0.00392 | 0.01908 | 4.86653 | | `update` | 0.00397 | 0.00807 | 2.03407 | | `__xor__` | 0.00396 | 0.04488 | 11.33789 | approximate memory usage | subject | `builtin` | `sqlitecollections` | ratio | | :------ | --------: | ------------------: | ----: | | `add (existing item)` | 0.0 | 0.0 | 1.0 | | `add (new item)` | 0.0 | 0.0 | 1.0 | | `__and__` | 0.0 | 0.0 | 1.0 | | `clear` | 0.0 | 0.0 | 1.0 | | `__contains__` | 0.0 | 0.0 | 1.0 | | `copy` | 0.0 | 0.0 | 1.0 | | `difference` | 0.0 | 0.0 | 1.0 | | `discard` | 0.0 | 0.0 | 1.0 | | `discard (no changes)` | 0.0 | 0.0 | 1.0 | | `__ge__` | 0.0 | 0.0 | 1.0 | | `__ge__` (not greater than or equals to) | 0.0 | 0.0 | 1.0 | | `__gt__` | 0.0 | 0.0 | 1.0 | | `__gt__` (not greater than) | 0.0 | 0.0 | 1.0 | | `__iand__` | 0.0 | 0.0 | 1.0 | | `__init__` | 0.0 | 0.0 | 1.0 | | `intersection` | 0.0 | 0.0 | 1.0 | | `intersection_update` | 0.0 | 0.0 | 1.0 | | `__ior__` | 0.0 | 0.0 | 1.0 | | `isdisjoint` | 0.0 | 0.0 | 1.0 | | `isdisjoint` (not disjoint) | 0.0 | 0.0 | 1.0 | | `issubset` | 0.0 | 0.0 | 1.0 | | `issubset` (not subset) | 0.0 | 0.0 | 1.0 | | `issuperset` | 0.0 | 0.0 | 1.0 | | `issuperset` (not superset) | 0.0 | 0.0 | 1.0 | | `__ixor__` | 0.0 | 0.0 | 1.0 | | `__le__` | 0.0 | 0.0 | 1.0 | | `__le__` (not less than or equals to) | 0.0 | 0.0 | 1.0 | | `__len__` | 0.0 | 0.0 | 1.0 | | `__lt__` | 0.0 | 0.0 | 1.0 | | `__lt__` (not less than) | 0.0 | 0.0 | 1.0 | | `__contains__` (unsuccessful search) | 0.0 | 0.0 | 1.0 | | `__or__` | 0.0 | 0.0 | 1.0 | | `pop` | 0.0 | 0.0 | 1.0 | | `remove` | 0.0 | 0.0 | 1.0 | | `__sub__` | 0.0 | 0.0 | 1.0 | | `symmetric_difference` | 0.0 | 0.0 | 1.0 | | `symmetric_difference_update` | 0.0 | 0.0 | 1.0 | | `union` | 0.0 | 0.0 | 1.0 | | `update` | 0.0 | 0.0 | 1.0 | | `__xor__` | 0.0 | 0.0 | 1.0 |","title":"Set"},{"location":"usage/common/","text":"Common Features","title":"common features"},{"location":"usage/common/#common-features","text":"","title":"Common Features"},{"location":"usage/dict/","text":"Dict Dict is a container compatible with the built-in dict , which serializes keys and values and stores them in a sqlite3 database. It preserves insertion order for all supported python versions. Dict[KT, VT](...) Constructor. Type Parameters: KT : key type VT : value type Arguments: data : Mapping[KT, VT] or Iterable[Tuple[KT, VT]] , optional, positional-only argument, defualt= None ; Initial data. If None or no argument is given, persistent data is used as is if available, otherwise persistent data in the corresponding table is cleared and given data is stored instead. connection : str or sqlite3.Connection , optional, default= None ; If None , temporary file is automatically created. If connection is a str , it will be used as the sqlite3 database file name. You can pass a sqlite3.Connection directly. table_name : str , optional, default= None ; Table name of this container. If None , an auto-generated unique name will be used. Available characters are letters, numbers, and underscores ( _ ). key_serializer : Callable[[KT], bytes] , optional, default= None ; Function to serialize key. If None , pickle.dumps is used. key_deserializer : Callable[[bytes], KT] , optional, default= None ; Function to deserialize key. If None , pickle.loads is used. value_serializer : Callable[[VT], bytes] , optional, default= None ; Function to serialize value. If None , key_serializer is used. value_deserializer : Callable[[bytes], VT] , optional, default= None ; Function to deserialize value. If None , key_deserializer is used. persist : bool , optional, default= True ; If True , table won't be deleted even when the object is deleted. If False , the table is deleted when this object is deleted. len(d) Return the number of items in d: Dict[KT, VT] Return value: int : The number of items in d d[key] Get item of d with key key . Raises a KeyError if key is not in the map. Arguments: key : KT ; Key to retrieve corresponding value Return value: VT : Item of d with key key d[key] = value Set d[key] to value . Arguments: key : KT ; Key to be set value : VT ; Value to be set Return value: None del d[key] Delete d[key] . Arguments: key : KT ; Key to be deleted Return value: None key in d Return whether if key is in d Arguments: key : KT ; Key to be checked Return value: bool : True if key is in d and False otherwise. key not in d Return whether if key is not in d Arguments: key : KT ; Key to be checked Return value: bool : True if key is not in d and False otherwise. iter(d) Return an iterator over the keys of d Return value: Iterator[KT] : an iterator over the keys of d clear() Remove all items from the dictionary Return value: None copy() Return a copy of the dictionary. The actual behavior is to create a table with a unique table name and copy the keys and the values to the new table. Therefore, unlike the built-in dict copy, the behavior is similar to deep copy. Be aware that the copied dictionary is volatile. Return value: Dict[KT, VT] : A volatile copy of the dictionary. get(key[, default]) Return the value for key if key is in the dictionary, else default . If default is not given, it defaults to None , so that this method never raises a KeyError . Arguments: key : KT ; Key to retrieve corresponding value if exists. default : VT , optional, default= None ; Default value in case that key is not in the dictionary Return value: VT : Item of the dictionary with key key if key is in the dictionary, default otherwise. items() Return a new view of the dictionary\u2019s items (key-value pairs). Return value: ItemsView : View object of the dictionary's items keys() Return a new view of the dictionary's keys. Return value: KeysView[KT] : View object of the dictionary's keys. pop(key[, default]) If key is in the dictionary, remove it and return its value, else return default . If default is not given and key is not in the dictionary, a KeyError is raised. Arguments: key : KT ; Key to retrieve corresponding value if exists. default : VT , optional, default= None ; Default value in case that key is not in the dictionary Return value: VT : Item of the dictionary with key key if key is in the dictionary, default otherwise. popitem() Remove and return a key-value pair from the dictionary. Pairs are returned in LIFO order. If the dictionary is empty, raises a KeyError . Return value: Tuple[KT, VT] : Key-value pair that were last inserted into the dictionary reversed(d) Return a reverse iterator over the keys of the dictionary. (provided only python version 3.8 and above) Return value: Iterator[KT] : Reverse iterator over the keys of the dictionary setdefault(key[, default]) If key is in the dictionary, return its value. If not, insert key with a value of default and return default . Arguments: key : KT ; Key to retrieve or set the value default : VT , optional, default= None ; Value to be set if key is not in the dictionary Return value: VT : Item of the dictionary with key key if key is in the dictionary, default otherwise. update([other, **kwargs]) Update the dictionary with the key-value pairs from other , overwriting existing keys. Arguments: other : Mapping[KT, VT] or Iterable[Tuple[KT, VT]] , optional; Key-value pairs to be added kwargs : VT , optional; values to be added Return value: None values() Return a new view of the dictionary's values. Return value: ValuesView : View object of the dictionary's values d | other Create a new dictionary with the merged keys and values of d and other , which must both be dictionaries. The values of other take priority when d and other share keys. The return value is volatile by default. (provided only python version 3.9 and above) Arguments: other : Mapping[KT, VT] or Iterable[Tuple[KT, VT]] ; Key-value pairs to be merged Return value: Dict[KT, VT] : A new volatile dictionary object. d |= other Update the dictionary d with keys and values from other . (provided only python version 3.9 and above) Arguments: other : Mapping[KT, VT] or Iterable[Tuple[KT, VT]] ; Key-value pairs to be merged Return value: Dict[KT, VT] : The dictionary object.","title":"Dict"},{"location":"usage/dict/#dict","text":"Dict is a container compatible with the built-in dict , which serializes keys and values and stores them in a sqlite3 database. It preserves insertion order for all supported python versions.","title":"Dict"},{"location":"usage/dict/#dictkt-vt","text":"Constructor.","title":"Dict[KT, VT](...)"},{"location":"usage/dict/#type-parameters","text":"KT : key type VT : value type","title":"Type Parameters:"},{"location":"usage/dict/#arguments","text":"data : Mapping[KT, VT] or Iterable[Tuple[KT, VT]] , optional, positional-only argument, defualt= None ; Initial data. If None or no argument is given, persistent data is used as is if available, otherwise persistent data in the corresponding table is cleared and given data is stored instead. connection : str or sqlite3.Connection , optional, default= None ; If None , temporary file is automatically created. If connection is a str , it will be used as the sqlite3 database file name. You can pass a sqlite3.Connection directly. table_name : str , optional, default= None ; Table name of this container. If None , an auto-generated unique name will be used. Available characters are letters, numbers, and underscores ( _ ). key_serializer : Callable[[KT], bytes] , optional, default= None ; Function to serialize key. If None , pickle.dumps is used. key_deserializer : Callable[[bytes], KT] , optional, default= None ; Function to deserialize key. If None , pickle.loads is used. value_serializer : Callable[[VT], bytes] , optional, default= None ; Function to serialize value. If None , key_serializer is used. value_deserializer : Callable[[bytes], VT] , optional, default= None ; Function to deserialize value. If None , key_deserializer is used. persist : bool , optional, default= True ; If True , table won't be deleted even when the object is deleted. If False , the table is deleted when this object is deleted.","title":"Arguments:"},{"location":"usage/dict/#lend","text":"Return the number of items in d: Dict[KT, VT]","title":"len(d)"},{"location":"usage/dict/#return-value","text":"int : The number of items in d","title":"Return value:"},{"location":"usage/dict/#dkey","text":"Get item of d with key key . Raises a KeyError if key is not in the map.","title":"d[key]"},{"location":"usage/dict/#arguments_1","text":"key : KT ; Key to retrieve corresponding value","title":"Arguments:"},{"location":"usage/dict/#return-value_1","text":"VT : Item of d with key key","title":"Return value:"},{"location":"usage/dict/#dkey-value","text":"Set d[key] to value .","title":"d[key] = value"},{"location":"usage/dict/#arguments_2","text":"key : KT ; Key to be set value : VT ; Value to be set","title":"Arguments:"},{"location":"usage/dict/#return-value_2","text":"None","title":"Return value:"},{"location":"usage/dict/#del-dkey","text":"Delete d[key] .","title":"del d[key]"},{"location":"usage/dict/#arguments_3","text":"key : KT ; Key to be deleted","title":"Arguments:"},{"location":"usage/dict/#return-value_3","text":"None","title":"Return value:"},{"location":"usage/dict/#key-in-d","text":"Return whether if key is in d","title":"key in d"},{"location":"usage/dict/#arguments_4","text":"key : KT ; Key to be checked","title":"Arguments:"},{"location":"usage/dict/#return-value_4","text":"bool : True if key is in d and False otherwise.","title":"Return value:"},{"location":"usage/dict/#key-not-in-d","text":"Return whether if key is not in d","title":"key not in d"},{"location":"usage/dict/#arguments_5","text":"key : KT ; Key to be checked","title":"Arguments:"},{"location":"usage/dict/#return-value_5","text":"bool : True if key is not in d and False otherwise.","title":"Return value:"},{"location":"usage/dict/#iterd","text":"Return an iterator over the keys of d","title":"iter(d)"},{"location":"usage/dict/#return-value_6","text":"Iterator[KT] : an iterator over the keys of d","title":"Return value:"},{"location":"usage/dict/#clear","text":"Remove all items from the dictionary","title":"clear()"},{"location":"usage/dict/#return-value_7","text":"None","title":"Return value:"},{"location":"usage/dict/#copy","text":"Return a copy of the dictionary. The actual behavior is to create a table with a unique table name and copy the keys and the values to the new table. Therefore, unlike the built-in dict copy, the behavior is similar to deep copy. Be aware that the copied dictionary is volatile.","title":"copy()"},{"location":"usage/dict/#return-value_8","text":"Dict[KT, VT] : A volatile copy of the dictionary.","title":"Return value:"},{"location":"usage/dict/#getkey-default","text":"Return the value for key if key is in the dictionary, else default . If default is not given, it defaults to None , so that this method never raises a KeyError .","title":"get(key[, default])"},{"location":"usage/dict/#arguments_6","text":"key : KT ; Key to retrieve corresponding value if exists. default : VT , optional, default= None ; Default value in case that key is not in the dictionary","title":"Arguments:"},{"location":"usage/dict/#return-value_9","text":"VT : Item of the dictionary with key key if key is in the dictionary, default otherwise.","title":"Return value:"},{"location":"usage/dict/#items","text":"Return a new view of the dictionary\u2019s items (key-value pairs).","title":"items()"},{"location":"usage/dict/#return-value_10","text":"ItemsView : View object of the dictionary's items","title":"Return value:"},{"location":"usage/dict/#keys","text":"Return a new view of the dictionary's keys.","title":"keys()"},{"location":"usage/dict/#return-value_11","text":"KeysView[KT] : View object of the dictionary's keys.","title":"Return value:"},{"location":"usage/dict/#popkey-default","text":"If key is in the dictionary, remove it and return its value, else return default . If default is not given and key is not in the dictionary, a KeyError is raised.","title":"pop(key[, default])"},{"location":"usage/dict/#arguments_7","text":"key : KT ; Key to retrieve corresponding value if exists. default : VT , optional, default= None ; Default value in case that key is not in the dictionary","title":"Arguments:"},{"location":"usage/dict/#return-value_12","text":"VT : Item of the dictionary with key key if key is in the dictionary, default otherwise.","title":"Return value:"},{"location":"usage/dict/#popitem","text":"Remove and return a key-value pair from the dictionary. Pairs are returned in LIFO order. If the dictionary is empty, raises a KeyError .","title":"popitem()"},{"location":"usage/dict/#return-value_13","text":"Tuple[KT, VT] : Key-value pair that were last inserted into the dictionary","title":"Return value:"},{"location":"usage/dict/#reversedd","text":"Return a reverse iterator over the keys of the dictionary. (provided only python version 3.8 and above)","title":"reversed(d)"},{"location":"usage/dict/#return-value_14","text":"Iterator[KT] : Reverse iterator over the keys of the dictionary","title":"Return value:"},{"location":"usage/dict/#setdefaultkey-default","text":"If key is in the dictionary, return its value. If not, insert key with a value of default and return default .","title":"setdefault(key[, default])"},{"location":"usage/dict/#arguments_8","text":"key : KT ; Key to retrieve or set the value default : VT , optional, default= None ; Value to be set if key is not in the dictionary","title":"Arguments:"},{"location":"usage/dict/#return-value_15","text":"VT : Item of the dictionary with key key if key is in the dictionary, default otherwise.","title":"Return value:"},{"location":"usage/dict/#updateother-kwargs","text":"Update the dictionary with the key-value pairs from other , overwriting existing keys.","title":"update([other, **kwargs])"},{"location":"usage/dict/#arguments_9","text":"other : Mapping[KT, VT] or Iterable[Tuple[KT, VT]] , optional; Key-value pairs to be added kwargs : VT , optional; values to be added","title":"Arguments:"},{"location":"usage/dict/#return-value_16","text":"None","title":"Return value:"},{"location":"usage/dict/#values","text":"Return a new view of the dictionary's values.","title":"values()"},{"location":"usage/dict/#return-value_17","text":"ValuesView : View object of the dictionary's values","title":"Return value:"},{"location":"usage/dict/#d-other","text":"Create a new dictionary with the merged keys and values of d and other , which must both be dictionaries. The values of other take priority when d and other share keys. The return value is volatile by default. (provided only python version 3.9 and above)","title":"d | other"},{"location":"usage/dict/#arguments_10","text":"other : Mapping[KT, VT] or Iterable[Tuple[KT, VT]] ; Key-value pairs to be merged","title":"Arguments:"},{"location":"usage/dict/#return-value_18","text":"Dict[KT, VT] : A new volatile dictionary object.","title":"Return value:"},{"location":"usage/dict/#d-other_1","text":"Update the dictionary d with keys and values from other . (provided only python version 3.9 and above)","title":"d |= other"},{"location":"usage/dict/#arguments_11","text":"other : Mapping[KT, VT] or Iterable[Tuple[KT, VT]] ; Key-value pairs to be merged","title":"Arguments:"},{"location":"usage/dict/#return-value_19","text":"Dict[KT, VT] : The dictionary object.","title":"Return value:"},{"location":"usage/factory/","text":"factory module factory module contains a factory for each container: ListFactory for List , SetFactory for Set and DictFactory for Dict . They replace constructors of each container that require extra arguments such as connection , serializer , deserializer etc., and allow users to construct a container without specifying those extra arguments. Example Basic usage The results of the following two examples are almost the same (except for the auto-generated table names). Without factory: import sqlite3 import sqlitecollections as sc conn = sqlite3.connect(\"path/to/file.db\") def encode(x: str) -> bytes: return x.encode(\"utf-8\") def decode(x: bytes) -> str: return x.decode(\"utf-8\") l1 = sc.List[str]([\"Alice\", \"Bob\", \"Carol\"], connection=conn, serializer=encode, deserializer=decode) l2 = sc.List[str]([\"Dave\"], connection=conn, serializer=encode, deserializer=decode) l3 = sc.List[str]([\"Erin\"], connection=conn, serializer=encode, deserializer=decode) With factory: import sqlite3 import sqlitecollections as sc conn = sqlite3.connect(\"path/to/file.db\") def encode(x: str) -> bytes: return x.encode(\"utf-8\") def decode(x: bytes) -> str: return x.decode(\"utf-8\") list_ = sc.ListFactory[str](connection=conn, serializer=encode, deserializer=decode) l1 = list_([\"Alice\", \"Bob\", \"Carol\"]) l2 = list_([\"Dave\"]) l3 = list_([\"Erin\"]) Specifying a table name If you want to specify table names of containers from a factory, you can do that as follows: import sqlite3 import sqlitecollections as sc conn = sqlite3.connect(\"path/to/file.db\") def encode(x: str) -> bytes: return x.encode(\"utf-8\") def decode(x: bytes) -> str: return x.decode(\"utf-8\") list_ = sc.ListFactory[str](connection=conn, serializer=encode, deserializer=decode) l1 = list_[\"first_table_name\"]([\"Alice\", \"Bob\", \"Carol\"]) assert l1.table_name == \"first_table_name\" ListFactory ListFactory[T](...) Constructor of ListFactory which constructs List . Type Parameters: T : value type of the List Arguments: connection : str or sqlite3.Connection , optional, default= None ; If None , temporary file is automatically created. If connection is a str , it will be used as the sqlite3 database file name. You can pass a sqlite3.Connection directly. table_name : str , optional, default= None ; Table name of containers from this factory. This argument is assumed not to be specified directly by users. If None , an auto-generated unique name will be used. serializer : Callable[[T], bytes] , optional, default= None ; Function to serialize value. If None , pickle.dumps is used. deserializer : Callable[[bytes], T] , optional, default= None ; Function to deserialize value. If None , pickle.loads is used. list_(data) Construct List[T] with connection, serializer and deserializer preset from ListFactory[T] list_ . Arguments: data : Iterable[T] , optional, defualt= None ; Initial data. Return value: List[T] : connection, serializer and deserializer are the same as those of the factory list_ . create(data) Construct List[T] with connection, serializer and deserializer preset from the factory. Arguments: data : Iterable[T] , optional, defualt= None ; Initial data. Return value: List[T] : connection, serializer and deserializer are the same as those of the factory. f[t] Return a copy of this factory f that creates container with table name t . Arguments: t : str ; the table name Return value: ListFactory[T] : connection, serializer and deserializer are the same as those of this factory and the table name of the List[T] from this return value will be set to t . === DictFactory DictFactory[KT, VT](...) Constructor of DictFactory which constructs Dict . Type Parameters: KT : key type of the Dict VT : value type of the Dict Arguments: connection : str or sqlite3.Connection , optional, default= None ; If None , temporary file is automatically created. If connection is a str , it will be used as the sqlite3 database file name. You can pass a sqlite3.Connection directly. table_name : str , optional, default= None ; Table name of containers from this factory. This argument is assumed not to be specified directly by users. If None , an auto-generated unique name will be used. key_serializer : Callable[[KT], bytes] , optional, default= None ; Function to serialize key. If None , pickle.dumps is used. key_deserializer : Callable[[bytes], KT] , optional, default= None ; Function to deserialize key. If None , pickle.loads is used. value_serializer : Callable[[VT], bytes] , optional, default= None ; Function to serialize value. If None , key_serializer is used. value_deserializer : Callable[[bytes], VT] , optional, default= None ; Function to deserialize value. If None , key_deserializer is used. dict_(data, **kwargs) Construct Dict[KT, VT] with connection, key*serializer, etc., preset from DictFactory[KT, VT] dict* . Arguments: data : Mapping[KT, VT] or Iterable[Tuple[KT, VT]] , optional, defualt= None ; Initial data. **kwargs : VT , optional; Appended to initial data. Return value: Dict[KT, VT] : connection, key*serializers, etc., are the same as those of the factory dict* . create(data, **kwargs) Construct Dict[KT, VT] with connection, key_serializer, etc., preset from the factory. Arguments: data : Mapping[KT, VT] or Iterable[Tuple[KT, VT]] , optional, defualt= None ; Initial data. **kwargs : VT , optional; Appended to initial data. Return value: Dict[KT, VT] : connection, key_serializers, etc., are the same as those of the factory. f[t] Return a copy of this factory f that creates container with table name t . Arguments: t : str ; the table name Return value: DictFactory[KT, VT] : connection, key_serializer, key_deserializer, value_serializer and value_deserializer are the same as those of this factory and the table name of the Dict[KT, VT] from this return value will be set to t . === SetFactory SetFactory[T](...) Constructor of SetFactory which constructs Set . Type Parameters: T : value type of the Set Arguments: connection : str or sqlite3.Connection , optional, default= None ; If None , temporary file is automatically created. If connection is a str , it will be used as the sqlite3 database file name. You can pass a sqlite3.Connection directly. table_name : str , optional, default= None ; Table name of containers from this factory. This argument is assumed not to be specified directly by users. If None , an auto-generated unique name will be used. serializer : Callable[[T], bytes] , optional, default= None ; Function to serialize value. If None , pickle.dumps is used. deserializer : Callable[[bytes], T] , optional, default= None ; Function to deserialize value. If None , pickle.loads is used. set_(data) Construct Set[T] with connection, serializer and deserializer preset from SetFactory[T] set_ . Arguments: data : Iterable[T] , optional, defualt= None ; Initial data. Return value: Set[T] : connection, serializer and deserializer are the same as those of the factory set_ . create(data) Construct Set[T] with connection, serializer and deserializer preset from the factory. Arguments: data : Iterable[T] , optional, defualt= None ; Initial data. Return value: Set[T] : connection, serializer and deserializer are the same as those of the factory. f[t] Return a copy of this factory f that creates container with table name t . Arguments: t : str ; the table name Return value: SetFactory[T] : connection, serializer and deserializer are the same as those of this factory and the table name of the Set[T] from this return value will be set to t . ===","title":"factory"},{"location":"usage/factory/#factory-module","text":"factory module contains a factory for each container: ListFactory for List , SetFactory for Set and DictFactory for Dict . They replace constructors of each container that require extra arguments such as connection , serializer , deserializer etc., and allow users to construct a container without specifying those extra arguments.","title":"factory module"},{"location":"usage/factory/#example","text":"","title":"Example"},{"location":"usage/factory/#basic-usage","text":"The results of the following two examples are almost the same (except for the auto-generated table names). Without factory: import sqlite3 import sqlitecollections as sc conn = sqlite3.connect(\"path/to/file.db\") def encode(x: str) -> bytes: return x.encode(\"utf-8\") def decode(x: bytes) -> str: return x.decode(\"utf-8\") l1 = sc.List[str]([\"Alice\", \"Bob\", \"Carol\"], connection=conn, serializer=encode, deserializer=decode) l2 = sc.List[str]([\"Dave\"], connection=conn, serializer=encode, deserializer=decode) l3 = sc.List[str]([\"Erin\"], connection=conn, serializer=encode, deserializer=decode) With factory: import sqlite3 import sqlitecollections as sc conn = sqlite3.connect(\"path/to/file.db\") def encode(x: str) -> bytes: return x.encode(\"utf-8\") def decode(x: bytes) -> str: return x.decode(\"utf-8\") list_ = sc.ListFactory[str](connection=conn, serializer=encode, deserializer=decode) l1 = list_([\"Alice\", \"Bob\", \"Carol\"]) l2 = list_([\"Dave\"]) l3 = list_([\"Erin\"])","title":"Basic usage"},{"location":"usage/factory/#specifying-a-table-name","text":"If you want to specify table names of containers from a factory, you can do that as follows: import sqlite3 import sqlitecollections as sc conn = sqlite3.connect(\"path/to/file.db\") def encode(x: str) -> bytes: return x.encode(\"utf-8\") def decode(x: bytes) -> str: return x.decode(\"utf-8\") list_ = sc.ListFactory[str](connection=conn, serializer=encode, deserializer=decode) l1 = list_[\"first_table_name\"]([\"Alice\", \"Bob\", \"Carol\"]) assert l1.table_name == \"first_table_name\"","title":"Specifying a table name"},{"location":"usage/factory/#listfactory","text":"","title":"ListFactory"},{"location":"usage/factory/#listfactoryt","text":"Constructor of ListFactory which constructs List .","title":"ListFactory[T](...)"},{"location":"usage/factory/#type-parameters","text":"T : value type of the List","title":"Type Parameters:"},{"location":"usage/factory/#arguments","text":"connection : str or sqlite3.Connection , optional, default= None ; If None , temporary file is automatically created. If connection is a str , it will be used as the sqlite3 database file name. You can pass a sqlite3.Connection directly. table_name : str , optional, default= None ; Table name of containers from this factory. This argument is assumed not to be specified directly by users. If None , an auto-generated unique name will be used. serializer : Callable[[T], bytes] , optional, default= None ; Function to serialize value. If None , pickle.dumps is used. deserializer : Callable[[bytes], T] , optional, default= None ; Function to deserialize value. If None , pickle.loads is used.","title":"Arguments:"},{"location":"usage/factory/#list_data","text":"Construct List[T] with connection, serializer and deserializer preset from ListFactory[T] list_ .","title":"list_(data)"},{"location":"usage/factory/#arguments_1","text":"data : Iterable[T] , optional, defualt= None ; Initial data.","title":"Arguments:"},{"location":"usage/factory/#return-value","text":"List[T] : connection, serializer and deserializer are the same as those of the factory list_ .","title":"Return value:"},{"location":"usage/factory/#createdata","text":"Construct List[T] with connection, serializer and deserializer preset from the factory.","title":"create(data)"},{"location":"usage/factory/#arguments_2","text":"data : Iterable[T] , optional, defualt= None ; Initial data.","title":"Arguments:"},{"location":"usage/factory/#return-value_1","text":"List[T] : connection, serializer and deserializer are the same as those of the factory.","title":"Return value:"},{"location":"usage/factory/#ft","text":"Return a copy of this factory f that creates container with table name t .","title":"f[t]"},{"location":"usage/factory/#arguments_3","text":"t : str ; the table name","title":"Arguments:"},{"location":"usage/factory/#return-value_2","text":"ListFactory[T] : connection, serializer and deserializer are the same as those of this factory and the table name of the List[T] from this return value will be set to t . ===","title":"Return value:"},{"location":"usage/factory/#dictfactory","text":"","title":"DictFactory"},{"location":"usage/factory/#dictfactorykt-vt","text":"Constructor of DictFactory which constructs Dict .","title":"DictFactory[KT, VT](...)"},{"location":"usage/factory/#type-parameters_1","text":"KT : key type of the Dict VT : value type of the Dict","title":"Type Parameters:"},{"location":"usage/factory/#arguments_4","text":"connection : str or sqlite3.Connection , optional, default= None ; If None , temporary file is automatically created. If connection is a str , it will be used as the sqlite3 database file name. You can pass a sqlite3.Connection directly. table_name : str , optional, default= None ; Table name of containers from this factory. This argument is assumed not to be specified directly by users. If None , an auto-generated unique name will be used. key_serializer : Callable[[KT], bytes] , optional, default= None ; Function to serialize key. If None , pickle.dumps is used. key_deserializer : Callable[[bytes], KT] , optional, default= None ; Function to deserialize key. If None , pickle.loads is used. value_serializer : Callable[[VT], bytes] , optional, default= None ; Function to serialize value. If None , key_serializer is used. value_deserializer : Callable[[bytes], VT] , optional, default= None ; Function to deserialize value. If None , key_deserializer is used.","title":"Arguments:"},{"location":"usage/factory/#dict_data-kwargs","text":"Construct Dict[KT, VT] with connection, key*serializer, etc., preset from DictFactory[KT, VT] dict* .","title":"dict_(data, **kwargs)"},{"location":"usage/factory/#arguments_5","text":"data : Mapping[KT, VT] or Iterable[Tuple[KT, VT]] , optional, defualt= None ; Initial data. **kwargs : VT , optional; Appended to initial data.","title":"Arguments:"},{"location":"usage/factory/#return-value_3","text":"Dict[KT, VT] : connection, key*serializers, etc., are the same as those of the factory dict* .","title":"Return value:"},{"location":"usage/factory/#createdata-kwargs","text":"Construct Dict[KT, VT] with connection, key_serializer, etc., preset from the factory.","title":"create(data, **kwargs)"},{"location":"usage/factory/#arguments_6","text":"data : Mapping[KT, VT] or Iterable[Tuple[KT, VT]] , optional, defualt= None ; Initial data. **kwargs : VT , optional; Appended to initial data.","title":"Arguments:"},{"location":"usage/factory/#return-value_4","text":"Dict[KT, VT] : connection, key_serializers, etc., are the same as those of the factory.","title":"Return value:"},{"location":"usage/factory/#ft_1","text":"Return a copy of this factory f that creates container with table name t .","title":"f[t]"},{"location":"usage/factory/#arguments_7","text":"t : str ; the table name","title":"Arguments:"},{"location":"usage/factory/#return-value_5","text":"DictFactory[KT, VT] : connection, key_serializer, key_deserializer, value_serializer and value_deserializer are the same as those of this factory and the table name of the Dict[KT, VT] from this return value will be set to t . ===","title":"Return value:"},{"location":"usage/factory/#setfactory","text":"","title":"SetFactory"},{"location":"usage/factory/#setfactoryt","text":"Constructor of SetFactory which constructs Set .","title":"SetFactory[T](...)"},{"location":"usage/factory/#type-parameters_2","text":"T : value type of the Set","title":"Type Parameters:"},{"location":"usage/factory/#arguments_8","text":"connection : str or sqlite3.Connection , optional, default= None ; If None , temporary file is automatically created. If connection is a str , it will be used as the sqlite3 database file name. You can pass a sqlite3.Connection directly. table_name : str , optional, default= None ; Table name of containers from this factory. This argument is assumed not to be specified directly by users. If None , an auto-generated unique name will be used. serializer : Callable[[T], bytes] , optional, default= None ; Function to serialize value. If None , pickle.dumps is used. deserializer : Callable[[bytes], T] , optional, default= None ; Function to deserialize value. If None , pickle.loads is used.","title":"Arguments:"},{"location":"usage/factory/#set_data","text":"Construct Set[T] with connection, serializer and deserializer preset from SetFactory[T] set_ .","title":"set_(data)"},{"location":"usage/factory/#arguments_9","text":"data : Iterable[T] , optional, defualt= None ; Initial data.","title":"Arguments:"},{"location":"usage/factory/#return-value_6","text":"Set[T] : connection, serializer and deserializer are the same as those of the factory set_ .","title":"Return value:"},{"location":"usage/factory/#createdata_1","text":"Construct Set[T] with connection, serializer and deserializer preset from the factory.","title":"create(data)"},{"location":"usage/factory/#arguments_10","text":"data : Iterable[T] , optional, defualt= None ; Initial data.","title":"Arguments:"},{"location":"usage/factory/#return-value_7","text":"Set[T] : connection, serializer and deserializer are the same as those of the factory.","title":"Return value:"},{"location":"usage/factory/#ft_2","text":"Return a copy of this factory f that creates container with table name t .","title":"f[t]"},{"location":"usage/factory/#arguments_11","text":"t : str ; the table name","title":"Arguments:"},{"location":"usage/factory/#return-value_8","text":"SetFactory[T] : connection, serializer and deserializer are the same as those of this factory and the table name of the Set[T] from this return value will be set to t . ===","title":"Return value:"},{"location":"usage/list/","text":"List List is a container compatible with the built-in list , which serializes values and stores them in a sqlite3 database. List[T](...) Constructor. Type Parameters: T : value type Arguments: data : Iterable[T] , optional, positional-only argument, defualt= None ; Initial data. If None or no argument is given, persistent data is used as is if available, otherwise persistent data in the corresponding table is cleared and given data is stored instead. connection : str or sqlite3.Connection , optional, default= None ; If None , temporary file is automatically created. If connection is a str , it will be used as the sqlite3 database file name. You can pass a sqlite3.Connection directly. table_name : str , optional, default= None ; Table name of this container. If None , an auto-generated unique name will be used. Available characters are letters, numbers, and underscores ( _ ). serializer : Callable[[T], bytes] , optional, default= None ; Function to serialize value. If None , pickle.dumps is used. deserializer : Callable[[bytes], T] , optional, default= None ; Function to deserialize value. If None , pickle.loads is used. persist : bool , optional, default= True ; If True , table won't be deleted even when the object is deleted. If False , the table is deleted when this object is deleted. x in s True if an item of s is equal to x , else False Arguments: x : object ; an object to be checked Return value: bool : True if x is in s and False otherwise. x not in s False if an item of s is equal to x , else True Arguments: x : object ; an object to be checked Return value: bool : False if x is in s and True otherwise. s + t The concatenation of s and t Arguments: t : Iterable[T] ; An iterable to be concatenated. Return value: List[T] : The concatenation of s and t . s * n or n * s equivalent to adding s to itself n times. Arguments: n : int ; Number of times to repeat. Return value: List[T] : a list of n times s was repeated. s[i] i -th item of s , origin 0 . Arguments: i : int ; Item index. If it is negative, it is equivalent to len(s) + i . Return value: T : i -th item of s , origin 0 . s[i:j] Slice of s from i to j . Arguments: i : int or None ; Item index where the slice starts from. If None , it is treated as 0 . j : int or None ; Item index where the slice stops at. If None , it is treated as len(s) . Return value: List[T] : Slice of s from i to j . s[i:j:k] Slice of s from i to j with step k Arguments: i : int or None ; Item index where the slice starts from. If None , it is treated as 0 . j : int or None ; Item index where the slice stops at. If None , it is treated as len(s) . k : int or None ; Step of the slice. If None , it is treated as 1 . Return value: List[T] : Slice of s from i to j with step k . len(s) Return the number of items in s: List[T] Return value: int : The number of items in s index(x[, i[, j]]]) Return index of the first occurrence of x in the list (at or after index i and before index j ). Raise ValueError if x is not in the list. Arguments: x : T ; Value to retrieve corresponding index if exists. i : int , optional, default= None ; First index to look up the value. If it is None , start from the first element of the list. j : int , optional, default= None ; Index before the last one to look for a value. If None , search to the end. Return value: int : Index of the first occurrence of x in the list. count(x) Return total number of occurrences of x in the list. Arguments: x : T ; Value that counts the number of occurrences. Return value: int : The number of occurrences of x in the list. s[i] = x Replace item i of s by x . Arguments: i : int ; Item index to be set. If it is negative, it is equivalent to len(s) + i x : T ; Value to be set. Return value: None . del s[i] Remove item i of s . Arguments: i : int ; Item index to be removed. If it is negative, it is equivalent to len(s) + i . Return value: None . s[i:j] = t Replace slice of s from i to j by the contents of the iterable t . Arguments: i : int or None ; Item index where the slice starts from. If None , it is treated as 0 . j : int or None ; Item index where the slice stops at. If None , it is treated as len(s) . t : Iterable[T] ; Iterable to be inserted. Return value: None . del s[i:j] Remove slice of s from i to j . Arguments: i : int or None ; Item index where the slice starts from. If None , it is treated as 0 . j : int or None ; Item index where the slice stops at. If None , it is treated as len(s) . Return value: None . s[i:j:k] = t Replace the elements of s[i:j:k] by those ofthe iterable t . The length must be the same. Otherwise, ValueError will be raised. Arguments: i : int or None ; Item index where the slice starts from. If None , it is treated as 0 . j : int or None ; Item index where the slice stops at. If None , it is treated as len(s) . k : int or None ; Step of the slice. If None , it is treated as 1 . t : Iterable[T] ; Iterable to be substituted. The length must be the same as that of the slice. Return value: None . del s[i:j:k] Remove the elements of s[i:j:k] from the list. Arguments: i : int or None ; Item index where the slice starts from. If None , it is treated as 0 . j : int or None ; Item index where the slice stops at. If None , it is treated as len(s) . k : int or None ; Step of the slice. If None , it is treated as 1 . Return value: None . append(x) Append x to the end of the sequence. Arguments: x : T ; Item to be appended. Return value; None . clear() Remove all items from the list. Return value: None . copy() Return a copy of the list. The actual behavior is to create a table with a unique table name and copy the items to the new table. Therefore, unlike the built-in list copy, the behavior is similar to deep copy. Be aware that the copied list is volatile. Return value: List[T] : A volatile copy of the list. extend(t) Concatenate the list and t . Arguments: t : Iterable[T] ; An iterable to be concatenated. Return value: None . s += t Concatenate s and t . Arguments: t : Iterable[T] ; An iterable to be concatenated. Return value: None . s *= n Update s with its contents repeated n times. Arguments: n : int ; Number of times to repeat. Return value: None . insert(i, x) Insert x into the list at the index i . Arguments: i : int ; Index to be inserted. x : T ; Item to be inserted. Return value: None . pop(i) Retrieve the item at i and also remove it from s. Arguments: i : int or None , optional, default= None ; Index to be retrieved and removed. If it is None , it is treated as the last index of the list. Return value: T : i -th item of s , origin 0 . remove(x) Remove the first item of s whose value is equal to x . Arguments: x : T ; Item to be removed. Return value: None . reverse() Reverse the items of the list in place. Return value: None . sort(reverse, key) Sort the items of the list in place. The value of reverse can be either True or False , resulting in descending or ascending order, respectively. key specifies a function of one argument that is used to extract a comparison key from each list element. Arguments: reverse : bool , optional, default= False ; By default, the order is ascending, but if this value is True , the order will be descending. key : Callable[[T], Any] , optional, default= None ; Function to extract a comparison key from each list element. Return value: None .","title":"List"},{"location":"usage/list/#list","text":"List is a container compatible with the built-in list , which serializes values and stores them in a sqlite3 database.","title":"List"},{"location":"usage/list/#listt","text":"Constructor.","title":"List[T](...)"},{"location":"usage/list/#type-parameters","text":"T : value type","title":"Type Parameters:"},{"location":"usage/list/#arguments","text":"data : Iterable[T] , optional, positional-only argument, defualt= None ; Initial data. If None or no argument is given, persistent data is used as is if available, otherwise persistent data in the corresponding table is cleared and given data is stored instead. connection : str or sqlite3.Connection , optional, default= None ; If None , temporary file is automatically created. If connection is a str , it will be used as the sqlite3 database file name. You can pass a sqlite3.Connection directly. table_name : str , optional, default= None ; Table name of this container. If None , an auto-generated unique name will be used. Available characters are letters, numbers, and underscores ( _ ). serializer : Callable[[T], bytes] , optional, default= None ; Function to serialize value. If None , pickle.dumps is used. deserializer : Callable[[bytes], T] , optional, default= None ; Function to deserialize value. If None , pickle.loads is used. persist : bool , optional, default= True ; If True , table won't be deleted even when the object is deleted. If False , the table is deleted when this object is deleted.","title":"Arguments:"},{"location":"usage/list/#x-in-s","text":"True if an item of s is equal to x , else False","title":"x in s"},{"location":"usage/list/#arguments_1","text":"x : object ; an object to be checked","title":"Arguments:"},{"location":"usage/list/#return-value","text":"bool : True if x is in s and False otherwise.","title":"Return value:"},{"location":"usage/list/#x-not-in-s","text":"False if an item of s is equal to x , else True","title":"x not in s"},{"location":"usage/list/#arguments_2","text":"x : object ; an object to be checked","title":"Arguments:"},{"location":"usage/list/#return-value_1","text":"bool : False if x is in s and True otherwise.","title":"Return value:"},{"location":"usage/list/#s-t","text":"The concatenation of s and t","title":"s + t"},{"location":"usage/list/#arguments_3","text":"t : Iterable[T] ; An iterable to be concatenated.","title":"Arguments:"},{"location":"usage/list/#return-value_2","text":"List[T] : The concatenation of s and t .","title":"Return value:"},{"location":"usage/list/#s-n-or-n-s","text":"equivalent to adding s to itself n times.","title":"s * n or n * s"},{"location":"usage/list/#arguments_4","text":"n : int ; Number of times to repeat.","title":"Arguments:"},{"location":"usage/list/#return-value_3","text":"List[T] : a list of n times s was repeated.","title":"Return value:"},{"location":"usage/list/#si","text":"i -th item of s , origin 0 .","title":"s[i]"},{"location":"usage/list/#arguments_5","text":"i : int ; Item index. If it is negative, it is equivalent to len(s) + i .","title":"Arguments:"},{"location":"usage/list/#return-value_4","text":"T : i -th item of s , origin 0 .","title":"Return value:"},{"location":"usage/list/#sij","text":"Slice of s from i to j .","title":"s[i:j]"},{"location":"usage/list/#arguments_6","text":"i : int or None ; Item index where the slice starts from. If None , it is treated as 0 . j : int or None ; Item index where the slice stops at. If None , it is treated as len(s) .","title":"Arguments:"},{"location":"usage/list/#return-value_5","text":"List[T] : Slice of s from i to j .","title":"Return value:"},{"location":"usage/list/#sijk","text":"Slice of s from i to j with step k","title":"s[i:j:k]"},{"location":"usage/list/#arguments_7","text":"i : int or None ; Item index where the slice starts from. If None , it is treated as 0 . j : int or None ; Item index where the slice stops at. If None , it is treated as len(s) . k : int or None ; Step of the slice. If None , it is treated as 1 .","title":"Arguments:"},{"location":"usage/list/#return-value_6","text":"List[T] : Slice of s from i to j with step k .","title":"Return value:"},{"location":"usage/list/#lens","text":"Return the number of items in s: List[T]","title":"len(s)"},{"location":"usage/list/#return-value_7","text":"int : The number of items in s","title":"Return value:"},{"location":"usage/list/#indexx-i-j","text":"Return index of the first occurrence of x in the list (at or after index i and before index j ). Raise ValueError if x is not in the list.","title":"index(x[, i[, j]]])"},{"location":"usage/list/#arguments_8","text":"x : T ; Value to retrieve corresponding index if exists. i : int , optional, default= None ; First index to look up the value. If it is None , start from the first element of the list. j : int , optional, default= None ; Index before the last one to look for a value. If None , search to the end.","title":"Arguments:"},{"location":"usage/list/#return-value_8","text":"int : Index of the first occurrence of x in the list.","title":"Return value:"},{"location":"usage/list/#countx","text":"Return total number of occurrences of x in the list.","title":"count(x)"},{"location":"usage/list/#arguments_9","text":"x : T ; Value that counts the number of occurrences.","title":"Arguments:"},{"location":"usage/list/#return-value_9","text":"int : The number of occurrences of x in the list.","title":"Return value:"},{"location":"usage/list/#si-x","text":"Replace item i of s by x .","title":"s[i] = x"},{"location":"usage/list/#arguments_10","text":"i : int ; Item index to be set. If it is negative, it is equivalent to len(s) + i x : T ; Value to be set.","title":"Arguments:"},{"location":"usage/list/#return-value_10","text":"None .","title":"Return value:"},{"location":"usage/list/#del-si","text":"Remove item i of s .","title":"del s[i]"},{"location":"usage/list/#arguments_11","text":"i : int ; Item index to be removed. If it is negative, it is equivalent to len(s) + i .","title":"Arguments:"},{"location":"usage/list/#return-value_11","text":"None .","title":"Return value:"},{"location":"usage/list/#sij-t","text":"Replace slice of s from i to j by the contents of the iterable t .","title":"s[i:j] = t"},{"location":"usage/list/#arguments_12","text":"i : int or None ; Item index where the slice starts from. If None , it is treated as 0 . j : int or None ; Item index where the slice stops at. If None , it is treated as len(s) . t : Iterable[T] ; Iterable to be inserted.","title":"Arguments:"},{"location":"usage/list/#return-value_12","text":"None .","title":"Return value:"},{"location":"usage/list/#del-sij","text":"Remove slice of s from i to j .","title":"del s[i:j]"},{"location":"usage/list/#arguments_13","text":"i : int or None ; Item index where the slice starts from. If None , it is treated as 0 . j : int or None ; Item index where the slice stops at. If None , it is treated as len(s) .","title":"Arguments:"},{"location":"usage/list/#return-value_13","text":"None .","title":"Return value:"},{"location":"usage/list/#sijk-t","text":"Replace the elements of s[i:j:k] by those ofthe iterable t . The length must be the same. Otherwise, ValueError will be raised.","title":"s[i:j:k] = t"},{"location":"usage/list/#arguments_14","text":"i : int or None ; Item index where the slice starts from. If None , it is treated as 0 . j : int or None ; Item index where the slice stops at. If None , it is treated as len(s) . k : int or None ; Step of the slice. If None , it is treated as 1 . t : Iterable[T] ; Iterable to be substituted. The length must be the same as that of the slice.","title":"Arguments:"},{"location":"usage/list/#return-value_14","text":"None .","title":"Return value:"},{"location":"usage/list/#del-sijk","text":"Remove the elements of s[i:j:k] from the list.","title":"del s[i:j:k]"},{"location":"usage/list/#arguments_15","text":"i : int or None ; Item index where the slice starts from. If None , it is treated as 0 . j : int or None ; Item index where the slice stops at. If None , it is treated as len(s) . k : int or None ; Step of the slice. If None , it is treated as 1 .","title":"Arguments:"},{"location":"usage/list/#return-value_15","text":"None .","title":"Return value:"},{"location":"usage/list/#appendx","text":"Append x to the end of the sequence.","title":"append(x)"},{"location":"usage/list/#arguments_16","text":"x : T ; Item to be appended.","title":"Arguments:"},{"location":"usage/list/#return-value_16","text":"None .","title":"Return value;"},{"location":"usage/list/#clear","text":"Remove all items from the list.","title":"clear()"},{"location":"usage/list/#return-value_17","text":"None .","title":"Return value:"},{"location":"usage/list/#copy","text":"Return a copy of the list. The actual behavior is to create a table with a unique table name and copy the items to the new table. Therefore, unlike the built-in list copy, the behavior is similar to deep copy. Be aware that the copied list is volatile.","title":"copy()"},{"location":"usage/list/#return-value_18","text":"List[T] : A volatile copy of the list.","title":"Return value:"},{"location":"usage/list/#extendt","text":"Concatenate the list and t .","title":"extend(t)"},{"location":"usage/list/#arguments_17","text":"t : Iterable[T] ; An iterable to be concatenated.","title":"Arguments:"},{"location":"usage/list/#return-value_19","text":"None .","title":"Return value:"},{"location":"usage/list/#s-t_1","text":"Concatenate s and t .","title":"s += t"},{"location":"usage/list/#arguments_18","text":"t : Iterable[T] ; An iterable to be concatenated.","title":"Arguments:"},{"location":"usage/list/#return-value_20","text":"None .","title":"Return value:"},{"location":"usage/list/#s-n","text":"Update s with its contents repeated n times.","title":"s *= n"},{"location":"usage/list/#arguments_19","text":"n : int ; Number of times to repeat.","title":"Arguments:"},{"location":"usage/list/#return-value_21","text":"None .","title":"Return value:"},{"location":"usage/list/#inserti-x","text":"Insert x into the list at the index i .","title":"insert(i, x)"},{"location":"usage/list/#arguments_20","text":"i : int ; Index to be inserted. x : T ; Item to be inserted.","title":"Arguments:"},{"location":"usage/list/#return-value_22","text":"None .","title":"Return value:"},{"location":"usage/list/#popi","text":"Retrieve the item at i and also remove it from s.","title":"pop(i)"},{"location":"usage/list/#arguments_21","text":"i : int or None , optional, default= None ; Index to be retrieved and removed. If it is None , it is treated as the last index of the list.","title":"Arguments:"},{"location":"usage/list/#return-value_23","text":"T : i -th item of s , origin 0 .","title":"Return value:"},{"location":"usage/list/#removex","text":"Remove the first item of s whose value is equal to x .","title":"remove(x)"},{"location":"usage/list/#arguments_22","text":"x : T ; Item to be removed.","title":"Arguments:"},{"location":"usage/list/#return-value_24","text":"None .","title":"Return value:"},{"location":"usage/list/#reverse","text":"Reverse the items of the list in place.","title":"reverse()"},{"location":"usage/list/#return-value_25","text":"None .","title":"Return value:"},{"location":"usage/list/#sortreverse-key","text":"Sort the items of the list in place. The value of reverse can be either True or False , resulting in descending or ascending order, respectively. key specifies a function of one argument that is used to extract a comparison key from each list element.","title":"sort(reverse, key)"},{"location":"usage/list/#arguments_23","text":"reverse : bool , optional, default= False ; By default, the order is ascending, but if this value is True , the order will be descending. key : Callable[[T], Any] , optional, default= None ; Function to extract a comparison key from each list element.","title":"Arguments:"},{"location":"usage/list/#return-value_26","text":"None .","title":"Return value:"},{"location":"usage/metadata/","text":"Metadata MetadataItem MetadataItem(...) Constructor for MetadataItem. Instances of this class are not supposed to be created directly by the user. Arguments: table_name : str ; table name. container_type : str ; container type name. schema_version : str ; schema version. table_name Read-only property for the table name. Return value: str : The table name. container_type Read-only property for the container type. Return value: str : The container type. schema_version Read-only property for the schema version Return value: str : The schema version. MetadataReader MetadataReader(...) Constructor for MetadataReader class which can iterate over all records in the given connection. Arguments: connection : str or sqlite3.Connection ; Connection to sqlite3 to get metadata. If connection is a str , it will be used as the sqlite3 database file name. You can pass a sqlite3.Connection directly. len(metadata_reader) Return the number of records in the metadata table read by metadata_reader . It coincides the number of collections in the sqlite3 database connected by metadata_reader._connection . Return value: int : The number of items in the metadata table. obj in metadata_reader Return whether if obj is in metadata_reader Arguments: obj : object ; object to be checked the membership. Return value: bool : Boolean value whether if metadata_item is in the metadata table. iter(metadata_reader) Return an iterator over the MetadataItem 's in metadata_reader It coincides the records of metadata table in the sqlite3 database connected by metadata_reader._connection . Return value: Iterator[MetadataItem] : an iterator over the MetadataItem 's in metadata_reader","title":"metadata"},{"location":"usage/metadata/#metadata","text":"","title":"Metadata"},{"location":"usage/metadata/#metadataitem","text":"","title":"MetadataItem"},{"location":"usage/metadata/#metadataitem_1","text":"Constructor for MetadataItem. Instances of this class are not supposed to be created directly by the user.","title":"MetadataItem(...)"},{"location":"usage/metadata/#arguments","text":"table_name : str ; table name. container_type : str ; container type name. schema_version : str ; schema version.","title":"Arguments:"},{"location":"usage/metadata/#table_name","text":"Read-only property for the table name.","title":"table_name"},{"location":"usage/metadata/#return-value","text":"str : The table name.","title":"Return value:"},{"location":"usage/metadata/#container_type","text":"Read-only property for the container type.","title":"container_type"},{"location":"usage/metadata/#return-value_1","text":"str : The container type.","title":"Return value:"},{"location":"usage/metadata/#schema_version","text":"Read-only property for the schema version","title":"schema_version"},{"location":"usage/metadata/#return-value_2","text":"str : The schema version.","title":"Return value:"},{"location":"usage/metadata/#metadatareader","text":"","title":"MetadataReader"},{"location":"usage/metadata/#metadatareader_1","text":"Constructor for MetadataReader class which can iterate over all records in the given connection.","title":"MetadataReader(...)"},{"location":"usage/metadata/#arguments_1","text":"connection : str or sqlite3.Connection ; Connection to sqlite3 to get metadata. If connection is a str , it will be used as the sqlite3 database file name. You can pass a sqlite3.Connection directly.","title":"Arguments:"},{"location":"usage/metadata/#lenmetadata_reader","text":"Return the number of records in the metadata table read by metadata_reader . It coincides the number of collections in the sqlite3 database connected by metadata_reader._connection .","title":"len(metadata_reader)"},{"location":"usage/metadata/#return-value_3","text":"int : The number of items in the metadata table.","title":"Return value:"},{"location":"usage/metadata/#obj-in-metadata_reader","text":"Return whether if obj is in metadata_reader","title":"obj in metadata_reader"},{"location":"usage/metadata/#arguments_2","text":"obj : object ; object to be checked the membership.","title":"Arguments:"},{"location":"usage/metadata/#return-value_4","text":"bool : Boolean value whether if metadata_item is in the metadata table.","title":"Return value:"},{"location":"usage/metadata/#itermetadata_reader","text":"Return an iterator over the MetadataItem 's in metadata_reader It coincides the records of metadata table in the sqlite3 database connected by metadata_reader._connection .","title":"iter(metadata_reader)"},{"location":"usage/metadata/#return-value_5","text":"Iterator[MetadataItem] : an iterator over the MetadataItem 's in metadata_reader","title":"Return value:"},{"location":"usage/set/","text":"Set Set is a container compatible with the built-in set , which serializes values and stores them in a sqlite3 database. Set[T](...) Constructor. Type Parameters: T : value type Arguments: data : Iterable[T] , optional, positional-only argument, defualt= None ; Initial data. If None or no argument is given, persistent data is used as is if available, otherwise persistent data in the corresponding table is cleared and given data is stored instead. connection : str or sqlite3.Connection , optional, default= None ; If None , temporary file is automatically created. If connection is a str , it will be used as the sqlite3 database file name. You can pass a sqlite3.Connection directly. table_name : str , optional, default= None ; Table name of this container. If None , an auto-generated unique name will be used. Available characters are letters, numbers, and underscores ( _ ). serializer : Callable[[T], bytes] , optional, default= None ; Function to serialize value. If None , pickle.dumps is used. deserializer : Callable[[bytes], T] , optional, default= None ; Function to deserialize value. If None , pickle.loads is used. persist : bool , optional, default= True ; If True , table won't be deleted even when the object is deleted. If False , the table is deleted when this object is deleted. len(s) Return the number of items in s: Set[T] Return value: int : The number of items in s x in s True if x is in s , else False Arguments: x : object ; an object to be checked Return value: bool : True if x is in s and False otherwise. x not in s False if x is in s , else True Arguments: x : object ; an object to be checked Return value: bool : False if x is in s and True otherwise. isdisjoint(other) Return True if the set has no elements in common with other . Arguments: other : Iterable[T] ; Iterable to check if disjoint. Return value: bool : True if the set is disjoint with other , False otherwise. issubset(other) Return True if every element in the set is in other . Arguments: other : Iterable[T] ; Iterable to check if this one contains the set. Return value: bool : True if the set is subset of other , False otherwise. s <= other Return True if every element in the set is in other . Argument: other : Iterable[T] ; Iterable to check if this one contains all the elements in the set. Return value: bool : True if the set is subset of other , False otherwise. s < other Return True if every element in the set is in other and s is not equal to other . Arguments: other : Iterable[T] ; Iterable to check if it contains all elements of the set and is not equal to the set. Return value: bool : True if the set is a proper subset of other , False otherwise. issuperset(other) Return True if every element in other is in the set. Arguments: other : Iterable[T] ; Iterable to check if the elements are contained. Return value: bool : True if the set is superset of other , False otherwise. s >= other Return True if every element in other is in the set. Argument: other : Iterable[T] ; Iterable to check if the elements are contained. Return value: bool : True if the set is superset of other , False otherwise. s > other Return True if every element in other is in the set and s is not equal to other . Arguments: other : Iterable[T] ; Iterable to check if it all elements are in the set and is not equal to the set. Return value: bool : True if the set is a proper superset of other , False otherwise. union(*others) Return a new set with elements from the set and all others . Arguments: others : Iterable[T] ; Iterables to take the union. Return value: Set[T] : A new set with elements from the set and all others . s | other Return a new set with elements from s and other . Arguments: other : Iterable[T] ; Iterable to take the union. Return value: Set[T] : A new set with elements from s and other . intersection(*others) Return a new set with elements common to the set and all others . Arguments: others : Iterable[T] ; Iterables to take the intersection. Return value: Set[T] : A new set with elements common to the set and all others . s & other Return a new set with elements common to s and other . Arguments: other : Iterable[T] ; Iterable to take the intersection. Return value: Set[T] : A new set with elements common to s and other . difference(*others) Return a new set with elements in the set that are not in the others . Arguments: others : Iterable[T] ; Iterables to take the difference. Return value: Set[T] : A new set with elements in the set that are not in the others . s - other Return a new set with elements in the set that are not in the other . Arguments: other : Iterable[T] ; Iterable to take the difference. Return value: Set[T] : A new set with elements in the set that are not in the other . symmetric_difference(other) Return a new set with elements in either the set or other but not both. Arguments: other : Iterable[T] ; Iterable to take the symmetric difference. Return value: Set[T] : A new set with elements in either the set or other but not both. s ^ other Return a new set with elements in either the set or other but not both. Arguments: other : Iterable[T] ; Iterable to take the symmetric difference. Return value: Set[T] : A new set with elements in either the set or other but not both. copy() Return a copy of the set. The actual behavior is to create a table with a unique table name and copy the elements to the new table. Therefore, unlike the built-in set copy, the behavior is similar to deep copy. Be aware that the copied set is volatile. Return value: Set[T] : A volatile copy of the set. update(*others) Update the set by adding elements from all others . Arguments: others : Iterable[T] ; Iterables to take the union. Return value: None . s |= other Update the set by adding elements from other . Arguments: other : Iterable[T] ; Iterable to take the union. Return value: None . intersection_update(*others) Update the set by keeping only elements found in the set and all others . Arguments: others : Iterable[T] ; Iterables to take the intersection. Return value: None . s &= other Update the set by keeping only elements found in the set and other . Arguments: other : Iterable[T] ; Iterable to take the intersection. Return value: None . symmetric_difference_update(other) Update the set by keeping only elements found in either the set or other but not both. Arguments: other : Iterable[T] ; Iterable to take the symmetric difference. Return value: None . s ^= other Update the set by keeping only elements found in either the set or other but not both. Arguments: other : Iterable[T] ; Iterable to take the symmetric difference. Return value: None . add(elem) Add an element elem to the set. Arguments: elem : T ; An element to be added. Return value: None . remove(elem) Remove an element elem from the set. Raises KeyError if elem is not contained in the set. Arguemnts: elem : T ; An element to be removed. Return value: None . discard(elem) Remove an element elem from the set if it is present. Arguments: elem : T ; An element to be removed. Return value: None . pop() Remove and return an arbitrary element from the set. Raises KeyError if the set is empty. Return value: T : An element in the set. clear() Remove all elements from the set. Return value: None .","title":"Set"},{"location":"usage/set/#set","text":"Set is a container compatible with the built-in set , which serializes values and stores them in a sqlite3 database.","title":"Set"},{"location":"usage/set/#sett","text":"Constructor.","title":"Set[T](...)"},{"location":"usage/set/#type-parameters","text":"T : value type","title":"Type Parameters:"},{"location":"usage/set/#arguments","text":"data : Iterable[T] , optional, positional-only argument, defualt= None ; Initial data. If None or no argument is given, persistent data is used as is if available, otherwise persistent data in the corresponding table is cleared and given data is stored instead. connection : str or sqlite3.Connection , optional, default= None ; If None , temporary file is automatically created. If connection is a str , it will be used as the sqlite3 database file name. You can pass a sqlite3.Connection directly. table_name : str , optional, default= None ; Table name of this container. If None , an auto-generated unique name will be used. Available characters are letters, numbers, and underscores ( _ ). serializer : Callable[[T], bytes] , optional, default= None ; Function to serialize value. If None , pickle.dumps is used. deserializer : Callable[[bytes], T] , optional, default= None ; Function to deserialize value. If None , pickle.loads is used. persist : bool , optional, default= True ; If True , table won't be deleted even when the object is deleted. If False , the table is deleted when this object is deleted.","title":"Arguments:"},{"location":"usage/set/#lens","text":"Return the number of items in s: Set[T]","title":"len(s)"},{"location":"usage/set/#return-value","text":"int : The number of items in s","title":"Return value:"},{"location":"usage/set/#x-in-s","text":"True if x is in s , else False","title":"x in s"},{"location":"usage/set/#arguments_1","text":"x : object ; an object to be checked","title":"Arguments:"},{"location":"usage/set/#return-value_1","text":"bool : True if x is in s and False otherwise.","title":"Return value:"},{"location":"usage/set/#x-not-in-s","text":"False if x is in s , else True","title":"x not in s"},{"location":"usage/set/#arguments_2","text":"x : object ; an object to be checked","title":"Arguments:"},{"location":"usage/set/#return-value_2","text":"bool : False if x is in s and True otherwise.","title":"Return value:"},{"location":"usage/set/#isdisjointother","text":"Return True if the set has no elements in common with other .","title":"isdisjoint(other)"},{"location":"usage/set/#arguments_3","text":"other : Iterable[T] ; Iterable to check if disjoint.","title":"Arguments:"},{"location":"usage/set/#return-value_3","text":"bool : True if the set is disjoint with other , False otherwise.","title":"Return value:"},{"location":"usage/set/#issubsetother","text":"Return True if every element in the set is in other .","title":"issubset(other)"},{"location":"usage/set/#arguments_4","text":"other : Iterable[T] ; Iterable to check if this one contains the set.","title":"Arguments:"},{"location":"usage/set/#return-value_4","text":"bool : True if the set is subset of other , False otherwise.","title":"Return value:"},{"location":"usage/set/#s-other","text":"Return True if every element in the set is in other .","title":"s &lt;= other"},{"location":"usage/set/#argument","text":"other : Iterable[T] ; Iterable to check if this one contains all the elements in the set.","title":"Argument:"},{"location":"usage/set/#return-value_5","text":"bool : True if the set is subset of other , False otherwise.","title":"Return value:"},{"location":"usage/set/#s-other_1","text":"Return True if every element in the set is in other and s is not equal to other .","title":"s &lt; other"},{"location":"usage/set/#arguments_5","text":"other : Iterable[T] ; Iterable to check if it contains all elements of the set and is not equal to the set.","title":"Arguments:"},{"location":"usage/set/#return-value_6","text":"bool : True if the set is a proper subset of other , False otherwise.","title":"Return value:"},{"location":"usage/set/#issupersetother","text":"Return True if every element in other is in the set.","title":"issuperset(other)"},{"location":"usage/set/#arguments_6","text":"other : Iterable[T] ; Iterable to check if the elements are contained.","title":"Arguments:"},{"location":"usage/set/#return-value_7","text":"bool : True if the set is superset of other , False otherwise.","title":"Return value:"},{"location":"usage/set/#s-other_2","text":"Return True if every element in other is in the set.","title":"s &gt;= other"},{"location":"usage/set/#argument_1","text":"other : Iterable[T] ; Iterable to check if the elements are contained.","title":"Argument:"},{"location":"usage/set/#return-value_8","text":"bool : True if the set is superset of other , False otherwise.","title":"Return value:"},{"location":"usage/set/#s-other_3","text":"Return True if every element in other is in the set and s is not equal to other .","title":"s &gt; other"},{"location":"usage/set/#arguments_7","text":"other : Iterable[T] ; Iterable to check if it all elements are in the set and is not equal to the set.","title":"Arguments:"},{"location":"usage/set/#return-value_9","text":"bool : True if the set is a proper superset of other , False otherwise.","title":"Return value:"},{"location":"usage/set/#unionothers","text":"Return a new set with elements from the set and all others .","title":"union(*others)"},{"location":"usage/set/#arguments_8","text":"others : Iterable[T] ; Iterables to take the union.","title":"Arguments:"},{"location":"usage/set/#return-value_10","text":"Set[T] : A new set with elements from the set and all others .","title":"Return value:"},{"location":"usage/set/#s-other_4","text":"Return a new set with elements from s and other .","title":"s | other"},{"location":"usage/set/#arguments_9","text":"other : Iterable[T] ; Iterable to take the union.","title":"Arguments:"},{"location":"usage/set/#return-value_11","text":"Set[T] : A new set with elements from s and other .","title":"Return value:"},{"location":"usage/set/#intersectionothers","text":"Return a new set with elements common to the set and all others .","title":"intersection(*others)"},{"location":"usage/set/#arguments_10","text":"others : Iterable[T] ; Iterables to take the intersection.","title":"Arguments:"},{"location":"usage/set/#return-value_12","text":"Set[T] : A new set with elements common to the set and all others .","title":"Return value:"},{"location":"usage/set/#s-other_5","text":"Return a new set with elements common to s and other .","title":"s &amp; other"},{"location":"usage/set/#arguments_11","text":"other : Iterable[T] ; Iterable to take the intersection.","title":"Arguments:"},{"location":"usage/set/#return-value_13","text":"Set[T] : A new set with elements common to s and other .","title":"Return value:"},{"location":"usage/set/#differenceothers","text":"Return a new set with elements in the set that are not in the others .","title":"difference(*others)"},{"location":"usage/set/#arguments_12","text":"others : Iterable[T] ; Iterables to take the difference.","title":"Arguments:"},{"location":"usage/set/#return-value_14","text":"Set[T] : A new set with elements in the set that are not in the others .","title":"Return value:"},{"location":"usage/set/#s-other_6","text":"Return a new set with elements in the set that are not in the other .","title":"s - other"},{"location":"usage/set/#arguments_13","text":"other : Iterable[T] ; Iterable to take the difference.","title":"Arguments:"},{"location":"usage/set/#return-value_15","text":"Set[T] : A new set with elements in the set that are not in the other .","title":"Return value:"},{"location":"usage/set/#symmetric_differenceother","text":"Return a new set with elements in either the set or other but not both.","title":"symmetric_difference(other)"},{"location":"usage/set/#arguments_14","text":"other : Iterable[T] ; Iterable to take the symmetric difference.","title":"Arguments:"},{"location":"usage/set/#return-value_16","text":"Set[T] : A new set with elements in either the set or other but not both.","title":"Return value:"},{"location":"usage/set/#s-other_7","text":"Return a new set with elements in either the set or other but not both.","title":"s ^ other"},{"location":"usage/set/#arguments_15","text":"other : Iterable[T] ; Iterable to take the symmetric difference.","title":"Arguments:"},{"location":"usage/set/#return-value_17","text":"Set[T] : A new set with elements in either the set or other but not both.","title":"Return value:"},{"location":"usage/set/#copy","text":"Return a copy of the set. The actual behavior is to create a table with a unique table name and copy the elements to the new table. Therefore, unlike the built-in set copy, the behavior is similar to deep copy. Be aware that the copied set is volatile.","title":"copy()"},{"location":"usage/set/#return-value_18","text":"Set[T] : A volatile copy of the set.","title":"Return value:"},{"location":"usage/set/#updateothers","text":"Update the set by adding elements from all others .","title":"update(*others)"},{"location":"usage/set/#arguments_16","text":"others : Iterable[T] ; Iterables to take the union.","title":"Arguments:"},{"location":"usage/set/#return-value_19","text":"None .","title":"Return value:"},{"location":"usage/set/#s-other_8","text":"Update the set by adding elements from other .","title":"s |= other"},{"location":"usage/set/#arguments_17","text":"other : Iterable[T] ; Iterable to take the union.","title":"Arguments:"},{"location":"usage/set/#return-value_20","text":"None .","title":"Return value:"},{"location":"usage/set/#intersection_updateothers","text":"Update the set by keeping only elements found in the set and all others .","title":"intersection_update(*others)"},{"location":"usage/set/#arguments_18","text":"others : Iterable[T] ; Iterables to take the intersection.","title":"Arguments:"},{"location":"usage/set/#return-value_21","text":"None .","title":"Return value:"},{"location":"usage/set/#s-other_9","text":"Update the set by keeping only elements found in the set and other .","title":"s &amp;= other"},{"location":"usage/set/#arguments_19","text":"other : Iterable[T] ; Iterable to take the intersection.","title":"Arguments:"},{"location":"usage/set/#return-value_22","text":"None .","title":"Return value:"},{"location":"usage/set/#symmetric_difference_updateother","text":"Update the set by keeping only elements found in either the set or other but not both.","title":"symmetric_difference_update(other)"},{"location":"usage/set/#arguments_20","text":"other : Iterable[T] ; Iterable to take the symmetric difference.","title":"Arguments:"},{"location":"usage/set/#return-value_23","text":"None .","title":"Return value:"},{"location":"usage/set/#s-other_10","text":"Update the set by keeping only elements found in either the set or other but not both.","title":"s ^= other"},{"location":"usage/set/#arguments_21","text":"other : Iterable[T] ; Iterable to take the symmetric difference.","title":"Arguments:"},{"location":"usage/set/#return-value_24","text":"None .","title":"Return value:"},{"location":"usage/set/#addelem","text":"Add an element elem to the set.","title":"add(elem)"},{"location":"usage/set/#arguments_22","text":"elem : T ; An element to be added.","title":"Arguments:"},{"location":"usage/set/#return-value_25","text":"None .","title":"Return value:"},{"location":"usage/set/#removeelem","text":"Remove an element elem from the set. Raises KeyError if elem is not contained in the set.","title":"remove(elem)"},{"location":"usage/set/#arguemnts","text":"elem : T ; An element to be removed.","title":"Arguemnts:"},{"location":"usage/set/#return-value_26","text":"None .","title":"Return value:"},{"location":"usage/set/#discardelem","text":"Remove an element elem from the set if it is present.","title":"discard(elem)"},{"location":"usage/set/#arguments_23","text":"elem : T ; An element to be removed.","title":"Arguments:"},{"location":"usage/set/#return-value_27","text":"None .","title":"Return value:"},{"location":"usage/set/#pop","text":"Remove and return an arbitrary element from the set. Raises KeyError if the set is empty.","title":"pop()"},{"location":"usage/set/#return-value_28","text":"T : An element in the set.","title":"Return value:"},{"location":"usage/set/#clear","text":"Remove all elements from the set.","title":"clear()"},{"location":"usage/set/#return-value_29","text":"None .","title":"Return value:"},{"location":"usage/dictview/itemsview/","text":"ItemsView ItemsView is a view object which is returned by dict.items() . It provides a dynamic view on the dictionary's (key, value) tuples, which means when dictionay changes, the view reflects these changes. len(itemsview) Return the number of items in the dictionary d: Dict[KT, VT] where itemsview=d.items() . Return value: int : The number of items in d iter(itemsview) Return an iterator over the (key, value) tuples in the dictionary. The order of the items is guaranteed to be inserted order. Return value: Iterable[Tuple[_KT_co, _VT_co]] : The iterator over the keys in the dictionary. item in itemsview Return whether if item is in the dictionary. Arguments: item : object ; An object to be checked Return value: bool : True if item is in the dictionary and False otherwise. reversed(itemsview) Return a reverse iterator over the (key, value) tuples of the dictionary. (provided only python version 3.8 and above) Return value: Iterator[Tuple[_KT_co, _VT_co]] : The reverse iterator over the (key, value) tuples in the dictonary. itemsview & other Return a set with elements common to itemsview and other . Arguments: other : Iterable[Any] ; Iterable to take the intersection. Return value: Set[Tuple[_KT_co, _VT_co]] : A set with elements common to itemsview and other . other & itemsview Return a set with elements common to itemsview and other . Arguments: other : Iterable[_T] ; Iterable to take the intersection. Return value: Set[_T] : A set with elements common to itemsview and other . itemsview | other Return a new set with elements from itemsview and other . Arguments: other : Iterable[_T] ; Iterable to take the union. Return value: Set[Union[Tuple[_KT_co, _VT_co], _T]] : A new set with elements from itemsview and other . other | itemsview Return a new set with elements from itemsview and other . Arguments: other : Iterable[_T] ; Iterable to take the union. Return value: Set[Union[Tuple[_KT_co, _VT_co], _T]] : A new set with elements from itemsview and other . itemsview - other Return a new set with elements in the itemsview that are not in the other . Arguments: other : Iterable[Any] ; Iterable to take the difference. Return value: Set[Tuple[_KT_co, _VT_co]] : A new set with elements in the set that are not in the other . other - itemsview Return a new set with elements in the other that are not in the itemsview . Arguments: other : Iterable[_T] ; Iterable to take the difference. Return value: Set[_T] : A new set with elements in the other that are not in the itemsview . itemsview ^ other Return a new set with elements in either the itemsview or other but not both. Arguments: other : Iterable[_T] ; Iterable to take the symmetric difference. Return value Set[Union[Tuple[_KT_co, _VT_co], _T]] : A new set with elements in either the itemsview or other but not both. other ^ itemsview Return a new set with elements in either the itemsview or other but not both. Arguments: other : Iterable[_T] ; Iterable to take the symmetric difference. Return value Set[Union[Tuple[_KT_co, _VT_co], _T]] : A new set with elements in either the itemsview or other but not both. itemsview.mapping Return a MappingProxyType that wraps the original dictionary to which the view refers. (provided only python version 3.10 and above) Return value MappingProxyType : A read-only proxy of the original dictionary.","title":"ItemsView"},{"location":"usage/dictview/itemsview/#itemsview","text":"ItemsView is a view object which is returned by dict.items() . It provides a dynamic view on the dictionary's (key, value) tuples, which means when dictionay changes, the view reflects these changes.","title":"ItemsView"},{"location":"usage/dictview/itemsview/#lenitemsview","text":"Return the number of items in the dictionary d: Dict[KT, VT] where itemsview=d.items() .","title":"len(itemsview)"},{"location":"usage/dictview/itemsview/#return-value","text":"int : The number of items in d","title":"Return value:"},{"location":"usage/dictview/itemsview/#iteritemsview","text":"Return an iterator over the (key, value) tuples in the dictionary. The order of the items is guaranteed to be inserted order.","title":"iter(itemsview)"},{"location":"usage/dictview/itemsview/#return-value_1","text":"Iterable[Tuple[_KT_co, _VT_co]] : The iterator over the keys in the dictionary.","title":"Return value:"},{"location":"usage/dictview/itemsview/#item-in-itemsview","text":"Return whether if item is in the dictionary.","title":"item in itemsview"},{"location":"usage/dictview/itemsview/#arguments","text":"item : object ; An object to be checked","title":"Arguments:"},{"location":"usage/dictview/itemsview/#return-value_2","text":"bool : True if item is in the dictionary and False otherwise.","title":"Return value:"},{"location":"usage/dictview/itemsview/#reverseditemsview","text":"Return a reverse iterator over the (key, value) tuples of the dictionary. (provided only python version 3.8 and above)","title":"reversed(itemsview)"},{"location":"usage/dictview/itemsview/#return-value_3","text":"Iterator[Tuple[_KT_co, _VT_co]] : The reverse iterator over the (key, value) tuples in the dictonary.","title":"Return value:"},{"location":"usage/dictview/itemsview/#itemsview-other","text":"Return a set with elements common to itemsview and other .","title":"itemsview &amp; other"},{"location":"usage/dictview/itemsview/#arguments_1","text":"other : Iterable[Any] ; Iterable to take the intersection.","title":"Arguments:"},{"location":"usage/dictview/itemsview/#return-value_4","text":"Set[Tuple[_KT_co, _VT_co]] : A set with elements common to itemsview and other .","title":"Return value:"},{"location":"usage/dictview/itemsview/#other-itemsview","text":"Return a set with elements common to itemsview and other .","title":"other &amp; itemsview"},{"location":"usage/dictview/itemsview/#arguments_2","text":"other : Iterable[_T] ; Iterable to take the intersection.","title":"Arguments:"},{"location":"usage/dictview/itemsview/#return-value_5","text":"Set[_T] : A set with elements common to itemsview and other .","title":"Return value:"},{"location":"usage/dictview/itemsview/#itemsview-other_1","text":"Return a new set with elements from itemsview and other .","title":"itemsview | other"},{"location":"usage/dictview/itemsview/#arguments_3","text":"other : Iterable[_T] ; Iterable to take the union.","title":"Arguments:"},{"location":"usage/dictview/itemsview/#return-value_6","text":"Set[Union[Tuple[_KT_co, _VT_co], _T]] : A new set with elements from itemsview and other .","title":"Return value:"},{"location":"usage/dictview/itemsview/#other-itemsview_1","text":"Return a new set with elements from itemsview and other .","title":"other | itemsview"},{"location":"usage/dictview/itemsview/#arguments_4","text":"other : Iterable[_T] ; Iterable to take the union.","title":"Arguments:"},{"location":"usage/dictview/itemsview/#return-value_7","text":"Set[Union[Tuple[_KT_co, _VT_co], _T]] : A new set with elements from itemsview and other .","title":"Return value:"},{"location":"usage/dictview/itemsview/#itemsview-other_2","text":"Return a new set with elements in the itemsview that are not in the other .","title":"itemsview - other"},{"location":"usage/dictview/itemsview/#arguments_5","text":"other : Iterable[Any] ; Iterable to take the difference.","title":"Arguments:"},{"location":"usage/dictview/itemsview/#return-value_8","text":"Set[Tuple[_KT_co, _VT_co]] : A new set with elements in the set that are not in the other .","title":"Return value:"},{"location":"usage/dictview/itemsview/#other-itemsview_2","text":"Return a new set with elements in the other that are not in the itemsview .","title":"other - itemsview"},{"location":"usage/dictview/itemsview/#arguments_6","text":"other : Iterable[_T] ; Iterable to take the difference.","title":"Arguments:"},{"location":"usage/dictview/itemsview/#return-value_9","text":"Set[_T] : A new set with elements in the other that are not in the itemsview .","title":"Return value:"},{"location":"usage/dictview/itemsview/#itemsview-other_3","text":"Return a new set with elements in either the itemsview or other but not both.","title":"itemsview ^ other"},{"location":"usage/dictview/itemsview/#arguments_7","text":"other : Iterable[_T] ; Iterable to take the symmetric difference.","title":"Arguments:"},{"location":"usage/dictview/itemsview/#return-value_10","text":"Set[Union[Tuple[_KT_co, _VT_co], _T]] : A new set with elements in either the itemsview or other but not both.","title":"Return value"},{"location":"usage/dictview/itemsview/#other-itemsview_3","text":"Return a new set with elements in either the itemsview or other but not both.","title":"other ^ itemsview"},{"location":"usage/dictview/itemsview/#arguments_8","text":"other : Iterable[_T] ; Iterable to take the symmetric difference.","title":"Arguments:"},{"location":"usage/dictview/itemsview/#return-value_11","text":"Set[Union[Tuple[_KT_co, _VT_co], _T]] : A new set with elements in either the itemsview or other but not both.","title":"Return value"},{"location":"usage/dictview/itemsview/#itemsviewmapping","text":"Return a MappingProxyType that wraps the original dictionary to which the view refers. (provided only python version 3.10 and above)","title":"itemsview.mapping"},{"location":"usage/dictview/itemsview/#return-value_12","text":"MappingProxyType : A read-only proxy of the original dictionary.","title":"Return value"},{"location":"usage/dictview/keysview/","text":"KeysView KeysView is a view object which is returned by dict.keys() . It provides a dynamic view on the dictionary's keys, which means when dictionay changes, the view reflects these changes. len(keysview) Return the number of items in the dictionary d: Dict[KT, VT] where keysview=d.keys() . Return value: int : The number of items in d iter(keysview) Return an iterator over the keys in the dictionary. The order of the keys is guaranteed to be inserted order. Return value: Iterator[_KT_co] : The iterator over the keys in the dictonary. key in keysview Return whether if key is in the dictionary. Arguments: key : object ; An object to be checked Return value: bool : True if key is in the dictionary and False otherwise. reversed(keysview) Return a reverse iterator over the keys of the dictionary. (provided only python version 3.8 and above) Return value: Iterator[_KT_co] : The reverse iterator over the keys in the dictonary. keysview & other Return a set with elements common to keysview and other . Arguments: other : Iterable[Any] ; Iterable to take the intersection. Return value: Set[_KT_co] : A set with elements common to keysview and other . other & keysview Return a set with elements common to keysview and other . Arguments: other : Iterable[_T] ; Iterable to take the intersection. Return value: Set[_T] : A set with elements common to keysview and other . keysview | other Return a new set with elements from keysview and other . Arguments: other : Iterable[_T] ; Iterable to take the union. Return value: Set[Union[_KT_co, _T]] : A new set with elements from keysview and other . other | keysview Return a new set with elements from keysview and other . Arguments: other : Iterable[_T] ; Iterable to take the union. Return value: Set[Union[_KT_co, _T]] : A new set with elements from keysview and other . keysview - other Return a new set with elements in the keysview that are not in the other . Arguments: other : Iterable[Any] ; Iterable to take the difference. Return value: Set[_KT_co] : A new set with elements in the set that are not in the other . other - keysview Return a new set with elements in the other that are not in the keysview . Arguments: other : Iterable[_T] ; Iterable to be taken the difference. Return value: Set[_T] : A new set with elements in other that are not in the keysview . keysview ^ other Return a new set with elements in either the keysview or other but not both. Arguments: other : Iterable[_T] ; Iterable to take the symmetric difference. Return value Set[Union[_KT_co, _T]] : A new set with elements in either the keysview or other but not both. other ^ keysview Return a new set with elements in either the keysview or other but not both. Arguments: other : Iterable[_T] ; Iterable to take the symmetric difference. Return value Set[Union[_KT_co, _T]] : A new set with elements in either the keysview or other but not both. keysview.mapping Return a MappingProxyType that wraps the original dictionary to which the view refers. (provided only python version 3.10 and above) Return value MappingProxyType : A read-only proxy of the original dictionary.","title":"KeysView"},{"location":"usage/dictview/keysview/#keysview","text":"KeysView is a view object which is returned by dict.keys() . It provides a dynamic view on the dictionary's keys, which means when dictionay changes, the view reflects these changes.","title":"KeysView"},{"location":"usage/dictview/keysview/#lenkeysview","text":"Return the number of items in the dictionary d: Dict[KT, VT] where keysview=d.keys() .","title":"len(keysview)"},{"location":"usage/dictview/keysview/#return-value","text":"int : The number of items in d","title":"Return value:"},{"location":"usage/dictview/keysview/#iterkeysview","text":"Return an iterator over the keys in the dictionary. The order of the keys is guaranteed to be inserted order.","title":"iter(keysview)"},{"location":"usage/dictview/keysview/#return-value_1","text":"Iterator[_KT_co] : The iterator over the keys in the dictonary.","title":"Return value:"},{"location":"usage/dictview/keysview/#key-in-keysview","text":"Return whether if key is in the dictionary.","title":"key in keysview"},{"location":"usage/dictview/keysview/#arguments","text":"key : object ; An object to be checked","title":"Arguments:"},{"location":"usage/dictview/keysview/#return-value_2","text":"bool : True if key is in the dictionary and False otherwise.","title":"Return value:"},{"location":"usage/dictview/keysview/#reversedkeysview","text":"Return a reverse iterator over the keys of the dictionary. (provided only python version 3.8 and above)","title":"reversed(keysview)"},{"location":"usage/dictview/keysview/#return-value_3","text":"Iterator[_KT_co] : The reverse iterator over the keys in the dictonary.","title":"Return value:"},{"location":"usage/dictview/keysview/#keysview-other","text":"Return a set with elements common to keysview and other .","title":"keysview &amp; other"},{"location":"usage/dictview/keysview/#arguments_1","text":"other : Iterable[Any] ; Iterable to take the intersection.","title":"Arguments:"},{"location":"usage/dictview/keysview/#return-value_4","text":"Set[_KT_co] : A set with elements common to keysview and other .","title":"Return value:"},{"location":"usage/dictview/keysview/#other-keysview","text":"Return a set with elements common to keysview and other .","title":"other &amp; keysview"},{"location":"usage/dictview/keysview/#arguments_2","text":"other : Iterable[_T] ; Iterable to take the intersection.","title":"Arguments:"},{"location":"usage/dictview/keysview/#return-value_5","text":"Set[_T] : A set with elements common to keysview and other .","title":"Return value:"},{"location":"usage/dictview/keysview/#keysview-other_1","text":"Return a new set with elements from keysview and other .","title":"keysview | other"},{"location":"usage/dictview/keysview/#arguments_3","text":"other : Iterable[_T] ; Iterable to take the union.","title":"Arguments:"},{"location":"usage/dictview/keysview/#return-value_6","text":"Set[Union[_KT_co, _T]] : A new set with elements from keysview and other .","title":"Return value:"},{"location":"usage/dictview/keysview/#other-keysview_1","text":"Return a new set with elements from keysview and other .","title":"other | keysview"},{"location":"usage/dictview/keysview/#arguments_4","text":"other : Iterable[_T] ; Iterable to take the union.","title":"Arguments:"},{"location":"usage/dictview/keysview/#return-value_7","text":"Set[Union[_KT_co, _T]] : A new set with elements from keysview and other .","title":"Return value:"},{"location":"usage/dictview/keysview/#keysview-other_2","text":"Return a new set with elements in the keysview that are not in the other .","title":"keysview - other"},{"location":"usage/dictview/keysview/#arguments_5","text":"other : Iterable[Any] ; Iterable to take the difference.","title":"Arguments:"},{"location":"usage/dictview/keysview/#return-value_8","text":"Set[_KT_co] : A new set with elements in the set that are not in the other .","title":"Return value:"},{"location":"usage/dictview/keysview/#other-keysview_2","text":"Return a new set with elements in the other that are not in the keysview .","title":"other - keysview"},{"location":"usage/dictview/keysview/#arguments_6","text":"other : Iterable[_T] ; Iterable to be taken the difference.","title":"Arguments:"},{"location":"usage/dictview/keysview/#return-value_9","text":"Set[_T] : A new set with elements in other that are not in the keysview .","title":"Return value:"},{"location":"usage/dictview/keysview/#keysview-other_3","text":"Return a new set with elements in either the keysview or other but not both.","title":"keysview ^ other"},{"location":"usage/dictview/keysview/#arguments_7","text":"other : Iterable[_T] ; Iterable to take the symmetric difference.","title":"Arguments:"},{"location":"usage/dictview/keysview/#return-value_10","text":"Set[Union[_KT_co, _T]] : A new set with elements in either the keysview or other but not both.","title":"Return value"},{"location":"usage/dictview/keysview/#other-keysview_3","text":"Return a new set with elements in either the keysview or other but not both.","title":"other ^ keysview"},{"location":"usage/dictview/keysview/#arguments_8","text":"other : Iterable[_T] ; Iterable to take the symmetric difference.","title":"Arguments:"},{"location":"usage/dictview/keysview/#return-value_11","text":"Set[Union[_KT_co, _T]] : A new set with elements in either the keysview or other but not both.","title":"Return value"},{"location":"usage/dictview/keysview/#keysviewmapping","text":"Return a MappingProxyType that wraps the original dictionary to which the view refers. (provided only python version 3.10 and above)","title":"keysview.mapping"},{"location":"usage/dictview/keysview/#return-value_12","text":"MappingProxyType : A read-only proxy of the original dictionary.","title":"Return value"},{"location":"usage/dictview/valuesview/","text":"ValuesView ValuesView is a view object which is returned by dict.views() . It provides a dynamic view on the dictionary's values, which means when dictionay changes, the view reflects these changes. len(valuesview) Return the number of items in the dictionay d: Dict[KT, VT] where valuesview=d.values() . Return value: int : The number of items in d iter(valuesview) Return an iterator over the values in the dictionary. The order of the values is guaranteed to be inserted order. Return value: Iterator[_VT_co] : The iterator over the values in the dictionary. value in valuesview Return whether if value is in the dictionary. Arguments: value : object ; An object to be checked Return value: bool : True if value is in the dictionary and False otherwise. reversed(valuesview) Return a reverse iterator over the values of the dictionary. (provided only python version 3.8 and above) Return value: Iterator[_VT_co] : The reverse iterator over the values in the dictonary. valuesview.mapping Return a MappingProxyType that wraps the original dictionary to which the view refers. (provided only python version 3.10 and above) Return value MappingProxyType : A read-only proxy of the original dictionary.","title":"ValuesView"},{"location":"usage/dictview/valuesview/#valuesview","text":"ValuesView is a view object which is returned by dict.views() . It provides a dynamic view on the dictionary's values, which means when dictionay changes, the view reflects these changes.","title":"ValuesView"},{"location":"usage/dictview/valuesview/#lenvaluesview","text":"Return the number of items in the dictionay d: Dict[KT, VT] where valuesview=d.values() .","title":"len(valuesview)"},{"location":"usage/dictview/valuesview/#return-value","text":"int : The number of items in d","title":"Return value:"},{"location":"usage/dictview/valuesview/#itervaluesview","text":"Return an iterator over the values in the dictionary. The order of the values is guaranteed to be inserted order.","title":"iter(valuesview)"},{"location":"usage/dictview/valuesview/#return-value_1","text":"Iterator[_VT_co] : The iterator over the values in the dictionary.","title":"Return value:"},{"location":"usage/dictview/valuesview/#value-in-valuesview","text":"Return whether if value is in the dictionary.","title":"value in valuesview"},{"location":"usage/dictview/valuesview/#arguments","text":"value : object ; An object to be checked","title":"Arguments:"},{"location":"usage/dictview/valuesview/#return-value_2","text":"bool : True if value is in the dictionary and False otherwise.","title":"Return value:"},{"location":"usage/dictview/valuesview/#reversedvaluesview","text":"Return a reverse iterator over the values of the dictionary. (provided only python version 3.8 and above)","title":"reversed(valuesview)"},{"location":"usage/dictview/valuesview/#return-value_3","text":"Iterator[_VT_co] : The reverse iterator over the values in the dictonary.","title":"Return value:"},{"location":"usage/dictview/valuesview/#valuesviewmapping","text":"Return a MappingProxyType that wraps the original dictionary to which the view refers. (provided only python version 3.10 and above)","title":"valuesview.mapping"},{"location":"usage/dictview/valuesview/#return-value_4","text":"MappingProxyType : A read-only proxy of the original dictionary.","title":"Return value"}]}