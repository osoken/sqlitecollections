{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Overview Documentation for version: 1.0.5 sqlitecollections is a sort of containers that are backended by sqlite3 DB and are compatible with corresponding built-in collections. Since containers consume disk space instead of RAM, they can handle large amounts of data even in environments with limited RAM. Migrating from existing code using the built-in container is as simple as importing the library and changing the constructor. The elements of the container are automatically serialized and stored in the sqlite3 database, and are automatically read from the sqlite3 database and deserialized when accessed. Current version supports List (mutable sequence), Dict (mutable mapping) and Set (mutable set) and almost all methods are compatible with list, dict and set respectively. Installation pip install sqlitecollections Example import sqlitecollections as sc l = sc . List [ str ]([ \"Alice\" , \"Bob\" , \"Carol\" ]) print ( l [ 2 ]) #> Carol print ( len ( l )) #> 3 l . append ( \"Dave\" ) print ( l . index ( \"Bob\" )) #> 1 print ( l . index ( \"Dave\" )) #> 3 d = sc . Dict [ str , str ]({ \"a\" : \"Alice\" , \"b\" : \"Bob\" }) print ( d [ \"a\" ]) #> Alice d [ \"c\" ] = \"Carol\" print ( list ( d . keys ())) #> ['a', 'b', 'c'] print ( list ( d . values ())) #> ['Alice', 'Bob', 'Carol'] s = sc . Set [ str ]([ \"Alice\" , \"Bob\" , \"Carol\" , \"Dave\" ]) print ( \"Ellen\" in s ) #> False print ( \"Alice\" in s ) #> True print ( list ( s . intersection ([ \"Alice\" , \"Carol\" ]))) #> ['Alice', 'Carol'] In the above example, a temporary file is created every time a container is created, and the elements are written to the sqlite3 database created on the file, thus consuming very little RAM. If you want to reuse the container you created, you can create it by specifying the file path and table name of the sqlite3 database. import sqlitecollections as sc l = sc . List [ str ]([ \"Alice\" , \"Bob\" , \"Carol\" ], connection = \"path/to/file.db\" , table_name = \"list_example\" ) l . append ( \"Dave\" ) exit () When you load it, you can restore the previous state by specifying the same file path and table name. import sqlitecollections as sc l = sc . List [ str ]( connection = \"path/to/file.db\" , table_name = \"list_example\" ) print ( len ( l )) #> 4 print ( list ( l )) #> ['Alice', 'Bob', 'Carol', 'Dave'] Pros and cons for built-in containers Pros Save memory usage. Once the database is built, loading time is almost zero, even for huge data. Cons Each operation has the overhead of serialize/deserialize. Some operations are incompatible and unavailable. For example, directly rewriting the mutable elements of a container.","title":"Overview"},{"location":"#overview","text":"Documentation for version: 1.0.5 sqlitecollections is a sort of containers that are backended by sqlite3 DB and are compatible with corresponding built-in collections. Since containers consume disk space instead of RAM, they can handle large amounts of data even in environments with limited RAM. Migrating from existing code using the built-in container is as simple as importing the library and changing the constructor. The elements of the container are automatically serialized and stored in the sqlite3 database, and are automatically read from the sqlite3 database and deserialized when accessed. Current version supports List (mutable sequence), Dict (mutable mapping) and Set (mutable set) and almost all methods are compatible with list, dict and set respectively.","title":"Overview"},{"location":"#installation","text":"pip install sqlitecollections","title":"Installation"},{"location":"#example","text":"import sqlitecollections as sc l = sc . List [ str ]([ \"Alice\" , \"Bob\" , \"Carol\" ]) print ( l [ 2 ]) #> Carol print ( len ( l )) #> 3 l . append ( \"Dave\" ) print ( l . index ( \"Bob\" )) #> 1 print ( l . index ( \"Dave\" )) #> 3 d = sc . Dict [ str , str ]({ \"a\" : \"Alice\" , \"b\" : \"Bob\" }) print ( d [ \"a\" ]) #> Alice d [ \"c\" ] = \"Carol\" print ( list ( d . keys ())) #> ['a', 'b', 'c'] print ( list ( d . values ())) #> ['Alice', 'Bob', 'Carol'] s = sc . Set [ str ]([ \"Alice\" , \"Bob\" , \"Carol\" , \"Dave\" ]) print ( \"Ellen\" in s ) #> False print ( \"Alice\" in s ) #> True print ( list ( s . intersection ([ \"Alice\" , \"Carol\" ]))) #> ['Alice', 'Carol'] In the above example, a temporary file is created every time a container is created, and the elements are written to the sqlite3 database created on the file, thus consuming very little RAM. If you want to reuse the container you created, you can create it by specifying the file path and table name of the sqlite3 database. import sqlitecollections as sc l = sc . List [ str ]([ \"Alice\" , \"Bob\" , \"Carol\" ], connection = \"path/to/file.db\" , table_name = \"list_example\" ) l . append ( \"Dave\" ) exit () When you load it, you can restore the previous state by specifying the same file path and table name. import sqlitecollections as sc l = sc . List [ str ]( connection = \"path/to/file.db\" , table_name = \"list_example\" ) print ( len ( l )) #> 4 print ( list ( l )) #> ['Alice', 'Bob', 'Carol', 'Dave']","title":"Example"},{"location":"#pros-and-cons-for-built-in-containers","text":"","title":"Pros and cons for built-in containers"},{"location":"#pros","text":"Save memory usage. Once the database is built, loading time is almost zero, even for huge data.","title":"Pros"},{"location":"#cons","text":"Each operation has the overhead of serialize/deserialize. Some operations are incompatible and unavailable. For example, directly rewriting the mutable elements of a container.","title":"Cons"},{"location":"benchmark/","text":"py36 py37 py38 py39 py310 dict list set timing subject builtin sqlitecollections ratio clear 0.00363 0.00573 1.57852 __contains__ 0.0036 0.00373 1.03521 copy 0.00359 0.00766 2.1346 __delitem__ 0.00363 0.00578 1.59226 get 0.0036 0.00372 1.03145 get (unsuccessful search) 0.00367 0.00368 1.00273 __getitem__ 0.00364 0.00372 1.02332 __init__ 0.00368 0.04218 11.46324 items 0.00396 0.01139 2.87439 __iter__ 0.00366 0.00793 2.16887 keys 0.00369 0.00813 2.20326 __len__ 0.00364 0.00363 0.99838 __contains__ (unsuccessful search) 0.00367 0.00367 0.99825 pop 0.0037 0.00593 1.6051 pop (unsuccessful search) 0.00371 0.00497 1.33931 popitem 0.00366 0.00644 1.75888 setdefault 0.0037 0.005 1.35154 setdefault (unsuccessful search) 0.00368 0.00537 1.45916 __setitem__ (add new item) 0.0037 0.00593 1.6045 __setitem__ (replace) 0.00369 0.00586 1.58754 update 0.0037 0.00611 1.65319 update (many) 0.00451 0.5657 125.33483 values 0.00363 0.00768 2.11801 approximate memory usage subject builtin sqlitecollections ratio clear 0.0 0.0 1.0 __contains__ 0.0 0.0 1.0 copy 0.0 0.0 1.0 __delitem__ 0.0 0.0 1.0 get 0.0 0.0 1.0 get (unsuccessful search) 0.0 0.0 1.0 __getitem__ 0.0 0.0 1.0 __init__ 0.0 0.0 1.0 items 0.12109 0.18359 1.51613 __iter__ 0.0 0.0 1.0 keys 0.0 0.0 1.0 __len__ 0.0 0.0 1.0 __contains__ (unsuccessful search) 0.0 0.0 1.0 pop 0.0 0.0 1.0 pop (unsuccessful search) 0.0 0.0 1.0 popitem 0.0 0.0 1.0 setdefault 0.0 0.0 1.0 setdefault (unsuccessful search) 0.0 0.0 1.0 __setitem__ (add new item) 0.0 0.0 1.0 __setitem__ (replace) 0.0 0.0 1.0 update 0.0 0.0 1.0 update (many) 0.03125 0.0 0.0 values 0.0 0.0 1.0 timing subject builtin sqlitecollections ratio __add__ 0.00361 0.00835 2.31481 append 0.00358 0.00562 1.56915 clear 0.00353 0.00548 1.55171 __contains__ 0.00356 0.00357 1.00061 copy 0.00354 0.00753 2.12994 count 0.00351 0.00354 1.00772 __init__ 0.0036 0.01907 5.30091 __delitem__ 0.00357 0.07951 22.29983 __delitem__ (slice) 0.00357 0.15191 42.55099 __delitem__ (slice with skip) 0.00356 0.15158 42.53098 extend 0.00362 0.00568 1.56778 __getitem__ 0.00354 0.00354 0.99945 __getitem__ (slice) 0.0036 0.08596 23.87664 __getitem__ (slice with skip) 0.00353 0.01015 2.87787 __iadd__ 0.00356 0.0056 1.57311 __imult__ 0.00354 0.22895 64.76223 index 0.00354 0.00378 1.06953 index (unsuccessful search) 0.00358 0.00383 1.06807 insert 0.00365 0.1522 41.73876 __len__ 0.00352 0.00354 1.00557 __mult__ 0.00363 0.23295 64.23423 __contains__ (unsuccessful search) 0.00351 0.00357 1.01792 pop 0.00357 0.08042 22.50928 remove 0.00353 0.11378 32.23138 __setitem__ 0.00356 0.00554 1.55749 __setitem__ (slice) 0.00353 0.15426 43.69513 __setitem__ (slice with skip) 0.00351 0.01425 4.05779 sort 0.0037 0.08349 22.55984 approximate memory usage subject builtin sqlitecollections ratio __add__ 0.0 0.0 1.0 append 0.0 0.0 1.0 clear 0.0 0.0 1.0 __contains__ 0.0 0.0 1.0 copy 0.0 0.0 1.0 count 0.0 0.0 1.0 __init__ 0.0 0.0 1.0 __delitem__ 0.0 0.0 1.0 __delitem__ (slice) 0.0 0.0 1.0 __delitem__ (slice with skip) 0.0 0.0 1.0 extend 0.0 0.0 1.0 __getitem__ 0.0 0.0 1.0 __getitem__ (slice) 0.0 0.0 1.0 __getitem__ (slice with skip) 0.0 0.0 1.0 __iadd__ 0.0 0.0 1.0 __imult__ 0.0 0.0 1.0 index 0.0 0.0 1.0 index (unsuccessful search) 0.0 0.0 1.0 insert 0.0 0.0 1.0 __len__ 0.0 0.0 1.0 __mult__ 0.0 0.0 1.0 __contains__ (unsuccessful search) 0.0 0.00391 inf pop 0.0 0.00391 inf remove 0.0 0.00391 inf __setitem__ 0.0 0.0 1.0 __setitem__ (slice) 0.0 0.0 1.0 __setitem__ (slice with skip) 0.00391 0.0 0.0 sort 0.0 1.3125 inf timing subject builtin sqlitecollections ratio add (existing item) 0.00349 0.00486 1.39374 add (new item) 0.00345 0.00522 1.51065 __and__ 0.00343 0.01021 2.97401 clear 0.00354 0.00515 1.45367 __contains__ 0.00359 0.00366 1.02163 copy 0.00356 0.00679 1.90593 difference 0.00351 0.0069 1.96681 discard 0.0035 0.00532 1.51804 discard (no changes) 0.00348 0.00556 1.59874 __ge__ 0.00349 0.00351 1.00531 __ge__ (not greater than or equals to) 0.00349 0.00358 1.02694 __gt__ 0.00348 0.00552 1.58465 __gt__ (not greater than) 0.00349 0.04314 12.37734 __iand__ 0.00348 0.0067 1.92625 __init__ 0.0035 0.01483 4.23303 intersection 0.0035 0.00862 2.46174 intersection_update 0.0035 0.00671 1.91972 __ior__ 0.00368 0.00731 1.9867 isdisjoint 0.00354 0.00358 1.01386 isdisjoint (not disjoint) 0.00352 0.00351 0.99639 issubset 0.00354 0.02836 8.02064 issubset (not subset) 0.00363 0.00893 2.46103 issuperset 0.00353 0.02393 6.78362 issuperset (not superset) 0.00352 0.00377 1.07123 __ixor__ 0.00354 0.03861 10.90337 __le__ 0.00351 0.00432 1.22956 __le__ (not less than or equals to) 0.00351 0.00352 1.00304 __len__ 0.00348 0.00361 1.03941 __lt__ 0.00353 0.00434 1.23147 __lt__ (not less than) 0.0035 0.0035 1.00219 __contains__ (unsuccessful search) 0.00349 0.00349 1.0007 __or__ 0.00349 0.0094 2.69319 pop 0.00362 0.00529 1.46048 remove 0.00351 0.00539 1.53842 __sub__ 0.00351 0.00703 2.00507 symmetric_difference 0.00357 0.04106 11.51106 symmetric_difference_update 0.0036 0.03923 10.91105 union 0.00352 0.00964 2.73449 update 0.0035 0.00711 2.03052 __xor__ 0.00351 0.04075 11.61353 approximate memory usage subject builtin sqlitecollections ratio add (existing item) 0.0 0.0 1.0 add (new item) 0.0 0.0 1.0 __and__ 0.0 0.00391 inf clear 0.0 0.0 1.0 __contains__ 0.0 0.0 1.0 copy 0.0 0.0 1.0 difference 0.0 0.0 1.0 discard 0.0 0.0 1.0 discard (no changes) 0.0 0.0 1.0 __ge__ 0.0 0.0 1.0 __ge__ (not greater than or equals to) 0.0 0.0 1.0 __gt__ 0.0 0.0 1.0 __gt__ (not greater than) 0.0 0.0 1.0 __iand__ 0.0 0.0 1.0 __init__ 0.0 0.05078 inf intersection 0.0 0.0 1.0 intersection_update 0.0 0.0 1.0 __ior__ 0.0 0.0 1.0 isdisjoint 0.0 0.0 1.0 isdisjoint (not disjoint) 0.0 0.0 1.0 issubset 0.0 0.01172 inf issubset (not subset) 0.0 0.0 1.0 issuperset 0.0 0.0 1.0 issuperset (not superset) 0.0 0.0 1.0 __ixor__ 0.0 0.0 1.0 __le__ 0.0 0.0 1.0 __le__ (not less than or equals to) 0.0 0.0 1.0 __len__ 0.0 0.0 1.0 __lt__ 0.0 0.0 1.0 __lt__ (not less than) 0.0 0.0 1.0 __contains__ (unsuccessful search) 0.0 0.0 1.0 __or__ 0.0 0.0 1.0 pop 0.0 0.0 1.0 remove 0.0 0.0 1.0 __sub__ 0.0 0.0 1.0 symmetric_difference 0.0 0.0 1.0 symmetric_difference_update 0.0 0.0 1.0 union 0.0 0.0 1.0 update 0.0 0.0 1.0 __xor__ 0.0 0.0 1.0 dict list set timing subject builtin sqlitecollections ratio clear 0.00447 0.01158 2.59054 __contains__ 0.00454 0.00466 1.02745 copy 0.00477 0.01145 2.40286 __delitem__ 0.00467 0.00811 1.73524 get 0.0045 0.00455 1.01053 get (unsuccessful search) 0.00455 0.00445 0.97897 __getitem__ 0.00426 0.00461 1.08317 __init__ 0.00437 0.04822 11.0397 items 0.00502 0.01363 2.71787 __iter__ 0.00451 0.00955 2.11565 keys 0.00453 0.00965 2.13254 __len__ 0.00423 0.00424 1.00186 __contains__ (unsuccessful search) 0.00438 0.0046 1.05069 pop 0.00447 0.00796 1.78132 pop (unsuccessful search) 0.00442 0.0064 1.44968 popitem 0.00434 0.00906 2.08973 setdefault 0.0043 0.00719 1.67067 setdefault (unsuccessful search) 0.00433 0.00646 1.4911 __setitem__ (add new item) 0.00445 0.00801 1.80084 __setitem__ (replace) 0.00446 0.00764 1.7112 update 0.0045 0.00906 2.01165 update (many) 0.00548 0.59476 108.50984 values 0.00429 0.00885 2.06552 approximate memory usage subject builtin sqlitecollections ratio clear 0.0 0.0 1.0 __contains__ 0.0 0.0 1.0 copy 0.0 0.0 1.0 __delitem__ 0.0 0.0 1.0 get 0.0 0.0 1.0 get (unsuccessful search) 0.0 0.0 1.0 __getitem__ 0.0 0.0 1.0 __init__ 0.0 0.0 1.0 items 0.01172 0.32422 27.66667 __iter__ 0.0 0.0 1.0 keys 0.0 0.0 1.0 __len__ 0.0 0.0 1.0 __contains__ (unsuccessful search) 0.0 0.0 1.0 pop 0.0 0.0 1.0 pop (unsuccessful search) 0.0 0.0 1.0 popitem 0.0 0.0 1.0 setdefault 0.0 0.0 1.0 setdefault (unsuccessful search) 0.0 0.0 1.0 __setitem__ (add new item) 0.0 0.0 1.0 __setitem__ (replace) 0.0 0.0 1.0 update 0.0 0.0 1.0 update (many) 0.0 0.0 1.0 values 0.0 0.0 1.0 timing subject builtin sqlitecollections ratio __add__ 0.0045 0.01281 2.84635 append 0.00426 0.00788 1.85181 clear 0.00419 0.00745 1.77673 __contains__ 0.0043 0.00431 1.00336 copy 0.00426 0.01137 2.66936 count 0.00412 0.00425 1.03044 __init__ 0.00419 0.02385 5.69179 __delitem__ 0.00421 0.0843 20.03964 __delitem__ (slice) 0.0043 0.16093 37.40736 __delitem__ (slice with skip) 0.00422 0.16112 38.21722 extend 0.00421 0.00748 1.77616 __getitem__ 0.00418 0.00424 1.01508 __getitem__ (slice) 0.00425 0.09434 22.195 __getitem__ (slice with skip) 0.00421 0.01495 3.55104 __iadd__ 0.00417 0.00766 1.83762 __imult__ 0.00412 0.24066 58.39085 index 0.0041 0.00453 1.10607 index (unsuccessful search) 0.00418 0.00455 1.08715 insert 0.00422 0.15969 37.80441 __len__ 0.00409 0.00415 1.01551 __mult__ 0.00412 0.2471 59.924 __contains__ (unsuccessful search) 0.00435 0.00449 1.03069 pop 0.00453 0.08619 19.03024 remove 0.00443 0.12171 27.47225 __setitem__ 0.00464 0.00821 1.77078 __setitem__ (slice) 0.00442 0.16725 37.87166 __setitem__ (slice with skip) 0.00456 0.02054 4.50302 sort 0.00459 0.09456 20.59364 approximate memory usage subject builtin sqlitecollections ratio __add__ 0.0 0.0 1.0 append 0.0 0.0 1.0 clear 0.0 0.0 1.0 __contains__ 0.0 0.0 1.0 copy 0.0 0.0 1.0 count 0.0 0.0 1.0 __init__ 0.0 0.0 1.0 __delitem__ 0.0 0.0 1.0 __delitem__ (slice) 0.0 0.0 1.0 __delitem__ (slice with skip) 0.0 0.0 1.0 extend 0.0 0.0 1.0 __getitem__ 0.0 0.0 1.0 __getitem__ (slice) 0.0 0.0 1.0 __getitem__ (slice with skip) 0.0 0.0 1.0 __iadd__ 0.0 0.0 1.0 __imult__ 0.0 0.0 1.0 index 0.0 0.0 1.0 index (unsuccessful search) 0.0 0.0 1.0 insert 0.0 0.0 1.0 __len__ 0.0 0.0 1.0 __mult__ 0.0 0.0 1.0 __contains__ (unsuccessful search) 0.0 0.0 1.0 pop 0.0 0.0 1.0 remove 0.0 0.0 1.0 __setitem__ 0.0 0.0 1.0 __setitem__ (slice) 0.0 0.0 1.0 __setitem__ (slice with skip) 0.0 0.0 1.0 sort 0.0 0.93359 inf timing subject builtin sqlitecollections ratio add (existing item) 0.0041 0.00595 1.45262 add (new item) 0.00437 0.0075 1.71731 __and__ 0.00419 0.01255 2.9944 clear 0.00413 0.00737 1.78618 __contains__ 0.00405 0.00416 1.02539 copy 0.00419 0.00926 2.21023 difference 0.00426 0.00973 2.28254 discard 0.00419 0.00693 1.65317 discard (no changes) 0.00427 0.0065 1.52099 __ge__ 0.00414 0.00418 1.01018 __ge__ (not greater than or equals to) 0.0042 0.00522 1.24346 __gt__ 0.0046 0.00815 1.77266 __gt__ (not greater than) 0.00426 0.03319 7.79817 __iand__ 0.00457 0.00941 2.06125 __init__ 0.0043 0.01974 4.58575 intersection 0.00433 0.0126 2.91285 intersection_update 0.00436 0.00987 2.26432 __ior__ 0.00439 0.00944 2.15023 isdisjoint 0.00424 0.00423 0.99922 isdisjoint (not disjoint) 0.00426 0.00425 0.99802 issubset 0.00413 0.03307 7.99992 issubset (not subset) 0.00447 0.17702 39.59685 issuperset 0.00416 0.02494 5.99871 issuperset (not superset) 0.00419 0.00504 1.2019 __ixor__ 0.00413 0.04264 10.32461 __le__ 0.00423 0.00503 1.18886 __le__ (not less than or equals to) 0.00421 0.00413 0.98129 __len__ 0.00418 0.00418 1.00024 __lt__ 0.00412 0.00514 1.24743 __lt__ (not less than) 0.0041 0.00406 0.99241 __contains__ (unsuccessful search) 0.0043 0.00428 0.99689 __or__ 0.00431 0.01373 3.18415 pop 0.00435 0.00756 1.7374 remove 0.00427 0.00877 2.05257 __sub__ 0.00413 0.00963 2.33296 symmetric_difference 0.00414 0.04507 10.89899 symmetric_difference_update 0.00419 0.04284 10.23487 union 0.00413 0.01206 2.91884 update 0.00416 0.00911 2.1881 __xor__ 0.00418 0.04658 11.1397 approximate memory usage subject builtin sqlitecollections ratio add (existing item) 0.0 0.0 1.0 add (new item) 0.0 0.0 1.0 __and__ 0.0 0.0 1.0 clear 0.0 0.0 1.0 __contains__ 0.0 0.0 1.0 copy 0.0 0.0 1.0 difference 0.0 0.0 1.0 discard 0.0 0.0 1.0 discard (no changes) 0.0 0.0 1.0 __ge__ 0.0 0.0 1.0 __ge__ (not greater than or equals to) 0.0 0.0 1.0 __gt__ 0.0 0.0 1.0 __gt__ (not greater than) 0.0 0.0 1.0 __iand__ 0.0 0.0 1.0 __init__ 0.0 0.05469 inf intersection 0.0 0.0 1.0 intersection_update 0.0 0.0 1.0 __ior__ 0.0 0.0 1.0 isdisjoint 0.0 0.0 1.0 isdisjoint (not disjoint) 0.0 0.0 1.0 issubset 0.0 0.0 1.0 issubset (not subset) 0.0 0.0 1.0 issuperset 0.0 0.0 1.0 issuperset (not superset) 0.0 0.0 1.0 __ixor__ 0.0 0.0 1.0 __le__ 0.0 0.0 1.0 __le__ (not less than or equals to) 0.0 0.0 1.0 __len__ 0.0 0.0 1.0 __lt__ 0.0 0.0 1.0 __lt__ (not less than) 0.0 0.0 1.0 __contains__ (unsuccessful search) 0.0 0.0 1.0 __or__ 0.0 0.0 1.0 pop 0.0 0.0 1.0 remove 0.0 0.0 1.0 __sub__ 0.0 0.0 1.0 symmetric_difference 0.0 0.0 1.0 symmetric_difference_update 0.0 0.0 1.0 union 0.0 0.0 1.0 update 0.0 0.0 1.0 __xor__ 0.0 0.0 1.0 dict list set timing subject builtin sqlitecollections ratio clear 0.00371 0.01674 4.51475 __contains__ 0.00367 0.0038 1.03561 copy 0.00367 0.01145 3.11837 __delitem__ 0.00375 0.00687 1.83139 get 0.00365 0.00381 1.04353 get (unsuccessful search) 0.00364 0.00381 1.04807 __getitem__ 0.00365 0.00383 1.05081 __init__ 0.00375 0.03837 10.23801 items 0.00413 0.01052 2.55033 __iter__ 0.00368 0.00746 2.03044 keys 0.0037 0.00755 2.04378 __len__ 0.00364 0.00369 1.0155 __contains__ (unsuccessful search) 0.00368 0.00379 1.02988 pop 0.00373 0.00706 1.89647 pop (unsuccessful search) 0.00373 0.00548 1.46886 popitem 0.00372 0.00768 2.0665 reversed 0.00366 0.00766 2.09365 setdefault 0.00374 0.0055 1.47223 setdefault (unsuccessful search) 0.00377 0.00597 1.58341 __setitem__ (add new item) 0.00369 0.00695 1.88338 __setitem__ (replace) 0.00381 0.00691 1.81558 update 0.00377 0.0083 2.20367 update (many) 0.00476 0.55679 116.98278 values 0.00364 0.00721 1.97884 approximate memory usage subject builtin sqlitecollections ratio clear 0.0 0.0 1.0 __contains__ 0.0 0.0 1.0 copy 0.0 0.0 1.0 __delitem__ 0.0 0.0 1.0 get 0.0 0.0 1.0 get (unsuccessful search) 0.0 0.0 1.0 __getitem__ 0.0 0.0 1.0 __init__ 0.0 0.0 1.0 items 0.14062 0.20703 1.47222 __iter__ 0.0 0.0 1.0 keys 0.0 0.0 1.0 __len__ 0.0 0.0 1.0 __contains__ (unsuccessful search) 0.0 0.0 1.0 pop 0.0 0.0 1.0 pop (unsuccessful search) 0.0 0.0 1.0 popitem 0.0 0.0 1.0 reversed 0.0 0.0 1.0 setdefault 0.0 0.0 1.0 setdefault (unsuccessful search) 0.0 0.0 1.0 __setitem__ (add new item) 0.0 0.0 1.0 __setitem__ (replace) 0.0 0.0 1.0 update 0.0 0.0 1.0 update (many) 0.125 0.0 0.0 values 0.0 0.0 1.0 timing subject builtin sqlitecollections ratio __add__ 0.00358 0.01108 3.09426 append 0.00361 0.00703 1.94514 clear 0.0036 0.0064 1.77634 __contains__ 0.0036 0.00359 0.99621 copy 0.00366 0.00853 2.33293 count 0.00361 0.00364 1.00795 __init__ 0.00362 0.02139 5.90712 __delitem__ 0.00365 0.08113 22.20781 __delitem__ (slice) 0.00359 0.15324 42.67256 __delitem__ (slice with skip) 0.00362 0.15309 42.27317 extend 0.00363 0.00718 1.97536 __getitem__ 0.00361 0.00362 1.00445 __getitem__ (slice) 0.0036 0.08956 24.85907 __getitem__ (slice with skip) 0.00363 0.01366 3.76336 __iadd__ 0.0036 0.00702 1.94992 __imult__ 0.00363 0.23106 63.5989 index 0.00364 0.00387 1.06418 index (unsuccessful search) 0.00368 0.0039 1.06015 insert 0.00366 0.15021 41.00682 __len__ 0.00357 0.00363 1.0173 __mult__ 0.0036 0.23434 65.17943 __contains__ (unsuccessful search) 0.0036 0.00368 1.02045 pop 0.00362 0.08004 22.09423 remove 0.00359 0.1157 32.23612 __setitem__ 0.00362 0.00704 1.94554 __setitem__ (slice) 0.00361 0.15757 43.60658 __setitem__ (slice with skip) 0.00361 0.01529 4.23987 sort 0.00361 0.08603 23.81614 approximate memory usage subject builtin sqlitecollections ratio __add__ 0.0 0.0 1.0 append 0.0 0.0 1.0 clear 0.0 0.0 1.0 __contains__ 0.0 0.0 1.0 copy 0.0 0.0 1.0 count 0.0 0.0 1.0 __init__ 0.0 0.05078 inf __delitem__ 0.0 0.0 1.0 __delitem__ (slice) 0.0 0.0 1.0 __delitem__ (slice with skip) 0.0 0.0 1.0 extend 0.0 0.0 1.0 __getitem__ 0.0 0.0 1.0 __getitem__ (slice) 0.0 0.0 1.0 __getitem__ (slice with skip) 0.0 0.0 1.0 __iadd__ 0.0 0.0 1.0 __imult__ 0.0 0.0 1.0 index 0.0 0.0 1.0 index (unsuccessful search) 0.0 0.0 1.0 insert 0.0 0.0 1.0 __len__ 0.0 0.0 1.0 __mult__ 0.0 0.0 1.0 __contains__ (unsuccessful search) 0.0 0.0 1.0 pop 0.0 0.0 1.0 remove 0.0 0.0 1.0 __setitem__ 0.0 0.0 1.0 __setitem__ (slice) 0.0 0.0 1.0 __setitem__ (slice with skip) 0.0 0.0 1.0 sort 0.0 0.94922 inf timing subject builtin sqlitecollections ratio add (existing item) 0.00349 0.00524 1.50156 add (new item) 0.00362 0.0065 1.79574 __and__ 0.00357 0.01133 3.17571 clear 0.00354 0.00619 1.74939 __contains__ 0.00354 0.00389 1.09856 copy 0.00362 0.00874 2.41286 difference 0.00359 0.01164 3.24561 discard 0.00359 0.00672 1.87214 discard (no changes) 0.00354 0.00531 1.50011 __ge__ 0.00357 0.00357 1.00083 __ge__ (not greater than or equals to) 0.00356 0.00359 1.00814 __gt__ 0.00357 0.0076 2.12806 __gt__ (not greater than) 0.00354 0.03073 8.66931 __iand__ 0.00355 0.00876 2.46864 __init__ 0.00359 0.01742 4.85038 intersection 0.00357 0.02443 6.83353 intersection_update 0.00357 0.00832 2.3336 __ior__ 0.00359 0.00787 2.19413 isdisjoint 0.00358 0.0036 1.00376 isdisjoint (not disjoint) 0.00357 0.00358 1.0024 issubset 0.00363 0.02962 8.16645 issubset (not subset) 0.00353 0.0121 3.424 issuperset 0.00353 0.02304 6.53635 issuperset (not superset) 0.00356 0.00356 0.9991 __ixor__ 0.00405 0.21912 54.07461 __le__ 0.00356 0.00439 1.23235 __le__ (not less than or equals to) 0.00357 0.00355 0.99535 __len__ 0.00358 0.00363 1.01523 __lt__ 0.00356 0.00437 1.22884 __lt__ (not less than) 0.00363 0.00354 0.9728 __contains__ (unsuccessful search) 0.00354 0.0036 1.01604 __or__ 0.00362 0.01277 3.525 pop 0.00358 0.00672 1.87652 remove 0.00369 0.01509 4.08635 __sub__ 0.0036 0.00982 2.72896 symmetric_difference 0.00362 0.04535 12.54442 symmetric_difference_update 0.00359 0.03954 11.02607 union 0.00358 0.0119 3.32476 update 0.00357 0.00764 2.13837 __xor__ 0.00361 0.04183 11.59938 approximate memory usage subject builtin sqlitecollections ratio add (existing item) 0.0 0.0 1.0 add (new item) 0.0 0.0 1.0 __and__ 0.0 0.0 1.0 clear 0.0 0.0 1.0 __contains__ 0.0 0.0 1.0 copy 0.0 0.0 1.0 difference 0.0 0.0 1.0 discard 0.0 0.0 1.0 discard (no changes) 0.0 0.0 1.0 __ge__ 0.0 0.0 1.0 __ge__ (not greater than or equals to) 0.0 0.0 1.0 __gt__ 0.0 0.0 1.0 __gt__ (not greater than) 0.0 0.0 1.0 __iand__ 0.0 0.0 1.0 __init__ 0.0 0.0 1.0 intersection 0.0 0.0 1.0 intersection_update 0.0 0.0 1.0 __ior__ 0.0 0.0 1.0 isdisjoint 0.0 0.0 1.0 isdisjoint (not disjoint) 0.0 0.0 1.0 issubset 0.0 0.0 1.0 issubset (not subset) 0.0 0.0 1.0 issuperset 0.0 0.0 1.0 issuperset (not superset) 0.0 0.0 1.0 __ixor__ 0.0 0.0 1.0 __le__ 0.0 0.0 1.0 __le__ (not less than or equals to) 0.0 0.0 1.0 __len__ 0.0 0.0 1.0 __lt__ 0.0 0.0 1.0 __lt__ (not less than) 0.0 0.0 1.0 __contains__ (unsuccessful search) 0.0 0.0 1.0 __or__ 0.0 0.0 1.0 pop 0.0 0.0 1.0 remove 0.0 0.0 1.0 __sub__ 0.0 0.0 1.0 symmetric_difference 0.0 0.0 1.0 symmetric_difference_update 0.0 0.0 1.0 union 0.0 0.0 1.0 update 0.0 0.0 1.0 __xor__ 0.0 0.0 1.0 dict list set timing subject builtin sqlitecollections ratio clear 0.00333 0.00554 1.66181 __contains__ 0.00331 0.00347 1.04858 copy 0.00338 0.00753 2.22603 __delitem__ 0.00345 0.00579 1.67766 get 0.00334 0.00352 1.05475 get (unsuccessful search) 0.00332 0.00349 1.0516 __getitem__ 0.00337 0.0035 1.03951 __init__ 0.00354 0.0357 10.09869 __ior__ 0.00341 0.00613 1.79797 __ior__ (many) 0.0045 0.55309 122.87129 items 0.0038 0.00972 2.56128 __iter__ 0.00339 0.00688 2.02755 keys 0.00349 0.00692 1.98402 __len__ 0.00335 0.00338 1.00753 __contains__ (unsuccessful search) 0.00332 0.00348 1.04974 __or__ 0.00335 0.00837 2.50045 __or__ (many) 0.00466 0.56129 120.55105 pop 0.0034 0.00566 1.663 pop (unsuccessful search) 0.00345 0.0047 1.36275 popitem 0.00344 0.00626 1.81884 reversed 0.00334 0.00678 2.02955 setdefault 0.00342 0.00473 1.38378 setdefault (unsuccessful search) 0.00343 0.00501 1.45998 __setitem__ (add new item) 0.0034 0.00576 1.69593 __setitem__ (replace) 0.00341 0.00572 1.67862 update 0.00342 0.00573 1.67559 update (many) 0.00433 0.55876 129.03893 values 0.00333 0.00667 2.00172 approximate memory usage subject builtin sqlitecollections ratio clear 0.0 0.0 1.0 __contains__ 0.0 0.0 1.0 copy 0.0 0.0 1.0 __delitem__ 0.0 0.0 1.0 get 0.0 0.0 1.0 get (unsuccessful search) 0.0 0.0 1.0 __getitem__ 0.0 0.0 1.0 __init__ 0.0 0.0 1.0 __ior__ 0.0 0.0 1.0 __ior__ (many) 0.18359 0.0 0.0 items 0.0 0.21875 inf __iter__ 0.0 0.0 1.0 keys 0.0 0.0 1.0 __len__ 0.0 0.0 1.0 __contains__ (unsuccessful search) 0.0 0.0 1.0 __or__ 0.0 0.0 1.0 __or__ (many) 0.0 0.0 1.0 pop 0.0 0.0 1.0 pop (unsuccessful search) 0.0 0.0 1.0 popitem 0.0 0.0 1.0 reversed 0.0 0.0 1.0 setdefault 0.0 0.0 1.0 setdefault (unsuccessful search) 0.0 0.0 1.0 __setitem__ (add new item) 0.0 0.0 1.0 __setitem__ (replace) 0.0 0.0 1.0 update 0.0 0.0 1.0 update (many) 0.0 0.0 1.0 values 0.0 0.0 1.0 timing subject builtin sqlitecollections ratio __add__ 0.00339 0.00808 2.38378 append 0.00336 0.0053 1.57657 clear 0.00331 0.00544 1.64559 __contains__ 0.0033 0.0033 0.99865 copy 0.00334 0.00703 2.10335 count 0.00334 0.00339 1.01695 __init__ 0.00328 0.01671 5.10204 __delitem__ 0.00339 0.07946 23.46532 __delitem__ (slice) 0.00332 0.15145 45.63277 __delitem__ (slice with skip) 0.00334 0.15094 45.25865 extend 0.00339 0.00537 1.58372 __getitem__ 0.00329 0.00335 1.01989 __getitem__ (slice) 0.0033 0.08543 25.882 __getitem__ (slice with skip) 0.0033 0.0096 2.91335 __iadd__ 0.00336 0.00555 1.65466 __imult__ 0.00338 0.23247 68.76231 index 0.00331 0.00359 1.08471 index (unsuccessful search) 0.00331 0.00358 1.08372 insert 0.00343 0.15261 44.49283 __len__ 0.00329 0.00333 1.01141 __mult__ 0.0033 0.23066 69.81657 __contains__ (unsuccessful search) 0.00336 0.00338 1.00389 pop 0.00337 0.07957 23.62134 remove 0.00333 0.11271 33.80715 __setitem__ 0.00336 0.00557 1.65795 __setitem__ (slice) 0.00334 0.15585 46.6512 __setitem__ (slice with skip) 0.00335 0.01385 4.13082 sort 0.00348 0.07711 22.13784 approximate memory usage subject builtin sqlitecollections ratio __add__ 0.0 0.0 1.0 append 0.0 0.0 1.0 clear 0.0 0.0 1.0 __contains__ 0.0 0.0 1.0 copy 0.0 0.0 1.0 count 0.0 0.0 1.0 __init__ 0.0 0.0 1.0 __delitem__ 0.0 0.00391 inf __delitem__ (slice) 0.0 0.0 1.0 __delitem__ (slice with skip) 0.0 0.0 1.0 extend 0.0 0.0 1.0 __getitem__ 0.0 0.0 1.0 __getitem__ (slice) 0.0 0.00391 inf __getitem__ (slice with skip) 0.0 0.0 1.0 __iadd__ 0.0 0.0 1.0 __imult__ 0.0 0.0 1.0 index 0.0 0.0 1.0 index (unsuccessful search) 0.0 0.0 1.0 insert 0.0 0.0 1.0 __len__ 0.0 0.0 1.0 __mult__ 0.0 0.0 1.0 __contains__ (unsuccessful search) 0.0 0.0 1.0 pop 0.0 0.0 1.0 remove 0.0 0.0 1.0 __setitem__ 0.0 0.0 1.0 __setitem__ (slice) 0.0 0.0 1.0 __setitem__ (slice with skip) 0.0 0.0 1.0 sort 0.0 0.54688 inf timing subject builtin sqlitecollections ratio add (existing item) 0.00322 0.00425 1.3172 add (new item) 0.00332 0.00519 1.56251 __and__ 0.00328 0.00855 2.60705 clear 0.00328 0.005 1.52336 __contains__ 0.00327 0.00328 1.00248 copy 0.00331 0.0065 1.96279 difference 0.00336 0.00676 2.00892 discard 0.00332 0.00945 2.84766 discard (no changes) 0.00332 0.00436 1.31433 __ge__ 0.00336 0.00325 0.96775 __ge__ (not greater than or equals to) 0.00331 0.00576 1.74033 __gt__ 0.0033 0.00533 1.61337 __gt__ (not greater than) 0.00327 0.02924 8.93489 __iand__ 0.0033 0.00655 1.98655 __init__ 0.00332 0.01318 3.97152 intersection 0.00326 0.00845 2.59027 intersection_update 0.00331 0.00657 1.98345 __ior__ 0.00331 0.00686 2.06963 isdisjoint 0.00334 0.00333 0.99624 isdisjoint (not disjoint) 0.0033 0.00329 0.99613 issubset 0.00328 0.02688 8.19537 issubset (not subset) 0.0033 0.00861 2.60596 issuperset 0.00341 0.02282 6.703 issuperset (not superset) 0.0033 0.00575 1.74018 __ixor__ 0.00333 0.03618 10.87578 __le__ 0.00332 0.00399 1.2006 __le__ (not less than or equals to) 0.00329 0.00329 0.99755 __len__ 0.00338 0.00329 0.97576 __lt__ 0.00336 0.00408 1.21378 __lt__ (not less than) 0.00331 0.00332 1.00548 __contains__ (unsuccessful search) 0.0033 0.0033 0.99962 __or__ 0.00332 0.00896 2.69798 pop 0.00331 0.00514 1.54961 remove 0.00332 0.00509 1.53164 __sub__ 0.00333 0.0067 2.01037 symmetric_difference 0.00331 0.03817 11.54713 symmetric_difference_update 0.0033 0.0363 11.0122 union 0.0033 0.00886 2.68769 update 0.00331 0.00672 2.03014 __xor__ 0.00328 0.03787 11.54303 approximate memory usage subject builtin sqlitecollections ratio add (existing item) 0.0 0.0 1.0 add (new item) 0.0 0.0 1.0 __and__ 0.0 0.0 1.0 clear 0.0 0.0 1.0 __contains__ 0.0 0.0 1.0 copy 0.0 0.0 1.0 difference 0.0 0.0 1.0 discard 0.0 0.0 1.0 discard (no changes) 0.0 0.0 1.0 __ge__ 0.0 0.0 1.0 __ge__ (not greater than or equals to) 0.0 0.0 1.0 __gt__ 0.0 0.0 1.0 __gt__ (not greater than) 0.0 0.0 1.0 __iand__ 0.0 0.0 1.0 __init__ 0.0 0.0 1.0 intersection 0.0 0.0 1.0 intersection_update 0.0 0.0 1.0 __ior__ 0.0 0.0 1.0 isdisjoint 0.0 0.0 1.0 isdisjoint (not disjoint) 0.0 0.0 1.0 issubset 0.0 0.0 1.0 issubset (not subset) 0.0 0.0 1.0 issuperset 0.0 0.0 1.0 issuperset (not superset) 0.0 0.0 1.0 __ixor__ 0.0 0.0 1.0 __le__ 0.0 0.0 1.0 __le__ (not less than or equals to) 0.0 0.0 1.0 __len__ 0.0 0.0 1.0 __lt__ 0.0 0.0 1.0 __lt__ (not less than) 0.0 0.0 1.0 __contains__ (unsuccessful search) 0.0 0.0 1.0 __or__ 0.0 0.0 1.0 pop 0.0 0.0 1.0 remove 0.0 0.0 1.0 __sub__ 0.0 0.0 1.0 symmetric_difference 0.0 0.0 1.0 symmetric_difference_update 0.0 0.0 1.0 union 0.0 0.0 1.0 update 0.0 0.0 1.0 __xor__ 0.0 0.0 1.0 dict list set timing subject builtin sqlitecollections ratio clear 0.00408 0.00731 1.79062 __contains__ 0.0041 0.00423 1.03108 copy 0.0041 0.01103 2.69419 __delitem__ 0.00412 0.00781 1.89538 get 0.00409 0.00428 1.04684 get (unsuccessful search) 0.00413 0.00419 1.01385 __getitem__ 0.00405 0.00424 1.04606 __init__ 0.00417 0.03902 9.35005 __ior__ 0.00413 0.00764 1.8492 __ior__ (many) 0.00523 0.58535 111.9631 items 0.00458 0.01103 2.40618 __iter__ 0.00411 0.00801 1.94611 keys 0.00409 0.00822 2.01046 __len__ 0.0041 0.00405 0.98806 __contains__ (unsuccessful search) 0.00405 0.00421 1.03813 __or__ 0.00407 0.01189 2.92033 __or__ (many) 0.0055 0.59001 107.31823 pop 0.00414 0.00744 1.79603 pop (unsuccessful search) 0.00414 0.00603 1.45433 popitem 0.00421 0.00818 1.94458 reversed 0.00407 0.00799 1.96403 setdefault 0.00418 0.00618 1.47607 setdefault (unsuccessful search) 0.00417 0.00639 1.53127 __setitem__ (add new item) 0.00416 0.00804 1.93081 __setitem__ (replace) 0.00417 0.00773 1.85249 update 0.00422 0.00793 1.88026 update (many) 0.00552 0.59 106.82473 values 0.00441 0.00813 1.84118 approximate memory usage subject builtin sqlitecollections ratio clear 0.0 0.0 1.0 __contains__ 0.0 0.0 1.0 copy 0.0 0.0 1.0 __delitem__ 0.0 0.0 1.0 get 0.0 0.0 1.0 get (unsuccessful search) 0.0 0.0 1.0 __getitem__ 0.0 0.0 1.0 __init__ 0.0 0.0 1.0 __ior__ 0.0 0.0 1.0 __ior__ (many) 0.17969 0.0 0.0 items 0.0 0.21484 inf __iter__ 0.0 0.0 1.0 keys 0.0 0.0 1.0 __len__ 0.0 0.0 1.0 __contains__ (unsuccessful search) 0.0 0.0 1.0 __or__ 0.0 0.0 1.0 __or__ (many) 0.0 0.0 1.0 pop 0.0 0.0 1.0 pop (unsuccessful search) 0.0 0.0 1.0 popitem 0.0 0.0 1.0 reversed 0.0 0.0 1.0 setdefault 0.0 0.0 1.0 setdefault (unsuccessful search) 0.0 0.0 1.0 __setitem__ (add new item) 0.0 0.0 1.0 __setitem__ (replace) 0.0 0.0 1.0 update 0.0 0.0 1.0 update (many) 0.0 0.0 1.0 values 0.0 0.0 1.0 timing subject builtin sqlitecollections ratio __add__ 0.00427 0.01126 2.63793 append 0.00409 0.00702 1.71551 clear 0.00397 0.00756 1.90316 __contains__ 0.00399 0.00405 1.0142 copy 0.00402 0.01009 2.51077 count 0.00404 0.00411 1.01655 __init__ 0.00409 0.02124 5.18863 __delitem__ 0.00405 0.08317 20.56195 __delitem__ (slice) 0.00403 0.15952 39.57489 __delitem__ (slice with skip) 0.00405 0.15894 39.21741 extend 0.00405 0.00768 1.89786 __getitem__ 0.00397 0.00404 1.01693 __getitem__ (slice) 0.00401 0.09169 22.88216 __getitem__ (slice with skip) 0.00399 0.01354 3.38982 __iadd__ 0.00403 0.00754 1.87095 __imult__ 0.00398 0.23779 59.78059 index 0.00396 0.00436 1.09977 index (unsuccessful search) 0.00397 0.00438 1.10268 insert 0.00404 0.15703 38.8907 __len__ 0.00399 0.00413 1.03346 __mult__ 0.00397 0.24149 60.83274 __contains__ (unsuccessful search) 0.00398 0.00411 1.03035 pop 0.00405 0.08441 20.83743 remove 0.00397 0.11842 29.83263 __setitem__ 0.00417 0.00709 1.70071 __setitem__ (slice) 0.00405 0.16246 40.11131 __setitem__ (slice with skip) 0.00397 0.0161 4.05364 sort 0.00401 0.08828 22.03713 approximate memory usage subject builtin sqlitecollections ratio __add__ 0.0 0.00391 inf append 0.0 0.0 1.0 clear 0.0 0.0 1.0 __contains__ 0.0 0.0 1.0 copy 0.0 0.0 1.0 count 0.0 0.0 1.0 __init__ 0.0 0.0 1.0 __delitem__ 0.0 0.0 1.0 __delitem__ (slice) 0.0 0.0 1.0 __delitem__ (slice with skip) 0.0 0.0 1.0 extend 0.0 0.0 1.0 __getitem__ 0.0 0.0 1.0 __getitem__ (slice) 0.0 0.00391 inf __getitem__ (slice with skip) 0.0 0.0 1.0 __iadd__ 0.0 0.0 1.0 __imult__ 0.0 0.0 1.0 index 0.0 0.0 1.0 index (unsuccessful search) 0.0 0.0 1.0 insert 0.0 0.00391 inf __len__ 0.0 0.0 1.0 __mult__ 0.0 0.0 1.0 __contains__ (unsuccessful search) 0.0 0.0 1.0 pop 0.0 0.00391 inf remove 0.0 0.0 1.0 __setitem__ 0.0 0.0 1.0 __setitem__ (slice) 0.0 0.00391 inf __setitem__ (slice with skip) 0.0 0.0 1.0 sort 0.0 0.70312 inf timing subject builtin sqlitecollections ratio add (existing item) 0.00393 0.00569 1.44526 add (new item) 0.00403 0.00744 1.84499 __and__ 0.004 0.01197 2.99462 clear 0.00407 0.00706 1.73673 __contains__ 0.00399 0.00396 0.99314 copy 0.00397 0.00934 2.34916 difference 0.00394 0.0095 2.40782 discard 0.00393 0.00694 1.76516 discard (no changes) 0.00398 0.00539 1.3535 __ge__ 0.00393 0.00391 0.99453 __ge__ (not greater than or equals to) 0.00392 0.0042 1.07201 __gt__ 0.00389 0.00739 1.89921 __gt__ (not greater than) 0.00393 0.03025 7.68854 __iand__ 0.00392 0.00952 2.43086 __init__ 0.00398 0.07379 18.55024 intersection 0.00401 0.01323 3.30116 intersection_update 0.00399 0.00954 2.39115 __ior__ 0.00398 0.00928 2.33253 isdisjoint 0.00394 0.00399 1.01391 isdisjoint (not disjoint) 0.00396 0.00395 0.99828 issubset 0.00393 0.03112 7.91808 issubset (not subset) 0.00399 0.0126 3.15627 issuperset 0.00398 0.02378 5.97973 issuperset (not superset) 0.00396 0.00406 1.02434 __ixor__ 0.00401 0.03978 9.91996 __le__ 0.00394 0.00465 1.18054 __le__ (not less than or equals to) 0.00399 0.00394 0.98735 __len__ 0.00402 0.00394 0.98128 __lt__ 0.00397 0.0047 1.18281 __lt__ (not less than) 0.00395 0.00398 1.00881 __contains__ (unsuccessful search) 0.00395 0.00451 1.14065 __or__ 0.00399 0.01328 3.32964 pop 0.00401 0.00715 1.78435 remove 0.00398 0.00743 1.8681 __sub__ 0.00403 0.01126 2.79551 symmetric_difference 0.00391 0.04292 10.98304 symmetric_difference_update 0.00397 0.03976 10.00911 union 0.00396 0.01322 3.3396 update 0.0039 0.0087 2.22951 __xor__ 0.00395 0.04219 10.67956 approximate memory usage subject builtin sqlitecollections ratio add (existing item) 0.0 0.0 1.0 add (new item) 0.0 0.0 1.0 __and__ 0.0 0.0 1.0 clear 0.0 0.0 1.0 __contains__ 0.0 0.0 1.0 copy 0.0 0.0 1.0 difference 0.0 0.0 1.0 discard 0.0 0.0 1.0 discard (no changes) 0.0 0.0 1.0 __ge__ 0.0 0.0 1.0 __ge__ (not greater than or equals to) 0.0 0.0 1.0 __gt__ 0.0 0.0 1.0 __gt__ (not greater than) 0.0 0.0 1.0 __iand__ 0.0 0.0 1.0 __init__ 0.0 0.0 1.0 intersection 0.0 0.0 1.0 intersection_update 0.0 0.0 1.0 __ior__ 0.0 0.0 1.0 isdisjoint 0.0 0.0 1.0 isdisjoint (not disjoint) 0.0 0.0 1.0 issubset 0.0 0.0 1.0 issubset (not subset) 0.0 0.0 1.0 issuperset 0.0 0.0 1.0 issuperset (not superset) 0.0 0.0 1.0 __ixor__ 0.0 0.0 1.0 __le__ 0.0 0.0 1.0 __le__ (not less than or equals to) 0.0 0.0 1.0 __len__ 0.0 0.0 1.0 __lt__ 0.0 0.0 1.0 __lt__ (not less than) 0.0 0.0 1.0 __contains__ (unsuccessful search) 0.0 0.0 1.0 __or__ 0.0 0.0 1.0 pop 0.0 0.0 1.0 remove 0.0 0.0 1.0 __sub__ 0.0 0.0 1.0 symmetric_difference 0.0 0.0 1.0 symmetric_difference_update 0.0 0.0 1.0 union 0.0 0.0 1.0 update 0.0 0.0 1.0 __xor__ 0.0 0.0 1.0","title":"Benchmark"},{"location":"development/","text":"Development Tests, type checking and linting locally To run tests, type checking and linting locally, you'll need to have python 3.6 , 3.7 , 3.8 , 3.9 and 3.10 installed. We use tox to run tests and type checking on all the supported python versions. You can set up the development environment with the following commands: git clone git@github.com:osoken/sqlitecollections.git cd sqlitecollections python -m venv .venv source ./.venv/bin/activate pip install -e .[dev] Then, run tests is as easy as: tox After a while, you'll see the following message at the bottom of the long logs from pytest and others. __________________ summary __________________ lint: commands succeeded py36: commands succeeded py37: commands succeeded py38: commands succeeded py39: commands succeeded py310: commands succeeded congratulations :) Building documents We use mkdocs to build the documentation. To set up the environment for building the document, run the following commands: git clone git@github.com:osoken/sqlitecollections.git cd sqlitecollections python -m venv .venv source ./.venv/bin/activate pip install -e .[docs] Then, building the documentation can be done by the following command: mkdocs build The output will be located in site directory in your current directory. During development, you can also run mkdoc 's builtin development server with hot-reloading enabled with the following command: mkdocs serve In that case, you can check the result on http://127.0.0.1:8000 . Benchmarks We have our own benchmark package. Setup the benchmark package To setup, run the following commands: pip install docs/scbenchmarker Run all benchmarks and render the results Benchmarking is done in two steps: Step 1: Run all benchmarks python -m scbenchmarker --prefix=[prefix] benchmarking Step 2: Render the results to markdown: python -m scbenchmarker --prefix=[prefix] render Results are stored in docs/benchmark_results/[prefix]/ . You can check the results on http://127.0.0.1:8000/benchmark/ . Verbose mode python -m scbenchmarker --verbose --prefix=[prefix] benchmarking An example output is as follows: benchmark_dict.py::BenchmarkSetitemAddNewItem: {'subject': '`__setitem__` (add new item)', 'one': {'name': '`dict`', 'timing': 0.0026721060276031494, 'memory': 0.00390625}, 'another': {'name': '`sqlitecollections.Dict`', 'timing': 0.006042510271072388, 'memory': 0.00390625}, 'ratio': {'timing': 2.2613287828598834, 'memory': 1.0}} Run individual benchmarks You can also run individual benchmarks. python -m scbenchmarker --prefix=[prefix] benchmarking [benchmark script]::[benchmark name] This command runs only a single benchmark. Together with the verbose mode, this is convenient for improving a single method and checking benchmarks frequently. Compatibility policy We aim to implement containers that are as compatible as possible with the built-in containers, but we have a few implementations that intentionally behave differently. Normal behavior will be compatible, but in case of errors it may be different. The constructor arguments are not compatible, as they require arguments specific to this package's container, such as sqlite3 DB file paths and serialization methods. copy method in each container behaves similarly to deep copy, since it copies the table containing serialized elements. Dict 's item order is guaranteed to be insertion order not only for python 3.7 and upper but for all versions. Dict.fromkeys class method is not provided. Any member in the container cannot be mutated directly. If you want to mutate any member, mutate it via temporary variable then write it back. import sqlitecollections as sc x = sc . Dict ({ \"a\" : []}) # create {\"a\": []} x [ \"a\" ] . append ( \"b\" ) # try to mutate the empty list print ( x [ \"a\" ]) # not [\"b\"] but [] temp = x [ \"a\" ] # temporarily substitute the list to a variable temp . append ( \"b\" ) # mutate the temporary variable x [ \"a\" ] = temp # then, write it back print ( x [ \"a\" ]) # now, we get [\"b\"]","title":"Development"},{"location":"development/#development","text":"","title":"Development"},{"location":"development/#tests-type-checking-and-linting-locally","text":"To run tests, type checking and linting locally, you'll need to have python 3.6 , 3.7 , 3.8 , 3.9 and 3.10 installed. We use tox to run tests and type checking on all the supported python versions. You can set up the development environment with the following commands: git clone git@github.com:osoken/sqlitecollections.git cd sqlitecollections python -m venv .venv source ./.venv/bin/activate pip install -e .[dev] Then, run tests is as easy as: tox After a while, you'll see the following message at the bottom of the long logs from pytest and others. __________________ summary __________________ lint: commands succeeded py36: commands succeeded py37: commands succeeded py38: commands succeeded py39: commands succeeded py310: commands succeeded congratulations :)","title":"Tests, type checking and linting locally"},{"location":"development/#building-documents","text":"We use mkdocs to build the documentation. To set up the environment for building the document, run the following commands: git clone git@github.com:osoken/sqlitecollections.git cd sqlitecollections python -m venv .venv source ./.venv/bin/activate pip install -e .[docs] Then, building the documentation can be done by the following command: mkdocs build The output will be located in site directory in your current directory. During development, you can also run mkdoc 's builtin development server with hot-reloading enabled with the following command: mkdocs serve In that case, you can check the result on http://127.0.0.1:8000 .","title":"Building documents"},{"location":"development/#benchmarks","text":"We have our own benchmark package.","title":"Benchmarks"},{"location":"development/#setup-the-benchmark-package","text":"To setup, run the following commands: pip install docs/scbenchmarker","title":"Setup the benchmark package"},{"location":"development/#run-all-benchmarks-and-render-the-results","text":"Benchmarking is done in two steps: Step 1: Run all benchmarks python -m scbenchmarker --prefix=[prefix] benchmarking Step 2: Render the results to markdown: python -m scbenchmarker --prefix=[prefix] render Results are stored in docs/benchmark_results/[prefix]/ . You can check the results on http://127.0.0.1:8000/benchmark/ .","title":"Run all benchmarks and render the results"},{"location":"development/#verbose-mode","text":"python -m scbenchmarker --verbose --prefix=[prefix] benchmarking An example output is as follows: benchmark_dict.py::BenchmarkSetitemAddNewItem: {'subject': '`__setitem__` (add new item)', 'one': {'name': '`dict`', 'timing': 0.0026721060276031494, 'memory': 0.00390625}, 'another': {'name': '`sqlitecollections.Dict`', 'timing': 0.006042510271072388, 'memory': 0.00390625}, 'ratio': {'timing': 2.2613287828598834, 'memory': 1.0}}","title":"Verbose mode"},{"location":"development/#run-individual-benchmarks","text":"You can also run individual benchmarks. python -m scbenchmarker --prefix=[prefix] benchmarking [benchmark script]::[benchmark name] This command runs only a single benchmark. Together with the verbose mode, this is convenient for improving a single method and checking benchmarks frequently.","title":"Run individual benchmarks"},{"location":"development/#compatibility-policy","text":"We aim to implement containers that are as compatible as possible with the built-in containers, but we have a few implementations that intentionally behave differently. Normal behavior will be compatible, but in case of errors it may be different. The constructor arguments are not compatible, as they require arguments specific to this package's container, such as sqlite3 DB file paths and serialization methods. copy method in each container behaves similarly to deep copy, since it copies the table containing serialized elements. Dict 's item order is guaranteed to be insertion order not only for python 3.7 and upper but for all versions. Dict.fromkeys class method is not provided. Any member in the container cannot be mutated directly. If you want to mutate any member, mutate it via temporary variable then write it back. import sqlitecollections as sc x = sc . Dict ({ \"a\" : []}) # create {\"a\": []} x [ \"a\" ] . append ( \"b\" ) # try to mutate the empty list print ( x [ \"a\" ]) # not [\"b\"] but [] temp = x [ \"a\" ] # temporarily substitute the list to a variable temp . append ( \"b\" ) # mutate the temporary variable x [ \"a\" ] = temp # then, write it back print ( x [ \"a\" ]) # now, we get [\"b\"]","title":"Compatibility policy"},{"location":"install/","text":"Install pip install sqlitecollections","title":"Install"},{"location":"install/#install","text":"pip install sqlitecollections","title":"Install"},{"location":"benchmark_results/py310/dict/","text":"timing | subject | `builtin` | `sqlitecollections` | ratio | | :------ | --------: | ------------------: | ----: | | `clear` | 0.00408 | 0.00731 | 1.79062 | | `__contains__` | 0.0041 | 0.00423 | 1.03108 | | `copy` | 0.0041 | 0.01103 | 2.69419 | | `__delitem__` | 0.00412 | 0.00781 | 1.89538 | | `get` | 0.00409 | 0.00428 | 1.04684 | | `get (unsuccessful search)` | 0.00413 | 0.00419 | 1.01385 | | `__getitem__` | 0.00405 | 0.00424 | 1.04606 | | `__init__` | 0.00417 | 0.03902 | 9.35005 | | `__ior__` | 0.00413 | 0.00764 | 1.8492 | | `__ior__` (many) | 0.00523 | 0.58535 | 111.9631 | | `items` | 0.00458 | 0.01103 | 2.40618 | | `__iter__` | 0.00411 | 0.00801 | 1.94611 | | `keys` | 0.00409 | 0.00822 | 2.01046 | | `__len__` | 0.0041 | 0.00405 | 0.98806 | | `__contains__` (unsuccessful search) | 0.00405 | 0.00421 | 1.03813 | | `__or__` | 0.00407 | 0.01189 | 2.92033 | | `__or__` (many) | 0.0055 | 0.59001 | 107.31823 | | `pop` | 0.00414 | 0.00744 | 1.79603 | | `pop (unsuccessful search)` | 0.00414 | 0.00603 | 1.45433 | | `popitem` | 0.00421 | 0.00818 | 1.94458 | | `reversed` | 0.00407 | 0.00799 | 1.96403 | | `setdefault` | 0.00418 | 0.00618 | 1.47607 | | `setdefault (unsuccessful search)` | 0.00417 | 0.00639 | 1.53127 | | `__setitem__` (add new item) | 0.00416 | 0.00804 | 1.93081 | | `__setitem__` (replace) | 0.00417 | 0.00773 | 1.85249 | | `update` | 0.00422 | 0.00793 | 1.88026 | | `update` (many) | 0.00552 | 0.59 | 106.82473 | | `values` | 0.00441 | 0.00813 | 1.84118 | approximate memory usage | subject | `builtin` | `sqlitecollections` | ratio | | :------ | --------: | ------------------: | ----: | | `clear` | 0.0 | 0.0 | 1.0 | | `__contains__` | 0.0 | 0.0 | 1.0 | | `copy` | 0.0 | 0.0 | 1.0 | | `__delitem__` | 0.0 | 0.0 | 1.0 | | `get` | 0.0 | 0.0 | 1.0 | | `get (unsuccessful search)` | 0.0 | 0.0 | 1.0 | | `__getitem__` | 0.0 | 0.0 | 1.0 | | `__init__` | 0.0 | 0.0 | 1.0 | | `__ior__` | 0.0 | 0.0 | 1.0 | | `__ior__` (many) | 0.17969 | 0.0 | 0.0 | | `items` | 0.0 | 0.21484 | inf | | `__iter__` | 0.0 | 0.0 | 1.0 | | `keys` | 0.0 | 0.0 | 1.0 | | `__len__` | 0.0 | 0.0 | 1.0 | | `__contains__` (unsuccessful search) | 0.0 | 0.0 | 1.0 | | `__or__` | 0.0 | 0.0 | 1.0 | | `__or__` (many) | 0.0 | 0.0 | 1.0 | | `pop` | 0.0 | 0.0 | 1.0 | | `pop (unsuccessful search)` | 0.0 | 0.0 | 1.0 | | `popitem` | 0.0 | 0.0 | 1.0 | | `reversed` | 0.0 | 0.0 | 1.0 | | `setdefault` | 0.0 | 0.0 | 1.0 | | `setdefault (unsuccessful search)` | 0.0 | 0.0 | 1.0 | | `__setitem__` (add new item) | 0.0 | 0.0 | 1.0 | | `__setitem__` (replace) | 0.0 | 0.0 | 1.0 | | `update` | 0.0 | 0.0 | 1.0 | | `update` (many) | 0.0 | 0.0 | 1.0 | | `values` | 0.0 | 0.0 | 1.0 |","title":"Dict"},{"location":"benchmark_results/py310/list/","text":"timing | subject | `builtin` | `sqlitecollections` | ratio | | :------ | --------: | ------------------: | ----: | | `__add__` | 0.00427 | 0.01126 | 2.63793 | | `append` | 0.00409 | 0.00702 | 1.71551 | | `clear` | 0.00397 | 0.00756 | 1.90316 | | `__contains__` | 0.00399 | 0.00405 | 1.0142 | | `copy` | 0.00402 | 0.01009 | 2.51077 | | `count` | 0.00404 | 0.00411 | 1.01655 | | `__init__` | 0.00409 | 0.02124 | 5.18863 | | `__delitem__` | 0.00405 | 0.08317 | 20.56195 | | `__delitem__` (slice) | 0.00403 | 0.15952 | 39.57489 | | `__delitem__` (slice with skip) | 0.00405 | 0.15894 | 39.21741 | | `extend` | 0.00405 | 0.00768 | 1.89786 | | `__getitem__` | 0.00397 | 0.00404 | 1.01693 | | `__getitem__` (slice) | 0.00401 | 0.09169 | 22.88216 | | `__getitem__` (slice with skip) | 0.00399 | 0.01354 | 3.38982 | | `__iadd__` | 0.00403 | 0.00754 | 1.87095 | | `__imult__` | 0.00398 | 0.23779 | 59.78059 | | `index` | 0.00396 | 0.00436 | 1.09977 | | `index` (unsuccessful search) | 0.00397 | 0.00438 | 1.10268 | | `insert` | 0.00404 | 0.15703 | 38.8907 | | `__len__` | 0.00399 | 0.00413 | 1.03346 | | `__mult__` | 0.00397 | 0.24149 | 60.83274 | | `__contains__` (unsuccessful search) | 0.00398 | 0.00411 | 1.03035 | | `pop` | 0.00405 | 0.08441 | 20.83743 | | `remove` | 0.00397 | 0.11842 | 29.83263 | | `__setitem__` | 0.00417 | 0.00709 | 1.70071 | | `__setitem__` (slice) | 0.00405 | 0.16246 | 40.11131 | | `__setitem__` (slice with skip) | 0.00397 | 0.0161 | 4.05364 | | `sort` | 0.00401 | 0.08828 | 22.03713 | approximate memory usage | subject | `builtin` | `sqlitecollections` | ratio | | :------ | --------: | ------------------: | ----: | | `__add__` | 0.0 | 0.00391 | inf | | `append` | 0.0 | 0.0 | 1.0 | | `clear` | 0.0 | 0.0 | 1.0 | | `__contains__` | 0.0 | 0.0 | 1.0 | | `copy` | 0.0 | 0.0 | 1.0 | | `count` | 0.0 | 0.0 | 1.0 | | `__init__` | 0.0 | 0.0 | 1.0 | | `__delitem__` | 0.0 | 0.0 | 1.0 | | `__delitem__` (slice) | 0.0 | 0.0 | 1.0 | | `__delitem__` (slice with skip) | 0.0 | 0.0 | 1.0 | | `extend` | 0.0 | 0.0 | 1.0 | | `__getitem__` | 0.0 | 0.0 | 1.0 | | `__getitem__` (slice) | 0.0 | 0.00391 | inf | | `__getitem__` (slice with skip) | 0.0 | 0.0 | 1.0 | | `__iadd__` | 0.0 | 0.0 | 1.0 | | `__imult__` | 0.0 | 0.0 | 1.0 | | `index` | 0.0 | 0.0 | 1.0 | | `index` (unsuccessful search) | 0.0 | 0.0 | 1.0 | | `insert` | 0.0 | 0.00391 | inf | | `__len__` | 0.0 | 0.0 | 1.0 | | `__mult__` | 0.0 | 0.0 | 1.0 | | `__contains__` (unsuccessful search) | 0.0 | 0.0 | 1.0 | | `pop` | 0.0 | 0.00391 | inf | | `remove` | 0.0 | 0.0 | 1.0 | | `__setitem__` | 0.0 | 0.0 | 1.0 | | `__setitem__` (slice) | 0.0 | 0.00391 | inf | | `__setitem__` (slice with skip) | 0.0 | 0.0 | 1.0 | | `sort` | 0.0 | 0.70312 | inf |","title":"List"},{"location":"benchmark_results/py310/set/","text":"timing | subject | `builtin` | `sqlitecollections` | ratio | | :------ | --------: | ------------------: | ----: | | `add (existing item)` | 0.00393 | 0.00569 | 1.44526 | | `add (new item)` | 0.00403 | 0.00744 | 1.84499 | | `__and__` | 0.004 | 0.01197 | 2.99462 | | `clear` | 0.00407 | 0.00706 | 1.73673 | | `__contains__` | 0.00399 | 0.00396 | 0.99314 | | `copy` | 0.00397 | 0.00934 | 2.34916 | | `difference` | 0.00394 | 0.0095 | 2.40782 | | `discard` | 0.00393 | 0.00694 | 1.76516 | | `discard (no changes)` | 0.00398 | 0.00539 | 1.3535 | | `__ge__` | 0.00393 | 0.00391 | 0.99453 | | `__ge__` (not greater than or equals to) | 0.00392 | 0.0042 | 1.07201 | | `__gt__` | 0.00389 | 0.00739 | 1.89921 | | `__gt__` (not greater than) | 0.00393 | 0.03025 | 7.68854 | | `__iand__` | 0.00392 | 0.00952 | 2.43086 | | `__init__` | 0.00398 | 0.07379 | 18.55024 | | `intersection` | 0.00401 | 0.01323 | 3.30116 | | `intersection_update` | 0.00399 | 0.00954 | 2.39115 | | `__ior__` | 0.00398 | 0.00928 | 2.33253 | | `isdisjoint` | 0.00394 | 0.00399 | 1.01391 | | `isdisjoint` (not disjoint) | 0.00396 | 0.00395 | 0.99828 | | `issubset` | 0.00393 | 0.03112 | 7.91808 | | `issubset` (not subset) | 0.00399 | 0.0126 | 3.15627 | | `issuperset` | 0.00398 | 0.02378 | 5.97973 | | `issuperset` (not superset) | 0.00396 | 0.00406 | 1.02434 | | `__ixor__` | 0.00401 | 0.03978 | 9.91996 | | `__le__` | 0.00394 | 0.00465 | 1.18054 | | `__le__` (not less than or equals to) | 0.00399 | 0.00394 | 0.98735 | | `__len__` | 0.00402 | 0.00394 | 0.98128 | | `__lt__` | 0.00397 | 0.0047 | 1.18281 | | `__lt__` (not less than) | 0.00395 | 0.00398 | 1.00881 | | `__contains__` (unsuccessful search) | 0.00395 | 0.00451 | 1.14065 | | `__or__` | 0.00399 | 0.01328 | 3.32964 | | `pop` | 0.00401 | 0.00715 | 1.78435 | | `remove` | 0.00398 | 0.00743 | 1.8681 | | `__sub__` | 0.00403 | 0.01126 | 2.79551 | | `symmetric_difference` | 0.00391 | 0.04292 | 10.98304 | | `symmetric_difference_update` | 0.00397 | 0.03976 | 10.00911 | | `union` | 0.00396 | 0.01322 | 3.3396 | | `update` | 0.0039 | 0.0087 | 2.22951 | | `__xor__` | 0.00395 | 0.04219 | 10.67956 | approximate memory usage | subject | `builtin` | `sqlitecollections` | ratio | | :------ | --------: | ------------------: | ----: | | `add (existing item)` | 0.0 | 0.0 | 1.0 | | `add (new item)` | 0.0 | 0.0 | 1.0 | | `__and__` | 0.0 | 0.0 | 1.0 | | `clear` | 0.0 | 0.0 | 1.0 | | `__contains__` | 0.0 | 0.0 | 1.0 | | `copy` | 0.0 | 0.0 | 1.0 | | `difference` | 0.0 | 0.0 | 1.0 | | `discard` | 0.0 | 0.0 | 1.0 | | `discard (no changes)` | 0.0 | 0.0 | 1.0 | | `__ge__` | 0.0 | 0.0 | 1.0 | | `__ge__` (not greater than or equals to) | 0.0 | 0.0 | 1.0 | | `__gt__` | 0.0 | 0.0 | 1.0 | | `__gt__` (not greater than) | 0.0 | 0.0 | 1.0 | | `__iand__` | 0.0 | 0.0 | 1.0 | | `__init__` | 0.0 | 0.0 | 1.0 | | `intersection` | 0.0 | 0.0 | 1.0 | | `intersection_update` | 0.0 | 0.0 | 1.0 | | `__ior__` | 0.0 | 0.0 | 1.0 | | `isdisjoint` | 0.0 | 0.0 | 1.0 | | `isdisjoint` (not disjoint) | 0.0 | 0.0 | 1.0 | | `issubset` | 0.0 | 0.0 | 1.0 | | `issubset` (not subset) | 0.0 | 0.0 | 1.0 | | `issuperset` | 0.0 | 0.0 | 1.0 | | `issuperset` (not superset) | 0.0 | 0.0 | 1.0 | | `__ixor__` | 0.0 | 0.0 | 1.0 | | `__le__` | 0.0 | 0.0 | 1.0 | | `__le__` (not less than or equals to) | 0.0 | 0.0 | 1.0 | | `__len__` | 0.0 | 0.0 | 1.0 | | `__lt__` | 0.0 | 0.0 | 1.0 | | `__lt__` (not less than) | 0.0 | 0.0 | 1.0 | | `__contains__` (unsuccessful search) | 0.0 | 0.0 | 1.0 | | `__or__` | 0.0 | 0.0 | 1.0 | | `pop` | 0.0 | 0.0 | 1.0 | | `remove` | 0.0 | 0.0 | 1.0 | | `__sub__` | 0.0 | 0.0 | 1.0 | | `symmetric_difference` | 0.0 | 0.0 | 1.0 | | `symmetric_difference_update` | 0.0 | 0.0 | 1.0 | | `union` | 0.0 | 0.0 | 1.0 | | `update` | 0.0 | 0.0 | 1.0 | | `__xor__` | 0.0 | 0.0 | 1.0 |","title":"Set"},{"location":"benchmark_results/py36/dict/","text":"timing | subject | `builtin` | `sqlitecollections` | ratio | | :------ | --------: | ------------------: | ----: | | `clear` | 0.00363 | 0.00573 | 1.57852 | | `__contains__` | 0.0036 | 0.00373 | 1.03521 | | `copy` | 0.00359 | 0.00766 | 2.1346 | | `__delitem__` | 0.00363 | 0.00578 | 1.59226 | | `get` | 0.0036 | 0.00372 | 1.03145 | | `get (unsuccessful search)` | 0.00367 | 0.00368 | 1.00273 | | `__getitem__` | 0.00364 | 0.00372 | 1.02332 | | `__init__` | 0.00368 | 0.04218 | 11.46324 | | `items` | 0.00396 | 0.01139 | 2.87439 | | `__iter__` | 0.00366 | 0.00793 | 2.16887 | | `keys` | 0.00369 | 0.00813 | 2.20326 | | `__len__` | 0.00364 | 0.00363 | 0.99838 | | `__contains__` (unsuccessful search) | 0.00367 | 0.00367 | 0.99825 | | `pop` | 0.0037 | 0.00593 | 1.6051 | | `pop (unsuccessful search)` | 0.00371 | 0.00497 | 1.33931 | | `popitem` | 0.00366 | 0.00644 | 1.75888 | | `setdefault` | 0.0037 | 0.005 | 1.35154 | | `setdefault (unsuccessful search)` | 0.00368 | 0.00537 | 1.45916 | | `__setitem__` (add new item) | 0.0037 | 0.00593 | 1.6045 | | `__setitem__` (replace) | 0.00369 | 0.00586 | 1.58754 | | `update` | 0.0037 | 0.00611 | 1.65319 | | `update` (many) | 0.00451 | 0.5657 | 125.33483 | | `values` | 0.00363 | 0.00768 | 2.11801 | approximate memory usage | subject | `builtin` | `sqlitecollections` | ratio | | :------ | --------: | ------------------: | ----: | | `clear` | 0.0 | 0.0 | 1.0 | | `__contains__` | 0.0 | 0.0 | 1.0 | | `copy` | 0.0 | 0.0 | 1.0 | | `__delitem__` | 0.0 | 0.0 | 1.0 | | `get` | 0.0 | 0.0 | 1.0 | | `get (unsuccessful search)` | 0.0 | 0.0 | 1.0 | | `__getitem__` | 0.0 | 0.0 | 1.0 | | `__init__` | 0.0 | 0.0 | 1.0 | | `items` | 0.12109 | 0.18359 | 1.51613 | | `__iter__` | 0.0 | 0.0 | 1.0 | | `keys` | 0.0 | 0.0 | 1.0 | | `__len__` | 0.0 | 0.0 | 1.0 | | `__contains__` (unsuccessful search) | 0.0 | 0.0 | 1.0 | | `pop` | 0.0 | 0.0 | 1.0 | | `pop (unsuccessful search)` | 0.0 | 0.0 | 1.0 | | `popitem` | 0.0 | 0.0 | 1.0 | | `setdefault` | 0.0 | 0.0 | 1.0 | | `setdefault (unsuccessful search)` | 0.0 | 0.0 | 1.0 | | `__setitem__` (add new item) | 0.0 | 0.0 | 1.0 | | `__setitem__` (replace) | 0.0 | 0.0 | 1.0 | | `update` | 0.0 | 0.0 | 1.0 | | `update` (many) | 0.03125 | 0.0 | 0.0 | | `values` | 0.0 | 0.0 | 1.0 |","title":"Dict"},{"location":"benchmark_results/py36/list/","text":"timing | subject | `builtin` | `sqlitecollections` | ratio | | :------ | --------: | ------------------: | ----: | | `__add__` | 0.00361 | 0.00835 | 2.31481 | | `append` | 0.00358 | 0.00562 | 1.56915 | | `clear` | 0.00353 | 0.00548 | 1.55171 | | `__contains__` | 0.00356 | 0.00357 | 1.00061 | | `copy` | 0.00354 | 0.00753 | 2.12994 | | `count` | 0.00351 | 0.00354 | 1.00772 | | `__init__` | 0.0036 | 0.01907 | 5.30091 | | `__delitem__` | 0.00357 | 0.07951 | 22.29983 | | `__delitem__` (slice) | 0.00357 | 0.15191 | 42.55099 | | `__delitem__` (slice with skip) | 0.00356 | 0.15158 | 42.53098 | | `extend` | 0.00362 | 0.00568 | 1.56778 | | `__getitem__` | 0.00354 | 0.00354 | 0.99945 | | `__getitem__` (slice) | 0.0036 | 0.08596 | 23.87664 | | `__getitem__` (slice with skip) | 0.00353 | 0.01015 | 2.87787 | | `__iadd__` | 0.00356 | 0.0056 | 1.57311 | | `__imult__` | 0.00354 | 0.22895 | 64.76223 | | `index` | 0.00354 | 0.00378 | 1.06953 | | `index` (unsuccessful search) | 0.00358 | 0.00383 | 1.06807 | | `insert` | 0.00365 | 0.1522 | 41.73876 | | `__len__` | 0.00352 | 0.00354 | 1.00557 | | `__mult__` | 0.00363 | 0.23295 | 64.23423 | | `__contains__` (unsuccessful search) | 0.00351 | 0.00357 | 1.01792 | | `pop` | 0.00357 | 0.08042 | 22.50928 | | `remove` | 0.00353 | 0.11378 | 32.23138 | | `__setitem__` | 0.00356 | 0.00554 | 1.55749 | | `__setitem__` (slice) | 0.00353 | 0.15426 | 43.69513 | | `__setitem__` (slice with skip) | 0.00351 | 0.01425 | 4.05779 | | `sort` | 0.0037 | 0.08349 | 22.55984 | approximate memory usage | subject | `builtin` | `sqlitecollections` | ratio | | :------ | --------: | ------------------: | ----: | | `__add__` | 0.0 | 0.0 | 1.0 | | `append` | 0.0 | 0.0 | 1.0 | | `clear` | 0.0 | 0.0 | 1.0 | | `__contains__` | 0.0 | 0.0 | 1.0 | | `copy` | 0.0 | 0.0 | 1.0 | | `count` | 0.0 | 0.0 | 1.0 | | `__init__` | 0.0 | 0.0 | 1.0 | | `__delitem__` | 0.0 | 0.0 | 1.0 | | `__delitem__` (slice) | 0.0 | 0.0 | 1.0 | | `__delitem__` (slice with skip) | 0.0 | 0.0 | 1.0 | | `extend` | 0.0 | 0.0 | 1.0 | | `__getitem__` | 0.0 | 0.0 | 1.0 | | `__getitem__` (slice) | 0.0 | 0.0 | 1.0 | | `__getitem__` (slice with skip) | 0.0 | 0.0 | 1.0 | | `__iadd__` | 0.0 | 0.0 | 1.0 | | `__imult__` | 0.0 | 0.0 | 1.0 | | `index` | 0.0 | 0.0 | 1.0 | | `index` (unsuccessful search) | 0.0 | 0.0 | 1.0 | | `insert` | 0.0 | 0.0 | 1.0 | | `__len__` | 0.0 | 0.0 | 1.0 | | `__mult__` | 0.0 | 0.0 | 1.0 | | `__contains__` (unsuccessful search) | 0.0 | 0.00391 | inf | | `pop` | 0.0 | 0.00391 | inf | | `remove` | 0.0 | 0.00391 | inf | | `__setitem__` | 0.0 | 0.0 | 1.0 | | `__setitem__` (slice) | 0.0 | 0.0 | 1.0 | | `__setitem__` (slice with skip) | 0.00391 | 0.0 | 0.0 | | `sort` | 0.0 | 1.3125 | inf |","title":"List"},{"location":"benchmark_results/py36/set/","text":"timing | subject | `builtin` | `sqlitecollections` | ratio | | :------ | --------: | ------------------: | ----: | | `add (existing item)` | 0.00349 | 0.00486 | 1.39374 | | `add (new item)` | 0.00345 | 0.00522 | 1.51065 | | `__and__` | 0.00343 | 0.01021 | 2.97401 | | `clear` | 0.00354 | 0.00515 | 1.45367 | | `__contains__` | 0.00359 | 0.00366 | 1.02163 | | `copy` | 0.00356 | 0.00679 | 1.90593 | | `difference` | 0.00351 | 0.0069 | 1.96681 | | `discard` | 0.0035 | 0.00532 | 1.51804 | | `discard (no changes)` | 0.00348 | 0.00556 | 1.59874 | | `__ge__` | 0.00349 | 0.00351 | 1.00531 | | `__ge__` (not greater than or equals to) | 0.00349 | 0.00358 | 1.02694 | | `__gt__` | 0.00348 | 0.00552 | 1.58465 | | `__gt__` (not greater than) | 0.00349 | 0.04314 | 12.37734 | | `__iand__` | 0.00348 | 0.0067 | 1.92625 | | `__init__` | 0.0035 | 0.01483 | 4.23303 | | `intersection` | 0.0035 | 0.00862 | 2.46174 | | `intersection_update` | 0.0035 | 0.00671 | 1.91972 | | `__ior__` | 0.00368 | 0.00731 | 1.9867 | | `isdisjoint` | 0.00354 | 0.00358 | 1.01386 | | `isdisjoint` (not disjoint) | 0.00352 | 0.00351 | 0.99639 | | `issubset` | 0.00354 | 0.02836 | 8.02064 | | `issubset` (not subset) | 0.00363 | 0.00893 | 2.46103 | | `issuperset` | 0.00353 | 0.02393 | 6.78362 | | `issuperset` (not superset) | 0.00352 | 0.00377 | 1.07123 | | `__ixor__` | 0.00354 | 0.03861 | 10.90337 | | `__le__` | 0.00351 | 0.00432 | 1.22956 | | `__le__` (not less than or equals to) | 0.00351 | 0.00352 | 1.00304 | | `__len__` | 0.00348 | 0.00361 | 1.03941 | | `__lt__` | 0.00353 | 0.00434 | 1.23147 | | `__lt__` (not less than) | 0.0035 | 0.0035 | 1.00219 | | `__contains__` (unsuccessful search) | 0.00349 | 0.00349 | 1.0007 | | `__or__` | 0.00349 | 0.0094 | 2.69319 | | `pop` | 0.00362 | 0.00529 | 1.46048 | | `remove` | 0.00351 | 0.00539 | 1.53842 | | `__sub__` | 0.00351 | 0.00703 | 2.00507 | | `symmetric_difference` | 0.00357 | 0.04106 | 11.51106 | | `symmetric_difference_update` | 0.0036 | 0.03923 | 10.91105 | | `union` | 0.00352 | 0.00964 | 2.73449 | | `update` | 0.0035 | 0.00711 | 2.03052 | | `__xor__` | 0.00351 | 0.04075 | 11.61353 | approximate memory usage | subject | `builtin` | `sqlitecollections` | ratio | | :------ | --------: | ------------------: | ----: | | `add (existing item)` | 0.0 | 0.0 | 1.0 | | `add (new item)` | 0.0 | 0.0 | 1.0 | | `__and__` | 0.0 | 0.00391 | inf | | `clear` | 0.0 | 0.0 | 1.0 | | `__contains__` | 0.0 | 0.0 | 1.0 | | `copy` | 0.0 | 0.0 | 1.0 | | `difference` | 0.0 | 0.0 | 1.0 | | `discard` | 0.0 | 0.0 | 1.0 | | `discard (no changes)` | 0.0 | 0.0 | 1.0 | | `__ge__` | 0.0 | 0.0 | 1.0 | | `__ge__` (not greater than or equals to) | 0.0 | 0.0 | 1.0 | | `__gt__` | 0.0 | 0.0 | 1.0 | | `__gt__` (not greater than) | 0.0 | 0.0 | 1.0 | | `__iand__` | 0.0 | 0.0 | 1.0 | | `__init__` | 0.0 | 0.05078 | inf | | `intersection` | 0.0 | 0.0 | 1.0 | | `intersection_update` | 0.0 | 0.0 | 1.0 | | `__ior__` | 0.0 | 0.0 | 1.0 | | `isdisjoint` | 0.0 | 0.0 | 1.0 | | `isdisjoint` (not disjoint) | 0.0 | 0.0 | 1.0 | | `issubset` | 0.0 | 0.01172 | inf | | `issubset` (not subset) | 0.0 | 0.0 | 1.0 | | `issuperset` | 0.0 | 0.0 | 1.0 | | `issuperset` (not superset) | 0.0 | 0.0 | 1.0 | | `__ixor__` | 0.0 | 0.0 | 1.0 | | `__le__` | 0.0 | 0.0 | 1.0 | | `__le__` (not less than or equals to) | 0.0 | 0.0 | 1.0 | | `__len__` | 0.0 | 0.0 | 1.0 | | `__lt__` | 0.0 | 0.0 | 1.0 | | `__lt__` (not less than) | 0.0 | 0.0 | 1.0 | | `__contains__` (unsuccessful search) | 0.0 | 0.0 | 1.0 | | `__or__` | 0.0 | 0.0 | 1.0 | | `pop` | 0.0 | 0.0 | 1.0 | | `remove` | 0.0 | 0.0 | 1.0 | | `__sub__` | 0.0 | 0.0 | 1.0 | | `symmetric_difference` | 0.0 | 0.0 | 1.0 | | `symmetric_difference_update` | 0.0 | 0.0 | 1.0 | | `union` | 0.0 | 0.0 | 1.0 | | `update` | 0.0 | 0.0 | 1.0 | | `__xor__` | 0.0 | 0.0 | 1.0 |","title":"Set"},{"location":"benchmark_results/py37/dict/","text":"timing | subject | `builtin` | `sqlitecollections` | ratio | | :------ | --------: | ------------------: | ----: | | `clear` | 0.00447 | 0.01158 | 2.59054 | | `__contains__` | 0.00454 | 0.00466 | 1.02745 | | `copy` | 0.00477 | 0.01145 | 2.40286 | | `__delitem__` | 0.00467 | 0.00811 | 1.73524 | | `get` | 0.0045 | 0.00455 | 1.01053 | | `get (unsuccessful search)` | 0.00455 | 0.00445 | 0.97897 | | `__getitem__` | 0.00426 | 0.00461 | 1.08317 | | `__init__` | 0.00437 | 0.04822 | 11.0397 | | `items` | 0.00502 | 0.01363 | 2.71787 | | `__iter__` | 0.00451 | 0.00955 | 2.11565 | | `keys` | 0.00453 | 0.00965 | 2.13254 | | `__len__` | 0.00423 | 0.00424 | 1.00186 | | `__contains__` (unsuccessful search) | 0.00438 | 0.0046 | 1.05069 | | `pop` | 0.00447 | 0.00796 | 1.78132 | | `pop (unsuccessful search)` | 0.00442 | 0.0064 | 1.44968 | | `popitem` | 0.00434 | 0.00906 | 2.08973 | | `setdefault` | 0.0043 | 0.00719 | 1.67067 | | `setdefault (unsuccessful search)` | 0.00433 | 0.00646 | 1.4911 | | `__setitem__` (add new item) | 0.00445 | 0.00801 | 1.80084 | | `__setitem__` (replace) | 0.00446 | 0.00764 | 1.7112 | | `update` | 0.0045 | 0.00906 | 2.01165 | | `update` (many) | 0.00548 | 0.59476 | 108.50984 | | `values` | 0.00429 | 0.00885 | 2.06552 | approximate memory usage | subject | `builtin` | `sqlitecollections` | ratio | | :------ | --------: | ------------------: | ----: | | `clear` | 0.0 | 0.0 | 1.0 | | `__contains__` | 0.0 | 0.0 | 1.0 | | `copy` | 0.0 | 0.0 | 1.0 | | `__delitem__` | 0.0 | 0.0 | 1.0 | | `get` | 0.0 | 0.0 | 1.0 | | `get (unsuccessful search)` | 0.0 | 0.0 | 1.0 | | `__getitem__` | 0.0 | 0.0 | 1.0 | | `__init__` | 0.0 | 0.0 | 1.0 | | `items` | 0.01172 | 0.32422 | 27.66667 | | `__iter__` | 0.0 | 0.0 | 1.0 | | `keys` | 0.0 | 0.0 | 1.0 | | `__len__` | 0.0 | 0.0 | 1.0 | | `__contains__` (unsuccessful search) | 0.0 | 0.0 | 1.0 | | `pop` | 0.0 | 0.0 | 1.0 | | `pop (unsuccessful search)` | 0.0 | 0.0 | 1.0 | | `popitem` | 0.0 | 0.0 | 1.0 | | `setdefault` | 0.0 | 0.0 | 1.0 | | `setdefault (unsuccessful search)` | 0.0 | 0.0 | 1.0 | | `__setitem__` (add new item) | 0.0 | 0.0 | 1.0 | | `__setitem__` (replace) | 0.0 | 0.0 | 1.0 | | `update` | 0.0 | 0.0 | 1.0 | | `update` (many) | 0.0 | 0.0 | 1.0 | | `values` | 0.0 | 0.0 | 1.0 |","title":"Dict"},{"location":"benchmark_results/py37/list/","text":"timing | subject | `builtin` | `sqlitecollections` | ratio | | :------ | --------: | ------------------: | ----: | | `__add__` | 0.0045 | 0.01281 | 2.84635 | | `append` | 0.00426 | 0.00788 | 1.85181 | | `clear` | 0.00419 | 0.00745 | 1.77673 | | `__contains__` | 0.0043 | 0.00431 | 1.00336 | | `copy` | 0.00426 | 0.01137 | 2.66936 | | `count` | 0.00412 | 0.00425 | 1.03044 | | `__init__` | 0.00419 | 0.02385 | 5.69179 | | `__delitem__` | 0.00421 | 0.0843 | 20.03964 | | `__delitem__` (slice) | 0.0043 | 0.16093 | 37.40736 | | `__delitem__` (slice with skip) | 0.00422 | 0.16112 | 38.21722 | | `extend` | 0.00421 | 0.00748 | 1.77616 | | `__getitem__` | 0.00418 | 0.00424 | 1.01508 | | `__getitem__` (slice) | 0.00425 | 0.09434 | 22.195 | | `__getitem__` (slice with skip) | 0.00421 | 0.01495 | 3.55104 | | `__iadd__` | 0.00417 | 0.00766 | 1.83762 | | `__imult__` | 0.00412 | 0.24066 | 58.39085 | | `index` | 0.0041 | 0.00453 | 1.10607 | | `index` (unsuccessful search) | 0.00418 | 0.00455 | 1.08715 | | `insert` | 0.00422 | 0.15969 | 37.80441 | | `__len__` | 0.00409 | 0.00415 | 1.01551 | | `__mult__` | 0.00412 | 0.2471 | 59.924 | | `__contains__` (unsuccessful search) | 0.00435 | 0.00449 | 1.03069 | | `pop` | 0.00453 | 0.08619 | 19.03024 | | `remove` | 0.00443 | 0.12171 | 27.47225 | | `__setitem__` | 0.00464 | 0.00821 | 1.77078 | | `__setitem__` (slice) | 0.00442 | 0.16725 | 37.87166 | | `__setitem__` (slice with skip) | 0.00456 | 0.02054 | 4.50302 | | `sort` | 0.00459 | 0.09456 | 20.59364 | approximate memory usage | subject | `builtin` | `sqlitecollections` | ratio | | :------ | --------: | ------------------: | ----: | | `__add__` | 0.0 | 0.0 | 1.0 | | `append` | 0.0 | 0.0 | 1.0 | | `clear` | 0.0 | 0.0 | 1.0 | | `__contains__` | 0.0 | 0.0 | 1.0 | | `copy` | 0.0 | 0.0 | 1.0 | | `count` | 0.0 | 0.0 | 1.0 | | `__init__` | 0.0 | 0.0 | 1.0 | | `__delitem__` | 0.0 | 0.0 | 1.0 | | `__delitem__` (slice) | 0.0 | 0.0 | 1.0 | | `__delitem__` (slice with skip) | 0.0 | 0.0 | 1.0 | | `extend` | 0.0 | 0.0 | 1.0 | | `__getitem__` | 0.0 | 0.0 | 1.0 | | `__getitem__` (slice) | 0.0 | 0.0 | 1.0 | | `__getitem__` (slice with skip) | 0.0 | 0.0 | 1.0 | | `__iadd__` | 0.0 | 0.0 | 1.0 | | `__imult__` | 0.0 | 0.0 | 1.0 | | `index` | 0.0 | 0.0 | 1.0 | | `index` (unsuccessful search) | 0.0 | 0.0 | 1.0 | | `insert` | 0.0 | 0.0 | 1.0 | | `__len__` | 0.0 | 0.0 | 1.0 | | `__mult__` | 0.0 | 0.0 | 1.0 | | `__contains__` (unsuccessful search) | 0.0 | 0.0 | 1.0 | | `pop` | 0.0 | 0.0 | 1.0 | | `remove` | 0.0 | 0.0 | 1.0 | | `__setitem__` | 0.0 | 0.0 | 1.0 | | `__setitem__` (slice) | 0.0 | 0.0 | 1.0 | | `__setitem__` (slice with skip) | 0.0 | 0.0 | 1.0 | | `sort` | 0.0 | 0.93359 | inf |","title":"List"},{"location":"benchmark_results/py37/set/","text":"timing | subject | `builtin` | `sqlitecollections` | ratio | | :------ | --------: | ------------------: | ----: | | `add (existing item)` | 0.0041 | 0.00595 | 1.45262 | | `add (new item)` | 0.00437 | 0.0075 | 1.71731 | | `__and__` | 0.00419 | 0.01255 | 2.9944 | | `clear` | 0.00413 | 0.00737 | 1.78618 | | `__contains__` | 0.00405 | 0.00416 | 1.02539 | | `copy` | 0.00419 | 0.00926 | 2.21023 | | `difference` | 0.00426 | 0.00973 | 2.28254 | | `discard` | 0.00419 | 0.00693 | 1.65317 | | `discard (no changes)` | 0.00427 | 0.0065 | 1.52099 | | `__ge__` | 0.00414 | 0.00418 | 1.01018 | | `__ge__` (not greater than or equals to) | 0.0042 | 0.00522 | 1.24346 | | `__gt__` | 0.0046 | 0.00815 | 1.77266 | | `__gt__` (not greater than) | 0.00426 | 0.03319 | 7.79817 | | `__iand__` | 0.00457 | 0.00941 | 2.06125 | | `__init__` | 0.0043 | 0.01974 | 4.58575 | | `intersection` | 0.00433 | 0.0126 | 2.91285 | | `intersection_update` | 0.00436 | 0.00987 | 2.26432 | | `__ior__` | 0.00439 | 0.00944 | 2.15023 | | `isdisjoint` | 0.00424 | 0.00423 | 0.99922 | | `isdisjoint` (not disjoint) | 0.00426 | 0.00425 | 0.99802 | | `issubset` | 0.00413 | 0.03307 | 7.99992 | | `issubset` (not subset) | 0.00447 | 0.17702 | 39.59685 | | `issuperset` | 0.00416 | 0.02494 | 5.99871 | | `issuperset` (not superset) | 0.00419 | 0.00504 | 1.2019 | | `__ixor__` | 0.00413 | 0.04264 | 10.32461 | | `__le__` | 0.00423 | 0.00503 | 1.18886 | | `__le__` (not less than or equals to) | 0.00421 | 0.00413 | 0.98129 | | `__len__` | 0.00418 | 0.00418 | 1.00024 | | `__lt__` | 0.00412 | 0.00514 | 1.24743 | | `__lt__` (not less than) | 0.0041 | 0.00406 | 0.99241 | | `__contains__` (unsuccessful search) | 0.0043 | 0.00428 | 0.99689 | | `__or__` | 0.00431 | 0.01373 | 3.18415 | | `pop` | 0.00435 | 0.00756 | 1.7374 | | `remove` | 0.00427 | 0.00877 | 2.05257 | | `__sub__` | 0.00413 | 0.00963 | 2.33296 | | `symmetric_difference` | 0.00414 | 0.04507 | 10.89899 | | `symmetric_difference_update` | 0.00419 | 0.04284 | 10.23487 | | `union` | 0.00413 | 0.01206 | 2.91884 | | `update` | 0.00416 | 0.00911 | 2.1881 | | `__xor__` | 0.00418 | 0.04658 | 11.1397 | approximate memory usage | subject | `builtin` | `sqlitecollections` | ratio | | :------ | --------: | ------------------: | ----: | | `add (existing item)` | 0.0 | 0.0 | 1.0 | | `add (new item)` | 0.0 | 0.0 | 1.0 | | `__and__` | 0.0 | 0.0 | 1.0 | | `clear` | 0.0 | 0.0 | 1.0 | | `__contains__` | 0.0 | 0.0 | 1.0 | | `copy` | 0.0 | 0.0 | 1.0 | | `difference` | 0.0 | 0.0 | 1.0 | | `discard` | 0.0 | 0.0 | 1.0 | | `discard (no changes)` | 0.0 | 0.0 | 1.0 | | `__ge__` | 0.0 | 0.0 | 1.0 | | `__ge__` (not greater than or equals to) | 0.0 | 0.0 | 1.0 | | `__gt__` | 0.0 | 0.0 | 1.0 | | `__gt__` (not greater than) | 0.0 | 0.0 | 1.0 | | `__iand__` | 0.0 | 0.0 | 1.0 | | `__init__` | 0.0 | 0.05469 | inf | | `intersection` | 0.0 | 0.0 | 1.0 | | `intersection_update` | 0.0 | 0.0 | 1.0 | | `__ior__` | 0.0 | 0.0 | 1.0 | | `isdisjoint` | 0.0 | 0.0 | 1.0 | | `isdisjoint` (not disjoint) | 0.0 | 0.0 | 1.0 | | `issubset` | 0.0 | 0.0 | 1.0 | | `issubset` (not subset) | 0.0 | 0.0 | 1.0 | | `issuperset` | 0.0 | 0.0 | 1.0 | | `issuperset` (not superset) | 0.0 | 0.0 | 1.0 | | `__ixor__` | 0.0 | 0.0 | 1.0 | | `__le__` | 0.0 | 0.0 | 1.0 | | `__le__` (not less than or equals to) | 0.0 | 0.0 | 1.0 | | `__len__` | 0.0 | 0.0 | 1.0 | | `__lt__` | 0.0 | 0.0 | 1.0 | | `__lt__` (not less than) | 0.0 | 0.0 | 1.0 | | `__contains__` (unsuccessful search) | 0.0 | 0.0 | 1.0 | | `__or__` | 0.0 | 0.0 | 1.0 | | `pop` | 0.0 | 0.0 | 1.0 | | `remove` | 0.0 | 0.0 | 1.0 | | `__sub__` | 0.0 | 0.0 | 1.0 | | `symmetric_difference` | 0.0 | 0.0 | 1.0 | | `symmetric_difference_update` | 0.0 | 0.0 | 1.0 | | `union` | 0.0 | 0.0 | 1.0 | | `update` | 0.0 | 0.0 | 1.0 | | `__xor__` | 0.0 | 0.0 | 1.0 |","title":"Set"},{"location":"benchmark_results/py38/dict/","text":"timing | subject | `builtin` | `sqlitecollections` | ratio | | :------ | --------: | ------------------: | ----: | | `clear` | 0.00371 | 0.01674 | 4.51475 | | `__contains__` | 0.00367 | 0.0038 | 1.03561 | | `copy` | 0.00367 | 0.01145 | 3.11837 | | `__delitem__` | 0.00375 | 0.00687 | 1.83139 | | `get` | 0.00365 | 0.00381 | 1.04353 | | `get (unsuccessful search)` | 0.00364 | 0.00381 | 1.04807 | | `__getitem__` | 0.00365 | 0.00383 | 1.05081 | | `__init__` | 0.00375 | 0.03837 | 10.23801 | | `items` | 0.00413 | 0.01052 | 2.55033 | | `__iter__` | 0.00368 | 0.00746 | 2.03044 | | `keys` | 0.0037 | 0.00755 | 2.04378 | | `__len__` | 0.00364 | 0.00369 | 1.0155 | | `__contains__` (unsuccessful search) | 0.00368 | 0.00379 | 1.02988 | | `pop` | 0.00373 | 0.00706 | 1.89647 | | `pop (unsuccessful search)` | 0.00373 | 0.00548 | 1.46886 | | `popitem` | 0.00372 | 0.00768 | 2.0665 | | `reversed` | 0.00366 | 0.00766 | 2.09365 | | `setdefault` | 0.00374 | 0.0055 | 1.47223 | | `setdefault (unsuccessful search)` | 0.00377 | 0.00597 | 1.58341 | | `__setitem__` (add new item) | 0.00369 | 0.00695 | 1.88338 | | `__setitem__` (replace) | 0.00381 | 0.00691 | 1.81558 | | `update` | 0.00377 | 0.0083 | 2.20367 | | `update` (many) | 0.00476 | 0.55679 | 116.98278 | | `values` | 0.00364 | 0.00721 | 1.97884 | approximate memory usage | subject | `builtin` | `sqlitecollections` | ratio | | :------ | --------: | ------------------: | ----: | | `clear` | 0.0 | 0.0 | 1.0 | | `__contains__` | 0.0 | 0.0 | 1.0 | | `copy` | 0.0 | 0.0 | 1.0 | | `__delitem__` | 0.0 | 0.0 | 1.0 | | `get` | 0.0 | 0.0 | 1.0 | | `get (unsuccessful search)` | 0.0 | 0.0 | 1.0 | | `__getitem__` | 0.0 | 0.0 | 1.0 | | `__init__` | 0.0 | 0.0 | 1.0 | | `items` | 0.14062 | 0.20703 | 1.47222 | | `__iter__` | 0.0 | 0.0 | 1.0 | | `keys` | 0.0 | 0.0 | 1.0 | | `__len__` | 0.0 | 0.0 | 1.0 | | `__contains__` (unsuccessful search) | 0.0 | 0.0 | 1.0 | | `pop` | 0.0 | 0.0 | 1.0 | | `pop (unsuccessful search)` | 0.0 | 0.0 | 1.0 | | `popitem` | 0.0 | 0.0 | 1.0 | | `reversed` | 0.0 | 0.0 | 1.0 | | `setdefault` | 0.0 | 0.0 | 1.0 | | `setdefault (unsuccessful search)` | 0.0 | 0.0 | 1.0 | | `__setitem__` (add new item) | 0.0 | 0.0 | 1.0 | | `__setitem__` (replace) | 0.0 | 0.0 | 1.0 | | `update` | 0.0 | 0.0 | 1.0 | | `update` (many) | 0.125 | 0.0 | 0.0 | | `values` | 0.0 | 0.0 | 1.0 |","title":"Dict"},{"location":"benchmark_results/py38/list/","text":"timing | subject | `builtin` | `sqlitecollections` | ratio | | :------ | --------: | ------------------: | ----: | | `__add__` | 0.00358 | 0.01108 | 3.09426 | | `append` | 0.00361 | 0.00703 | 1.94514 | | `clear` | 0.0036 | 0.0064 | 1.77634 | | `__contains__` | 0.0036 | 0.00359 | 0.99621 | | `copy` | 0.00366 | 0.00853 | 2.33293 | | `count` | 0.00361 | 0.00364 | 1.00795 | | `__init__` | 0.00362 | 0.02139 | 5.90712 | | `__delitem__` | 0.00365 | 0.08113 | 22.20781 | | `__delitem__` (slice) | 0.00359 | 0.15324 | 42.67256 | | `__delitem__` (slice with skip) | 0.00362 | 0.15309 | 42.27317 | | `extend` | 0.00363 | 0.00718 | 1.97536 | | `__getitem__` | 0.00361 | 0.00362 | 1.00445 | | `__getitem__` (slice) | 0.0036 | 0.08956 | 24.85907 | | `__getitem__` (slice with skip) | 0.00363 | 0.01366 | 3.76336 | | `__iadd__` | 0.0036 | 0.00702 | 1.94992 | | `__imult__` | 0.00363 | 0.23106 | 63.5989 | | `index` | 0.00364 | 0.00387 | 1.06418 | | `index` (unsuccessful search) | 0.00368 | 0.0039 | 1.06015 | | `insert` | 0.00366 | 0.15021 | 41.00682 | | `__len__` | 0.00357 | 0.00363 | 1.0173 | | `__mult__` | 0.0036 | 0.23434 | 65.17943 | | `__contains__` (unsuccessful search) | 0.0036 | 0.00368 | 1.02045 | | `pop` | 0.00362 | 0.08004 | 22.09423 | | `remove` | 0.00359 | 0.1157 | 32.23612 | | `__setitem__` | 0.00362 | 0.00704 | 1.94554 | | `__setitem__` (slice) | 0.00361 | 0.15757 | 43.60658 | | `__setitem__` (slice with skip) | 0.00361 | 0.01529 | 4.23987 | | `sort` | 0.00361 | 0.08603 | 23.81614 | approximate memory usage | subject | `builtin` | `sqlitecollections` | ratio | | :------ | --------: | ------------------: | ----: | | `__add__` | 0.0 | 0.0 | 1.0 | | `append` | 0.0 | 0.0 | 1.0 | | `clear` | 0.0 | 0.0 | 1.0 | | `__contains__` | 0.0 | 0.0 | 1.0 | | `copy` | 0.0 | 0.0 | 1.0 | | `count` | 0.0 | 0.0 | 1.0 | | `__init__` | 0.0 | 0.05078 | inf | | `__delitem__` | 0.0 | 0.0 | 1.0 | | `__delitem__` (slice) | 0.0 | 0.0 | 1.0 | | `__delitem__` (slice with skip) | 0.0 | 0.0 | 1.0 | | `extend` | 0.0 | 0.0 | 1.0 | | `__getitem__` | 0.0 | 0.0 | 1.0 | | `__getitem__` (slice) | 0.0 | 0.0 | 1.0 | | `__getitem__` (slice with skip) | 0.0 | 0.0 | 1.0 | | `__iadd__` | 0.0 | 0.0 | 1.0 | | `__imult__` | 0.0 | 0.0 | 1.0 | | `index` | 0.0 | 0.0 | 1.0 | | `index` (unsuccessful search) | 0.0 | 0.0 | 1.0 | | `insert` | 0.0 | 0.0 | 1.0 | | `__len__` | 0.0 | 0.0 | 1.0 | | `__mult__` | 0.0 | 0.0 | 1.0 | | `__contains__` (unsuccessful search) | 0.0 | 0.0 | 1.0 | | `pop` | 0.0 | 0.0 | 1.0 | | `remove` | 0.0 | 0.0 | 1.0 | | `__setitem__` | 0.0 | 0.0 | 1.0 | | `__setitem__` (slice) | 0.0 | 0.0 | 1.0 | | `__setitem__` (slice with skip) | 0.0 | 0.0 | 1.0 | | `sort` | 0.0 | 0.94922 | inf |","title":"List"},{"location":"benchmark_results/py38/set/","text":"timing | subject | `builtin` | `sqlitecollections` | ratio | | :------ | --------: | ------------------: | ----: | | `add (existing item)` | 0.00349 | 0.00524 | 1.50156 | | `add (new item)` | 0.00362 | 0.0065 | 1.79574 | | `__and__` | 0.00357 | 0.01133 | 3.17571 | | `clear` | 0.00354 | 0.00619 | 1.74939 | | `__contains__` | 0.00354 | 0.00389 | 1.09856 | | `copy` | 0.00362 | 0.00874 | 2.41286 | | `difference` | 0.00359 | 0.01164 | 3.24561 | | `discard` | 0.00359 | 0.00672 | 1.87214 | | `discard (no changes)` | 0.00354 | 0.00531 | 1.50011 | | `__ge__` | 0.00357 | 0.00357 | 1.00083 | | `__ge__` (not greater than or equals to) | 0.00356 | 0.00359 | 1.00814 | | `__gt__` | 0.00357 | 0.0076 | 2.12806 | | `__gt__` (not greater than) | 0.00354 | 0.03073 | 8.66931 | | `__iand__` | 0.00355 | 0.00876 | 2.46864 | | `__init__` | 0.00359 | 0.01742 | 4.85038 | | `intersection` | 0.00357 | 0.02443 | 6.83353 | | `intersection_update` | 0.00357 | 0.00832 | 2.3336 | | `__ior__` | 0.00359 | 0.00787 | 2.19413 | | `isdisjoint` | 0.00358 | 0.0036 | 1.00376 | | `isdisjoint` (not disjoint) | 0.00357 | 0.00358 | 1.0024 | | `issubset` | 0.00363 | 0.02962 | 8.16645 | | `issubset` (not subset) | 0.00353 | 0.0121 | 3.424 | | `issuperset` | 0.00353 | 0.02304 | 6.53635 | | `issuperset` (not superset) | 0.00356 | 0.00356 | 0.9991 | | `__ixor__` | 0.00405 | 0.21912 | 54.07461 | | `__le__` | 0.00356 | 0.00439 | 1.23235 | | `__le__` (not less than or equals to) | 0.00357 | 0.00355 | 0.99535 | | `__len__` | 0.00358 | 0.00363 | 1.01523 | | `__lt__` | 0.00356 | 0.00437 | 1.22884 | | `__lt__` (not less than) | 0.00363 | 0.00354 | 0.9728 | | `__contains__` (unsuccessful search) | 0.00354 | 0.0036 | 1.01604 | | `__or__` | 0.00362 | 0.01277 | 3.525 | | `pop` | 0.00358 | 0.00672 | 1.87652 | | `remove` | 0.00369 | 0.01509 | 4.08635 | | `__sub__` | 0.0036 | 0.00982 | 2.72896 | | `symmetric_difference` | 0.00362 | 0.04535 | 12.54442 | | `symmetric_difference_update` | 0.00359 | 0.03954 | 11.02607 | | `union` | 0.00358 | 0.0119 | 3.32476 | | `update` | 0.00357 | 0.00764 | 2.13837 | | `__xor__` | 0.00361 | 0.04183 | 11.59938 | approximate memory usage | subject | `builtin` | `sqlitecollections` | ratio | | :------ | --------: | ------------------: | ----: | | `add (existing item)` | 0.0 | 0.0 | 1.0 | | `add (new item)` | 0.0 | 0.0 | 1.0 | | `__and__` | 0.0 | 0.0 | 1.0 | | `clear` | 0.0 | 0.0 | 1.0 | | `__contains__` | 0.0 | 0.0 | 1.0 | | `copy` | 0.0 | 0.0 | 1.0 | | `difference` | 0.0 | 0.0 | 1.0 | | `discard` | 0.0 | 0.0 | 1.0 | | `discard (no changes)` | 0.0 | 0.0 | 1.0 | | `__ge__` | 0.0 | 0.0 | 1.0 | | `__ge__` (not greater than or equals to) | 0.0 | 0.0 | 1.0 | | `__gt__` | 0.0 | 0.0 | 1.0 | | `__gt__` (not greater than) | 0.0 | 0.0 | 1.0 | | `__iand__` | 0.0 | 0.0 | 1.0 | | `__init__` | 0.0 | 0.0 | 1.0 | | `intersection` | 0.0 | 0.0 | 1.0 | | `intersection_update` | 0.0 | 0.0 | 1.0 | | `__ior__` | 0.0 | 0.0 | 1.0 | | `isdisjoint` | 0.0 | 0.0 | 1.0 | | `isdisjoint` (not disjoint) | 0.0 | 0.0 | 1.0 | | `issubset` | 0.0 | 0.0 | 1.0 | | `issubset` (not subset) | 0.0 | 0.0 | 1.0 | | `issuperset` | 0.0 | 0.0 | 1.0 | | `issuperset` (not superset) | 0.0 | 0.0 | 1.0 | | `__ixor__` | 0.0 | 0.0 | 1.0 | | `__le__` | 0.0 | 0.0 | 1.0 | | `__le__` (not less than or equals to) | 0.0 | 0.0 | 1.0 | | `__len__` | 0.0 | 0.0 | 1.0 | | `__lt__` | 0.0 | 0.0 | 1.0 | | `__lt__` (not less than) | 0.0 | 0.0 | 1.0 | | `__contains__` (unsuccessful search) | 0.0 | 0.0 | 1.0 | | `__or__` | 0.0 | 0.0 | 1.0 | | `pop` | 0.0 | 0.0 | 1.0 | | `remove` | 0.0 | 0.0 | 1.0 | | `__sub__` | 0.0 | 0.0 | 1.0 | | `symmetric_difference` | 0.0 | 0.0 | 1.0 | | `symmetric_difference_update` | 0.0 | 0.0 | 1.0 | | `union` | 0.0 | 0.0 | 1.0 | | `update` | 0.0 | 0.0 | 1.0 | | `__xor__` | 0.0 | 0.0 | 1.0 |","title":"Set"},{"location":"benchmark_results/py39/dict/","text":"timing | subject | `builtin` | `sqlitecollections` | ratio | | :------ | --------: | ------------------: | ----: | | `clear` | 0.00333 | 0.00554 | 1.66181 | | `__contains__` | 0.00331 | 0.00347 | 1.04858 | | `copy` | 0.00338 | 0.00753 | 2.22603 | | `__delitem__` | 0.00345 | 0.00579 | 1.67766 | | `get` | 0.00334 | 0.00352 | 1.05475 | | `get (unsuccessful search)` | 0.00332 | 0.00349 | 1.0516 | | `__getitem__` | 0.00337 | 0.0035 | 1.03951 | | `__init__` | 0.00354 | 0.0357 | 10.09869 | | `__ior__` | 0.00341 | 0.00613 | 1.79797 | | `__ior__` (many) | 0.0045 | 0.55309 | 122.87129 | | `items` | 0.0038 | 0.00972 | 2.56128 | | `__iter__` | 0.00339 | 0.00688 | 2.02755 | | `keys` | 0.00349 | 0.00692 | 1.98402 | | `__len__` | 0.00335 | 0.00338 | 1.00753 | | `__contains__` (unsuccessful search) | 0.00332 | 0.00348 | 1.04974 | | `__or__` | 0.00335 | 0.00837 | 2.50045 | | `__or__` (many) | 0.00466 | 0.56129 | 120.55105 | | `pop` | 0.0034 | 0.00566 | 1.663 | | `pop (unsuccessful search)` | 0.00345 | 0.0047 | 1.36275 | | `popitem` | 0.00344 | 0.00626 | 1.81884 | | `reversed` | 0.00334 | 0.00678 | 2.02955 | | `setdefault` | 0.00342 | 0.00473 | 1.38378 | | `setdefault (unsuccessful search)` | 0.00343 | 0.00501 | 1.45998 | | `__setitem__` (add new item) | 0.0034 | 0.00576 | 1.69593 | | `__setitem__` (replace) | 0.00341 | 0.00572 | 1.67862 | | `update` | 0.00342 | 0.00573 | 1.67559 | | `update` (many) | 0.00433 | 0.55876 | 129.03893 | | `values` | 0.00333 | 0.00667 | 2.00172 | approximate memory usage | subject | `builtin` | `sqlitecollections` | ratio | | :------ | --------: | ------------------: | ----: | | `clear` | 0.0 | 0.0 | 1.0 | | `__contains__` | 0.0 | 0.0 | 1.0 | | `copy` | 0.0 | 0.0 | 1.0 | | `__delitem__` | 0.0 | 0.0 | 1.0 | | `get` | 0.0 | 0.0 | 1.0 | | `get (unsuccessful search)` | 0.0 | 0.0 | 1.0 | | `__getitem__` | 0.0 | 0.0 | 1.0 | | `__init__` | 0.0 | 0.0 | 1.0 | | `__ior__` | 0.0 | 0.0 | 1.0 | | `__ior__` (many) | 0.18359 | 0.0 | 0.0 | | `items` | 0.0 | 0.21875 | inf | | `__iter__` | 0.0 | 0.0 | 1.0 | | `keys` | 0.0 | 0.0 | 1.0 | | `__len__` | 0.0 | 0.0 | 1.0 | | `__contains__` (unsuccessful search) | 0.0 | 0.0 | 1.0 | | `__or__` | 0.0 | 0.0 | 1.0 | | `__or__` (many) | 0.0 | 0.0 | 1.0 | | `pop` | 0.0 | 0.0 | 1.0 | | `pop (unsuccessful search)` | 0.0 | 0.0 | 1.0 | | `popitem` | 0.0 | 0.0 | 1.0 | | `reversed` | 0.0 | 0.0 | 1.0 | | `setdefault` | 0.0 | 0.0 | 1.0 | | `setdefault (unsuccessful search)` | 0.0 | 0.0 | 1.0 | | `__setitem__` (add new item) | 0.0 | 0.0 | 1.0 | | `__setitem__` (replace) | 0.0 | 0.0 | 1.0 | | `update` | 0.0 | 0.0 | 1.0 | | `update` (many) | 0.0 | 0.0 | 1.0 | | `values` | 0.0 | 0.0 | 1.0 |","title":"Dict"},{"location":"benchmark_results/py39/list/","text":"timing | subject | `builtin` | `sqlitecollections` | ratio | | :------ | --------: | ------------------: | ----: | | `__add__` | 0.00339 | 0.00808 | 2.38378 | | `append` | 0.00336 | 0.0053 | 1.57657 | | `clear` | 0.00331 | 0.00544 | 1.64559 | | `__contains__` | 0.0033 | 0.0033 | 0.99865 | | `copy` | 0.00334 | 0.00703 | 2.10335 | | `count` | 0.00334 | 0.00339 | 1.01695 | | `__init__` | 0.00328 | 0.01671 | 5.10204 | | `__delitem__` | 0.00339 | 0.07946 | 23.46532 | | `__delitem__` (slice) | 0.00332 | 0.15145 | 45.63277 | | `__delitem__` (slice with skip) | 0.00334 | 0.15094 | 45.25865 | | `extend` | 0.00339 | 0.00537 | 1.58372 | | `__getitem__` | 0.00329 | 0.00335 | 1.01989 | | `__getitem__` (slice) | 0.0033 | 0.08543 | 25.882 | | `__getitem__` (slice with skip) | 0.0033 | 0.0096 | 2.91335 | | `__iadd__` | 0.00336 | 0.00555 | 1.65466 | | `__imult__` | 0.00338 | 0.23247 | 68.76231 | | `index` | 0.00331 | 0.00359 | 1.08471 | | `index` (unsuccessful search) | 0.00331 | 0.00358 | 1.08372 | | `insert` | 0.00343 | 0.15261 | 44.49283 | | `__len__` | 0.00329 | 0.00333 | 1.01141 | | `__mult__` | 0.0033 | 0.23066 | 69.81657 | | `__contains__` (unsuccessful search) | 0.00336 | 0.00338 | 1.00389 | | `pop` | 0.00337 | 0.07957 | 23.62134 | | `remove` | 0.00333 | 0.11271 | 33.80715 | | `__setitem__` | 0.00336 | 0.00557 | 1.65795 | | `__setitem__` (slice) | 0.00334 | 0.15585 | 46.6512 | | `__setitem__` (slice with skip) | 0.00335 | 0.01385 | 4.13082 | | `sort` | 0.00348 | 0.07711 | 22.13784 | approximate memory usage | subject | `builtin` | `sqlitecollections` | ratio | | :------ | --------: | ------------------: | ----: | | `__add__` | 0.0 | 0.0 | 1.0 | | `append` | 0.0 | 0.0 | 1.0 | | `clear` | 0.0 | 0.0 | 1.0 | | `__contains__` | 0.0 | 0.0 | 1.0 | | `copy` | 0.0 | 0.0 | 1.0 | | `count` | 0.0 | 0.0 | 1.0 | | `__init__` | 0.0 | 0.0 | 1.0 | | `__delitem__` | 0.0 | 0.00391 | inf | | `__delitem__` (slice) | 0.0 | 0.0 | 1.0 | | `__delitem__` (slice with skip) | 0.0 | 0.0 | 1.0 | | `extend` | 0.0 | 0.0 | 1.0 | | `__getitem__` | 0.0 | 0.0 | 1.0 | | `__getitem__` (slice) | 0.0 | 0.00391 | inf | | `__getitem__` (slice with skip) | 0.0 | 0.0 | 1.0 | | `__iadd__` | 0.0 | 0.0 | 1.0 | | `__imult__` | 0.0 | 0.0 | 1.0 | | `index` | 0.0 | 0.0 | 1.0 | | `index` (unsuccessful search) | 0.0 | 0.0 | 1.0 | | `insert` | 0.0 | 0.0 | 1.0 | | `__len__` | 0.0 | 0.0 | 1.0 | | `__mult__` | 0.0 | 0.0 | 1.0 | | `__contains__` (unsuccessful search) | 0.0 | 0.0 | 1.0 | | `pop` | 0.0 | 0.0 | 1.0 | | `remove` | 0.0 | 0.0 | 1.0 | | `__setitem__` | 0.0 | 0.0 | 1.0 | | `__setitem__` (slice) | 0.0 | 0.0 | 1.0 | | `__setitem__` (slice with skip) | 0.0 | 0.0 | 1.0 | | `sort` | 0.0 | 0.54688 | inf |","title":"List"},{"location":"benchmark_results/py39/set/","text":"timing | subject | `builtin` | `sqlitecollections` | ratio | | :------ | --------: | ------------------: | ----: | | `add (existing item)` | 0.00322 | 0.00425 | 1.3172 | | `add (new item)` | 0.00332 | 0.00519 | 1.56251 | | `__and__` | 0.00328 | 0.00855 | 2.60705 | | `clear` | 0.00328 | 0.005 | 1.52336 | | `__contains__` | 0.00327 | 0.00328 | 1.00248 | | `copy` | 0.00331 | 0.0065 | 1.96279 | | `difference` | 0.00336 | 0.00676 | 2.00892 | | `discard` | 0.00332 | 0.00945 | 2.84766 | | `discard (no changes)` | 0.00332 | 0.00436 | 1.31433 | | `__ge__` | 0.00336 | 0.00325 | 0.96775 | | `__ge__` (not greater than or equals to) | 0.00331 | 0.00576 | 1.74033 | | `__gt__` | 0.0033 | 0.00533 | 1.61337 | | `__gt__` (not greater than) | 0.00327 | 0.02924 | 8.93489 | | `__iand__` | 0.0033 | 0.00655 | 1.98655 | | `__init__` | 0.00332 | 0.01318 | 3.97152 | | `intersection` | 0.00326 | 0.00845 | 2.59027 | | `intersection_update` | 0.00331 | 0.00657 | 1.98345 | | `__ior__` | 0.00331 | 0.00686 | 2.06963 | | `isdisjoint` | 0.00334 | 0.00333 | 0.99624 | | `isdisjoint` (not disjoint) | 0.0033 | 0.00329 | 0.99613 | | `issubset` | 0.00328 | 0.02688 | 8.19537 | | `issubset` (not subset) | 0.0033 | 0.00861 | 2.60596 | | `issuperset` | 0.00341 | 0.02282 | 6.703 | | `issuperset` (not superset) | 0.0033 | 0.00575 | 1.74018 | | `__ixor__` | 0.00333 | 0.03618 | 10.87578 | | `__le__` | 0.00332 | 0.00399 | 1.2006 | | `__le__` (not less than or equals to) | 0.00329 | 0.00329 | 0.99755 | | `__len__` | 0.00338 | 0.00329 | 0.97576 | | `__lt__` | 0.00336 | 0.00408 | 1.21378 | | `__lt__` (not less than) | 0.00331 | 0.00332 | 1.00548 | | `__contains__` (unsuccessful search) | 0.0033 | 0.0033 | 0.99962 | | `__or__` | 0.00332 | 0.00896 | 2.69798 | | `pop` | 0.00331 | 0.00514 | 1.54961 | | `remove` | 0.00332 | 0.00509 | 1.53164 | | `__sub__` | 0.00333 | 0.0067 | 2.01037 | | `symmetric_difference` | 0.00331 | 0.03817 | 11.54713 | | `symmetric_difference_update` | 0.0033 | 0.0363 | 11.0122 | | `union` | 0.0033 | 0.00886 | 2.68769 | | `update` | 0.00331 | 0.00672 | 2.03014 | | `__xor__` | 0.00328 | 0.03787 | 11.54303 | approximate memory usage | subject | `builtin` | `sqlitecollections` | ratio | | :------ | --------: | ------------------: | ----: | | `add (existing item)` | 0.0 | 0.0 | 1.0 | | `add (new item)` | 0.0 | 0.0 | 1.0 | | `__and__` | 0.0 | 0.0 | 1.0 | | `clear` | 0.0 | 0.0 | 1.0 | | `__contains__` | 0.0 | 0.0 | 1.0 | | `copy` | 0.0 | 0.0 | 1.0 | | `difference` | 0.0 | 0.0 | 1.0 | | `discard` | 0.0 | 0.0 | 1.0 | | `discard (no changes)` | 0.0 | 0.0 | 1.0 | | `__ge__` | 0.0 | 0.0 | 1.0 | | `__ge__` (not greater than or equals to) | 0.0 | 0.0 | 1.0 | | `__gt__` | 0.0 | 0.0 | 1.0 | | `__gt__` (not greater than) | 0.0 | 0.0 | 1.0 | | `__iand__` | 0.0 | 0.0 | 1.0 | | `__init__` | 0.0 | 0.0 | 1.0 | | `intersection` | 0.0 | 0.0 | 1.0 | | `intersection_update` | 0.0 | 0.0 | 1.0 | | `__ior__` | 0.0 | 0.0 | 1.0 | | `isdisjoint` | 0.0 | 0.0 | 1.0 | | `isdisjoint` (not disjoint) | 0.0 | 0.0 | 1.0 | | `issubset` | 0.0 | 0.0 | 1.0 | | `issubset` (not subset) | 0.0 | 0.0 | 1.0 | | `issuperset` | 0.0 | 0.0 | 1.0 | | `issuperset` (not superset) | 0.0 | 0.0 | 1.0 | | `__ixor__` | 0.0 | 0.0 | 1.0 | | `__le__` | 0.0 | 0.0 | 1.0 | | `__le__` (not less than or equals to) | 0.0 | 0.0 | 1.0 | | `__len__` | 0.0 | 0.0 | 1.0 | | `__lt__` | 0.0 | 0.0 | 1.0 | | `__lt__` (not less than) | 0.0 | 0.0 | 1.0 | | `__contains__` (unsuccessful search) | 0.0 | 0.0 | 1.0 | | `__or__` | 0.0 | 0.0 | 1.0 | | `pop` | 0.0 | 0.0 | 1.0 | | `remove` | 0.0 | 0.0 | 1.0 | | `__sub__` | 0.0 | 0.0 | 1.0 | | `symmetric_difference` | 0.0 | 0.0 | 1.0 | | `symmetric_difference_update` | 0.0 | 0.0 | 1.0 | | `union` | 0.0 | 0.0 | 1.0 | | `update` | 0.0 | 0.0 | 1.0 | | `__xor__` | 0.0 | 0.0 | 1.0 |","title":"Set"},{"location":"usage/common/","text":"Common Features","title":"common features"},{"location":"usage/common/#common-features","text":"","title":"Common Features"},{"location":"usage/dict/","text":"Dict Dict is a container compatible with the built-in dict , which serializes keys and values and stores them in a sqlite3 database. It preserves insertion order for all supported python versions. Dict[KT, VT](...) Constructor. Type Parameters: KT : key type VT : value type Arguments: data : Mapping[KT, VT] or Iterable[Tuple[KT, VT]] , optional, positional-only argument, defualt= None ; Initial data. If None or no argument is given, persistent data is used as is if available, otherwise persistent data in the corresponding table is cleared and given data is stored instead. connection : str or sqlite3.Connection , optional, default= None ; If None , temporary file is automatically created. If connection is a str , it will be used as the sqlite3 database file name. You can pass a sqlite3.Connection directly. table_name : str , optional, default= None ; Table name of this container. If None , an auto-generated unique name will be used. Available characters are letters, numbers, and underscores ( _ ). key_serializer : Callable[[KT], bytes] , optional, default= None ; Function to serialize key. If None , pickle.dumps is used. key_deserializer : Callable[[bytes], KT] , optional, default= None ; Function to deserialize key. If None , pickle.loads is used. value_serializer : Callable[[VT], bytes] , optional, default= None ; Function to serialize value. If None , key_serializer is used. value_deserializer : Callable[[bytes], VT] , optional, default= None ; Function to deserialize value. If None , key_deserializer is used. persist : bool , optional, default= True ; If True , table won't be deleted even when the object is deleted. If False , the table is deleted when this object is deleted. len(d) Return the number of items in d: Dict[KT, VT] Return value: int : The number of items in d d[key] Get item of d with key key . Raises a KeyError if key is not in the map. Arguments: key : KT ; Key to retrieve corresponding value Return value: VT : Item of d with key key d[key] = value Set d[key] to value . Arguments: key : KT ; Key to be set value : VT ; Value to be set Return value: None del d[key] Delete d[key] . Arguments: key : KT ; Key to be deleted Return value: None key in d Return whether if key is in d Arguments: key : KT ; Key to be checked Return value: bool : True if key is in d and False otherwise. key not in d Return whether if key is not in d Arguments: key : KT ; Key to be checked Return value: bool : True if key is not in d and False otherwise. iter(d) Return an iterator over the keys of d Return value: Iterator[KT] : an iterator over the keys of d clear() Remove all items from the dictionary Return value: None copy() Return a copy of the dictionary. The actual behavior is to create a table with a unique table name and copy the keys and the values to the new table. Therefore, unlike the built-in dict copy, the behavior is similar to deep copy. Be aware that the copied dictionary is volatile. Return value: Dict[KT, VT] : A volatile copy of the dictionary. get(key[, default]) Return the value for key if key is in the dictionary, else default . If default is not given, it defaults to None , so that this method never raises a KeyError . Arguments: key : KT ; Key to retrieve corresponding value if exists. default : VT , optional, default= None ; Default value in case that key is not in the dictionary Return value: VT : Item of the dictionary with key key if key is in the dictionary, default otherwise. items() Return a new view of the dictionary\u2019s items (key-value pairs). Return value: ItemsView : View object of the dictionary's items keys() Return a new view of the dictionary's keys. Return value: KeysView[KT] : View object of the dictionary's keys. pop(key[, default]) If key is in the dictionary, remove it and return its value, else return default . If default is not given and key is not in the dictionary, a KeyError is raised. Arguments: key : KT ; Key to retrieve corresponding value if exists. default : VT , optional, default= None ; Default value in case that key is not in the dictionary Return value: VT : Item of the dictionary with key key if key is in the dictionary, default otherwise. popitem() Remove and return a key-value pair from the dictionary. Pairs are returned in LIFO order. If the dictionary is empty, raises a KeyError . Return value: Tuple[KT, VT] : Key-value pair that were last inserted into the dictionary reversed(d) Return a reverse iterator over the keys of the dictionary. (provided only python version 3.8 and above) Return value: Iterator[KT] : Reverse iterator over the keys of the dictionary setdefault(key[, default]) If key is in the dictionary, return its value. If not, insert key with a value of default and return default . Arguments: key : KT ; Key to retrieve or set the value default : VT , optional, default= None ; Value to be set if key is not in the dictionary Return value: VT : Item of the dictionary with key key if key is in the dictionary, default otherwise. update([other, **kwargs]) Update the dictionary with the key-value pairs from other , overwriting existing keys. Arguments: other : Mapping[KT, VT] or Iterable[Tuple[KT, VT]] , optional; Key-value pairs to be added kwargs : VT , optional; values to be added Return value: None values() Return a new view of the dictionary's values. Return value: ValuesView : View object of the dictionary's values d | other Create a new dictionary with the merged keys and values of d and other , which must both be dictionaries. The values of other take priority when d and other share keys. The return value is volatile by default. (provided only python version 3.9 and above) Arguments: other : Mapping[KT, VT] or Iterable[Tuple[KT, VT]] ; Key-value pairs to be merged Return value: Dict[KT, VT] : A new volatile dictionary object. d |= other Update the dictionary d with keys and values from other . (provided only python version 3.9 and above) Arguments: other : Mapping[KT, VT] or Iterable[Tuple[KT, VT]] ; Key-value pairs to be merged Return value: Dict[KT, VT] : The dictionary object.","title":"Dict"},{"location":"usage/dict/#dict","text":"Dict is a container compatible with the built-in dict , which serializes keys and values and stores them in a sqlite3 database. It preserves insertion order for all supported python versions.","title":"Dict"},{"location":"usage/dict/#dictkt-vt","text":"Constructor.","title":"Dict[KT, VT](...)"},{"location":"usage/dict/#type-parameters","text":"KT : key type VT : value type","title":"Type Parameters:"},{"location":"usage/dict/#arguments","text":"data : Mapping[KT, VT] or Iterable[Tuple[KT, VT]] , optional, positional-only argument, defualt= None ; Initial data. If None or no argument is given, persistent data is used as is if available, otherwise persistent data in the corresponding table is cleared and given data is stored instead. connection : str or sqlite3.Connection , optional, default= None ; If None , temporary file is automatically created. If connection is a str , it will be used as the sqlite3 database file name. You can pass a sqlite3.Connection directly. table_name : str , optional, default= None ; Table name of this container. If None , an auto-generated unique name will be used. Available characters are letters, numbers, and underscores ( _ ). key_serializer : Callable[[KT], bytes] , optional, default= None ; Function to serialize key. If None , pickle.dumps is used. key_deserializer : Callable[[bytes], KT] , optional, default= None ; Function to deserialize key. If None , pickle.loads is used. value_serializer : Callable[[VT], bytes] , optional, default= None ; Function to serialize value. If None , key_serializer is used. value_deserializer : Callable[[bytes], VT] , optional, default= None ; Function to deserialize value. If None , key_deserializer is used. persist : bool , optional, default= True ; If True , table won't be deleted even when the object is deleted. If False , the table is deleted when this object is deleted.","title":"Arguments:"},{"location":"usage/dict/#lend","text":"Return the number of items in d: Dict[KT, VT]","title":"len(d)"},{"location":"usage/dict/#return-value","text":"int : The number of items in d","title":"Return value:"},{"location":"usage/dict/#dkey","text":"Get item of d with key key . Raises a KeyError if key is not in the map.","title":"d[key]"},{"location":"usage/dict/#arguments_1","text":"key : KT ; Key to retrieve corresponding value","title":"Arguments:"},{"location":"usage/dict/#return-value_1","text":"VT : Item of d with key key","title":"Return value:"},{"location":"usage/dict/#dkey-value","text":"Set d[key] to value .","title":"d[key] = value"},{"location":"usage/dict/#arguments_2","text":"key : KT ; Key to be set value : VT ; Value to be set","title":"Arguments:"},{"location":"usage/dict/#return-value_2","text":"None","title":"Return value:"},{"location":"usage/dict/#del-dkey","text":"Delete d[key] .","title":"del d[key]"},{"location":"usage/dict/#arguments_3","text":"key : KT ; Key to be deleted","title":"Arguments:"},{"location":"usage/dict/#return-value_3","text":"None","title":"Return value:"},{"location":"usage/dict/#key-in-d","text":"Return whether if key is in d","title":"key in d"},{"location":"usage/dict/#arguments_4","text":"key : KT ; Key to be checked","title":"Arguments:"},{"location":"usage/dict/#return-value_4","text":"bool : True if key is in d and False otherwise.","title":"Return value:"},{"location":"usage/dict/#key-not-in-d","text":"Return whether if key is not in d","title":"key not in d"},{"location":"usage/dict/#arguments_5","text":"key : KT ; Key to be checked","title":"Arguments:"},{"location":"usage/dict/#return-value_5","text":"bool : True if key is not in d and False otherwise.","title":"Return value:"},{"location":"usage/dict/#iterd","text":"Return an iterator over the keys of d","title":"iter(d)"},{"location":"usage/dict/#return-value_6","text":"Iterator[KT] : an iterator over the keys of d","title":"Return value:"},{"location":"usage/dict/#clear","text":"Remove all items from the dictionary","title":"clear()"},{"location":"usage/dict/#return-value_7","text":"None","title":"Return value:"},{"location":"usage/dict/#copy","text":"Return a copy of the dictionary. The actual behavior is to create a table with a unique table name and copy the keys and the values to the new table. Therefore, unlike the built-in dict copy, the behavior is similar to deep copy. Be aware that the copied dictionary is volatile.","title":"copy()"},{"location":"usage/dict/#return-value_8","text":"Dict[KT, VT] : A volatile copy of the dictionary.","title":"Return value:"},{"location":"usage/dict/#getkey-default","text":"Return the value for key if key is in the dictionary, else default . If default is not given, it defaults to None , so that this method never raises a KeyError .","title":"get(key[, default])"},{"location":"usage/dict/#arguments_6","text":"key : KT ; Key to retrieve corresponding value if exists. default : VT , optional, default= None ; Default value in case that key is not in the dictionary","title":"Arguments:"},{"location":"usage/dict/#return-value_9","text":"VT : Item of the dictionary with key key if key is in the dictionary, default otherwise.","title":"Return value:"},{"location":"usage/dict/#items","text":"Return a new view of the dictionary\u2019s items (key-value pairs).","title":"items()"},{"location":"usage/dict/#return-value_10","text":"ItemsView : View object of the dictionary's items","title":"Return value:"},{"location":"usage/dict/#keys","text":"Return a new view of the dictionary's keys.","title":"keys()"},{"location":"usage/dict/#return-value_11","text":"KeysView[KT] : View object of the dictionary's keys.","title":"Return value:"},{"location":"usage/dict/#popkey-default","text":"If key is in the dictionary, remove it and return its value, else return default . If default is not given and key is not in the dictionary, a KeyError is raised.","title":"pop(key[, default])"},{"location":"usage/dict/#arguments_7","text":"key : KT ; Key to retrieve corresponding value if exists. default : VT , optional, default= None ; Default value in case that key is not in the dictionary","title":"Arguments:"},{"location":"usage/dict/#return-value_12","text":"VT : Item of the dictionary with key key if key is in the dictionary, default otherwise.","title":"Return value:"},{"location":"usage/dict/#popitem","text":"Remove and return a key-value pair from the dictionary. Pairs are returned in LIFO order. If the dictionary is empty, raises a KeyError .","title":"popitem()"},{"location":"usage/dict/#return-value_13","text":"Tuple[KT, VT] : Key-value pair that were last inserted into the dictionary","title":"Return value:"},{"location":"usage/dict/#reversedd","text":"Return a reverse iterator over the keys of the dictionary. (provided only python version 3.8 and above)","title":"reversed(d)"},{"location":"usage/dict/#return-value_14","text":"Iterator[KT] : Reverse iterator over the keys of the dictionary","title":"Return value:"},{"location":"usage/dict/#setdefaultkey-default","text":"If key is in the dictionary, return its value. If not, insert key with a value of default and return default .","title":"setdefault(key[, default])"},{"location":"usage/dict/#arguments_8","text":"key : KT ; Key to retrieve or set the value default : VT , optional, default= None ; Value to be set if key is not in the dictionary","title":"Arguments:"},{"location":"usage/dict/#return-value_15","text":"VT : Item of the dictionary with key key if key is in the dictionary, default otherwise.","title":"Return value:"},{"location":"usage/dict/#updateother-kwargs","text":"Update the dictionary with the key-value pairs from other , overwriting existing keys.","title":"update([other, **kwargs])"},{"location":"usage/dict/#arguments_9","text":"other : Mapping[KT, VT] or Iterable[Tuple[KT, VT]] , optional; Key-value pairs to be added kwargs : VT , optional; values to be added","title":"Arguments:"},{"location":"usage/dict/#return-value_16","text":"None","title":"Return value:"},{"location":"usage/dict/#values","text":"Return a new view of the dictionary's values.","title":"values()"},{"location":"usage/dict/#return-value_17","text":"ValuesView : View object of the dictionary's values","title":"Return value:"},{"location":"usage/dict/#d-other","text":"Create a new dictionary with the merged keys and values of d and other , which must both be dictionaries. The values of other take priority when d and other share keys. The return value is volatile by default. (provided only python version 3.9 and above)","title":"d | other"},{"location":"usage/dict/#arguments_10","text":"other : Mapping[KT, VT] or Iterable[Tuple[KT, VT]] ; Key-value pairs to be merged","title":"Arguments:"},{"location":"usage/dict/#return-value_18","text":"Dict[KT, VT] : A new volatile dictionary object.","title":"Return value:"},{"location":"usage/dict/#d-other_1","text":"Update the dictionary d with keys and values from other . (provided only python version 3.9 and above)","title":"d |= other"},{"location":"usage/dict/#arguments_11","text":"other : Mapping[KT, VT] or Iterable[Tuple[KT, VT]] ; Key-value pairs to be merged","title":"Arguments:"},{"location":"usage/dict/#return-value_19","text":"Dict[KT, VT] : The dictionary object.","title":"Return value:"},{"location":"usage/factory/","text":"factory module factory module contains a factory for each container: ListFactory for List , SetFactory for Set and DictFactory for Dict . They replace constructors of each container that require extra arguments such as connection , serializer , deserializer etc., and allow users to construct a container without specifying those extra arguments. Example Basic usage The results of the following two examples are almost the same (except for the auto-generated table names). Without factory: import sqlite3 import sqlitecollections as sc conn = sqlite3.connect(\"path/to/file.db\") def encode(x: str) -> bytes: return x.encode(\"utf-8\") def decode(x: bytes) -> str: return x.decode(\"utf-8\") l1 = sc.List[str]([\"Alice\", \"Bob\", \"Carol\"], connection=conn, serializer=encode, deserializer=decode) l2 = sc.List[str]([\"Dave\"], connection=conn, serializer=encode, deserializer=decode) l3 = sc.List[str]([\"Erin\"], connection=conn, serializer=encode, deserializer=decode) With factory: import sqlite3 import sqlitecollections as sc conn = sqlite3.connect(\"path/to/file.db\") def encode(x: str) -> bytes: return x.encode(\"utf-8\") def decode(x: bytes) -> str: return x.decode(\"utf-8\") list_ = sc.ListFactory[str](connection=conn, serializer=encode, deserializer=decode) l1 = list_([\"Alice\", \"Bob\", \"Carol\"]) l2 = list_([\"Dave\"]) l3 = list_([\"Erin\"]) Specifying a table name If you want to specify table names of containers from a factory, you can do that as follows: import sqlite3 import sqlitecollections as sc conn = sqlite3.connect(\"path/to/file.db\") def encode(x: str) -> bytes: return x.encode(\"utf-8\") def decode(x: bytes) -> str: return x.decode(\"utf-8\") list_ = sc.ListFactory[str](connection=conn, serializer=encode, deserializer=decode) l1 = list_[\"first_table_name\"]([\"Alice\", \"Bob\", \"Carol\"]) assert l1.table_name == \"first_table_name\" ListFactory ListFactory[T](...) Constructor of ListFactory which constructs List . Type Parameters: T : value type of the List Arguments: connection : str or sqlite3.Connection , optional, default= None ; If None , temporary file is automatically created. If connection is a str , it will be used as the sqlite3 database file name. You can pass a sqlite3.Connection directly. table_name : str , optional, default= None ; Table name of containers from this factory. This argument is assumed not to be specified directly by users. If None , an auto-generated unique name will be used. serializer : Callable[[T], bytes] , optional, default= None ; Function to serialize value. If None , pickle.dumps is used. deserializer : Callable[[bytes], T] , optional, default= None ; Function to deserialize value. If None , pickle.loads is used. list_(data) Construct List[T] with connection, serializer and deserializer preset from ListFactory[T] list_ . Arguments: data : Iterable[T] , optional, defualt= None ; Initial data. Return value: List[T] : connection, serializer and deserializer are the same as those of the factory list_ . create(data) Construct List[T] with connection, serializer and deserializer preset from the factory. Arguments: data : Iterable[T] , optional, defualt= None ; Initial data. Return value: List[T] : connection, serializer and deserializer are the same as those of the factory. f[t] Return a copy of this factory f that creates container with table name t . Arguments: t : str ; the table name Return value: ListFactory[T] : connection, serializer and deserializer are the same as those of this factory and the table name of the List[T] from this return value will be set to t . === DictFactory DictFactory[KT, VT](...) Constructor of DictFactory which constructs Dict . Type Parameters: KT : key type of the Dict VT : value type of the Dict Arguments: connection : str or sqlite3.Connection , optional, default= None ; If None , temporary file is automatically created. If connection is a str , it will be used as the sqlite3 database file name. You can pass a sqlite3.Connection directly. table_name : str , optional, default= None ; Table name of containers from this factory. This argument is assumed not to be specified directly by users. If None , an auto-generated unique name will be used. key_serializer : Callable[[KT], bytes] , optional, default= None ; Function to serialize key. If None , pickle.dumps is used. key_deserializer : Callable[[bytes], KT] , optional, default= None ; Function to deserialize key. If None , pickle.loads is used. value_serializer : Callable[[VT], bytes] , optional, default= None ; Function to serialize value. If None , key_serializer is used. value_deserializer : Callable[[bytes], VT] , optional, default= None ; Function to deserialize value. If None , key_deserializer is used. dict_(data, **kwargs) Construct Dict[KT, VT] with connection, key*serializer, etc., preset from DictFactory[KT, VT] dict* . Arguments: data : Mapping[KT, VT] or Iterable[Tuple[KT, VT]] , optional, defualt= None ; Initial data. **kwargs : VT , optional; Appended to initial data. Return value: Dict[KT, VT] : connection, key*serializers, etc., are the same as those of the factory dict* . create(data, **kwargs) Construct Dict[KT, VT] with connection, key_serializer, etc., preset from the factory. Arguments: data : Mapping[KT, VT] or Iterable[Tuple[KT, VT]] , optional, defualt= None ; Initial data. **kwargs : VT , optional; Appended to initial data. Return value: Dict[KT, VT] : connection, key_serializers, etc., are the same as those of the factory. f[t] Return a copy of this factory f that creates container with table name t . Arguments: t : str ; the table name Return value: DictFactory[KT, VT] : connection, key_serializer, key_deserializer, value_serializer and value_deserializer are the same as those of this factory and the table name of the Dict[KT, VT] from this return value will be set to t . === SetFactory SetFactory[T](...) Constructor of SetFactory which constructs Set . Type Parameters: T : value type of the Set Arguments: connection : str or sqlite3.Connection , optional, default= None ; If None , temporary file is automatically created. If connection is a str , it will be used as the sqlite3 database file name. You can pass a sqlite3.Connection directly. table_name : str , optional, default= None ; Table name of containers from this factory. This argument is assumed not to be specified directly by users. If None , an auto-generated unique name will be used. serializer : Callable[[T], bytes] , optional, default= None ; Function to serialize value. If None , pickle.dumps is used. deserializer : Callable[[bytes], T] , optional, default= None ; Function to deserialize value. If None , pickle.loads is used. set_(data) Construct Set[T] with connection, serializer and deserializer preset from SetFactory[T] set_ . Arguments: data : Iterable[T] , optional, defualt= None ; Initial data. Return value: Set[T] : connection, serializer and deserializer are the same as those of the factory set_ . create(data) Construct Set[T] with connection, serializer and deserializer preset from the factory. Arguments: data : Iterable[T] , optional, defualt= None ; Initial data. Return value: Set[T] : connection, serializer and deserializer are the same as those of the factory. f[t] Return a copy of this factory f that creates container with table name t . Arguments: t : str ; the table name Return value: SetFactory[T] : connection, serializer and deserializer are the same as those of this factory and the table name of the Set[T] from this return value will be set to t . ===","title":"factory"},{"location":"usage/factory/#factory-module","text":"factory module contains a factory for each container: ListFactory for List , SetFactory for Set and DictFactory for Dict . They replace constructors of each container that require extra arguments such as connection , serializer , deserializer etc., and allow users to construct a container without specifying those extra arguments.","title":"factory module"},{"location":"usage/factory/#example","text":"","title":"Example"},{"location":"usage/factory/#basic-usage","text":"The results of the following two examples are almost the same (except for the auto-generated table names). Without factory: import sqlite3 import sqlitecollections as sc conn = sqlite3.connect(\"path/to/file.db\") def encode(x: str) -> bytes: return x.encode(\"utf-8\") def decode(x: bytes) -> str: return x.decode(\"utf-8\") l1 = sc.List[str]([\"Alice\", \"Bob\", \"Carol\"], connection=conn, serializer=encode, deserializer=decode) l2 = sc.List[str]([\"Dave\"], connection=conn, serializer=encode, deserializer=decode) l3 = sc.List[str]([\"Erin\"], connection=conn, serializer=encode, deserializer=decode) With factory: import sqlite3 import sqlitecollections as sc conn = sqlite3.connect(\"path/to/file.db\") def encode(x: str) -> bytes: return x.encode(\"utf-8\") def decode(x: bytes) -> str: return x.decode(\"utf-8\") list_ = sc.ListFactory[str](connection=conn, serializer=encode, deserializer=decode) l1 = list_([\"Alice\", \"Bob\", \"Carol\"]) l2 = list_([\"Dave\"]) l3 = list_([\"Erin\"])","title":"Basic usage"},{"location":"usage/factory/#specifying-a-table-name","text":"If you want to specify table names of containers from a factory, you can do that as follows: import sqlite3 import sqlitecollections as sc conn = sqlite3.connect(\"path/to/file.db\") def encode(x: str) -> bytes: return x.encode(\"utf-8\") def decode(x: bytes) -> str: return x.decode(\"utf-8\") list_ = sc.ListFactory[str](connection=conn, serializer=encode, deserializer=decode) l1 = list_[\"first_table_name\"]([\"Alice\", \"Bob\", \"Carol\"]) assert l1.table_name == \"first_table_name\"","title":"Specifying a table name"},{"location":"usage/factory/#listfactory","text":"","title":"ListFactory"},{"location":"usage/factory/#listfactoryt","text":"Constructor of ListFactory which constructs List .","title":"ListFactory[T](...)"},{"location":"usage/factory/#type-parameters","text":"T : value type of the List","title":"Type Parameters:"},{"location":"usage/factory/#arguments","text":"connection : str or sqlite3.Connection , optional, default= None ; If None , temporary file is automatically created. If connection is a str , it will be used as the sqlite3 database file name. You can pass a sqlite3.Connection directly. table_name : str , optional, default= None ; Table name of containers from this factory. This argument is assumed not to be specified directly by users. If None , an auto-generated unique name will be used. serializer : Callable[[T], bytes] , optional, default= None ; Function to serialize value. If None , pickle.dumps is used. deserializer : Callable[[bytes], T] , optional, default= None ; Function to deserialize value. If None , pickle.loads is used.","title":"Arguments:"},{"location":"usage/factory/#list_data","text":"Construct List[T] with connection, serializer and deserializer preset from ListFactory[T] list_ .","title":"list_(data)"},{"location":"usage/factory/#arguments_1","text":"data : Iterable[T] , optional, defualt= None ; Initial data.","title":"Arguments:"},{"location":"usage/factory/#return-value","text":"List[T] : connection, serializer and deserializer are the same as those of the factory list_ .","title":"Return value:"},{"location":"usage/factory/#createdata","text":"Construct List[T] with connection, serializer and deserializer preset from the factory.","title":"create(data)"},{"location":"usage/factory/#arguments_2","text":"data : Iterable[T] , optional, defualt= None ; Initial data.","title":"Arguments:"},{"location":"usage/factory/#return-value_1","text":"List[T] : connection, serializer and deserializer are the same as those of the factory.","title":"Return value:"},{"location":"usage/factory/#ft","text":"Return a copy of this factory f that creates container with table name t .","title":"f[t]"},{"location":"usage/factory/#arguments_3","text":"t : str ; the table name","title":"Arguments:"},{"location":"usage/factory/#return-value_2","text":"ListFactory[T] : connection, serializer and deserializer are the same as those of this factory and the table name of the List[T] from this return value will be set to t . ===","title":"Return value:"},{"location":"usage/factory/#dictfactory","text":"","title":"DictFactory"},{"location":"usage/factory/#dictfactorykt-vt","text":"Constructor of DictFactory which constructs Dict .","title":"DictFactory[KT, VT](...)"},{"location":"usage/factory/#type-parameters_1","text":"KT : key type of the Dict VT : value type of the Dict","title":"Type Parameters:"},{"location":"usage/factory/#arguments_4","text":"connection : str or sqlite3.Connection , optional, default= None ; If None , temporary file is automatically created. If connection is a str , it will be used as the sqlite3 database file name. You can pass a sqlite3.Connection directly. table_name : str , optional, default= None ; Table name of containers from this factory. This argument is assumed not to be specified directly by users. If None , an auto-generated unique name will be used. key_serializer : Callable[[KT], bytes] , optional, default= None ; Function to serialize key. If None , pickle.dumps is used. key_deserializer : Callable[[bytes], KT] , optional, default= None ; Function to deserialize key. If None , pickle.loads is used. value_serializer : Callable[[VT], bytes] , optional, default= None ; Function to serialize value. If None , key_serializer is used. value_deserializer : Callable[[bytes], VT] , optional, default= None ; Function to deserialize value. If None , key_deserializer is used.","title":"Arguments:"},{"location":"usage/factory/#dict_data-kwargs","text":"Construct Dict[KT, VT] with connection, key*serializer, etc., preset from DictFactory[KT, VT] dict* .","title":"dict_(data, **kwargs)"},{"location":"usage/factory/#arguments_5","text":"data : Mapping[KT, VT] or Iterable[Tuple[KT, VT]] , optional, defualt= None ; Initial data. **kwargs : VT , optional; Appended to initial data.","title":"Arguments:"},{"location":"usage/factory/#return-value_3","text":"Dict[KT, VT] : connection, key*serializers, etc., are the same as those of the factory dict* .","title":"Return value:"},{"location":"usage/factory/#createdata-kwargs","text":"Construct Dict[KT, VT] with connection, key_serializer, etc., preset from the factory.","title":"create(data, **kwargs)"},{"location":"usage/factory/#arguments_6","text":"data : Mapping[KT, VT] or Iterable[Tuple[KT, VT]] , optional, defualt= None ; Initial data. **kwargs : VT , optional; Appended to initial data.","title":"Arguments:"},{"location":"usage/factory/#return-value_4","text":"Dict[KT, VT] : connection, key_serializers, etc., are the same as those of the factory.","title":"Return value:"},{"location":"usage/factory/#ft_1","text":"Return a copy of this factory f that creates container with table name t .","title":"f[t]"},{"location":"usage/factory/#arguments_7","text":"t : str ; the table name","title":"Arguments:"},{"location":"usage/factory/#return-value_5","text":"DictFactory[KT, VT] : connection, key_serializer, key_deserializer, value_serializer and value_deserializer are the same as those of this factory and the table name of the Dict[KT, VT] from this return value will be set to t . ===","title":"Return value:"},{"location":"usage/factory/#setfactory","text":"","title":"SetFactory"},{"location":"usage/factory/#setfactoryt","text":"Constructor of SetFactory which constructs Set .","title":"SetFactory[T](...)"},{"location":"usage/factory/#type-parameters_2","text":"T : value type of the Set","title":"Type Parameters:"},{"location":"usage/factory/#arguments_8","text":"connection : str or sqlite3.Connection , optional, default= None ; If None , temporary file is automatically created. If connection is a str , it will be used as the sqlite3 database file name. You can pass a sqlite3.Connection directly. table_name : str , optional, default= None ; Table name of containers from this factory. This argument is assumed not to be specified directly by users. If None , an auto-generated unique name will be used. serializer : Callable[[T], bytes] , optional, default= None ; Function to serialize value. If None , pickle.dumps is used. deserializer : Callable[[bytes], T] , optional, default= None ; Function to deserialize value. If None , pickle.loads is used.","title":"Arguments:"},{"location":"usage/factory/#set_data","text":"Construct Set[T] with connection, serializer and deserializer preset from SetFactory[T] set_ .","title":"set_(data)"},{"location":"usage/factory/#arguments_9","text":"data : Iterable[T] , optional, defualt= None ; Initial data.","title":"Arguments:"},{"location":"usage/factory/#return-value_6","text":"Set[T] : connection, serializer and deserializer are the same as those of the factory set_ .","title":"Return value:"},{"location":"usage/factory/#createdata_1","text":"Construct Set[T] with connection, serializer and deserializer preset from the factory.","title":"create(data)"},{"location":"usage/factory/#arguments_10","text":"data : Iterable[T] , optional, defualt= None ; Initial data.","title":"Arguments:"},{"location":"usage/factory/#return-value_7","text":"Set[T] : connection, serializer and deserializer are the same as those of the factory.","title":"Return value:"},{"location":"usage/factory/#ft_2","text":"Return a copy of this factory f that creates container with table name t .","title":"f[t]"},{"location":"usage/factory/#arguments_11","text":"t : str ; the table name","title":"Arguments:"},{"location":"usage/factory/#return-value_8","text":"SetFactory[T] : connection, serializer and deserializer are the same as those of this factory and the table name of the Set[T] from this return value will be set to t . ===","title":"Return value:"},{"location":"usage/list/","text":"List List is a container compatible with the built-in list , which serializes values and stores them in a sqlite3 database. List[T](...) Constructor. Type Parameters: T : value type Arguments: data : Iterable[T] , optional, positional-only argument, defualt= None ; Initial data. If None or no argument is given, persistent data is used as is if available, otherwise persistent data in the corresponding table is cleared and given data is stored instead. connection : str or sqlite3.Connection , optional, default= None ; If None , temporary file is automatically created. If connection is a str , it will be used as the sqlite3 database file name. You can pass a sqlite3.Connection directly. table_name : str , optional, default= None ; Table name of this container. If None , an auto-generated unique name will be used. Available characters are letters, numbers, and underscores ( _ ). serializer : Callable[[T], bytes] , optional, default= None ; Function to serialize value. If None , pickle.dumps is used. deserializer : Callable[[bytes], T] , optional, default= None ; Function to deserialize value. If None , pickle.loads is used. persist : bool , optional, default= True ; If True , table won't be deleted even when the object is deleted. If False , the table is deleted when this object is deleted. x in s True if an item of s is equal to x , else False Arguments: x : object ; an object to be checked Return value: bool : True if x is in s and False otherwise. x not in s False if an item of s is equal to x , else True Arguments: x : object ; an object to be checked Return value: bool : False if x is in s and True otherwise. s + t The concatenation of s and t Arguments: t : Iterable[T] ; An iterable to be concatenated. Return value: List[T] : The concatenation of s and t . s * n or n * s equivalent to adding s to itself n times. Arguments: n : int ; Number of times to repeat. Return value: List[T] : a list of n times s was repeated. s[i] i -th item of s , origin 0 . Arguments: i : int ; Item index. If it is negative, it is equivalent to len(s) + i . Return value: T : i -th item of s , origin 0 . s[i:j] Slice of s from i to j . Arguments: i : int or None ; Item index where the slice starts from. If None , it is treated as 0 . j : int or None ; Item index where the slice stops at. If None , it is treated as len(s) . Return value: List[T] : Slice of s from i to j . s[i:j:k] Slice of s from i to j with step k Arguments: i : int or None ; Item index where the slice starts from. If None , it is treated as 0 . j : int or None ; Item index where the slice stops at. If None , it is treated as len(s) . k : int or None ; Step of the slice. If None , it is treated as 1 . Return value: List[T] : Slice of s from i to j with step k . len(s) Return the number of items in s: List[T] Return value: int : The number of items in s index(x[, i[, j]]]) Return index of the first occurrence of x in the list (at or after index i and before index j ). Raise ValueError if x is not in the list. Arguments: x : T ; Value to retrieve corresponding index if exists. i : int , optional, default= None ; First index to look up the value. If it is None , start from the first element of the list. j : int , optional, default= None ; Index before the last one to look for a value. If None , search to the end. Return value: int : Index of the first occurrence of x in the list. count(x) Return total number of occurrences of x in the list. Arguments: x : T ; Value that counts the number of occurrences. Return value: int : The number of occurrences of x in the list. s[i] = x Replace item i of s by x . Arguments: i : int ; Item index to be set. If it is negative, it is equivalent to len(s) + i x : T ; Value to be set. Return value: None . del s[i] Remove item i of s . Arguments: i : int ; Item index to be removed. If it is negative, it is equivalent to len(s) + i . Return value: None . s[i:j] = t Replace slice of s from i to j by the contents of the iterable t . Arguments: i : int or None ; Item index where the slice starts from. If None , it is treated as 0 . j : int or None ; Item index where the slice stops at. If None , it is treated as len(s) . t : Iterable[T] ; Iterable to be inserted. Return value: None . del s[i:j] Remove slice of s from i to j . Arguments: i : int or None ; Item index where the slice starts from. If None , it is treated as 0 . j : int or None ; Item index where the slice stops at. If None , it is treated as len(s) . Return value: None . s[i:j:k] = t Replace the elements of s[i:j:k] by those ofthe iterable t . The length must be the same. Otherwise, ValueError will be raised. Arguments: i : int or None ; Item index where the slice starts from. If None , it is treated as 0 . j : int or None ; Item index where the slice stops at. If None , it is treated as len(s) . k : int or None ; Step of the slice. If None , it is treated as 1 . t : Iterable[T] ; Iterable to be substituted. The length must be the same as that of the slice. Return value: None . del s[i:j:k] Remove the elements of s[i:j:k] from the list. Arguments: i : int or None ; Item index where the slice starts from. If None , it is treated as 0 . j : int or None ; Item index where the slice stops at. If None , it is treated as len(s) . k : int or None ; Step of the slice. If None , it is treated as 1 . Return value: None . append(x) Append x to the end of the sequence. Arguments: x : T ; Item to be appended. Return value; None . clear() Remove all items from the list. Return value: None . copy() Return a copy of the list. The actual behavior is to create a table with a unique table name and copy the items to the new table. Therefore, unlike the built-in list copy, the behavior is similar to deep copy. Be aware that the copied list is volatile. Return value: List[T] : A volatile copy of the list. extend(t) Concatenate the list and t . Arguments: t : Iterable[T] ; An iterable to be concatenated. Return value: None . s += t Concatenate s and t . Arguments: t : Iterable[T] ; An iterable to be concatenated. Return value: None . s *= n Update s with its contents repeated n times. Arguments: n : int ; Number of times to repeat. Return value: None . insert(i, x) Insert x into the list at the index i . Arguments: i : int ; Index to be inserted. x : T ; Item to be inserted. Return value: None . pop(i) Retrieve the item at i and also remove it from s. Arguments: i : int or None , optional, default= None ; Index to be retrieved and removed. If it is None , it is treated as the last index of the list. Return value: T : i -th item of s , origin 0 . remove(x) Remove the first item of s whose value is equal to x . Arguments: x : T ; Item to be removed. Return value: None . reverse() Reverse the items of the list in place. Return value: None . sort(reverse, key) Sort the items of the list in place. The value of reverse can be either True or False , resulting in descending or ascending order, respectively. key specifies a function of one argument that is used to extract a comparison key from each list element. Arguments: reverse : bool , optional, default= False ; By default, the order is ascending, but if this value is True , the order will be descending. key : Callable[[T], Any] , optional, default= None ; Function to extract a comparison key from each list element. Return value: None .","title":"List"},{"location":"usage/list/#list","text":"List is a container compatible with the built-in list , which serializes values and stores them in a sqlite3 database.","title":"List"},{"location":"usage/list/#listt","text":"Constructor.","title":"List[T](...)"},{"location":"usage/list/#type-parameters","text":"T : value type","title":"Type Parameters:"},{"location":"usage/list/#arguments","text":"data : Iterable[T] , optional, positional-only argument, defualt= None ; Initial data. If None or no argument is given, persistent data is used as is if available, otherwise persistent data in the corresponding table is cleared and given data is stored instead. connection : str or sqlite3.Connection , optional, default= None ; If None , temporary file is automatically created. If connection is a str , it will be used as the sqlite3 database file name. You can pass a sqlite3.Connection directly. table_name : str , optional, default= None ; Table name of this container. If None , an auto-generated unique name will be used. Available characters are letters, numbers, and underscores ( _ ). serializer : Callable[[T], bytes] , optional, default= None ; Function to serialize value. If None , pickle.dumps is used. deserializer : Callable[[bytes], T] , optional, default= None ; Function to deserialize value. If None , pickle.loads is used. persist : bool , optional, default= True ; If True , table won't be deleted even when the object is deleted. If False , the table is deleted when this object is deleted.","title":"Arguments:"},{"location":"usage/list/#x-in-s","text":"True if an item of s is equal to x , else False","title":"x in s"},{"location":"usage/list/#arguments_1","text":"x : object ; an object to be checked","title":"Arguments:"},{"location":"usage/list/#return-value","text":"bool : True if x is in s and False otherwise.","title":"Return value:"},{"location":"usage/list/#x-not-in-s","text":"False if an item of s is equal to x , else True","title":"x not in s"},{"location":"usage/list/#arguments_2","text":"x : object ; an object to be checked","title":"Arguments:"},{"location":"usage/list/#return-value_1","text":"bool : False if x is in s and True otherwise.","title":"Return value:"},{"location":"usage/list/#s-t","text":"The concatenation of s and t","title":"s + t"},{"location":"usage/list/#arguments_3","text":"t : Iterable[T] ; An iterable to be concatenated.","title":"Arguments:"},{"location":"usage/list/#return-value_2","text":"List[T] : The concatenation of s and t .","title":"Return value:"},{"location":"usage/list/#s-n-or-n-s","text":"equivalent to adding s to itself n times.","title":"s * n or n * s"},{"location":"usage/list/#arguments_4","text":"n : int ; Number of times to repeat.","title":"Arguments:"},{"location":"usage/list/#return-value_3","text":"List[T] : a list of n times s was repeated.","title":"Return value:"},{"location":"usage/list/#si","text":"i -th item of s , origin 0 .","title":"s[i]"},{"location":"usage/list/#arguments_5","text":"i : int ; Item index. If it is negative, it is equivalent to len(s) + i .","title":"Arguments:"},{"location":"usage/list/#return-value_4","text":"T : i -th item of s , origin 0 .","title":"Return value:"},{"location":"usage/list/#sij","text":"Slice of s from i to j .","title":"s[i:j]"},{"location":"usage/list/#arguments_6","text":"i : int or None ; Item index where the slice starts from. If None , it is treated as 0 . j : int or None ; Item index where the slice stops at. If None , it is treated as len(s) .","title":"Arguments:"},{"location":"usage/list/#return-value_5","text":"List[T] : Slice of s from i to j .","title":"Return value:"},{"location":"usage/list/#sijk","text":"Slice of s from i to j with step k","title":"s[i:j:k]"},{"location":"usage/list/#arguments_7","text":"i : int or None ; Item index where the slice starts from. If None , it is treated as 0 . j : int or None ; Item index where the slice stops at. If None , it is treated as len(s) . k : int or None ; Step of the slice. If None , it is treated as 1 .","title":"Arguments:"},{"location":"usage/list/#return-value_6","text":"List[T] : Slice of s from i to j with step k .","title":"Return value:"},{"location":"usage/list/#lens","text":"Return the number of items in s: List[T]","title":"len(s)"},{"location":"usage/list/#return-value_7","text":"int : The number of items in s","title":"Return value:"},{"location":"usage/list/#indexx-i-j","text":"Return index of the first occurrence of x in the list (at or after index i and before index j ). Raise ValueError if x is not in the list.","title":"index(x[, i[, j]]])"},{"location":"usage/list/#arguments_8","text":"x : T ; Value to retrieve corresponding index if exists. i : int , optional, default= None ; First index to look up the value. If it is None , start from the first element of the list. j : int , optional, default= None ; Index before the last one to look for a value. If None , search to the end.","title":"Arguments:"},{"location":"usage/list/#return-value_8","text":"int : Index of the first occurrence of x in the list.","title":"Return value:"},{"location":"usage/list/#countx","text":"Return total number of occurrences of x in the list.","title":"count(x)"},{"location":"usage/list/#arguments_9","text":"x : T ; Value that counts the number of occurrences.","title":"Arguments:"},{"location":"usage/list/#return-value_9","text":"int : The number of occurrences of x in the list.","title":"Return value:"},{"location":"usage/list/#si-x","text":"Replace item i of s by x .","title":"s[i] = x"},{"location":"usage/list/#arguments_10","text":"i : int ; Item index to be set. If it is negative, it is equivalent to len(s) + i x : T ; Value to be set.","title":"Arguments:"},{"location":"usage/list/#return-value_10","text":"None .","title":"Return value:"},{"location":"usage/list/#del-si","text":"Remove item i of s .","title":"del s[i]"},{"location":"usage/list/#arguments_11","text":"i : int ; Item index to be removed. If it is negative, it is equivalent to len(s) + i .","title":"Arguments:"},{"location":"usage/list/#return-value_11","text":"None .","title":"Return value:"},{"location":"usage/list/#sij-t","text":"Replace slice of s from i to j by the contents of the iterable t .","title":"s[i:j] = t"},{"location":"usage/list/#arguments_12","text":"i : int or None ; Item index where the slice starts from. If None , it is treated as 0 . j : int or None ; Item index where the slice stops at. If None , it is treated as len(s) . t : Iterable[T] ; Iterable to be inserted.","title":"Arguments:"},{"location":"usage/list/#return-value_12","text":"None .","title":"Return value:"},{"location":"usage/list/#del-sij","text":"Remove slice of s from i to j .","title":"del s[i:j]"},{"location":"usage/list/#arguments_13","text":"i : int or None ; Item index where the slice starts from. If None , it is treated as 0 . j : int or None ; Item index where the slice stops at. If None , it is treated as len(s) .","title":"Arguments:"},{"location":"usage/list/#return-value_13","text":"None .","title":"Return value:"},{"location":"usage/list/#sijk-t","text":"Replace the elements of s[i:j:k] by those ofthe iterable t . The length must be the same. Otherwise, ValueError will be raised.","title":"s[i:j:k] = t"},{"location":"usage/list/#arguments_14","text":"i : int or None ; Item index where the slice starts from. If None , it is treated as 0 . j : int or None ; Item index where the slice stops at. If None , it is treated as len(s) . k : int or None ; Step of the slice. If None , it is treated as 1 . t : Iterable[T] ; Iterable to be substituted. The length must be the same as that of the slice.","title":"Arguments:"},{"location":"usage/list/#return-value_14","text":"None .","title":"Return value:"},{"location":"usage/list/#del-sijk","text":"Remove the elements of s[i:j:k] from the list.","title":"del s[i:j:k]"},{"location":"usage/list/#arguments_15","text":"i : int or None ; Item index where the slice starts from. If None , it is treated as 0 . j : int or None ; Item index where the slice stops at. If None , it is treated as len(s) . k : int or None ; Step of the slice. If None , it is treated as 1 .","title":"Arguments:"},{"location":"usage/list/#return-value_15","text":"None .","title":"Return value:"},{"location":"usage/list/#appendx","text":"Append x to the end of the sequence.","title":"append(x)"},{"location":"usage/list/#arguments_16","text":"x : T ; Item to be appended.","title":"Arguments:"},{"location":"usage/list/#return-value_16","text":"None .","title":"Return value;"},{"location":"usage/list/#clear","text":"Remove all items from the list.","title":"clear()"},{"location":"usage/list/#return-value_17","text":"None .","title":"Return value:"},{"location":"usage/list/#copy","text":"Return a copy of the list. The actual behavior is to create a table with a unique table name and copy the items to the new table. Therefore, unlike the built-in list copy, the behavior is similar to deep copy. Be aware that the copied list is volatile.","title":"copy()"},{"location":"usage/list/#return-value_18","text":"List[T] : A volatile copy of the list.","title":"Return value:"},{"location":"usage/list/#extendt","text":"Concatenate the list and t .","title":"extend(t)"},{"location":"usage/list/#arguments_17","text":"t : Iterable[T] ; An iterable to be concatenated.","title":"Arguments:"},{"location":"usage/list/#return-value_19","text":"None .","title":"Return value:"},{"location":"usage/list/#s-t_1","text":"Concatenate s and t .","title":"s += t"},{"location":"usage/list/#arguments_18","text":"t : Iterable[T] ; An iterable to be concatenated.","title":"Arguments:"},{"location":"usage/list/#return-value_20","text":"None .","title":"Return value:"},{"location":"usage/list/#s-n","text":"Update s with its contents repeated n times.","title":"s *= n"},{"location":"usage/list/#arguments_19","text":"n : int ; Number of times to repeat.","title":"Arguments:"},{"location":"usage/list/#return-value_21","text":"None .","title":"Return value:"},{"location":"usage/list/#inserti-x","text":"Insert x into the list at the index i .","title":"insert(i, x)"},{"location":"usage/list/#arguments_20","text":"i : int ; Index to be inserted. x : T ; Item to be inserted.","title":"Arguments:"},{"location":"usage/list/#return-value_22","text":"None .","title":"Return value:"},{"location":"usage/list/#popi","text":"Retrieve the item at i and also remove it from s.","title":"pop(i)"},{"location":"usage/list/#arguments_21","text":"i : int or None , optional, default= None ; Index to be retrieved and removed. If it is None , it is treated as the last index of the list.","title":"Arguments:"},{"location":"usage/list/#return-value_23","text":"T : i -th item of s , origin 0 .","title":"Return value:"},{"location":"usage/list/#removex","text":"Remove the first item of s whose value is equal to x .","title":"remove(x)"},{"location":"usage/list/#arguments_22","text":"x : T ; Item to be removed.","title":"Arguments:"},{"location":"usage/list/#return-value_24","text":"None .","title":"Return value:"},{"location":"usage/list/#reverse","text":"Reverse the items of the list in place.","title":"reverse()"},{"location":"usage/list/#return-value_25","text":"None .","title":"Return value:"},{"location":"usage/list/#sortreverse-key","text":"Sort the items of the list in place. The value of reverse can be either True or False , resulting in descending or ascending order, respectively. key specifies a function of one argument that is used to extract a comparison key from each list element.","title":"sort(reverse, key)"},{"location":"usage/list/#arguments_23","text":"reverse : bool , optional, default= False ; By default, the order is ascending, but if this value is True , the order will be descending. key : Callable[[T], Any] , optional, default= None ; Function to extract a comparison key from each list element.","title":"Arguments:"},{"location":"usage/list/#return-value_26","text":"None .","title":"Return value:"},{"location":"usage/metadata/","text":"Metadata MetadataItem MetadataItem(...) Constructor for MetadataItem. Instances of this class are not supposed to be created directly by the user. Arguments: table_name : str ; table name. container_type : str ; container type name. schema_version : str ; schema version. table_name Read-only property for the table name. Return value: str : The table name. container_type Read-only property for the container type. Return value: str : The container type. schema_version Read-only property for the schema version Return value: str : The schema version. MetadataReader MetadataReader(...) Constructor for MetadataReader class which can iterate over all records in the given connection. Arguments: connection : str or sqlite3.Connection ; Connection to sqlite3 to get metadata. If connection is a str , it will be used as the sqlite3 database file name. You can pass a sqlite3.Connection directly. len(metadata_reader) Return the number of records in the metadata table read by metadata_reader . It coincides the number of collections in the sqlite3 database connected by metadata_reader._connection . Return value: int : The number of items in the metadata table. obj in metadata_reader Return whether if obj is in metadata_reader Arguments: obj : object ; object to be checked the membership. Return value: bool : Boolean value whether if metadata_item is in the metadata table. iter(metadata_reader) Return an iterator over the MetadataItem 's in metadata_reader It coincides the records of metadata table in the sqlite3 database connected by metadata_reader._connection . Return value: Iterator[MetadataItem] : an iterator over the MetadataItem 's in metadata_reader","title":"metadata"},{"location":"usage/metadata/#metadata","text":"","title":"Metadata"},{"location":"usage/metadata/#metadataitem","text":"","title":"MetadataItem"},{"location":"usage/metadata/#metadataitem_1","text":"Constructor for MetadataItem. Instances of this class are not supposed to be created directly by the user.","title":"MetadataItem(...)"},{"location":"usage/metadata/#arguments","text":"table_name : str ; table name. container_type : str ; container type name. schema_version : str ; schema version.","title":"Arguments:"},{"location":"usage/metadata/#table_name","text":"Read-only property for the table name.","title":"table_name"},{"location":"usage/metadata/#return-value","text":"str : The table name.","title":"Return value:"},{"location":"usage/metadata/#container_type","text":"Read-only property for the container type.","title":"container_type"},{"location":"usage/metadata/#return-value_1","text":"str : The container type.","title":"Return value:"},{"location":"usage/metadata/#schema_version","text":"Read-only property for the schema version","title":"schema_version"},{"location":"usage/metadata/#return-value_2","text":"str : The schema version.","title":"Return value:"},{"location":"usage/metadata/#metadatareader","text":"","title":"MetadataReader"},{"location":"usage/metadata/#metadatareader_1","text":"Constructor for MetadataReader class which can iterate over all records in the given connection.","title":"MetadataReader(...)"},{"location":"usage/metadata/#arguments_1","text":"connection : str or sqlite3.Connection ; Connection to sqlite3 to get metadata. If connection is a str , it will be used as the sqlite3 database file name. You can pass a sqlite3.Connection directly.","title":"Arguments:"},{"location":"usage/metadata/#lenmetadata_reader","text":"Return the number of records in the metadata table read by metadata_reader . It coincides the number of collections in the sqlite3 database connected by metadata_reader._connection .","title":"len(metadata_reader)"},{"location":"usage/metadata/#return-value_3","text":"int : The number of items in the metadata table.","title":"Return value:"},{"location":"usage/metadata/#obj-in-metadata_reader","text":"Return whether if obj is in metadata_reader","title":"obj in metadata_reader"},{"location":"usage/metadata/#arguments_2","text":"obj : object ; object to be checked the membership.","title":"Arguments:"},{"location":"usage/metadata/#return-value_4","text":"bool : Boolean value whether if metadata_item is in the metadata table.","title":"Return value:"},{"location":"usage/metadata/#itermetadata_reader","text":"Return an iterator over the MetadataItem 's in metadata_reader It coincides the records of metadata table in the sqlite3 database connected by metadata_reader._connection .","title":"iter(metadata_reader)"},{"location":"usage/metadata/#return-value_5","text":"Iterator[MetadataItem] : an iterator over the MetadataItem 's in metadata_reader","title":"Return value:"},{"location":"usage/set/","text":"Set Set is a container compatible with the built-in set , which serializes values and stores them in a sqlite3 database. Set[T](...) Constructor. Type Parameters: T : value type Arguments: data : Iterable[T] , optional, positional-only argument, defualt= None ; Initial data. If None or no argument is given, persistent data is used as is if available, otherwise persistent data in the corresponding table is cleared and given data is stored instead. connection : str or sqlite3.Connection , optional, default= None ; If None , temporary file is automatically created. If connection is a str , it will be used as the sqlite3 database file name. You can pass a sqlite3.Connection directly. table_name : str , optional, default= None ; Table name of this container. If None , an auto-generated unique name will be used. Available characters are letters, numbers, and underscores ( _ ). serializer : Callable[[T], bytes] , optional, default= None ; Function to serialize value. If None , pickle.dumps is used. deserializer : Callable[[bytes], T] , optional, default= None ; Function to deserialize value. If None , pickle.loads is used. persist : bool , optional, default= True ; If True , table won't be deleted even when the object is deleted. If False , the table is deleted when this object is deleted. len(s) Return the number of items in s: Set[T] Return value: int : The number of items in s x in s True if x is in s , else False Arguments: x : object ; an object to be checked Return value: bool : True if x is in s and False otherwise. x not in s False if x is in s , else True Arguments: x : object ; an object to be checked Return value: bool : False if x is in s and True otherwise. isdisjoint(other) Return True if the set has no elements in common with other . Arguments: other : Iterable[T] ; Iterable to check if disjoint. Return value: bool : True if the set is disjoint with other , False otherwise. issubset(other) Return True if every element in the set is in other . Arguments: other : Iterable[T] ; Iterable to check if this one contains the set. Return value: bool : True if the set is subset of other , False otherwise. s <= other Return True if every element in the set is in other . Argument: other : Iterable[T] ; Iterable to check if this one contains all the elements in the set. Return value: bool : True if the set is subset of other , False otherwise. s < other Return True if every element in the set is in other and s is not equal to other . Arguments: other : Iterable[T] ; Iterable to check if it contains all elements of the set and is not equal to the set. Return value: bool : True if the set is a proper subset of other , False otherwise. issuperset(other) Return True if every element in other is in the set. Arguments: other : Iterable[T] ; Iterable to check if the elements are contained. Return value: bool : True if the set is superset of other , False otherwise. s >= other Return True if every element in other is in the set. Argument: other : Iterable[T] ; Iterable to check if the elements are contained. Return value: bool : True if the set is superset of other , False otherwise. s > other Return True if every element in other is in the set and s is not equal to other . Arguments: other : Iterable[T] ; Iterable to check if it all elements are in the set and is not equal to the set. Return value: bool : True if the set is a proper superset of other , False otherwise. union(*others) Return a new set with elements from the set and all others . Arguments: others : Iterable[T] ; Iterables to take the union. Return value: Set[T] : A new set with elements from the set and all others . s | other Return a new set with elements from s and other . Arguments: other : Iterable[T] ; Iterable to take the union. Return value: Set[T] : A new set with elements from s and other . intersection(*others) Return a new set with elements common to the set and all others . Arguments: others : Iterable[T] ; Iterables to take the intersection. Return value: Set[T] : A new set with elements common to the set and all others . s & other Return a new set with elements common to s and other . Arguments: other : Iterable[T] ; Iterable to take the intersection. Return value: Set[T] : A new set with elements common to s and other . difference(*others) Return a new set with elements in the set that are not in the others . Arguments: others : Iterable[T] ; Iterables to take the difference. Return value: Set[T] : A new set with elements in the set that are not in the others . s - other Return a new set with elements in the set that are not in the other . Arguments: other : Iterable[T] ; Iterable to take the difference. Return value: Set[T] : A new set with elements in the set that are not in the other . symmetric_difference(other) Return a new set with elements in either the set or other but not both. Arguments: other : Iterable[T] ; Iterable to take the symmetric difference. Return value: Set[T] : A new set with elements in either the set or other but not both. s ^ other Return a new set with elements in either the set or other but not both. Arguments: other : Iterable[T] ; Iterable to take the symmetric difference. Return value: Set[T] : A new set with elements in either the set or other but not both. copy() Return a copy of the set. The actual behavior is to create a table with a unique table name and copy the elements to the new table. Therefore, unlike the built-in set copy, the behavior is similar to deep copy. Be aware that the copied set is volatile. Return value: Set[T] : A volatile copy of the set. update(*others) Update the set by adding elements from all others . Arguments: others : Iterable[T] ; Iterables to take the union. Return value: None . s |= other Update the set by adding elements from other . Arguments: other : Iterable[T] ; Iterable to take the union. Return value: None . intersection_update(*others) Update the set by keeping only elements found in the set and all others . Arguments: others : Iterable[T] ; Iterables to take the intersection. Return value: None . s &= other Update the set by keeping only elements found in the set and other . Arguments: other : Iterable[T] ; Iterable to take the intersection. Return value: None . symmetric_difference_update(other) Update the set by keeping only elements found in either the set or other but not both. Arguments: other : Iterable[T] ; Iterable to take the symmetric difference. Return value: None . s ^= other Update the set by keeping only elements found in either the set or other but not both. Arguments: other : Iterable[T] ; Iterable to take the symmetric difference. Return value: None . add(elem) Add an element elem to the set. Arguments: elem : T ; An element to be added. Return value: None . remove(elem) Remove an element elem from the set. Raises KeyError if elem is not contained in the set. Arguemnts: elem : T ; An element to be removed. Return value: None . discard(elem) Remove an element elem from the set if it is present. Arguments: elem : T ; An element to be removed. Return value: None . pop() Remove and return an arbitrary element from the set. Raises KeyError if the set is empty. Return value: T : An element in the set. clear() Remove all elements from the set. Return value: None .","title":"Set"},{"location":"usage/set/#set","text":"Set is a container compatible with the built-in set , which serializes values and stores them in a sqlite3 database.","title":"Set"},{"location":"usage/set/#sett","text":"Constructor.","title":"Set[T](...)"},{"location":"usage/set/#type-parameters","text":"T : value type","title":"Type Parameters:"},{"location":"usage/set/#arguments","text":"data : Iterable[T] , optional, positional-only argument, defualt= None ; Initial data. If None or no argument is given, persistent data is used as is if available, otherwise persistent data in the corresponding table is cleared and given data is stored instead. connection : str or sqlite3.Connection , optional, default= None ; If None , temporary file is automatically created. If connection is a str , it will be used as the sqlite3 database file name. You can pass a sqlite3.Connection directly. table_name : str , optional, default= None ; Table name of this container. If None , an auto-generated unique name will be used. Available characters are letters, numbers, and underscores ( _ ). serializer : Callable[[T], bytes] , optional, default= None ; Function to serialize value. If None , pickle.dumps is used. deserializer : Callable[[bytes], T] , optional, default= None ; Function to deserialize value. If None , pickle.loads is used. persist : bool , optional, default= True ; If True , table won't be deleted even when the object is deleted. If False , the table is deleted when this object is deleted.","title":"Arguments:"},{"location":"usage/set/#lens","text":"Return the number of items in s: Set[T]","title":"len(s)"},{"location":"usage/set/#return-value","text":"int : The number of items in s","title":"Return value:"},{"location":"usage/set/#x-in-s","text":"True if x is in s , else False","title":"x in s"},{"location":"usage/set/#arguments_1","text":"x : object ; an object to be checked","title":"Arguments:"},{"location":"usage/set/#return-value_1","text":"bool : True if x is in s and False otherwise.","title":"Return value:"},{"location":"usage/set/#x-not-in-s","text":"False if x is in s , else True","title":"x not in s"},{"location":"usage/set/#arguments_2","text":"x : object ; an object to be checked","title":"Arguments:"},{"location":"usage/set/#return-value_2","text":"bool : False if x is in s and True otherwise.","title":"Return value:"},{"location":"usage/set/#isdisjointother","text":"Return True if the set has no elements in common with other .","title":"isdisjoint(other)"},{"location":"usage/set/#arguments_3","text":"other : Iterable[T] ; Iterable to check if disjoint.","title":"Arguments:"},{"location":"usage/set/#return-value_3","text":"bool : True if the set is disjoint with other , False otherwise.","title":"Return value:"},{"location":"usage/set/#issubsetother","text":"Return True if every element in the set is in other .","title":"issubset(other)"},{"location":"usage/set/#arguments_4","text":"other : Iterable[T] ; Iterable to check if this one contains the set.","title":"Arguments:"},{"location":"usage/set/#return-value_4","text":"bool : True if the set is subset of other , False otherwise.","title":"Return value:"},{"location":"usage/set/#s-other","text":"Return True if every element in the set is in other .","title":"s &lt;= other"},{"location":"usage/set/#argument","text":"other : Iterable[T] ; Iterable to check if this one contains all the elements in the set.","title":"Argument:"},{"location":"usage/set/#return-value_5","text":"bool : True if the set is subset of other , False otherwise.","title":"Return value:"},{"location":"usage/set/#s-other_1","text":"Return True if every element in the set is in other and s is not equal to other .","title":"s &lt; other"},{"location":"usage/set/#arguments_5","text":"other : Iterable[T] ; Iterable to check if it contains all elements of the set and is not equal to the set.","title":"Arguments:"},{"location":"usage/set/#return-value_6","text":"bool : True if the set is a proper subset of other , False otherwise.","title":"Return value:"},{"location":"usage/set/#issupersetother","text":"Return True if every element in other is in the set.","title":"issuperset(other)"},{"location":"usage/set/#arguments_6","text":"other : Iterable[T] ; Iterable to check if the elements are contained.","title":"Arguments:"},{"location":"usage/set/#return-value_7","text":"bool : True if the set is superset of other , False otherwise.","title":"Return value:"},{"location":"usage/set/#s-other_2","text":"Return True if every element in other is in the set.","title":"s &gt;= other"},{"location":"usage/set/#argument_1","text":"other : Iterable[T] ; Iterable to check if the elements are contained.","title":"Argument:"},{"location":"usage/set/#return-value_8","text":"bool : True if the set is superset of other , False otherwise.","title":"Return value:"},{"location":"usage/set/#s-other_3","text":"Return True if every element in other is in the set and s is not equal to other .","title":"s &gt; other"},{"location":"usage/set/#arguments_7","text":"other : Iterable[T] ; Iterable to check if it all elements are in the set and is not equal to the set.","title":"Arguments:"},{"location":"usage/set/#return-value_9","text":"bool : True if the set is a proper superset of other , False otherwise.","title":"Return value:"},{"location":"usage/set/#unionothers","text":"Return a new set with elements from the set and all others .","title":"union(*others)"},{"location":"usage/set/#arguments_8","text":"others : Iterable[T] ; Iterables to take the union.","title":"Arguments:"},{"location":"usage/set/#return-value_10","text":"Set[T] : A new set with elements from the set and all others .","title":"Return value:"},{"location":"usage/set/#s-other_4","text":"Return a new set with elements from s and other .","title":"s | other"},{"location":"usage/set/#arguments_9","text":"other : Iterable[T] ; Iterable to take the union.","title":"Arguments:"},{"location":"usage/set/#return-value_11","text":"Set[T] : A new set with elements from s and other .","title":"Return value:"},{"location":"usage/set/#intersectionothers","text":"Return a new set with elements common to the set and all others .","title":"intersection(*others)"},{"location":"usage/set/#arguments_10","text":"others : Iterable[T] ; Iterables to take the intersection.","title":"Arguments:"},{"location":"usage/set/#return-value_12","text":"Set[T] : A new set with elements common to the set and all others .","title":"Return value:"},{"location":"usage/set/#s-other_5","text":"Return a new set with elements common to s and other .","title":"s &amp; other"},{"location":"usage/set/#arguments_11","text":"other : Iterable[T] ; Iterable to take the intersection.","title":"Arguments:"},{"location":"usage/set/#return-value_13","text":"Set[T] : A new set with elements common to s and other .","title":"Return value:"},{"location":"usage/set/#differenceothers","text":"Return a new set with elements in the set that are not in the others .","title":"difference(*others)"},{"location":"usage/set/#arguments_12","text":"others : Iterable[T] ; Iterables to take the difference.","title":"Arguments:"},{"location":"usage/set/#return-value_14","text":"Set[T] : A new set with elements in the set that are not in the others .","title":"Return value:"},{"location":"usage/set/#s-other_6","text":"Return a new set with elements in the set that are not in the other .","title":"s - other"},{"location":"usage/set/#arguments_13","text":"other : Iterable[T] ; Iterable to take the difference.","title":"Arguments:"},{"location":"usage/set/#return-value_15","text":"Set[T] : A new set with elements in the set that are not in the other .","title":"Return value:"},{"location":"usage/set/#symmetric_differenceother","text":"Return a new set with elements in either the set or other but not both.","title":"symmetric_difference(other)"},{"location":"usage/set/#arguments_14","text":"other : Iterable[T] ; Iterable to take the symmetric difference.","title":"Arguments:"},{"location":"usage/set/#return-value_16","text":"Set[T] : A new set with elements in either the set or other but not both.","title":"Return value:"},{"location":"usage/set/#s-other_7","text":"Return a new set with elements in either the set or other but not both.","title":"s ^ other"},{"location":"usage/set/#arguments_15","text":"other : Iterable[T] ; Iterable to take the symmetric difference.","title":"Arguments:"},{"location":"usage/set/#return-value_17","text":"Set[T] : A new set with elements in either the set or other but not both.","title":"Return value:"},{"location":"usage/set/#copy","text":"Return a copy of the set. The actual behavior is to create a table with a unique table name and copy the elements to the new table. Therefore, unlike the built-in set copy, the behavior is similar to deep copy. Be aware that the copied set is volatile.","title":"copy()"},{"location":"usage/set/#return-value_18","text":"Set[T] : A volatile copy of the set.","title":"Return value:"},{"location":"usage/set/#updateothers","text":"Update the set by adding elements from all others .","title":"update(*others)"},{"location":"usage/set/#arguments_16","text":"others : Iterable[T] ; Iterables to take the union.","title":"Arguments:"},{"location":"usage/set/#return-value_19","text":"None .","title":"Return value:"},{"location":"usage/set/#s-other_8","text":"Update the set by adding elements from other .","title":"s |= other"},{"location":"usage/set/#arguments_17","text":"other : Iterable[T] ; Iterable to take the union.","title":"Arguments:"},{"location":"usage/set/#return-value_20","text":"None .","title":"Return value:"},{"location":"usage/set/#intersection_updateothers","text":"Update the set by keeping only elements found in the set and all others .","title":"intersection_update(*others)"},{"location":"usage/set/#arguments_18","text":"others : Iterable[T] ; Iterables to take the intersection.","title":"Arguments:"},{"location":"usage/set/#return-value_21","text":"None .","title":"Return value:"},{"location":"usage/set/#s-other_9","text":"Update the set by keeping only elements found in the set and other .","title":"s &amp;= other"},{"location":"usage/set/#arguments_19","text":"other : Iterable[T] ; Iterable to take the intersection.","title":"Arguments:"},{"location":"usage/set/#return-value_22","text":"None .","title":"Return value:"},{"location":"usage/set/#symmetric_difference_updateother","text":"Update the set by keeping only elements found in either the set or other but not both.","title":"symmetric_difference_update(other)"},{"location":"usage/set/#arguments_20","text":"other : Iterable[T] ; Iterable to take the symmetric difference.","title":"Arguments:"},{"location":"usage/set/#return-value_23","text":"None .","title":"Return value:"},{"location":"usage/set/#s-other_10","text":"Update the set by keeping only elements found in either the set or other but not both.","title":"s ^= other"},{"location":"usage/set/#arguments_21","text":"other : Iterable[T] ; Iterable to take the symmetric difference.","title":"Arguments:"},{"location":"usage/set/#return-value_24","text":"None .","title":"Return value:"},{"location":"usage/set/#addelem","text":"Add an element elem to the set.","title":"add(elem)"},{"location":"usage/set/#arguments_22","text":"elem : T ; An element to be added.","title":"Arguments:"},{"location":"usage/set/#return-value_25","text":"None .","title":"Return value:"},{"location":"usage/set/#removeelem","text":"Remove an element elem from the set. Raises KeyError if elem is not contained in the set.","title":"remove(elem)"},{"location":"usage/set/#arguemnts","text":"elem : T ; An element to be removed.","title":"Arguemnts:"},{"location":"usage/set/#return-value_26","text":"None .","title":"Return value:"},{"location":"usage/set/#discardelem","text":"Remove an element elem from the set if it is present.","title":"discard(elem)"},{"location":"usage/set/#arguments_23","text":"elem : T ; An element to be removed.","title":"Arguments:"},{"location":"usage/set/#return-value_27","text":"None .","title":"Return value:"},{"location":"usage/set/#pop","text":"Remove and return an arbitrary element from the set. Raises KeyError if the set is empty.","title":"pop()"},{"location":"usage/set/#return-value_28","text":"T : An element in the set.","title":"Return value:"},{"location":"usage/set/#clear","text":"Remove all elements from the set.","title":"clear()"},{"location":"usage/set/#return-value_29","text":"None .","title":"Return value:"},{"location":"usage/dictview/itemsview/","text":"ItemsView ItemsView is a view object which is returned by dict.items() . It provides a dynamic view on the dictionary's (key, value) tuples, which means when dictionay changes, the view reflects these changes. len(itemsview) Return the number of items in the dictionary d: Dict[KT, VT] where itemsview=d.items() . Return value: int : The number of items in d iter(itemsview) Return an iterator over the (key, value) tuples in the dictionary. The order of the items is guaranteed to be inserted order. Return value: Iterable[Tuple[_KT_co, _VT_co]] : The iterator over the keys in the dictionary. item in itemsview Return whether if item is in the dictionary. Arguments: item : object ; An object to be checked Return value: bool : True if item is in the dictionary and False otherwise. reversed(itemsview) Return a reverse iterator over the (key, value) tuples of the dictionary. (provided only python version 3.8 and above) Return value: Iterator[Tuple[_KT_co, _VT_co]] : The reverse iterator over the (key, value) tuples in the dictonary. itemsview & other Return a set with elements common to itemsview and other . Arguments: other : Iterable[Any] ; Iterable to take the intersection. Return value: Set[Tuple[_KT_co, _VT_co]] : A set with elements common to itemsview and other . other & itemsview Return a set with elements common to itemsview and other . Arguments: other : Iterable[_T] ; Iterable to take the intersection. Return value: Set[_T] : A set with elements common to itemsview and other . itemsview | other Return a new set with elements from itemsview and other . Arguments: other : Iterable[_T] ; Iterable to take the union. Return value: Set[Union[Tuple[_KT_co, _VT_co], _T]] : A new set with elements from itemsview and other . other | itemsview Return a new set with elements from itemsview and other . Arguments: other : Iterable[_T] ; Iterable to take the union. Return value: Set[Union[Tuple[_KT_co, _VT_co], _T]] : A new set with elements from itemsview and other . itemsview - other Return a new set with elements in the itemsview that are not in the other . Arguments: other : Iterable[Any] ; Iterable to take the difference. Return value: Set[Tuple[_KT_co, _VT_co]] : A new set with elements in the set that are not in the other . other - itemsview Return a new set with elements in the other that are not in the itemsview . Arguments: other : Iterable[_T] ; Iterable to take the difference. Return value: Set[_T] : A new set with elements in the other that are not in the itemsview . itemsview ^ other Return a new set with elements in either the itemsview or other but not both. Arguments: other : Iterable[_T] ; Iterable to take the symmetric difference. Return value Set[Union[Tuple[_KT_co, _VT_co], _T]] : A new set with elements in either the itemsview or other but not both. other ^ itemsview Return a new set with elements in either the itemsview or other but not both. Arguments: other : Iterable[_T] ; Iterable to take the symmetric difference. Return value Set[Union[Tuple[_KT_co, _VT_co], _T]] : A new set with elements in either the itemsview or other but not both. itemsview.mapping Return a MappingProxyType that wraps the original dictionary to which the view refers. (provided only python version 3.10 and above) Return value MappingProxyType : A read-only proxy of the original dictionary.","title":"ItemsView"},{"location":"usage/dictview/itemsview/#itemsview","text":"ItemsView is a view object which is returned by dict.items() . It provides a dynamic view on the dictionary's (key, value) tuples, which means when dictionay changes, the view reflects these changes.","title":"ItemsView"},{"location":"usage/dictview/itemsview/#lenitemsview","text":"Return the number of items in the dictionary d: Dict[KT, VT] where itemsview=d.items() .","title":"len(itemsview)"},{"location":"usage/dictview/itemsview/#return-value","text":"int : The number of items in d","title":"Return value:"},{"location":"usage/dictview/itemsview/#iteritemsview","text":"Return an iterator over the (key, value) tuples in the dictionary. The order of the items is guaranteed to be inserted order.","title":"iter(itemsview)"},{"location":"usage/dictview/itemsview/#return-value_1","text":"Iterable[Tuple[_KT_co, _VT_co]] : The iterator over the keys in the dictionary.","title":"Return value:"},{"location":"usage/dictview/itemsview/#item-in-itemsview","text":"Return whether if item is in the dictionary.","title":"item in itemsview"},{"location":"usage/dictview/itemsview/#arguments","text":"item : object ; An object to be checked","title":"Arguments:"},{"location":"usage/dictview/itemsview/#return-value_2","text":"bool : True if item is in the dictionary and False otherwise.","title":"Return value:"},{"location":"usage/dictview/itemsview/#reverseditemsview","text":"Return a reverse iterator over the (key, value) tuples of the dictionary. (provided only python version 3.8 and above)","title":"reversed(itemsview)"},{"location":"usage/dictview/itemsview/#return-value_3","text":"Iterator[Tuple[_KT_co, _VT_co]] : The reverse iterator over the (key, value) tuples in the dictonary.","title":"Return value:"},{"location":"usage/dictview/itemsview/#itemsview-other","text":"Return a set with elements common to itemsview and other .","title":"itemsview &amp; other"},{"location":"usage/dictview/itemsview/#arguments_1","text":"other : Iterable[Any] ; Iterable to take the intersection.","title":"Arguments:"},{"location":"usage/dictview/itemsview/#return-value_4","text":"Set[Tuple[_KT_co, _VT_co]] : A set with elements common to itemsview and other .","title":"Return value:"},{"location":"usage/dictview/itemsview/#other-itemsview","text":"Return a set with elements common to itemsview and other .","title":"other &amp; itemsview"},{"location":"usage/dictview/itemsview/#arguments_2","text":"other : Iterable[_T] ; Iterable to take the intersection.","title":"Arguments:"},{"location":"usage/dictview/itemsview/#return-value_5","text":"Set[_T] : A set with elements common to itemsview and other .","title":"Return value:"},{"location":"usage/dictview/itemsview/#itemsview-other_1","text":"Return a new set with elements from itemsview and other .","title":"itemsview | other"},{"location":"usage/dictview/itemsview/#arguments_3","text":"other : Iterable[_T] ; Iterable to take the union.","title":"Arguments:"},{"location":"usage/dictview/itemsview/#return-value_6","text":"Set[Union[Tuple[_KT_co, _VT_co], _T]] : A new set with elements from itemsview and other .","title":"Return value:"},{"location":"usage/dictview/itemsview/#other-itemsview_1","text":"Return a new set with elements from itemsview and other .","title":"other | itemsview"},{"location":"usage/dictview/itemsview/#arguments_4","text":"other : Iterable[_T] ; Iterable to take the union.","title":"Arguments:"},{"location":"usage/dictview/itemsview/#return-value_7","text":"Set[Union[Tuple[_KT_co, _VT_co], _T]] : A new set with elements from itemsview and other .","title":"Return value:"},{"location":"usage/dictview/itemsview/#itemsview-other_2","text":"Return a new set with elements in the itemsview that are not in the other .","title":"itemsview - other"},{"location":"usage/dictview/itemsview/#arguments_5","text":"other : Iterable[Any] ; Iterable to take the difference.","title":"Arguments:"},{"location":"usage/dictview/itemsview/#return-value_8","text":"Set[Tuple[_KT_co, _VT_co]] : A new set with elements in the set that are not in the other .","title":"Return value:"},{"location":"usage/dictview/itemsview/#other-itemsview_2","text":"Return a new set with elements in the other that are not in the itemsview .","title":"other - itemsview"},{"location":"usage/dictview/itemsview/#arguments_6","text":"other : Iterable[_T] ; Iterable to take the difference.","title":"Arguments:"},{"location":"usage/dictview/itemsview/#return-value_9","text":"Set[_T] : A new set with elements in the other that are not in the itemsview .","title":"Return value:"},{"location":"usage/dictview/itemsview/#itemsview-other_3","text":"Return a new set with elements in either the itemsview or other but not both.","title":"itemsview ^ other"},{"location":"usage/dictview/itemsview/#arguments_7","text":"other : Iterable[_T] ; Iterable to take the symmetric difference.","title":"Arguments:"},{"location":"usage/dictview/itemsview/#return-value_10","text":"Set[Union[Tuple[_KT_co, _VT_co], _T]] : A new set with elements in either the itemsview or other but not both.","title":"Return value"},{"location":"usage/dictview/itemsview/#other-itemsview_3","text":"Return a new set with elements in either the itemsview or other but not both.","title":"other ^ itemsview"},{"location":"usage/dictview/itemsview/#arguments_8","text":"other : Iterable[_T] ; Iterable to take the symmetric difference.","title":"Arguments:"},{"location":"usage/dictview/itemsview/#return-value_11","text":"Set[Union[Tuple[_KT_co, _VT_co], _T]] : A new set with elements in either the itemsview or other but not both.","title":"Return value"},{"location":"usage/dictview/itemsview/#itemsviewmapping","text":"Return a MappingProxyType that wraps the original dictionary to which the view refers. (provided only python version 3.10 and above)","title":"itemsview.mapping"},{"location":"usage/dictview/itemsview/#return-value_12","text":"MappingProxyType : A read-only proxy of the original dictionary.","title":"Return value"},{"location":"usage/dictview/keysview/","text":"KeysView KeysView is a view object which is returned by dict.keys() . It provides a dynamic view on the dictionary's keys, which means when dictionay changes, the view reflects these changes. len(keysview) Return the number of items in the dictionary d: Dict[KT, VT] where keysview=d.keys() . Return value: int : The number of items in d iter(keysview) Return an iterator over the keys in the dictionary. The order of the keys is guaranteed to be inserted order. Return value: Iterator[_KT_co] : The iterator over the keys in the dictonary. key in keysview Return whether if key is in the dictionary. Arguments: key : object ; An object to be checked Return value: bool : True if key is in the dictionary and False otherwise. reversed(keysview) Return a reverse iterator over the keys of the dictionary. (provided only python version 3.8 and above) Return value: Iterator[_KT_co] : The reverse iterator over the keys in the dictonary. keysview & other Return a set with elements common to keysview and other . Arguments: other : Iterable[Any] ; Iterable to take the intersection. Return value: Set[_KT_co] : A set with elements common to keysview and other . other & keysview Return a set with elements common to keysview and other . Arguments: other : Iterable[_T] ; Iterable to take the intersection. Return value: Set[_T] : A set with elements common to keysview and other . keysview | other Return a new set with elements from keysview and other . Arguments: other : Iterable[_T] ; Iterable to take the union. Return value: Set[Union[_KT_co, _T]] : A new set with elements from keysview and other . other | keysview Return a new set with elements from keysview and other . Arguments: other : Iterable[_T] ; Iterable to take the union. Return value: Set[Union[_KT_co, _T]] : A new set with elements from keysview and other . keysview - other Return a new set with elements in the keysview that are not in the other . Arguments: other : Iterable[Any] ; Iterable to take the difference. Return value: Set[_KT_co] : A new set with elements in the set that are not in the other . other - keysview Return a new set with elements in the other that are not in the keysview . Arguments: other : Iterable[_T] ; Iterable to be taken the difference. Return value: Set[_T] : A new set with elements in other that are not in the keysview . keysview ^ other Return a new set with elements in either the keysview or other but not both. Arguments: other : Iterable[_T] ; Iterable to take the symmetric difference. Return value Set[Union[_KT_co, _T]] : A new set with elements in either the keysview or other but not both. other ^ keysview Return a new set with elements in either the keysview or other but not both. Arguments: other : Iterable[_T] ; Iterable to take the symmetric difference. Return value Set[Union[_KT_co, _T]] : A new set with elements in either the keysview or other but not both. keysview.mapping Return a MappingProxyType that wraps the original dictionary to which the view refers. (provided only python version 3.10 and above) Return value MappingProxyType : A read-only proxy of the original dictionary.","title":"KeysView"},{"location":"usage/dictview/keysview/#keysview","text":"KeysView is a view object which is returned by dict.keys() . It provides a dynamic view on the dictionary's keys, which means when dictionay changes, the view reflects these changes.","title":"KeysView"},{"location":"usage/dictview/keysview/#lenkeysview","text":"Return the number of items in the dictionary d: Dict[KT, VT] where keysview=d.keys() .","title":"len(keysview)"},{"location":"usage/dictview/keysview/#return-value","text":"int : The number of items in d","title":"Return value:"},{"location":"usage/dictview/keysview/#iterkeysview","text":"Return an iterator over the keys in the dictionary. The order of the keys is guaranteed to be inserted order.","title":"iter(keysview)"},{"location":"usage/dictview/keysview/#return-value_1","text":"Iterator[_KT_co] : The iterator over the keys in the dictonary.","title":"Return value:"},{"location":"usage/dictview/keysview/#key-in-keysview","text":"Return whether if key is in the dictionary.","title":"key in keysview"},{"location":"usage/dictview/keysview/#arguments","text":"key : object ; An object to be checked","title":"Arguments:"},{"location":"usage/dictview/keysview/#return-value_2","text":"bool : True if key is in the dictionary and False otherwise.","title":"Return value:"},{"location":"usage/dictview/keysview/#reversedkeysview","text":"Return a reverse iterator over the keys of the dictionary. (provided only python version 3.8 and above)","title":"reversed(keysview)"},{"location":"usage/dictview/keysview/#return-value_3","text":"Iterator[_KT_co] : The reverse iterator over the keys in the dictonary.","title":"Return value:"},{"location":"usage/dictview/keysview/#keysview-other","text":"Return a set with elements common to keysview and other .","title":"keysview &amp; other"},{"location":"usage/dictview/keysview/#arguments_1","text":"other : Iterable[Any] ; Iterable to take the intersection.","title":"Arguments:"},{"location":"usage/dictview/keysview/#return-value_4","text":"Set[_KT_co] : A set with elements common to keysview and other .","title":"Return value:"},{"location":"usage/dictview/keysview/#other-keysview","text":"Return a set with elements common to keysview and other .","title":"other &amp; keysview"},{"location":"usage/dictview/keysview/#arguments_2","text":"other : Iterable[_T] ; Iterable to take the intersection.","title":"Arguments:"},{"location":"usage/dictview/keysview/#return-value_5","text":"Set[_T] : A set with elements common to keysview and other .","title":"Return value:"},{"location":"usage/dictview/keysview/#keysview-other_1","text":"Return a new set with elements from keysview and other .","title":"keysview | other"},{"location":"usage/dictview/keysview/#arguments_3","text":"other : Iterable[_T] ; Iterable to take the union.","title":"Arguments:"},{"location":"usage/dictview/keysview/#return-value_6","text":"Set[Union[_KT_co, _T]] : A new set with elements from keysview and other .","title":"Return value:"},{"location":"usage/dictview/keysview/#other-keysview_1","text":"Return a new set with elements from keysview and other .","title":"other | keysview"},{"location":"usage/dictview/keysview/#arguments_4","text":"other : Iterable[_T] ; Iterable to take the union.","title":"Arguments:"},{"location":"usage/dictview/keysview/#return-value_7","text":"Set[Union[_KT_co, _T]] : A new set with elements from keysview and other .","title":"Return value:"},{"location":"usage/dictview/keysview/#keysview-other_2","text":"Return a new set with elements in the keysview that are not in the other .","title":"keysview - other"},{"location":"usage/dictview/keysview/#arguments_5","text":"other : Iterable[Any] ; Iterable to take the difference.","title":"Arguments:"},{"location":"usage/dictview/keysview/#return-value_8","text":"Set[_KT_co] : A new set with elements in the set that are not in the other .","title":"Return value:"},{"location":"usage/dictview/keysview/#other-keysview_2","text":"Return a new set with elements in the other that are not in the keysview .","title":"other - keysview"},{"location":"usage/dictview/keysview/#arguments_6","text":"other : Iterable[_T] ; Iterable to be taken the difference.","title":"Arguments:"},{"location":"usage/dictview/keysview/#return-value_9","text":"Set[_T] : A new set with elements in other that are not in the keysview .","title":"Return value:"},{"location":"usage/dictview/keysview/#keysview-other_3","text":"Return a new set with elements in either the keysview or other but not both.","title":"keysview ^ other"},{"location":"usage/dictview/keysview/#arguments_7","text":"other : Iterable[_T] ; Iterable to take the symmetric difference.","title":"Arguments:"},{"location":"usage/dictview/keysview/#return-value_10","text":"Set[Union[_KT_co, _T]] : A new set with elements in either the keysview or other but not both.","title":"Return value"},{"location":"usage/dictview/keysview/#other-keysview_3","text":"Return a new set with elements in either the keysview or other but not both.","title":"other ^ keysview"},{"location":"usage/dictview/keysview/#arguments_8","text":"other : Iterable[_T] ; Iterable to take the symmetric difference.","title":"Arguments:"},{"location":"usage/dictview/keysview/#return-value_11","text":"Set[Union[_KT_co, _T]] : A new set with elements in either the keysview or other but not both.","title":"Return value"},{"location":"usage/dictview/keysview/#keysviewmapping","text":"Return a MappingProxyType that wraps the original dictionary to which the view refers. (provided only python version 3.10 and above)","title":"keysview.mapping"},{"location":"usage/dictview/keysview/#return-value_12","text":"MappingProxyType : A read-only proxy of the original dictionary.","title":"Return value"},{"location":"usage/dictview/valuesview/","text":"ValuesView ValuesView is a view object which is returned by dict.views() . It provides a dynamic view on the dictionary's values, which means when dictionay changes, the view reflects these changes. len(valuesview) Return the number of items in the dictionay d: Dict[KT, VT] where valuesview=d.values() . Return value: int : The number of items in d iter(valuesview) Return an iterator over the values in the dictionary. The order of the values is guaranteed to be inserted order. Return value: Iterator[_VT_co] : The iterator over the values in the dictionary. value in valuesview Return whether if value is in the dictionary. Arguments: value : object ; An object to be checked Return value: bool : True if value is in the dictionary and False otherwise. reversed(valuesview) Return a reverse iterator over the values of the dictionary. (provided only python version 3.8 and above) Return value: Iterator[_VT_co] : The reverse iterator over the values in the dictonary. valuesview.mapping Return a MappingProxyType that wraps the original dictionary to which the view refers. (provided only python version 3.10 and above) Return value MappingProxyType : A read-only proxy of the original dictionary.","title":"ValuesView"},{"location":"usage/dictview/valuesview/#valuesview","text":"ValuesView is a view object which is returned by dict.views() . It provides a dynamic view on the dictionary's values, which means when dictionay changes, the view reflects these changes.","title":"ValuesView"},{"location":"usage/dictview/valuesview/#lenvaluesview","text":"Return the number of items in the dictionay d: Dict[KT, VT] where valuesview=d.values() .","title":"len(valuesview)"},{"location":"usage/dictview/valuesview/#return-value","text":"int : The number of items in d","title":"Return value:"},{"location":"usage/dictview/valuesview/#itervaluesview","text":"Return an iterator over the values in the dictionary. The order of the values is guaranteed to be inserted order.","title":"iter(valuesview)"},{"location":"usage/dictview/valuesview/#return-value_1","text":"Iterator[_VT_co] : The iterator over the values in the dictionary.","title":"Return value:"},{"location":"usage/dictview/valuesview/#value-in-valuesview","text":"Return whether if value is in the dictionary.","title":"value in valuesview"},{"location":"usage/dictview/valuesview/#arguments","text":"value : object ; An object to be checked","title":"Arguments:"},{"location":"usage/dictview/valuesview/#return-value_2","text":"bool : True if value is in the dictionary and False otherwise.","title":"Return value:"},{"location":"usage/dictview/valuesview/#reversedvaluesview","text":"Return a reverse iterator over the values of the dictionary. (provided only python version 3.8 and above)","title":"reversed(valuesview)"},{"location":"usage/dictview/valuesview/#return-value_3","text":"Iterator[_VT_co] : The reverse iterator over the values in the dictonary.","title":"Return value:"},{"location":"usage/dictview/valuesview/#valuesviewmapping","text":"Return a MappingProxyType that wraps the original dictionary to which the view refers. (provided only python version 3.10 and above)","title":"valuesview.mapping"},{"location":"usage/dictview/valuesview/#return-value_4","text":"MappingProxyType : A read-only proxy of the original dictionary.","title":"Return value"}]}