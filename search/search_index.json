{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Overview Documentation for version: 0.8.4 sqlitecollections is a sort of containers that are backended by sqlite3 DB and are compatible with corresponding built-in collections. Since containers consume disk space instead of RAM, they can handle large amounts of data even in environments with limited RAM. Migrating from existing code using the built-in container is as simple as importing the library and changing the constructor. The elements of the container are automatically serialized and stored in the sqlite3 database, and are automatically read from the sqlite3 database and deserialized when accessed. Current version supports List (mutable sequence), Dict (mutable mapping) and Set (mutable set) and almost all methods are compatible with list, dict and set respectively. Installation pip install sqlitecollections Example import sqlitecollections as sc l = sc . List [ str ]( data = [ \"Alice\" , \"Bob\" , \"Carol\" ]) print ( l [ 2 ]) #> Carol print ( len ( l )) #> 3 l . append ( \"Dave\" ) print ( l . index ( \"Bob\" )) #> 1 print ( l . index ( \"Dave\" )) #> 3 d = sc . Dict [ str , str ]( data = { \"a\" : \"Alice\" , \"b\" : \"Bob\" }) print ( d [ \"a\" ]) #> Alice d [ \"c\" ] = \"Carol\" print ( list ( d . keys ())) #> ['a', 'b', 'c'] print ( list ( d . values ())) #> ['Alice', 'Bob', 'Carol'] s = sc . Set [ str ]( data = [ \"Alice\" , \"Bob\" , \"Carol\" , \"Dave\" ]) print ( \"Ellen\" in s ) #> False print ( \"Alice\" in s ) #> True print ( list ( s . intersection ([ \"Alice\" , \"Carol\" ]))) #> ['Alice', 'Carol'] In the above example, a temporary file is created every time a container is created, and the elements are written to the sqlite3 database created on the file, thus consuming very little RAM. If you want to reuse the container you created, you can create it by specifying the file path and table name of the sqlite3 database. import sqlitecollections as sc l = sc . List [ str ]( connection = \"path/to/file.db\" , table_name = \"list_example\" , data = [ \"Alice\" , \"Bob\" , \"Carol\" ]) l . append ( \"Dave\" ) exit () When you load it, you can restore the previous state by specifying the same file path and table name. import sqlitecollections as sc l = sc . List [ str ]( connection = \"path/to/file.db\" , table_name = \"list_example\" ) print ( len ( l )) #> 4 print ( list ( l )) #> ['Alice', 'Bob', 'Carol', 'Dave'] Pros and cons for built-in containers Pros Save memory usage. Once the database is built, loading time is almost zero, even for huge data. Cons Each operation has the overhead of serialize/deserialize. Some operations are incompatible and unavailable. For example, directly rewriting the mutable elements of a container.","title":"Overview"},{"location":"#overview","text":"Documentation for version: 0.8.4 sqlitecollections is a sort of containers that are backended by sqlite3 DB and are compatible with corresponding built-in collections. Since containers consume disk space instead of RAM, they can handle large amounts of data even in environments with limited RAM. Migrating from existing code using the built-in container is as simple as importing the library and changing the constructor. The elements of the container are automatically serialized and stored in the sqlite3 database, and are automatically read from the sqlite3 database and deserialized when accessed. Current version supports List (mutable sequence), Dict (mutable mapping) and Set (mutable set) and almost all methods are compatible with list, dict and set respectively.","title":"Overview"},{"location":"#installation","text":"pip install sqlitecollections","title":"Installation"},{"location":"#example","text":"import sqlitecollections as sc l = sc . List [ str ]( data = [ \"Alice\" , \"Bob\" , \"Carol\" ]) print ( l [ 2 ]) #> Carol print ( len ( l )) #> 3 l . append ( \"Dave\" ) print ( l . index ( \"Bob\" )) #> 1 print ( l . index ( \"Dave\" )) #> 3 d = sc . Dict [ str , str ]( data = { \"a\" : \"Alice\" , \"b\" : \"Bob\" }) print ( d [ \"a\" ]) #> Alice d [ \"c\" ] = \"Carol\" print ( list ( d . keys ())) #> ['a', 'b', 'c'] print ( list ( d . values ())) #> ['Alice', 'Bob', 'Carol'] s = sc . Set [ str ]( data = [ \"Alice\" , \"Bob\" , \"Carol\" , \"Dave\" ]) print ( \"Ellen\" in s ) #> False print ( \"Alice\" in s ) #> True print ( list ( s . intersection ([ \"Alice\" , \"Carol\" ]))) #> ['Alice', 'Carol'] In the above example, a temporary file is created every time a container is created, and the elements are written to the sqlite3 database created on the file, thus consuming very little RAM. If you want to reuse the container you created, you can create it by specifying the file path and table name of the sqlite3 database. import sqlitecollections as sc l = sc . List [ str ]( connection = \"path/to/file.db\" , table_name = \"list_example\" , data = [ \"Alice\" , \"Bob\" , \"Carol\" ]) l . append ( \"Dave\" ) exit () When you load it, you can restore the previous state by specifying the same file path and table name. import sqlitecollections as sc l = sc . List [ str ]( connection = \"path/to/file.db\" , table_name = \"list_example\" ) print ( len ( l )) #> 4 print ( list ( l )) #> ['Alice', 'Bob', 'Carol', 'Dave']","title":"Example"},{"location":"#pros-and-cons-for-built-in-containers","text":"","title":"Pros and cons for built-in containers"},{"location":"#pros","text":"Save memory usage. Once the database is built, loading time is almost zero, even for huge data.","title":"Pros"},{"location":"#cons","text":"Each operation has the overhead of serialize/deserialize. Some operations are incompatible and unavailable. For example, directly rewriting the mutable elements of a container.","title":"Cons"},{"location":"benchmark/","text":"","title":"Benchmark"},{"location":"development/","text":"Development Tests, type checking and linting locally To run tests, type checking and linting locally, you'll need to have python 3.6 , 3.7 , 3.8 , 3.9 and 3.10 installed. We use tox to run tests and type checking on all the supported python versions. You can set up the development environment with the following commands: git clone git@github.com:osoken/sqlitecollections.git cd sqlitecollections python -m venv .venv source ./.venv/bin/activate pip install -e .[dev] Then, run tests is as easy as: tox After a while, you'll see the following message at the bottom of the long logs from pytest and others. __________________ summary __________________ lint: commands succeeded py36: commands succeeded py37: commands succeeded py38: commands succeeded py39: commands succeeded py310: commands succeeded congratulations :) Building documents We use mkdocs to build the documentation. To set up the environment for building the document, run the following commands: git clone git@github.com:osoken/sqlitecollections.git cd sqlitecollections python -m venv .venv source ./.venv/bin/activate pip install -e .[docs] Then, building the documentation can be done by the following command: mkdocs build The output will be located in site directory in your current directory. During development, you can also run mkdoc 's builtin development server with hot-reloading enabled with the following command: mkdocs serve In that case, you can check the result on http://127.0.0.1:8000 . Compatibility policy We aim to implement containers that are as compatible as possible with the built-in containers, but we have a few implementations that intentionally behave differently. Normal behavior will be compatible, but in case of errors it may be different. The constructor arguments are not compatible, as they require arguments specific to this package's container, such as sqlite3 DB file paths and serialization methods. copy method in each container behaves similarly to deep copy, since it copies the table containing serialized elements. Dict 's item order is guaranteed to be insertion order not only for python 3.7 and upper but for all versions. Dict.fromkeys class method is not provided. Any member in the container cannot be mutated directly. If you want to mutate any member, mutate it via temporary variable then write it back. import sqlitecollections as sc x = sc . Dict ( data = { \"a\" : []}) # create {\"a\": []} x [ \"a\" ] . append ( \"b\" ) # try to mutate the empty list print ( x [ \"a\" ]) # not [\"b\"] but [] temp = x [ \"a\" ] # temporarily substitute the list to a variable temp . append ( \"b\" ) # mutate the temporary variable x [ \"a\" ] = temp # then, write it back print ( x [ \"a\" ]) # now, we get [\"b\"]","title":"Development"},{"location":"development/#development","text":"","title":"Development"},{"location":"development/#tests-type-checking-and-linting-locally","text":"To run tests, type checking and linting locally, you'll need to have python 3.6 , 3.7 , 3.8 , 3.9 and 3.10 installed. We use tox to run tests and type checking on all the supported python versions. You can set up the development environment with the following commands: git clone git@github.com:osoken/sqlitecollections.git cd sqlitecollections python -m venv .venv source ./.venv/bin/activate pip install -e .[dev] Then, run tests is as easy as: tox After a while, you'll see the following message at the bottom of the long logs from pytest and others. __________________ summary __________________ lint: commands succeeded py36: commands succeeded py37: commands succeeded py38: commands succeeded py39: commands succeeded py310: commands succeeded congratulations :)","title":"Tests, type checking and linting locally"},{"location":"development/#building-documents","text":"We use mkdocs to build the documentation. To set up the environment for building the document, run the following commands: git clone git@github.com:osoken/sqlitecollections.git cd sqlitecollections python -m venv .venv source ./.venv/bin/activate pip install -e .[docs] Then, building the documentation can be done by the following command: mkdocs build The output will be located in site directory in your current directory. During development, you can also run mkdoc 's builtin development server with hot-reloading enabled with the following command: mkdocs serve In that case, you can check the result on http://127.0.0.1:8000 .","title":"Building documents"},{"location":"development/#compatibility-policy","text":"We aim to implement containers that are as compatible as possible with the built-in containers, but we have a few implementations that intentionally behave differently. Normal behavior will be compatible, but in case of errors it may be different. The constructor arguments are not compatible, as they require arguments specific to this package's container, such as sqlite3 DB file paths and serialization methods. copy method in each container behaves similarly to deep copy, since it copies the table containing serialized elements. Dict 's item order is guaranteed to be insertion order not only for python 3.7 and upper but for all versions. Dict.fromkeys class method is not provided. Any member in the container cannot be mutated directly. If you want to mutate any member, mutate it via temporary variable then write it back. import sqlitecollections as sc x = sc . Dict ( data = { \"a\" : []}) # create {\"a\": []} x [ \"a\" ] . append ( \"b\" ) # try to mutate the empty list print ( x [ \"a\" ]) # not [\"b\"] but [] temp = x [ \"a\" ] # temporarily substitute the list to a variable temp . append ( \"b\" ) # mutate the temporary variable x [ \"a\" ] = temp # then, write it back print ( x [ \"a\" ]) # now, we get [\"b\"]","title":"Compatibility policy"},{"location":"install/","text":"Install pip install sqlitecollections","title":"Install"},{"location":"install/#install","text":"pip install sqlitecollections","title":"Install"},{"location":"usage/common/","text":"","title":"Common"},{"location":"usage/dict/","text":"Dict Dict is a container compatible with the built-in dict , which serializes keys and values and stores them in a sqlite3 database. It preserves insertion order for all supported python versions. Dict[KT, VT](...) Constructor. Type Parameters: KT : key type VT : value type Arguments: connection : str or sqlite3.Connection , optional, default= None ; If None , temporary file is automatically created. If connection is a str , it will be used as the sqlite3 database file name. You can pass a sqlite3.Connection directly. table_name : str , optional, default= None ; Table name of this container. If None , an auto-generated unique name will be used. Available characters are letters, numbers, and underscores ( _ ). key_serializer : Callable[[KT], bytes] , optional, default= None ; Function to serialize key. If None , pickle.dumps is used. key_deserializer : Callable[[bytes], KT] , optional, default= None ; Function to deserialize key. If None , pickle.loads is used. value_serializer : Callable[[VT], bytes] , optional, default= None ; Function to serialize value. If None , key_serializer is used. value_deserializer : Callable[[bytes], VT] , optional, default= None ; Function to deserialize value. If None , key_deserializer is used. persist : bool , optional, default= True ; If True , table won't be deleted even when the object is deleted. If False , the table is deleted when this object is deleted. rebuild_strategy : RebuildStrategy , optional, default= RebuildStrategy.CHECK_WITH_FIRST_ELEMENT ; Rebuild strategy. data : Mapping[KT, VT] or Iterable[Tuple[KT, VT]] , optional, defualt= None ; Initial data. len(d) Return the number of items in d: Dict[KT, VT] Return value: int : The number of items in d d[key] Get item of d with key key . Raises a KeyError if key is not in the map. Arguments: key : KT ; Key to retrieve corresponding value Return value: VT : Item of d with key key d[key] = value Set d[key] to value . Arguments: key : KT ; Key to be set value : VT ; Value to be set Return value: None del d[key] Delete d[key] . Arguments: key : KT ; Key to be deleted Return value: None key in d Return whether if key is in d Arguments: key : KT ; Key to be checked Return value: bool : True if key is in d and False otherwise. key not in d Return whether if key is not in d Arguments: key : KT ; Key to be checked Return value: bool : True if key is not in d and False otherwise. iter(d) Return an iterator over the keys of d Return value: Iterator[KT] : an iterator over the keys of d clear() Remove all items from the dictionary Return value: None copy() Return a copy of the dictionary. The actual behavior is to create a table with a unique table name and copy the keys and the values to the new table. Therefore, unlike the built-in dict copy, the behavior is similar to deep copy. Be aware that the copied dictionary is volatile. Return value: Dict[KT, VT] : A volatile copy of the dictionary. get(key[, default]) Return the value for key if key is in the dictionary, else default . If default is not given, it defaults to None , so that this method never raises a KeyError . Arguments: key : KT ; Key to retrieve corresponding value if exists. default : VT , optional, default= None ; Default value in case that key is not in the dictionary Return value: VT : Item of the dictionary with key key if key is in the dictionary, default otherwise. items() Return a new view of the dictionary\u2019s items (key-value pairs). Return value: ItemsView : View object of the dictionary's items keys() Return a new view of the dictionary's keys. Return value: KeysView : View object of the dictionary's keys pop(key[, default]) If key is in the dictionary, remove it and return its value, else return default . If default is not given and key is not in the dictionary, a KeyError is raised. Arguments: key : KT ; Key to retrieve corresponding value if exists. default : VT , optional, default= None ; Default value in case that key is not in the dictionary Return value: VT : Item of the dictionary with key key if key is in the dictionary, default otherwise. popitem() Remove and return a key-value pair from the dictionary. Pairs are returned in LIFO order. If the dictionary is empty, raises a KeyError . Return value: Tuple[KT, VT] : Key-value pair that were last inserted into the dictionary reversed(d) Return a reverse iterator over the keys of the dictionary. (provided only python version 3.8 and above) Return value: Iterator[KT] : Reverse iterator over the keys of the dictionary setdefault(key[, default]) If key is in the dictionary, return its value. If not, insert key with a value of default and return default . Arguments: key : KT ; Key to retrieve or set the value default : VT , optional, default= None ; Value to be set if key is not in the dictionary Return value: VT : Item of the dictionary with key key if key is in the dictionary, default otherwise. update([other, **kwargs]) Update the dictionary with the key-value pairs from other , overwriting existing keys. Arguments: other : Mapping[KT, VT] or Iterable[Tuple[KT, VT]] , optional; Key-value pairs to be added kwargs : VT , optional; values to be added Return value: None values() Return a new view of the dictionary's values. Return value: ValuesView : View object of the dictionary's values d | other Create a new dictionary with the merged keys and values of d and other , which must both be dictionaries. The values of other take priority when d and other share keys. The return value is volatile by default. (provided only python version 3.9 and above) Arguments: other : Mapping[KT, VT] or Iterable[Tuple[KT, VT]] ; Key-value pairs to be merged Return value: Dict[KT, VT] : A new volatile dictionary object. d |= other Update the dictionary d with keys and values from other . (provided only python version 3.9 and above) Arguments: other : Mapping[KT, VT] or Iterable[Tuple[KT, VT]] ; Key-value pairs to be merged Return value: Dict[KT, VT] : The dictionary object.","title":"Dict"},{"location":"usage/dict/#dict","text":"Dict is a container compatible with the built-in dict , which serializes keys and values and stores them in a sqlite3 database. It preserves insertion order for all supported python versions.","title":"Dict"},{"location":"usage/dict/#dictkt-vt","text":"Constructor.","title":"Dict[KT, VT](...)"},{"location":"usage/dict/#type-parameters","text":"KT : key type VT : value type","title":"Type Parameters:"},{"location":"usage/dict/#arguments","text":"connection : str or sqlite3.Connection , optional, default= None ; If None , temporary file is automatically created. If connection is a str , it will be used as the sqlite3 database file name. You can pass a sqlite3.Connection directly. table_name : str , optional, default= None ; Table name of this container. If None , an auto-generated unique name will be used. Available characters are letters, numbers, and underscores ( _ ). key_serializer : Callable[[KT], bytes] , optional, default= None ; Function to serialize key. If None , pickle.dumps is used. key_deserializer : Callable[[bytes], KT] , optional, default= None ; Function to deserialize key. If None , pickle.loads is used. value_serializer : Callable[[VT], bytes] , optional, default= None ; Function to serialize value. If None , key_serializer is used. value_deserializer : Callable[[bytes], VT] , optional, default= None ; Function to deserialize value. If None , key_deserializer is used. persist : bool , optional, default= True ; If True , table won't be deleted even when the object is deleted. If False , the table is deleted when this object is deleted. rebuild_strategy : RebuildStrategy , optional, default= RebuildStrategy.CHECK_WITH_FIRST_ELEMENT ; Rebuild strategy. data : Mapping[KT, VT] or Iterable[Tuple[KT, VT]] , optional, defualt= None ; Initial data.","title":"Arguments:"},{"location":"usage/dict/#lend","text":"Return the number of items in d: Dict[KT, VT]","title":"len(d)"},{"location":"usage/dict/#return-value","text":"int : The number of items in d","title":"Return value:"},{"location":"usage/dict/#dkey","text":"Get item of d with key key . Raises a KeyError if key is not in the map.","title":"d[key]"},{"location":"usage/dict/#arguments_1","text":"key : KT ; Key to retrieve corresponding value","title":"Arguments:"},{"location":"usage/dict/#return-value_1","text":"VT : Item of d with key key","title":"Return value:"},{"location":"usage/dict/#dkey-value","text":"Set d[key] to value .","title":"d[key] = value"},{"location":"usage/dict/#arguments_2","text":"key : KT ; Key to be set value : VT ; Value to be set","title":"Arguments:"},{"location":"usage/dict/#return-value_2","text":"None","title":"Return value:"},{"location":"usage/dict/#del-dkey","text":"Delete d[key] .","title":"del d[key]"},{"location":"usage/dict/#arguments_3","text":"key : KT ; Key to be deleted","title":"Arguments:"},{"location":"usage/dict/#return-value_3","text":"None","title":"Return value:"},{"location":"usage/dict/#key-in-d","text":"Return whether if key is in d","title":"key in d"},{"location":"usage/dict/#arguments_4","text":"key : KT ; Key to be checked","title":"Arguments:"},{"location":"usage/dict/#return-value_4","text":"bool : True if key is in d and False otherwise.","title":"Return value:"},{"location":"usage/dict/#key-not-in-d","text":"Return whether if key is not in d","title":"key not in d"},{"location":"usage/dict/#arguments_5","text":"key : KT ; Key to be checked","title":"Arguments:"},{"location":"usage/dict/#return-value_5","text":"bool : True if key is not in d and False otherwise.","title":"Return value:"},{"location":"usage/dict/#iterd","text":"Return an iterator over the keys of d","title":"iter(d)"},{"location":"usage/dict/#return-value_6","text":"Iterator[KT] : an iterator over the keys of d","title":"Return value:"},{"location":"usage/dict/#clear","text":"Remove all items from the dictionary","title":"clear()"},{"location":"usage/dict/#return-value_7","text":"None","title":"Return value:"},{"location":"usage/dict/#copy","text":"Return a copy of the dictionary. The actual behavior is to create a table with a unique table name and copy the keys and the values to the new table. Therefore, unlike the built-in dict copy, the behavior is similar to deep copy. Be aware that the copied dictionary is volatile.","title":"copy()"},{"location":"usage/dict/#return-value_8","text":"Dict[KT, VT] : A volatile copy of the dictionary.","title":"Return value:"},{"location":"usage/dict/#getkey-default","text":"Return the value for key if key is in the dictionary, else default . If default is not given, it defaults to None , so that this method never raises a KeyError .","title":"get(key[, default])"},{"location":"usage/dict/#arguments_6","text":"key : KT ; Key to retrieve corresponding value if exists. default : VT , optional, default= None ; Default value in case that key is not in the dictionary","title":"Arguments:"},{"location":"usage/dict/#return-value_9","text":"VT : Item of the dictionary with key key if key is in the dictionary, default otherwise.","title":"Return value:"},{"location":"usage/dict/#items","text":"Return a new view of the dictionary\u2019s items (key-value pairs).","title":"items()"},{"location":"usage/dict/#return-value_10","text":"ItemsView : View object of the dictionary's items","title":"Return value:"},{"location":"usage/dict/#keys","text":"Return a new view of the dictionary's keys.","title":"keys()"},{"location":"usage/dict/#return-value_11","text":"KeysView : View object of the dictionary's keys","title":"Return value:"},{"location":"usage/dict/#popkey-default","text":"If key is in the dictionary, remove it and return its value, else return default . If default is not given and key is not in the dictionary, a KeyError is raised.","title":"pop(key[, default])"},{"location":"usage/dict/#arguments_7","text":"key : KT ; Key to retrieve corresponding value if exists. default : VT , optional, default= None ; Default value in case that key is not in the dictionary","title":"Arguments:"},{"location":"usage/dict/#return-value_12","text":"VT : Item of the dictionary with key key if key is in the dictionary, default otherwise.","title":"Return value:"},{"location":"usage/dict/#popitem","text":"Remove and return a key-value pair from the dictionary. Pairs are returned in LIFO order. If the dictionary is empty, raises a KeyError .","title":"popitem()"},{"location":"usage/dict/#return-value_13","text":"Tuple[KT, VT] : Key-value pair that were last inserted into the dictionary","title":"Return value:"},{"location":"usage/dict/#reversedd","text":"Return a reverse iterator over the keys of the dictionary. (provided only python version 3.8 and above)","title":"reversed(d)"},{"location":"usage/dict/#return-value_14","text":"Iterator[KT] : Reverse iterator over the keys of the dictionary","title":"Return value:"},{"location":"usage/dict/#setdefaultkey-default","text":"If key is in the dictionary, return its value. If not, insert key with a value of default and return default .","title":"setdefault(key[, default])"},{"location":"usage/dict/#arguments_8","text":"key : KT ; Key to retrieve or set the value default : VT , optional, default= None ; Value to be set if key is not in the dictionary","title":"Arguments:"},{"location":"usage/dict/#return-value_15","text":"VT : Item of the dictionary with key key if key is in the dictionary, default otherwise.","title":"Return value:"},{"location":"usage/dict/#updateother-kwargs","text":"Update the dictionary with the key-value pairs from other , overwriting existing keys.","title":"update([other, **kwargs])"},{"location":"usage/dict/#arguments_9","text":"other : Mapping[KT, VT] or Iterable[Tuple[KT, VT]] , optional; Key-value pairs to be added kwargs : VT , optional; values to be added","title":"Arguments:"},{"location":"usage/dict/#return-value_16","text":"None","title":"Return value:"},{"location":"usage/dict/#values","text":"Return a new view of the dictionary's values.","title":"values()"},{"location":"usage/dict/#return-value_17","text":"ValuesView : View object of the dictionary's values","title":"Return value:"},{"location":"usage/dict/#d-other","text":"Create a new dictionary with the merged keys and values of d and other , which must both be dictionaries. The values of other take priority when d and other share keys. The return value is volatile by default. (provided only python version 3.9 and above)","title":"d | other"},{"location":"usage/dict/#arguments_10","text":"other : Mapping[KT, VT] or Iterable[Tuple[KT, VT]] ; Key-value pairs to be merged","title":"Arguments:"},{"location":"usage/dict/#return-value_18","text":"Dict[KT, VT] : A new volatile dictionary object.","title":"Return value:"},{"location":"usage/dict/#d-other_1","text":"Update the dictionary d with keys and values from other . (provided only python version 3.9 and above)","title":"d |= other"},{"location":"usage/dict/#arguments_11","text":"other : Mapping[KT, VT] or Iterable[Tuple[KT, VT]] ; Key-value pairs to be merged","title":"Arguments:"},{"location":"usage/dict/#return-value_19","text":"Dict[KT, VT] : The dictionary object.","title":"Return value:"},{"location":"usage/list/","text":"List List is a container compatible with the built-in list , which serializes values and stores them in a sqlite3 database. List[T](...) Constructor. Type Parameters: T : value type Arguments: connection : str or sqlite3.Connection , optional, default= None ; If None , temporary file is automatically created. If connection is a str , it will be used as the sqlite3 database file name. You can pass a sqlite3.Connection directly. table_name : str , optional, default= None ; Table name of this container. If None , an auto-generated unique name will be used. Available characters are letters, numbers, and underscores ( _ ). serializer : Callable[[T], bytes] , optional, default= None ; Function to serialize value. If None , pickle.dumps is used. deserializer : Callable[[bytes], T] , optional, default= None ; Function to deserialize value. If None , pickle.loads is used. persist : bool , optional, default= True ; If True , table won't be deleted even when the object is deleted. If False , the table is deleted when this object is deleted. rebuild_strategy : RebuildStrategy , optional, default= RebuildStrategy.CHECK_WITH_FIRST_ELEMENT ; Rebuild strategy. data : Iterable[T] , optional, defualt= None ; Initial data. x in s True if an item of s is equal to x , else False Arguments: x : object ; an object to be checked Return value: bool : True if x is in s and False otherwise. x not in s False if an item of s is equal to x , else True Arguments: x : object ; an object to be checked Return value: bool : False if x is in s and True otherwise. s + t The concatenation of s and t Arguments: t : Iterable[T] ; An iterable to be concatenated. Return value: List[T] : The concatenation of s and t . s * n or n * s equivalent to adding s to itself n times. Arguments: n : int ; Number of times to repeat. Return value: List[T] : a list of n times s was repeated. s[i] i -th item of s , origin 0 . Arguments: i : int ; Item index. If it is negative, it is equivalent to len(s) + i . Return value: T : i -th item of s , origin 0 . s[i:j] Slice of s from i to j . Arguments: i : int or None ; Item index where the slice starts from. If None , it is treated as 0 . j : int or None ; Item index where the slice stops at. If None , it is treated as len(s) . Return value: List[T] : Slice of s from i to j . s[i:j:k] Slice of s from i to j with step k Arguments: i : int or None ; Item index where the slice starts from. If None , it is treated as 0 . j : int or None ; Item index where the slice stops at. If None , it is treated as len(s) . k : int or None ; Step of the slice. If None , it is treated as 1 . Return value: List[T] : Slice of s from i to j with step k . len(s) Return the number of items in s: List[T] Return value: int : The number of items in s index(x[, i[, j]]]) Return index of the first occurrence of x in the list (at or after index i and before index j ). Raise ValueError if x is not in the list. Arguments: x : T ; Value to retrieve corresponding index if exists. i : int , optional, default= None ; First index to look up the value. If it is None , start from the first element of the list. j : int , optional, default= None ; Index before the last one to look for a value. If None , search to the end. Return value: int : Index of the first occurrence of x in the list. count(x) Return total number of occurrences of x in the list. Arguments: x : T ; Value that counts the number of occurrences. Return value: int : The number of occurrences of x in the list. s[i] = x Replace item i of s by x . Arguments: i : int ; Item index to be set. If it is negative, it is equivalent to len(s) + i x : T ; Value to be set. Return value: None . del s[i] Remove item i of s . Arguments: i : int ; Item index to be removed. If it is negative, it is equivalent to len(s) + i . Return value: None . s[i:j] = t Replace slice of s from i to j by the contents of the iterable t . Arguments: i : int or None ; Item index where the slice starts from. If None , it is treated as 0 . j : int or None ; Item index where the slice stops at. If None , it is treated as len(s) . t : Iterable[T] ; Iterable to be inserted. Return value: None . del s[i:j] Remove slice of s from i to j . Arguments: i : int or None ; Item index where the slice starts from. If None , it is treated as 0 . j : int or None ; Item index where the slice stops at. If None , it is treated as len(s) . Return value: None . s[i:j:k] = t Replace the elements of s[i:j:k] by those ofthe iterable t . The length must be the same. Otherwise, ValueError will be raised. Arguments: i : int or None ; Item index where the slice starts from. If None , it is treated as 0 . j : int or None ; Item index where the slice stops at. If None , it is treated as len(s) . k : int or None ; Step of the slice. If None , it is treated as 1 . t : Iterable[T] ; Iterable to be substituted. The length must be the same as that of the slice. Return value: None . del s[i:j:k] Remove the elements of s[i:j:k] from the list. Arguments: i : int or None ; Item index where the slice starts from. If None , it is treated as 0 . j : int or None ; Item index where the slice stops at. If None , it is treated as len(s) . k : int or None ; Step of the slice. If None , it is treated as 1 . Return value: None . append(x) Append x to the end of the sequence. Arguments: x : T ; Item to be appended. Return value; None . clear() Remove all items from the list. Return value: None . copy() Return a copy of the list. The actual behavior is to create a table with a unique table name and copy the items to the new table. Therefore, unlike the built-in list copy, the behavior is similar to deep copy. Be aware that the copied list is volatile. Return value: List[T] : A volatile copy of the list. extend(t) Concatenate the list and t . Arguments: t : Iterable[T] ; An iterable to be concatenated. Return value: None . s += t Concatenate s and t . Arguments: t : Iterable[T] ; An iterable to be concatenated. Return value: None . s *= n Update s with its contents repeated n times. Arguments: n : int ; Number of times to repeat. Return value: None . insert(i, x) Insert x into the list at the index i . Arguments: i : int ; Index to be inserted. x : T ; Item to be inserted. Return value: None . pop(i) Retrieve the item at i and also remove it from s. Arguments: i : int or None , optional, default= None ; Index to be retrieved and removed. If it is None , it is treated as the last index of the list. Return value: T : i -th item of s , origin 0 . remove(x) Remove the first item of s whose value is equal to x . Arguments: x : T ; Item to be removed. Return value: None . reverse() Reverse the items of the list in place. Return value: None . sort(reverse, key) Sort the items of the list in place. The value of reverse can be either True or False , resulting in descending or ascending order, respectively. key specifies a function of one argument that is used to extract a comparison key from each list element. Arguments: reverse : bool , optional, default= False ; By default, the order is ascending, but if this value is True , the order will be descending. key : Callable[[T], Any] , optional, default= None ; Function to extract a comparison key from each list element. Return value: None .","title":"List"},{"location":"usage/list/#list","text":"List is a container compatible with the built-in list , which serializes values and stores them in a sqlite3 database.","title":"List"},{"location":"usage/list/#listt","text":"Constructor.","title":"List[T](...)"},{"location":"usage/list/#type-parameters","text":"T : value type","title":"Type Parameters:"},{"location":"usage/list/#arguments","text":"connection : str or sqlite3.Connection , optional, default= None ; If None , temporary file is automatically created. If connection is a str , it will be used as the sqlite3 database file name. You can pass a sqlite3.Connection directly. table_name : str , optional, default= None ; Table name of this container. If None , an auto-generated unique name will be used. Available characters are letters, numbers, and underscores ( _ ). serializer : Callable[[T], bytes] , optional, default= None ; Function to serialize value. If None , pickle.dumps is used. deserializer : Callable[[bytes], T] , optional, default= None ; Function to deserialize value. If None , pickle.loads is used. persist : bool , optional, default= True ; If True , table won't be deleted even when the object is deleted. If False , the table is deleted when this object is deleted. rebuild_strategy : RebuildStrategy , optional, default= RebuildStrategy.CHECK_WITH_FIRST_ELEMENT ; Rebuild strategy. data : Iterable[T] , optional, defualt= None ; Initial data.","title":"Arguments:"},{"location":"usage/list/#x-in-s","text":"True if an item of s is equal to x , else False","title":"x in s"},{"location":"usage/list/#arguments_1","text":"x : object ; an object to be checked","title":"Arguments:"},{"location":"usage/list/#return-value","text":"bool : True if x is in s and False otherwise.","title":"Return value:"},{"location":"usage/list/#x-not-in-s","text":"False if an item of s is equal to x , else True","title":"x not in s"},{"location":"usage/list/#arguments_2","text":"x : object ; an object to be checked","title":"Arguments:"},{"location":"usage/list/#return-value_1","text":"bool : False if x is in s and True otherwise.","title":"Return value:"},{"location":"usage/list/#s-t","text":"The concatenation of s and t","title":"s + t"},{"location":"usage/list/#arguments_3","text":"t : Iterable[T] ; An iterable to be concatenated.","title":"Arguments:"},{"location":"usage/list/#return-value_2","text":"List[T] : The concatenation of s and t .","title":"Return value:"},{"location":"usage/list/#s-n-or-n-s","text":"equivalent to adding s to itself n times.","title":"s * n or n * s"},{"location":"usage/list/#arguments_4","text":"n : int ; Number of times to repeat.","title":"Arguments:"},{"location":"usage/list/#return-value_3","text":"List[T] : a list of n times s was repeated.","title":"Return value:"},{"location":"usage/list/#si","text":"i -th item of s , origin 0 .","title":"s[i]"},{"location":"usage/list/#arguments_5","text":"i : int ; Item index. If it is negative, it is equivalent to len(s) + i .","title":"Arguments:"},{"location":"usage/list/#return-value_4","text":"T : i -th item of s , origin 0 .","title":"Return value:"},{"location":"usage/list/#sij","text":"Slice of s from i to j .","title":"s[i:j]"},{"location":"usage/list/#arguments_6","text":"i : int or None ; Item index where the slice starts from. If None , it is treated as 0 . j : int or None ; Item index where the slice stops at. If None , it is treated as len(s) .","title":"Arguments:"},{"location":"usage/list/#return-value_5","text":"List[T] : Slice of s from i to j .","title":"Return value:"},{"location":"usage/list/#sijk","text":"Slice of s from i to j with step k","title":"s[i:j:k]"},{"location":"usage/list/#arguments_7","text":"i : int or None ; Item index where the slice starts from. If None , it is treated as 0 . j : int or None ; Item index where the slice stops at. If None , it is treated as len(s) . k : int or None ; Step of the slice. If None , it is treated as 1 .","title":"Arguments:"},{"location":"usage/list/#return-value_6","text":"List[T] : Slice of s from i to j with step k .","title":"Return value:"},{"location":"usage/list/#lens","text":"Return the number of items in s: List[T]","title":"len(s)"},{"location":"usage/list/#return-value_7","text":"int : The number of items in s","title":"Return value:"},{"location":"usage/list/#indexx-i-j","text":"Return index of the first occurrence of x in the list (at or after index i and before index j ). Raise ValueError if x is not in the list.","title":"index(x[, i[, j]]])"},{"location":"usage/list/#arguments_8","text":"x : T ; Value to retrieve corresponding index if exists. i : int , optional, default= None ; First index to look up the value. If it is None , start from the first element of the list. j : int , optional, default= None ; Index before the last one to look for a value. If None , search to the end.","title":"Arguments:"},{"location":"usage/list/#return-value_8","text":"int : Index of the first occurrence of x in the list.","title":"Return value:"},{"location":"usage/list/#countx","text":"Return total number of occurrences of x in the list.","title":"count(x)"},{"location":"usage/list/#arguments_9","text":"x : T ; Value that counts the number of occurrences.","title":"Arguments:"},{"location":"usage/list/#return-value_9","text":"int : The number of occurrences of x in the list.","title":"Return value:"},{"location":"usage/list/#si-x","text":"Replace item i of s by x .","title":"s[i] = x"},{"location":"usage/list/#arguments_10","text":"i : int ; Item index to be set. If it is negative, it is equivalent to len(s) + i x : T ; Value to be set.","title":"Arguments:"},{"location":"usage/list/#return-value_10","text":"None .","title":"Return value:"},{"location":"usage/list/#del-si","text":"Remove item i of s .","title":"del s[i]"},{"location":"usage/list/#arguments_11","text":"i : int ; Item index to be removed. If it is negative, it is equivalent to len(s) + i .","title":"Arguments:"},{"location":"usage/list/#return-value_11","text":"None .","title":"Return value:"},{"location":"usage/list/#sij-t","text":"Replace slice of s from i to j by the contents of the iterable t .","title":"s[i:j] = t"},{"location":"usage/list/#arguments_12","text":"i : int or None ; Item index where the slice starts from. If None , it is treated as 0 . j : int or None ; Item index where the slice stops at. If None , it is treated as len(s) . t : Iterable[T] ; Iterable to be inserted.","title":"Arguments:"},{"location":"usage/list/#return-value_12","text":"None .","title":"Return value:"},{"location":"usage/list/#del-sij","text":"Remove slice of s from i to j .","title":"del s[i:j]"},{"location":"usage/list/#arguments_13","text":"i : int or None ; Item index where the slice starts from. If None , it is treated as 0 . j : int or None ; Item index where the slice stops at. If None , it is treated as len(s) .","title":"Arguments:"},{"location":"usage/list/#return-value_13","text":"None .","title":"Return value:"},{"location":"usage/list/#sijk-t","text":"Replace the elements of s[i:j:k] by those ofthe iterable t . The length must be the same. Otherwise, ValueError will be raised.","title":"s[i:j:k] = t"},{"location":"usage/list/#arguments_14","text":"i : int or None ; Item index where the slice starts from. If None , it is treated as 0 . j : int or None ; Item index where the slice stops at. If None , it is treated as len(s) . k : int or None ; Step of the slice. If None , it is treated as 1 . t : Iterable[T] ; Iterable to be substituted. The length must be the same as that of the slice.","title":"Arguments:"},{"location":"usage/list/#return-value_14","text":"None .","title":"Return value:"},{"location":"usage/list/#del-sijk","text":"Remove the elements of s[i:j:k] from the list.","title":"del s[i:j:k]"},{"location":"usage/list/#arguments_15","text":"i : int or None ; Item index where the slice starts from. If None , it is treated as 0 . j : int or None ; Item index where the slice stops at. If None , it is treated as len(s) . k : int or None ; Step of the slice. If None , it is treated as 1 .","title":"Arguments:"},{"location":"usage/list/#return-value_15","text":"None .","title":"Return value:"},{"location":"usage/list/#appendx","text":"Append x to the end of the sequence.","title":"append(x)"},{"location":"usage/list/#arguments_16","text":"x : T ; Item to be appended.","title":"Arguments:"},{"location":"usage/list/#return-value_16","text":"None .","title":"Return value;"},{"location":"usage/list/#clear","text":"Remove all items from the list.","title":"clear()"},{"location":"usage/list/#return-value_17","text":"None .","title":"Return value:"},{"location":"usage/list/#copy","text":"Return a copy of the list. The actual behavior is to create a table with a unique table name and copy the items to the new table. Therefore, unlike the built-in list copy, the behavior is similar to deep copy. Be aware that the copied list is volatile.","title":"copy()"},{"location":"usage/list/#return-value_18","text":"List[T] : A volatile copy of the list.","title":"Return value:"},{"location":"usage/list/#extendt","text":"Concatenate the list and t .","title":"extend(t)"},{"location":"usage/list/#arguments_17","text":"t : Iterable[T] ; An iterable to be concatenated.","title":"Arguments:"},{"location":"usage/list/#return-value_19","text":"None .","title":"Return value:"},{"location":"usage/list/#s-t_1","text":"Concatenate s and t .","title":"s += t"},{"location":"usage/list/#arguments_18","text":"t : Iterable[T] ; An iterable to be concatenated.","title":"Arguments:"},{"location":"usage/list/#return-value_20","text":"None .","title":"Return value:"},{"location":"usage/list/#s-n","text":"Update s with its contents repeated n times.","title":"s *= n"},{"location":"usage/list/#arguments_19","text":"n : int ; Number of times to repeat.","title":"Arguments:"},{"location":"usage/list/#return-value_21","text":"None .","title":"Return value:"},{"location":"usage/list/#inserti-x","text":"Insert x into the list at the index i .","title":"insert(i, x)"},{"location":"usage/list/#arguments_20","text":"i : int ; Index to be inserted. x : T ; Item to be inserted.","title":"Arguments:"},{"location":"usage/list/#return-value_22","text":"None .","title":"Return value:"},{"location":"usage/list/#popi","text":"Retrieve the item at i and also remove it from s.","title":"pop(i)"},{"location":"usage/list/#arguments_21","text":"i : int or None , optional, default= None ; Index to be retrieved and removed. If it is None , it is treated as the last index of the list.","title":"Arguments:"},{"location":"usage/list/#return-value_23","text":"T : i -th item of s , origin 0 .","title":"Return value:"},{"location":"usage/list/#removex","text":"Remove the first item of s whose value is equal to x .","title":"remove(x)"},{"location":"usage/list/#arguments_22","text":"x : T ; Item to be removed.","title":"Arguments:"},{"location":"usage/list/#return-value_24","text":"None .","title":"Return value:"},{"location":"usage/list/#reverse","text":"Reverse the items of the list in place.","title":"reverse()"},{"location":"usage/list/#return-value_25","text":"None .","title":"Return value:"},{"location":"usage/list/#sortreverse-key","text":"Sort the items of the list in place. The value of reverse can be either True or False , resulting in descending or ascending order, respectively. key specifies a function of one argument that is used to extract a comparison key from each list element.","title":"sort(reverse, key)"},{"location":"usage/list/#arguments_23","text":"reverse : bool , optional, default= False ; By default, the order is ascending, but if this value is True , the order will be descending. key : Callable[[T], Any] , optional, default= None ; Function to extract a comparison key from each list element.","title":"Arguments:"},{"location":"usage/list/#return-value_26","text":"None .","title":"Return value:"},{"location":"usage/set/","text":"Set Set is a container compatible with the built-in set , which serializes values and stores them in a sqlite3 database. Set[T](...) Constructor. Type Parameters: T : value type Arguments: connection : str or sqlite3.Connection , optional, default= None ; If None , temporary file is automatically created. If connection is a str , it will be used as the sqlite3 database file name. You can pass a sqlite3.Connection directly. table_name : str , optional, default= None ; Table name of this container. If None , an auto-generated unique name will be used. Available characters are letters, numbers, and underscores ( _ ). serializer : Callable[[T], bytes] , optional, default= None ; Function to serialize value. If None , pickle.dumps is used. deserializer : Callable[[bytes], T] , optional, default= None ; Function to deserialize value. If None , pickle.loads is used. persist : bool , optional, default= True ; If True , table won't be deleted even when the object is deleted. If False , the table is deleted when this object is deleted. rebuild_strategy : RebuildStrategy , optional, default= RebuildStrategy.CHECK_WITH_FIRST_ELEMENT ; Rebuild strategy. data : Iterable[T] , optional, defualt= None ; Initial data. len(s) Return the number of items in s: Set[T] Return value: int : The number of items in s x in s True if x is in s , else False Arguments: x : object ; an object to be checked Return value: bool : True if x is in s and False otherwise. x not in s False if x is in s , else True Arguments: x : object ; an object to be checked Return value: bool : False if x is in s and True otherwise. isdisjoint(other) Return True if the set has no elements in common with other . Arguments: other : Iterable[T] ; Iterable to check if disjoint. Return value: bool : True if the set is disjoint with other , False otherwise. issubset(other) Return True if every element in the set is in other . Arguments: other : Iterable[T] ; Iterable to check if this one contains the set. Return value: bool : True if the set is subset of other , False otherwise. s <= other Return True if every element in the set is in other . Argument: other : Iterable[T] ; Iterable to check if this one contains all the elements in the set. Return value: bool : True if the set is subset of other , False otherwise. s < other Return True if every element in the set is in other and s is not equal to other . Arguments: other : Iterable[T] ; Iterable to check if it contains all elements of the set and is not equal to the set. Return value: bool : True if the set is a proper subset of other , False otherwise. issuperset(other) Return True if every element in other is in the set. Arguments: other : Iterable[T] ; Iterable to check if the elements are contained. Return value: bool : True if the set is superset of other , False otherwise. s >= other Return True if every element in other is in the set. Argument: other : Iterable[T] ; Iterable to check if the elements are contained. Return value: bool : True if the set is superset of other , False otherwise. s > other Return True if every element in other is in the set and s is not equal to other . Arguments: other : Iterable[T] ; Iterable to check if it all elements are in the set and is not equal to the set. Return value: bool : True if the set is a proper superset of other , False otherwise. union(*others) Return a new set with elements from the set and all others . Arguments: others : Iterable[T] ; Iterables to take the union. Return value: Set[T] : A new set with elements from the set and all others . s | other Return a new set with elements from s and other . Arguments: other : Iterable[T] ; Iterable to take the union. Return value: Set[T] : A new set with elements from s and other . intersection(*others) Return a new set with elements common to the set and all others . Arguments: others : Iterable[T] ; Iterables to take the intersection. Return value: Set[T] : A new set with elements common to the set and all others . s & other Return a new set with elements common to s and other . Arguments: other : Iterable[T] ; Iterable to take the intersection. Return value: Set[T] : A new set with elements commont ot s and other . difference(*others) Return a new set with elements in the set that are not in the others . Arguments: others : Iterable[T] ; Iterables to take the difference. Return value: Set[T] : A new set with elements in the set that are not in the others . s - other Return a new set with elements in the set that are not in the other . Arguments: other : Iterable[T] ; Iterable to take the difference. Return value: Set[T] : A new set with elements in the set that are not in the other . symmetric_difference(other) Return a new set with elements in either the set or other but not both. Arguments: other : Iterable[T] ; Iterable to take the symmetric difference. Return value: Set[T] : A new set with elements in enther the set or other but not both. s ^ other Return a new set with elements in either the set or other but not both. Arguments: other : Iterable[T] ; Iterable to take the symmetric difference. Return value: Set[T] : A new set with elements in enther the set or other but not both. copy() Return a copy of the set. The actual behavior is to create a table with a unique table name and copy the elements to the new table. Therefore, unlike the built-in set copy, the behavior is similar to deep copy. Be aware that the copied set is volatile. Return value: Set[T] : A volatile copy of the set. update(*others) Update the set by adding elements from all others . Arguments: others : Iterable[T] ; Iterables to take the union. Return value: None . s |= other Update the set by adding elements from other . Arguments: other : Iterable[T] ; Iterable to take the union. Return value: None . intersection_update(*others) Update the set by keeping only elements found in the set and all others . Arguments: others : Iterable[T] ; Iterables to take the intersection. Return value: None . s &= other Update the set by keeping only elements found in the set and other . Arguments: other : Iterable[T] ; Iterable to take the intersection. Return value: None . symmetric_difference_update(other) Update the set by keeping only elements found in either the set or other but not both. Arguments: other : Iterable[T] ; Iterable to take the symmetric difference. Return value: None . s ^= other Update the set by keeping only elements found in either the set or other but not both. Arguments: other : Iterable[T] ; Iterable to take the symmetric difference. Return value: None . add(elem) Add an element elem to the set. Arguments: elem : T ; An element to be added. Return value: None . remove(elem) Remove an element elem from the set. Raises KeyError if elem is not contained in the set. Arguemnts: elem : T ; An element to be removed. Return value: None . discard(elem) Remove an element elem from the set if it is present. Arguments: elem : T ; An element to be removed. Return value: None . pop() Remove and return an arbitrary element from the set. Raises KeyError if the set is empty. Return value: T : An element in the set. clear() Remove all elements from the set. Return value: None .","title":"Set"},{"location":"usage/set/#set","text":"Set is a container compatible with the built-in set , which serializes values and stores them in a sqlite3 database.","title":"Set"},{"location":"usage/set/#sett","text":"Constructor.","title":"Set[T](...)"},{"location":"usage/set/#type-parameters","text":"T : value type","title":"Type Parameters:"},{"location":"usage/set/#arguments","text":"connection : str or sqlite3.Connection , optional, default= None ; If None , temporary file is automatically created. If connection is a str , it will be used as the sqlite3 database file name. You can pass a sqlite3.Connection directly. table_name : str , optional, default= None ; Table name of this container. If None , an auto-generated unique name will be used. Available characters are letters, numbers, and underscores ( _ ). serializer : Callable[[T], bytes] , optional, default= None ; Function to serialize value. If None , pickle.dumps is used. deserializer : Callable[[bytes], T] , optional, default= None ; Function to deserialize value. If None , pickle.loads is used. persist : bool , optional, default= True ; If True , table won't be deleted even when the object is deleted. If False , the table is deleted when this object is deleted. rebuild_strategy : RebuildStrategy , optional, default= RebuildStrategy.CHECK_WITH_FIRST_ELEMENT ; Rebuild strategy. data : Iterable[T] , optional, defualt= None ; Initial data.","title":"Arguments:"},{"location":"usage/set/#lens","text":"Return the number of items in s: Set[T]","title":"len(s)"},{"location":"usage/set/#return-value","text":"int : The number of items in s","title":"Return value:"},{"location":"usage/set/#x-in-s","text":"True if x is in s , else False","title":"x in s"},{"location":"usage/set/#arguments_1","text":"x : object ; an object to be checked","title":"Arguments:"},{"location":"usage/set/#return-value_1","text":"bool : True if x is in s and False otherwise.","title":"Return value:"},{"location":"usage/set/#x-not-in-s","text":"False if x is in s , else True","title":"x not in s"},{"location":"usage/set/#arguments_2","text":"x : object ; an object to be checked","title":"Arguments:"},{"location":"usage/set/#return-value_2","text":"bool : False if x is in s and True otherwise.","title":"Return value:"},{"location":"usage/set/#isdisjointother","text":"Return True if the set has no elements in common with other .","title":"isdisjoint(other)"},{"location":"usage/set/#arguments_3","text":"other : Iterable[T] ; Iterable to check if disjoint.","title":"Arguments:"},{"location":"usage/set/#return-value_3","text":"bool : True if the set is disjoint with other , False otherwise.","title":"Return value:"},{"location":"usage/set/#issubsetother","text":"Return True if every element in the set is in other .","title":"issubset(other)"},{"location":"usage/set/#arguments_4","text":"other : Iterable[T] ; Iterable to check if this one contains the set.","title":"Arguments:"},{"location":"usage/set/#return-value_4","text":"bool : True if the set is subset of other , False otherwise.","title":"Return value:"},{"location":"usage/set/#s-other","text":"Return True if every element in the set is in other .","title":"s &lt;= other"},{"location":"usage/set/#argument","text":"other : Iterable[T] ; Iterable to check if this one contains all the elements in the set.","title":"Argument:"},{"location":"usage/set/#return-value_5","text":"bool : True if the set is subset of other , False otherwise.","title":"Return value:"},{"location":"usage/set/#s-other_1","text":"Return True if every element in the set is in other and s is not equal to other .","title":"s &lt; other"},{"location":"usage/set/#arguments_5","text":"other : Iterable[T] ; Iterable to check if it contains all elements of the set and is not equal to the set.","title":"Arguments:"},{"location":"usage/set/#return-value_6","text":"bool : True if the set is a proper subset of other , False otherwise.","title":"Return value:"},{"location":"usage/set/#issupersetother","text":"Return True if every element in other is in the set.","title":"issuperset(other)"},{"location":"usage/set/#arguments_6","text":"other : Iterable[T] ; Iterable to check if the elements are contained.","title":"Arguments:"},{"location":"usage/set/#return-value_7","text":"bool : True if the set is superset of other , False otherwise.","title":"Return value:"},{"location":"usage/set/#s-other_2","text":"Return True if every element in other is in the set.","title":"s &gt;= other"},{"location":"usage/set/#argument_1","text":"other : Iterable[T] ; Iterable to check if the elements are contained.","title":"Argument:"},{"location":"usage/set/#return-value_8","text":"bool : True if the set is superset of other , False otherwise.","title":"Return value:"},{"location":"usage/set/#s-other_3","text":"Return True if every element in other is in the set and s is not equal to other .","title":"s &gt; other"},{"location":"usage/set/#arguments_7","text":"other : Iterable[T] ; Iterable to check if it all elements are in the set and is not equal to the set.","title":"Arguments:"},{"location":"usage/set/#return-value_9","text":"bool : True if the set is a proper superset of other , False otherwise.","title":"Return value:"},{"location":"usage/set/#unionothers","text":"Return a new set with elements from the set and all others .","title":"union(*others)"},{"location":"usage/set/#arguments_8","text":"others : Iterable[T] ; Iterables to take the union.","title":"Arguments:"},{"location":"usage/set/#return-value_10","text":"Set[T] : A new set with elements from the set and all others .","title":"Return value:"},{"location":"usage/set/#s-other_4","text":"Return a new set with elements from s and other .","title":"s | other"},{"location":"usage/set/#arguments_9","text":"other : Iterable[T] ; Iterable to take the union.","title":"Arguments:"},{"location":"usage/set/#return-value_11","text":"Set[T] : A new set with elements from s and other .","title":"Return value:"},{"location":"usage/set/#intersectionothers","text":"Return a new set with elements common to the set and all others .","title":"intersection(*others)"},{"location":"usage/set/#arguments_10","text":"others : Iterable[T] ; Iterables to take the intersection.","title":"Arguments:"},{"location":"usage/set/#return-value_12","text":"Set[T] : A new set with elements common to the set and all others .","title":"Return value:"},{"location":"usage/set/#s-other_5","text":"Return a new set with elements common to s and other .","title":"s &amp; other"},{"location":"usage/set/#arguments_11","text":"other : Iterable[T] ; Iterable to take the intersection.","title":"Arguments:"},{"location":"usage/set/#return-value_13","text":"Set[T] : A new set with elements commont ot s and other .","title":"Return value:"},{"location":"usage/set/#differenceothers","text":"Return a new set with elements in the set that are not in the others .","title":"difference(*others)"},{"location":"usage/set/#arguments_12","text":"others : Iterable[T] ; Iterables to take the difference.","title":"Arguments:"},{"location":"usage/set/#return-value_14","text":"Set[T] : A new set with elements in the set that are not in the others .","title":"Return value:"},{"location":"usage/set/#s-other_6","text":"Return a new set with elements in the set that are not in the other .","title":"s - other"},{"location":"usage/set/#arguments_13","text":"other : Iterable[T] ; Iterable to take the difference.","title":"Arguments:"},{"location":"usage/set/#return-value_15","text":"Set[T] : A new set with elements in the set that are not in the other .","title":"Return value:"},{"location":"usage/set/#symmetric_differenceother","text":"Return a new set with elements in either the set or other but not both.","title":"symmetric_difference(other)"},{"location":"usage/set/#arguments_14","text":"other : Iterable[T] ; Iterable to take the symmetric difference.","title":"Arguments:"},{"location":"usage/set/#return-value_16","text":"Set[T] : A new set with elements in enther the set or other but not both.","title":"Return value:"},{"location":"usage/set/#s-other_7","text":"Return a new set with elements in either the set or other but not both.","title":"s ^ other"},{"location":"usage/set/#arguments_15","text":"other : Iterable[T] ; Iterable to take the symmetric difference.","title":"Arguments:"},{"location":"usage/set/#return-value_17","text":"Set[T] : A new set with elements in enther the set or other but not both.","title":"Return value:"},{"location":"usage/set/#copy","text":"Return a copy of the set. The actual behavior is to create a table with a unique table name and copy the elements to the new table. Therefore, unlike the built-in set copy, the behavior is similar to deep copy. Be aware that the copied set is volatile.","title":"copy()"},{"location":"usage/set/#return-value_18","text":"Set[T] : A volatile copy of the set.","title":"Return value:"},{"location":"usage/set/#updateothers","text":"Update the set by adding elements from all others .","title":"update(*others)"},{"location":"usage/set/#arguments_16","text":"others : Iterable[T] ; Iterables to take the union.","title":"Arguments:"},{"location":"usage/set/#return-value_19","text":"None .","title":"Return value:"},{"location":"usage/set/#s-other_8","text":"Update the set by adding elements from other .","title":"s |= other"},{"location":"usage/set/#arguments_17","text":"other : Iterable[T] ; Iterable to take the union.","title":"Arguments:"},{"location":"usage/set/#return-value_20","text":"None .","title":"Return value:"},{"location":"usage/set/#intersection_updateothers","text":"Update the set by keeping only elements found in the set and all others .","title":"intersection_update(*others)"},{"location":"usage/set/#arguments_18","text":"others : Iterable[T] ; Iterables to take the intersection.","title":"Arguments:"},{"location":"usage/set/#return-value_21","text":"None .","title":"Return value:"},{"location":"usage/set/#s-other_9","text":"Update the set by keeping only elements found in the set and other .","title":"s &amp;= other"},{"location":"usage/set/#arguments_19","text":"other : Iterable[T] ; Iterable to take the intersection.","title":"Arguments:"},{"location":"usage/set/#return-value_22","text":"None .","title":"Return value:"},{"location":"usage/set/#symmetric_difference_updateother","text":"Update the set by keeping only elements found in either the set or other but not both.","title":"symmetric_difference_update(other)"},{"location":"usage/set/#arguments_20","text":"other : Iterable[T] ; Iterable to take the symmetric difference.","title":"Arguments:"},{"location":"usage/set/#return-value_23","text":"None .","title":"Return value:"},{"location":"usage/set/#s-other_10","text":"Update the set by keeping only elements found in either the set or other but not both.","title":"s ^= other"},{"location":"usage/set/#arguments_21","text":"other : Iterable[T] ; Iterable to take the symmetric difference.","title":"Arguments:"},{"location":"usage/set/#return-value_24","text":"None .","title":"Return value:"},{"location":"usage/set/#addelem","text":"Add an element elem to the set.","title":"add(elem)"},{"location":"usage/set/#arguments_22","text":"elem : T ; An element to be added.","title":"Arguments:"},{"location":"usage/set/#return-value_25","text":"None .","title":"Return value:"},{"location":"usage/set/#removeelem","text":"Remove an element elem from the set. Raises KeyError if elem is not contained in the set.","title":"remove(elem)"},{"location":"usage/set/#arguemnts","text":"elem : T ; An element to be removed.","title":"Arguemnts:"},{"location":"usage/set/#return-value_26","text":"None .","title":"Return value:"},{"location":"usage/set/#discardelem","text":"Remove an element elem from the set if it is present.","title":"discard(elem)"},{"location":"usage/set/#arguments_23","text":"elem : T ; An element to be removed.","title":"Arguments:"},{"location":"usage/set/#return-value_27","text":"None .","title":"Return value:"},{"location":"usage/set/#pop","text":"Remove and return an arbitrary element from the set. Raises KeyError if the set is empty.","title":"pop()"},{"location":"usage/set/#return-value_28","text":"T : An element in the set.","title":"Return value:"},{"location":"usage/set/#clear","text":"Remove all elements from the set.","title":"clear()"},{"location":"usage/set/#return-value_29","text":"None .","title":"Return value:"}]}