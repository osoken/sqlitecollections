{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Overview Documentation for version: 1.1.1 sqlitecollections is a sort of containers that are backended by sqlite3 DB and are compatible with corresponding built-in collections. Since containers consume disk space instead of RAM, they can handle large amounts of data even in environments with limited RAM. Migrating from existing code using the built-in container is as simple as importing the library and changing the constructor. The elements of the container are automatically serialized and stored in the sqlite3 database, and are automatically read from the sqlite3 database and deserialized when accessed. Current version supports List (mutable sequence), Dict (mutable mapping) and Set (mutable set) and almost all methods are compatible with list, dict and set respectively. Installation pip install sqlitecollections Example import sqlitecollections as sc l = sc . List [ str ]([ \"Alice\" , \"Bob\" , \"Carol\" ]) print ( l [ 2 ]) #> Carol print ( len ( l )) #> 3 l . append ( \"Dave\" ) print ( l . index ( \"Bob\" )) #> 1 print ( l . index ( \"Dave\" )) #> 3 d = sc . Dict [ str , str ]({ \"a\" : \"Alice\" , \"b\" : \"Bob\" }) print ( d [ \"a\" ]) #> Alice d [ \"c\" ] = \"Carol\" print ( list ( d . keys ())) #> ['a', 'b', 'c'] print ( list ( d . values ())) #> ['Alice', 'Bob', 'Carol'] s = sc . Set [ str ]([ \"Alice\" , \"Bob\" , \"Carol\" , \"Dave\" ]) print ( \"Ellen\" in s ) #> False print ( \"Alice\" in s ) #> True print ( list ( s . intersection ([ \"Alice\" , \"Carol\" ]))) #> ['Alice', 'Carol'] In the above example, a temporary file is created every time a container is created, and the elements are written to the sqlite3 database created on the file, thus consuming very little RAM. If you want to reuse the container you created, you can create it by specifying the file path and table name of the sqlite3 database. import sqlitecollections as sc l = sc . List [ str ]([ \"Alice\" , \"Bob\" , \"Carol\" ], connection = \"path/to/file.db\" , table_name = \"list_example\" ) l . append ( \"Dave\" ) exit () When you load it, you can restore the previous state by specifying the same file path and table name. import sqlitecollections as sc l = sc . List [ str ]( connection = \"path/to/file.db\" , table_name = \"list_example\" ) print ( len ( l )) #> 4 print ( list ( l )) #> ['Alice', 'Bob', 'Carol', 'Dave'] Pros and cons for built-in containers Pros Save memory usage. Once the database is built, loading time is almost zero, even for huge data. Cons Each operation has the overhead of serialize/deserialize. Some operations are incompatible and unavailable. For example, directly rewriting the mutable elements of a container.","title":"Overview"},{"location":"#overview","text":"Documentation for version: 1.1.1 sqlitecollections is a sort of containers that are backended by sqlite3 DB and are compatible with corresponding built-in collections. Since containers consume disk space instead of RAM, they can handle large amounts of data even in environments with limited RAM. Migrating from existing code using the built-in container is as simple as importing the library and changing the constructor. The elements of the container are automatically serialized and stored in the sqlite3 database, and are automatically read from the sqlite3 database and deserialized when accessed. Current version supports List (mutable sequence), Dict (mutable mapping) and Set (mutable set) and almost all methods are compatible with list, dict and set respectively.","title":"Overview"},{"location":"#installation","text":"pip install sqlitecollections","title":"Installation"},{"location":"#example","text":"import sqlitecollections as sc l = sc . List [ str ]([ \"Alice\" , \"Bob\" , \"Carol\" ]) print ( l [ 2 ]) #> Carol print ( len ( l )) #> 3 l . append ( \"Dave\" ) print ( l . index ( \"Bob\" )) #> 1 print ( l . index ( \"Dave\" )) #> 3 d = sc . Dict [ str , str ]({ \"a\" : \"Alice\" , \"b\" : \"Bob\" }) print ( d [ \"a\" ]) #> Alice d [ \"c\" ] = \"Carol\" print ( list ( d . keys ())) #> ['a', 'b', 'c'] print ( list ( d . values ())) #> ['Alice', 'Bob', 'Carol'] s = sc . Set [ str ]([ \"Alice\" , \"Bob\" , \"Carol\" , \"Dave\" ]) print ( \"Ellen\" in s ) #> False print ( \"Alice\" in s ) #> True print ( list ( s . intersection ([ \"Alice\" , \"Carol\" ]))) #> ['Alice', 'Carol'] In the above example, a temporary file is created every time a container is created, and the elements are written to the sqlite3 database created on the file, thus consuming very little RAM. If you want to reuse the container you created, you can create it by specifying the file path and table name of the sqlite3 database. import sqlitecollections as sc l = sc . List [ str ]([ \"Alice\" , \"Bob\" , \"Carol\" ], connection = \"path/to/file.db\" , table_name = \"list_example\" ) l . append ( \"Dave\" ) exit () When you load it, you can restore the previous state by specifying the same file path and table name. import sqlitecollections as sc l = sc . List [ str ]( connection = \"path/to/file.db\" , table_name = \"list_example\" ) print ( len ( l )) #> 4 print ( list ( l )) #> ['Alice', 'Bob', 'Carol', 'Dave']","title":"Example"},{"location":"#pros-and-cons-for-built-in-containers","text":"","title":"Pros and cons for built-in containers"},{"location":"#pros","text":"Save memory usage. Once the database is built, loading time is almost zero, even for huge data.","title":"Pros"},{"location":"#cons","text":"Each operation has the overhead of serialize/deserialize. Some operations are incompatible and unavailable. For example, directly rewriting the mutable elements of a container.","title":"Cons"},{"location":"benchmark/","text":"py36 py37 py38 py39 py310 dict list set timing subject builtin sqlitecollections ratio class clear 0.00412 0.00671 1.62859 BenchmarkClear __contains__ 0.00399 0.00411 1.03026 BenchmarkContains copy 0.00402 0.00937 2.3315 BenchmarkCopy __delitem__ 0.0041 0.00708 1.72505 BenchmarkDelitem get 0.00396 0.00417 1.05065 BenchmarkGet get (unsuccessful search) 0.00403 0.00412 1.02372 BenchmarkGetDefault __getitem__ 0.00405 0.00414 1.02198 BenchmarkGetitem __init__ 0.00403 0.04547 11.2817 BenchmarkInit items 0.0045 0.01225 2.72271 BenchmarkItems __iter__ 0.00405 0.00829 2.04953 BenchmarkIter keys 0.004 0.00857 2.14131 BenchmarkKeys __len__ 0.00399 0.004 1.00216 BenchmarkLen __contains__ (unsuccessful search) 0.00409 0.00416 1.01708 BenchmarkNotContains pop 0.00402 0.00717 1.78134 BenchmarkPop pop (unsuccessful search) 0.00401 0.0057 1.42383 BenchmarkPopDefault popitem 0.00409 0.00746 1.82353 BenchmarkPopitem setdefault 0.00404 0.00578 1.42996 BenchmarkSetdefault setdefault (unsuccessful search) 0.00409 0.00596 1.45831 BenchmarkSetdefaultAddItem __setitem__ (add new item) 0.00403 0.00722 1.79273 BenchmarkSetitemAddNewItem __setitem__ (replace) 0.00404 0.00704 1.74117 BenchmarkSetitemReplace update 0.00405 0.00745 1.84032 BenchmarkUpdate update (many) 0.00489 0.59542 121.80987 BenchmarkUpdateMany values 0.00399 0.00812 2.03781 BenchmarkValues approximate memory usage subject builtin sqlitecollections ratio class clear 0.0 0.0 1.0 BenchmarkClear __contains__ 0.0 0.0 1.0 BenchmarkContains copy 0.01953 0.0 0.0 BenchmarkCopy __delitem__ 0.0 0.0 1.0 BenchmarkDelitem get 0.0 0.0 1.0 BenchmarkGet get (unsuccessful search) 0.0 0.0 1.0 BenchmarkGetDefault __getitem__ 0.0 0.0 1.0 BenchmarkGetitem __init__ 0.00391 0.0 0.0 BenchmarkInit items 0.23438 0.40234 1.71667 BenchmarkItems __iter__ 0.0 0.0 1.0 BenchmarkIter keys 0.0 0.0 1.0 BenchmarkKeys __len__ 0.0 0.0 1.0 BenchmarkLen __contains__ (unsuccessful search) 0.0 0.0 1.0 BenchmarkNotContains pop 0.0 0.0 1.0 BenchmarkPop pop (unsuccessful search) 0.0 0.0 1.0 BenchmarkPopDefault popitem 0.0 0.0 1.0 BenchmarkPopitem setdefault 0.0 0.0 1.0 BenchmarkSetdefault setdefault (unsuccessful search) 0.0 0.0 1.0 BenchmarkSetdefaultAddItem __setitem__ (add new item) 0.0 0.0 1.0 BenchmarkSetitemAddNewItem __setitem__ (replace) 0.0 0.0 1.0 BenchmarkSetitemReplace update 0.0 0.0 1.0 BenchmarkUpdate update (many) 0.15234 0.0 0.0 BenchmarkUpdateMany values 0.03125 0.0 0.0 BenchmarkValues timing subject builtin sqlitecollections ratio class __add__ 0.00396 0.01033 2.6052 BenchmarkAdd append 0.00409 0.0068 1.66341 BenchmarkAppend clear 0.004 0.00664 1.65947 BenchmarkClear __contains__ 0.00398 0.00398 1.00097 BenchmarkContains copy 0.00402 0.00922 2.29498 BenchmarkCopy count 0.00406 0.00402 0.99087 BenchmarkCount __init__ 0.004 0.02112 5.27703 BenchmarkCreateWithInitialData __delitem__ 0.00406 0.08346 20.55635 BenchmarkDelitem __delitem__ (slice) 0.00395 0.1596 40.42253 BenchmarkDelitemSlice __delitem__ (slice with skip) 0.00403 0.15857 39.36555 BenchmarkDelitemSliceSkip extend 0.00402 0.00698 1.7336 BenchmarkExtend __getitem__ 0.00406 0.00397 0.97683 BenchmarkGetitem __getitem__ (slice) 0.00396 0.09086 22.95061 BenchmarkGetitemSlice __getitem__ (slice with skip) 0.00401 0.01287 3.20715 BenchmarkGetitemSliceSkip __iadd__ 0.00403 0.0068 1.68781 BenchmarkIadd __imult__ 0.004 0.24211 60.46298 BenchmarkImult index 0.004 0.00425 1.0615 BenchmarkIndex index (unsuccessful search) 0.00394 0.00427 1.08338 BenchmarkIndexUnsuccessfulSearch insert 0.00405 0.15714 38.75334 BenchmarkInsert __len__ 0.00406 0.00398 0.97982 BenchmarkLen __mult__ 0.00404 0.24622 60.88648 BenchmarkMult __contains__ (unsuccessful search) 0.00404 0.00408 1.01128 BenchmarkNotContains pop 0.00402 0.08467 21.07215 BenchmarkPop remove 0.00401 0.1183 29.51113 BenchmarkRemove __setitem__ 0.00407 0.00694 1.70362 BenchmarkSetitem __setitem__ (slice) 0.00407 0.16273 39.93758 BenchmarkSetitemSlice __setitem__ (slice with skip) 0.00397 0.016 4.03089 BenchmarkSetitemSliceSkip sort 0.00409 0.08996 21.97232 BenchmarkSort approximate memory usage subject builtin sqlitecollections ratio class __add__ 0.0 0.00391 inf BenchmarkAdd append 0.0 0.00391 inf BenchmarkAppend clear 0.0 0.0 1.0 BenchmarkClear __contains__ 0.0 0.0 1.0 BenchmarkContains copy 0.0 0.0 1.0 BenchmarkCopy count 0.0 0.0 1.0 BenchmarkCount __init__ 0.0 0.0 1.0 BenchmarkCreateWithInitialData __delitem__ 0.0 0.0 1.0 BenchmarkDelitem __delitem__ (slice) 0.0 0.00391 inf BenchmarkDelitemSlice __delitem__ (slice with skip) 0.0 0.0 1.0 BenchmarkDelitemSliceSkip extend 0.0 0.0 1.0 BenchmarkExtend __getitem__ 0.0 0.0 1.0 BenchmarkGetitem __getitem__ (slice) 0.0 0.00391 inf BenchmarkGetitemSlice __getitem__ (slice with skip) 0.0 0.00391 inf BenchmarkGetitemSliceSkip __iadd__ 0.0 0.0 1.0 BenchmarkIadd __imult__ 0.0 0.0 1.0 BenchmarkImult index 0.0 0.0 1.0 BenchmarkIndex index (unsuccessful search) 0.0 0.0 1.0 BenchmarkIndexUnsuccessfulSearch insert 0.0 0.0 1.0 BenchmarkInsert __len__ 0.0 0.0 1.0 BenchmarkLen __mult__ 0.0 0.0 1.0 BenchmarkMult __contains__ (unsuccessful search) 0.0 0.0 1.0 BenchmarkNotContains pop 0.0 0.0 1.0 BenchmarkPop remove 0.0 0.0 1.0 BenchmarkRemove __setitem__ 0.0 0.0 1.0 BenchmarkSetitem __setitem__ (slice) 0.0 0.00391 inf BenchmarkSetitemSlice __setitem__ (slice with skip) 0.0 0.0 1.0 BenchmarkSetitemSliceSkip sort 0.0 0.83203 inf BenchmarkSort timing subject builtin sqlitecollections ratio class add (existing item) 0.00382 0.00525 1.3735 BenchmarkAddExistingItem add (new item) 0.0039 0.00639 1.63672 BenchmarkAddNewItem __and__ 0.00385 0.0107 2.78094 BenchmarkAnd clear 0.00387 0.00873 2.25742 BenchmarkClear __contains__ 0.00396 0.0039 0.98539 BenchmarkContains copy 0.00392 0.0085 2.17034 BenchmarkCopy difference 0.00426 0.00847 1.99015 BenchmarkDifference discard 0.0039 0.00636 1.63163 BenchmarkDiscard discard (no changes) 0.00391 0.00536 1.37178 BenchmarkDiscardNoChanges __ge__ 0.00397 0.0039 0.98227 BenchmarkGe __ge__ (not greater than or equals to) 0.00391 0.00497 1.26954 BenchmarkGeNot __gt__ 0.0039 0.0066 1.69319 BenchmarkGt __gt__ (not greater than) 0.00391 0.03451 8.8274 BenchmarkGtNot __iand__ 0.00392 0.00858 2.1895 BenchmarkIand __init__ 0.00396 0.01683 4.25439 BenchmarkInit intersection 0.00391 0.01059 2.71101 BenchmarkIntersection intersection_update 0.00402 0.00843 2.09699 BenchmarkIntersectionUpdate __ior__ 0.00392 0.0085 2.16649 BenchmarkIor isdisjoint 0.00387 0.00391 1.01046 BenchmarkIsdisjoint isdisjoint (not disjoint) 0.00394 0.00389 0.98548 BenchmarkIsdisjointNot issubset 0.00388 0.03072 7.91306 BenchmarkIssubset issubset (not subset) 0.00388 0.01106 2.84653 BenchmarkIssubsetNot issuperset 0.0039 0.02443 6.26912 BenchmarkIssuperset issuperset (not superset) 0.0039 0.00599 1.53369 BenchmarkIssupersetNot __ixor__ 0.00387 0.04087 10.56293 BenchmarkIxor __le__ 0.00395 0.00465 1.17892 BenchmarkLe __le__ (not less than or equals to) 0.0039 0.00388 0.99422 BenchmarkLeNot __len__ 0.00452 0.00389 0.86052 BenchmarkLen __lt__ 0.0039 0.00481 1.23234 BenchmarkLt __lt__ (not less than) 0.00392 0.00387 0.98573 BenchmarkLtNot __contains__ (unsuccessful search) 0.00397 0.00389 0.98113 BenchmarkNotContains __or__ 0.00396 0.01189 3.00474 BenchmarkOr pop 0.00393 0.0064 1.62668 BenchmarkPop remove 0.0039 0.00639 1.6389 BenchmarkRemove __sub__ 0.00391 0.00856 2.18655 BenchmarkSub symmetric_difference 0.00401 0.04291 10.70388 BenchmarkSymmetricDifference symmetric_difference_update 0.00389 0.04084 10.49569 BenchmarkSymmetricDifferenceUpdate union 0.00391 0.0115 2.94215 BenchmarkUnion update 0.00394 0.0082 2.08193 BenchmarkUpdate __xor__ 0.00393 0.04285 10.90012 BenchmarkXor approximate memory usage subject builtin sqlitecollections ratio class add (existing item) 0.0 0.0 1.0 BenchmarkAddExistingItem add (new item) 0.0 0.0 1.0 BenchmarkAddNewItem __and__ 0.0 0.00391 inf BenchmarkAnd clear 0.0 0.0 1.0 BenchmarkClear __contains__ 0.0 0.0 1.0 BenchmarkContains copy 0.0 0.0 1.0 BenchmarkCopy difference 0.0 0.0 1.0 BenchmarkDifference discard 0.0 0.0 1.0 BenchmarkDiscard discard (no changes) 0.0 0.0 1.0 BenchmarkDiscardNoChanges __ge__ 0.0 0.0 1.0 BenchmarkGe __ge__ (not greater than or equals to) 0.0 0.0 1.0 BenchmarkGeNot __gt__ 0.0 0.0 1.0 BenchmarkGt __gt__ (not greater than) 0.0 0.0 1.0 BenchmarkGtNot __iand__ 0.0 0.0 1.0 BenchmarkIand __init__ 0.0 0.01172 inf BenchmarkInit intersection 0.0 0.0 1.0 BenchmarkIntersection intersection_update 0.0 0.0 1.0 BenchmarkIntersectionUpdate __ior__ 0.0 0.0 1.0 BenchmarkIor isdisjoint 0.0 0.0 1.0 BenchmarkIsdisjoint isdisjoint (not disjoint) 0.0 0.0 1.0 BenchmarkIsdisjointNot issubset 0.0 0.0 1.0 BenchmarkIssubset issubset (not subset) 0.0 0.0 1.0 BenchmarkIssubsetNot issuperset 0.0 0.0 1.0 BenchmarkIssuperset issuperset (not superset) 0.0 0.0 1.0 BenchmarkIssupersetNot __ixor__ 0.0 0.0 1.0 BenchmarkIxor __le__ 0.0 0.0 1.0 BenchmarkLe __le__ (not less than or equals to) 0.0 0.0 1.0 BenchmarkLeNot __len__ 0.0 0.0 1.0 BenchmarkLen __lt__ 0.0 0.0 1.0 BenchmarkLt __lt__ (not less than) 0.0 0.0 1.0 BenchmarkLtNot __contains__ (unsuccessful search) 0.0 0.0 1.0 BenchmarkNotContains __or__ 0.0 0.0 1.0 BenchmarkOr pop 0.0 0.0 1.0 BenchmarkPop remove 0.0 0.0 1.0 BenchmarkRemove __sub__ 0.0 0.0 1.0 BenchmarkSub symmetric_difference 0.0 0.0 1.0 BenchmarkSymmetricDifference symmetric_difference_update 0.0 0.0 1.0 BenchmarkSymmetricDifferenceUpdate union 0.0 0.0 1.0 BenchmarkUnion update 0.0 0.0 1.0 BenchmarkUpdate __xor__ 0.0 0.0 1.0 BenchmarkXor dict list set timing subject builtin sqlitecollections ratio class clear 0.00359 0.00619 1.72325 BenchmarkClear __contains__ 0.00362 0.00369 1.02143 BenchmarkContains copy 0.0036 0.00843 2.33978 BenchmarkCopy __delitem__ 0.00367 0.0063 1.71626 BenchmarkDelitem get 0.0036 0.0038 1.05522 BenchmarkGet get (unsuccessful search) 0.00369 0.00371 1.00629 BenchmarkGetDefault __getitem__ 0.00364 0.00377 1.03664 BenchmarkGetitem __init__ 0.00372 0.04475 12.02173 BenchmarkInit items 0.00412 0.01228 2.9832 BenchmarkItems __iter__ 0.00365 0.00833 2.2848 BenchmarkIter keys 0.00363 0.0084 2.31561 BenchmarkKeys __len__ 0.00359 0.00365 1.01587 BenchmarkLen __contains__ (unsuccessful search) 0.00363 0.00378 1.03953 BenchmarkNotContains pop 0.00367 0.00653 1.77958 BenchmarkPop pop (unsuccessful search) 0.00369 0.00532 1.44335 BenchmarkPopDefault popitem 0.00363 0.0069 1.90065 BenchmarkPopitem setdefault 0.00369 0.00534 1.44781 BenchmarkSetdefault setdefault (unsuccessful search) 0.00369 0.00556 1.50836 BenchmarkSetdefaultAddItem __setitem__ (add new item) 0.00366 0.00664 1.81553 BenchmarkSetitemAddNewItem __setitem__ (replace) 0.00366 0.00635 1.73469 BenchmarkSetitemReplace update 0.00368 0.00673 1.82629 BenchmarkUpdate update (many) 0.00459 0.57533 125.28656 BenchmarkUpdateMany values 0.00365 0.00794 2.17424 BenchmarkValues approximate memory usage subject builtin sqlitecollections ratio class clear 0.0 0.0 1.0 BenchmarkClear __contains__ 0.0 0.0 1.0 BenchmarkContains copy 0.03125 0.0 0.0 BenchmarkCopy __delitem__ 0.0 0.0 1.0 BenchmarkDelitem get 0.0 0.0 1.0 BenchmarkGet get (unsuccessful search) 0.0 0.0 1.0 BenchmarkGetDefault __getitem__ 0.0 0.0 1.0 BenchmarkGetitem __init__ 0.0 0.0 1.0 BenchmarkInit items 0.125 0.21094 1.6875 BenchmarkItems __iter__ 0.0 0.0 1.0 BenchmarkIter keys 0.0 0.0 1.0 BenchmarkKeys __len__ 0.0 0.0 1.0 BenchmarkLen __contains__ (unsuccessful search) 0.0 0.0 1.0 BenchmarkNotContains pop 0.0 0.0 1.0 BenchmarkPop pop (unsuccessful search) 0.0 0.0 1.0 BenchmarkPopDefault popitem 0.0 0.0 1.0 BenchmarkPopitem setdefault 0.0 0.0 1.0 BenchmarkSetdefault setdefault (unsuccessful search) 0.0 0.0 1.0 BenchmarkSetdefaultAddItem __setitem__ (add new item) 0.0 0.0 1.0 BenchmarkSetitemAddNewItem __setitem__ (replace) 0.0 0.0 1.0 BenchmarkSetitemReplace update 0.0 0.0 1.0 BenchmarkUpdate update (many) 0.0 0.0 1.0 BenchmarkUpdateMany values 0.02734 0.0 0.0 BenchmarkValues timing subject builtin sqlitecollections ratio class __add__ 0.00364 0.0095 2.60746 BenchmarkAdd append 0.00376 0.00622 1.65724 BenchmarkAppend clear 0.00366 0.00603 1.64982 BenchmarkClear __contains__ 0.0037 0.00364 0.98392 BenchmarkContains copy 0.00363 0.00851 2.34171 BenchmarkCopy count 0.0036 0.00372 1.03071 BenchmarkCount __init__ 0.00371 0.02158 5.81409 BenchmarkCreateWithInitialData __delitem__ 0.00371 0.08995 24.21396 BenchmarkDelitem __delitem__ (slice) 0.00365 0.16553 45.31752 BenchmarkDelitemSlice __delitem__ (slice with skip) 0.00366 0.16561 45.31047 BenchmarkDelitemSliceSkip extend 0.00369 0.00651 1.76249 BenchmarkExtend __getitem__ 0.00364 0.00369 1.0135 BenchmarkGetitem __getitem__ (slice) 0.0036 0.08892 24.69002 BenchmarkGetitemSlice __getitem__ (slice with skip) 0.00361 0.01123 3.10685 BenchmarkGetitemSliceSkip __iadd__ 0.00364 0.00625 1.71611 BenchmarkIadd __imult__ 0.00364 0.23686 65.07135 BenchmarkImult index 0.00372 0.00391 1.04918 BenchmarkIndex index (unsuccessful search) 0.00361 0.00393 1.0889 BenchmarkIndexUnsuccessfulSearch insert 0.00366 0.15296 41.79737 BenchmarkInsert __len__ 0.00382 0.00366 0.95888 BenchmarkLen __mult__ 0.00368 0.23571 64.03943 BenchmarkMult __contains__ (unsuccessful search) 0.00368 0.00375 1.01755 BenchmarkNotContains pop 0.00368 0.08233 22.39729 BenchmarkPop remove 0.00363 0.11364 31.34487 BenchmarkRemove __setitem__ 0.00365 0.00639 1.75068 BenchmarkSetitem __setitem__ (slice) 0.00362 0.15592 43.01418 BenchmarkSetitemSlice __setitem__ (slice with skip) 0.00367 0.0149 4.06626 BenchmarkSetitemSliceSkip sort 0.00365 0.07973 21.83423 BenchmarkSort approximate memory usage subject builtin sqlitecollections ratio class __add__ 0.0 0.0 1.0 BenchmarkAdd append 0.0 0.0 1.0 BenchmarkAppend clear 0.0 0.0 1.0 BenchmarkClear __contains__ 0.0 0.0 1.0 BenchmarkContains copy 0.0 0.0 1.0 BenchmarkCopy count 0.0 0.0 1.0 BenchmarkCount __init__ 0.0 0.0 1.0 BenchmarkCreateWithInitialData __delitem__ 0.0 0.0 1.0 BenchmarkDelitem __delitem__ (slice) 0.0 0.0 1.0 BenchmarkDelitemSlice __delitem__ (slice with skip) 0.0 0.0 1.0 BenchmarkDelitemSliceSkip extend 0.0 0.0 1.0 BenchmarkExtend __getitem__ 0.0 0.0 1.0 BenchmarkGetitem __getitem__ (slice) 0.0 0.0 1.0 BenchmarkGetitemSlice __getitem__ (slice with skip) 0.0 0.0 1.0 BenchmarkGetitemSliceSkip __iadd__ 0.0 0.0 1.0 BenchmarkIadd __imult__ 0.0 0.0 1.0 BenchmarkImult index 0.0 0.0 1.0 BenchmarkIndex index (unsuccessful search) 0.0 0.0 1.0 BenchmarkIndexUnsuccessfulSearch insert 0.0 0.0 1.0 BenchmarkInsert __len__ 0.0 0.0 1.0 BenchmarkLen __mult__ 0.0 0.0 1.0 BenchmarkMult __contains__ (unsuccessful search) 0.0 0.0 1.0 BenchmarkNotContains pop 0.0 0.0 1.0 BenchmarkPop remove 0.0 0.0 1.0 BenchmarkRemove __setitem__ 0.0 0.0 1.0 BenchmarkSetitem __setitem__ (slice) 0.0 0.0 1.0 BenchmarkSetitemSlice __setitem__ (slice with skip) 0.0 0.0 1.0 BenchmarkSetitemSliceSkip sort 0.0 0.63281 inf BenchmarkSort timing subject builtin sqlitecollections ratio class add (existing item) 0.00349 0.00482 1.38192 BenchmarkAddExistingItem add (new item) 0.00357 0.00634 1.77708 BenchmarkAddNewItem __and__ 0.00364 0.01024 2.81143 BenchmarkAnd clear 0.00355 0.00548 1.54153 BenchmarkClear __contains__ 0.00359 0.00363 1.01192 BenchmarkContains copy 0.00368 0.011 2.99366 BenchmarkCopy difference 0.00356 0.00772 2.1691 BenchmarkDifference discard 0.0036 0.00609 1.69165 BenchmarkDiscard discard (no changes) 0.00361 0.00494 1.3695 BenchmarkDiscardNoChanges __ge__ 0.00357 0.00357 1.00123 BenchmarkGe __ge__ (not greater than or equals to) 0.00354 0.00372 1.04847 BenchmarkGeNot __gt__ 0.0036 0.00611 1.69961 BenchmarkGt __gt__ (not greater than) 0.00356 0.03183 8.94582 BenchmarkGtNot __iand__ 0.00354 0.00815 2.2999 BenchmarkIand __init__ 0.00357 0.01677 4.70033 BenchmarkInit intersection 0.00363 0.01033 2.84771 BenchmarkIntersection intersection_update 0.00359 0.00763 2.12628 BenchmarkIntersectionUpdate __ior__ 0.0036 0.00798 2.21924 BenchmarkIor isdisjoint 0.00388 0.00361 0.93092 BenchmarkIsdisjoint isdisjoint (not disjoint) 0.00357 0.00358 1.00488 BenchmarkIsdisjointNot issubset 0.00357 0.02983 8.35876 BenchmarkIssubset issubset (not subset) 0.00356 0.01014 2.84533 BenchmarkIssubsetNot issuperset 0.00355 0.02412 6.78734 BenchmarkIssuperset issuperset (not superset) 0.00355 0.00371 1.04556 BenchmarkIssupersetNot __ixor__ 0.00358 0.04023 11.23215 BenchmarkIxor __le__ 0.00358 0.00449 1.25189 BenchmarkLe __le__ (not less than or equals to) 0.00357 0.0036 1.00975 BenchmarkLeNot __len__ 0.00389 0.00362 0.92954 BenchmarkLen __lt__ 0.00356 0.00457 1.28179 BenchmarkLt __lt__ (not less than) 0.00365 0.00358 0.98234 BenchmarkLtNot __contains__ (unsuccessful search) 0.00359 0.00362 1.00892 BenchmarkNotContains __or__ 0.00361 0.01142 3.16725 BenchmarkOr pop 0.00359 0.00578 1.60839 BenchmarkPop remove 0.0036 0.00576 1.60019 BenchmarkRemove __sub__ 0.004 0.00784 1.95887 BenchmarkSub symmetric_difference 0.00357 0.04276 11.98336 BenchmarkSymmetricDifference symmetric_difference_update 0.00359 0.04027 11.22791 BenchmarkSymmetricDifferenceUpdate union 0.0036 0.01044 2.90125 BenchmarkUnion update 0.00356 0.00777 2.18288 BenchmarkUpdate __xor__ 0.00359 0.043 11.99143 BenchmarkXor approximate memory usage subject builtin sqlitecollections ratio class add (existing item) 0.0 0.0 1.0 BenchmarkAddExistingItem add (new item) 0.0 0.0 1.0 BenchmarkAddNewItem __and__ 0.0 0.00391 inf BenchmarkAnd clear 0.0 0.0 1.0 BenchmarkClear __contains__ 0.0 0.0 1.0 BenchmarkContains copy 0.0 0.0 1.0 BenchmarkCopy difference 0.0 0.0 1.0 BenchmarkDifference discard 0.0 0.0 1.0 BenchmarkDiscard discard (no changes) 0.0 0.0 1.0 BenchmarkDiscardNoChanges __ge__ 0.0 0.0 1.0 BenchmarkGe __ge__ (not greater than or equals to) 0.0 0.0 1.0 BenchmarkGeNot __gt__ 0.0 0.0 1.0 BenchmarkGt __gt__ (not greater than) 0.0 0.0 1.0 BenchmarkGtNot __iand__ 0.0 0.0 1.0 BenchmarkIand __init__ 0.0 0.0 1.0 BenchmarkInit intersection 0.0 0.0 1.0 BenchmarkIntersection intersection_update 0.0 0.0 1.0 BenchmarkIntersectionUpdate __ior__ 0.0 0.0 1.0 BenchmarkIor isdisjoint 0.0 0.0 1.0 BenchmarkIsdisjoint isdisjoint (not disjoint) 0.0 0.0 1.0 BenchmarkIsdisjointNot issubset 0.0 0.0 1.0 BenchmarkIssubset issubset (not subset) 0.0 0.0 1.0 BenchmarkIssubsetNot issuperset 0.0 0.0 1.0 BenchmarkIssuperset issuperset (not superset) 0.0 0.0 1.0 BenchmarkIssupersetNot __ixor__ 0.0 0.0 1.0 BenchmarkIxor __le__ 0.0 0.0 1.0 BenchmarkLe __le__ (not less than or equals to) 0.0 0.0 1.0 BenchmarkLeNot __len__ 0.0 0.0 1.0 BenchmarkLen __lt__ 0.0 0.0 1.0 BenchmarkLt __lt__ (not less than) 0.0 0.0 1.0 BenchmarkLtNot __contains__ (unsuccessful search) 0.0 0.0 1.0 BenchmarkNotContains __or__ 0.0 0.0 1.0 BenchmarkOr pop 0.0 0.0 1.0 BenchmarkPop remove 0.0 0.0 1.0 BenchmarkRemove __sub__ 0.0 0.0 1.0 BenchmarkSub symmetric_difference 0.0 0.0 1.0 BenchmarkSymmetricDifference symmetric_difference_update 0.0 0.0 1.0 BenchmarkSymmetricDifferenceUpdate union 0.0 0.0 1.0 BenchmarkUnion update 0.0 0.0 1.0 BenchmarkUpdate __xor__ 0.0 0.0 1.0 BenchmarkXor dict list set timing subject builtin sqlitecollections ratio class clear 0.00351 0.00617 1.75982 BenchmarkClear __contains__ 0.00351 0.00365 1.04052 BenchmarkContains copy 0.00352 0.00819 2.33016 BenchmarkCopy __delitem__ 0.00366 0.0061 1.66758 BenchmarkDelitem get 0.00355 0.00375 1.05787 BenchmarkGet get (unsuccessful search) 0.00353 0.00366 1.03579 BenchmarkGetDefault __getitem__ 0.00353 0.00376 1.06391 BenchmarkGetitem __init__ 0.00376 0.03868 10.29149 BenchmarkInit items 0.00404 0.01042 2.58205 BenchmarkItems __iter__ 0.0036 0.00742 2.0589 BenchmarkIter keys 0.00362 0.0074 2.0451 BenchmarkKeys __len__ 0.00354 0.00359 1.01227 BenchmarkLen __contains__ (unsuccessful search) 0.00353 0.0037 1.04867 BenchmarkNotContains pop 0.00361 0.00647 1.79207 BenchmarkPop pop (unsuccessful search) 0.00363 0.00537 1.48029 BenchmarkPopDefault popitem 0.00365 0.00719 1.97074 BenchmarkPopitem reversed 0.00362 0.00729 2.01651 BenchmarkReversed setdefault 0.00364 0.00539 1.48381 BenchmarkSetdefault setdefault (unsuccessful search) 0.00365 0.00566 1.54899 BenchmarkSetdefaultAddItem __setitem__ (add new item) 0.00363 0.00706 1.9444 BenchmarkSetitemAddNewItem __setitem__ (replace) 0.00363 0.00661 1.8242 BenchmarkSetitemReplace update 0.00367 0.00662 1.80409 BenchmarkUpdate update (many) 0.00458 0.56015 122.41949 BenchmarkUpdateMany values 0.00357 0.00696 1.94793 BenchmarkValues approximate memory usage subject builtin sqlitecollections ratio class clear 0.0 0.0 1.0 BenchmarkClear __contains__ 0.0 0.0 1.0 BenchmarkContains copy 0.03906 0.0 0.0 BenchmarkCopy __delitem__ 0.0 0.0 1.0 BenchmarkDelitem get 0.0 0.0 1.0 BenchmarkGet get (unsuccessful search) 0.0 0.0 1.0 BenchmarkGetDefault __getitem__ 0.0 0.0 1.0 BenchmarkGetitem __init__ 0.0 0.05469 inf BenchmarkInit items 0.125 0.31641 2.53125 BenchmarkItems __iter__ 0.0 0.0 1.0 BenchmarkIter keys 0.0 0.0 1.0 BenchmarkKeys __len__ 0.0 0.0 1.0 BenchmarkLen __contains__ (unsuccessful search) 0.0 0.0 1.0 BenchmarkNotContains pop 0.0 0.0 1.0 BenchmarkPop pop (unsuccessful search) 0.0 0.0 1.0 BenchmarkPopDefault popitem 0.0 0.0 1.0 BenchmarkPopitem reversed 0.0 0.0 1.0 BenchmarkReversed setdefault 0.0 0.0 1.0 BenchmarkSetdefault setdefault (unsuccessful search) 0.0 0.0 1.0 BenchmarkSetdefaultAddItem __setitem__ (add new item) 0.0 0.0 1.0 BenchmarkSetitemAddNewItem __setitem__ (replace) 0.0 0.0 1.0 BenchmarkSetitemReplace update 0.0 0.0 1.0 BenchmarkUpdate update (many) 0.0 0.0 1.0 BenchmarkUpdateMany values 0.0 0.0 1.0 BenchmarkValues timing subject builtin sqlitecollections ratio class __add__ 0.00359 0.00977 2.72061 BenchmarkAdd append 0.00368 0.0068 1.84718 BenchmarkAppend clear 0.00359 0.00649 1.80792 BenchmarkClear __contains__ 0.00356 0.00362 1.01722 BenchmarkContains copy 0.00364 0.00855 2.34635 BenchmarkCopy count 0.00359 0.0037 1.03014 BenchmarkCount __init__ 0.00363 0.01962 5.39748 BenchmarkCreateWithInitialData __delitem__ 0.00364 0.0795 21.83687 BenchmarkDelitem __delitem__ (slice) 0.00362 0.15406 42.58048 BenchmarkDelitemSlice __delitem__ (slice with skip) 0.00375 0.15357 40.99709 BenchmarkDelitemSliceSkip extend 0.00363 0.00653 1.79996 BenchmarkExtend __getitem__ 0.00358 0.00363 1.01207 BenchmarkGetitem __getitem__ (slice) 0.00363 0.08877 24.48007 BenchmarkGetitemSlice __getitem__ (slice with skip) 0.00359 0.01204 3.34987 BenchmarkGetitemSliceSkip __iadd__ 0.00362 0.00629 1.74085 BenchmarkIadd __imult__ 0.00357 0.22953 64.24509 BenchmarkImult index 0.00361 0.0039 1.08127 BenchmarkIndex index (unsuccessful search) 0.00361 0.00397 1.10228 BenchmarkIndexUnsuccessfulSearch insert 0.00363 0.15121 41.63 BenchmarkInsert __len__ 0.0036 0.00363 1.00765 BenchmarkLen __mult__ 0.00359 0.24105 67.06885 BenchmarkMult __contains__ (unsuccessful search) 0.00362 0.0038 1.04934 BenchmarkNotContains pop 0.00373 0.08065 21.64877 BenchmarkPop remove 0.00377 0.1196 31.72838 BenchmarkRemove __setitem__ 0.00373 0.00705 1.89154 BenchmarkSetitem __setitem__ (slice) 0.00373 0.15868 42.52852 BenchmarkSetitemSlice __setitem__ (slice with skip) 0.00371 0.01519 4.09835 BenchmarkSetitemSliceSkip sort 0.00375 0.0787 20.98728 BenchmarkSort approximate memory usage subject builtin sqlitecollections ratio class __add__ 0.0 0.0 1.0 BenchmarkAdd append 0.0 0.0 1.0 BenchmarkAppend clear 0.0 0.0 1.0 BenchmarkClear __contains__ 0.0 0.0 1.0 BenchmarkContains copy 0.0 0.0 1.0 BenchmarkCopy count 0.0 0.0 1.0 BenchmarkCount __init__ 0.0 0.0 1.0 BenchmarkCreateWithInitialData __delitem__ 0.0 0.0 1.0 BenchmarkDelitem __delitem__ (slice) 0.0 0.0 1.0 BenchmarkDelitemSlice __delitem__ (slice with skip) 0.0 0.0 1.0 BenchmarkDelitemSliceSkip extend 0.0 0.0 1.0 BenchmarkExtend __getitem__ 0.0 0.0 1.0 BenchmarkGetitem __getitem__ (slice) 0.0 0.0 1.0 BenchmarkGetitemSlice __getitem__ (slice with skip) 0.0 0.0 1.0 BenchmarkGetitemSliceSkip __iadd__ 0.0 0.0 1.0 BenchmarkIadd __imult__ 0.0 0.0 1.0 BenchmarkImult index 0.0 0.0 1.0 BenchmarkIndex index (unsuccessful search) 0.0 0.0 1.0 BenchmarkIndexUnsuccessfulSearch insert 0.0 0.0 1.0 BenchmarkInsert __len__ 0.0 0.0 1.0 BenchmarkLen __mult__ 0.0 0.0 1.0 BenchmarkMult __contains__ (unsuccessful search) 0.0 0.0 1.0 BenchmarkNotContains pop 0.0 0.0 1.0 BenchmarkPop remove 0.0 0.0 1.0 BenchmarkRemove __setitem__ 0.0 0.0 1.0 BenchmarkSetitem __setitem__ (slice) 0.0 0.0 1.0 BenchmarkSetitemSlice __setitem__ (slice with skip) 0.0 0.0 1.0 BenchmarkSetitemSliceSkip sort 0.0 0.64062 inf BenchmarkSort timing subject builtin sqlitecollections ratio class add (existing item) 0.00348 0.00509 1.46045 BenchmarkAddExistingItem add (new item) 0.00356 0.00619 1.74027 BenchmarkAddNewItem __and__ 0.00352 0.01052 2.99167 BenchmarkAnd clear 0.00351 0.00631 1.79946 BenchmarkClear __contains__ 0.00349 0.00353 1.01068 BenchmarkContains copy 0.00348 0.00839 2.40974 BenchmarkCopy difference 0.00352 0.00871 2.47738 BenchmarkDifference discard 0.00351 0.00634 1.80732 BenchmarkDiscard discard (no changes) 0.00355 0.005 1.40896 BenchmarkDiscardNoChanges __ge__ 0.00353 0.0035 0.99167 BenchmarkGe __ge__ (not greater than or equals to) 0.00348 0.00357 1.02408 BenchmarkGeNot __gt__ 0.00348 0.00642 1.84628 BenchmarkGt __gt__ (not greater than) 0.00348 0.03057 8.77598 BenchmarkGtNot __iand__ 0.00351 0.00801 2.28232 BenchmarkIand __init__ 0.00346 0.01666 4.8134 BenchmarkInit intersection 0.00352 0.01071 3.04699 BenchmarkIntersection intersection_update 0.00383 0.00828 2.16129 BenchmarkIntersectionUpdate __ior__ 0.00349 0.00769 2.20588 BenchmarkIor isdisjoint 0.00348 0.00351 1.00631 BenchmarkIsdisjoint isdisjoint (not disjoint) 0.00349 0.00353 1.01085 BenchmarkIsdisjointNot issubset 0.00351 0.05313 15.14064 BenchmarkIssubset issubset (not subset) 0.0035 0.01126 3.21344 BenchmarkIssubsetNot issuperset 0.00353 0.02272 6.44574 BenchmarkIssuperset issuperset (not superset) 0.00352 0.0036 1.02405 BenchmarkIssupersetNot __ixor__ 0.00359 0.06614 18.44713 BenchmarkIxor __le__ 0.00356 0.00433 1.21661 BenchmarkLe __le__ (not less than or equals to) 0.00347 0.00365 1.05363 BenchmarkLeNot __len__ 0.0035 0.00354 1.01087 BenchmarkLen __lt__ 0.00349 0.00433 1.24017 BenchmarkLt __lt__ (not less than) 0.00353 0.00353 0.9998 BenchmarkLtNot __contains__ (unsuccessful search) 0.00352 0.00362 1.02939 BenchmarkNotContains __or__ 0.00353 0.01109 3.14395 BenchmarkOr pop 0.00355 0.00625 1.76181 BenchmarkPop remove 0.00355 0.00641 1.80481 BenchmarkRemove __sub__ 0.00353 0.00867 2.45352 BenchmarkSub symmetric_difference 0.00349 0.04085 11.69981 BenchmarkSymmetricDifference symmetric_difference_update 0.00353 0.03844 10.88649 BenchmarkSymmetricDifferenceUpdate union 0.00353 0.0111 3.14359 BenchmarkUnion update 0.00352 0.00809 2.29417 BenchmarkUpdate __xor__ 0.00355 0.04073 11.47882 BenchmarkXor approximate memory usage subject builtin sqlitecollections ratio class add (existing item) 0.0 0.0 1.0 BenchmarkAddExistingItem add (new item) 0.0 0.0 1.0 BenchmarkAddNewItem __and__ 0.0 0.0 1.0 BenchmarkAnd clear 0.0 0.0 1.0 BenchmarkClear __contains__ 0.0 0.0 1.0 BenchmarkContains copy 0.0 0.0 1.0 BenchmarkCopy difference 0.0 0.0 1.0 BenchmarkDifference discard 0.0 0.0 1.0 BenchmarkDiscard discard (no changes) 0.0 0.0 1.0 BenchmarkDiscardNoChanges __ge__ 0.0 0.0 1.0 BenchmarkGe __ge__ (not greater than or equals to) 0.0 0.0 1.0 BenchmarkGeNot __gt__ 0.0 0.0 1.0 BenchmarkGt __gt__ (not greater than) 0.0 0.0 1.0 BenchmarkGtNot __iand__ 0.0 0.0 1.0 BenchmarkIand __init__ 0.0 0.05078 inf BenchmarkInit intersection 0.0 0.0 1.0 BenchmarkIntersection intersection_update 0.0 0.0 1.0 BenchmarkIntersectionUpdate __ior__ 0.0 0.0 1.0 BenchmarkIor isdisjoint 0.0 0.0 1.0 BenchmarkIsdisjoint isdisjoint (not disjoint) 0.0 0.0 1.0 BenchmarkIsdisjointNot issubset 0.0 0.0 1.0 BenchmarkIssubset issubset (not subset) 0.0 0.0 1.0 BenchmarkIssubsetNot issuperset 0.0 0.0 1.0 BenchmarkIssuperset issuperset (not superset) 0.0 0.0 1.0 BenchmarkIssupersetNot __ixor__ 0.0 0.0 1.0 BenchmarkIxor __le__ 0.0 0.0 1.0 BenchmarkLe __le__ (not less than or equals to) 0.0 0.0 1.0 BenchmarkLeNot __len__ 0.0 0.0 1.0 BenchmarkLen __lt__ 0.0 0.0 1.0 BenchmarkLt __lt__ (not less than) 0.0 0.0 1.0 BenchmarkLtNot __contains__ (unsuccessful search) 0.0 0.0 1.0 BenchmarkNotContains __or__ 0.0 0.0 1.0 BenchmarkOr pop 0.0 0.0 1.0 BenchmarkPop remove 0.0 0.0 1.0 BenchmarkRemove __sub__ 0.0 0.0 1.0 BenchmarkSub symmetric_difference 0.0 0.0 1.0 BenchmarkSymmetricDifference symmetric_difference_update 0.0 0.0 1.0 BenchmarkSymmetricDifferenceUpdate union 0.0 0.0 1.0 BenchmarkUnion update 0.0 0.0 1.0 BenchmarkUpdate __xor__ 0.0 0.0 1.0 BenchmarkXor dict list set timing subject builtin sqlitecollections ratio class clear 0.00431 0.00715 1.66101 BenchmarkClear __contains__ 0.00398 0.00416 1.04624 BenchmarkContains copy 0.00404 0.00969 2.39822 BenchmarkCopy __delitem__ 0.00406 0.00716 1.76413 BenchmarkDelitem get 0.00394 0.00417 1.05785 BenchmarkGet get (unsuccessful search) 0.00397 0.00413 1.03956 BenchmarkGetDefault __getitem__ 0.00399 0.00417 1.04633 BenchmarkGetitem __init__ 0.00426 0.03896 9.1404 BenchmarkInit __ior__ 0.00405 0.00721 1.77973 BenchmarkIor __ior__ (many) 0.00517 0.58933 113.94626 BenchmarkIorMany items 0.00456 0.01086 2.38459 BenchmarkItems __iter__ 0.00401 0.00783 1.95041 BenchmarkIter keys 0.00408 0.00794 1.94403 BenchmarkKeys __len__ 0.00397 0.00397 1.00155 BenchmarkLen __contains__ (unsuccessful search) 0.00421 0.00421 0.99956 BenchmarkNotContains __or__ 0.00406 0.01067 2.62761 BenchmarkOr __or__ (many) 0.00564 0.5871 104.05662 BenchmarkOrMany pop 0.00408 0.00723 1.77247 BenchmarkPop pop (unsuccessful search) 0.00414 0.0062 1.49664 BenchmarkPopDefault popitem 0.00408 0.00786 1.92626 BenchmarkPopitem reversed 0.00401 0.00778 1.93982 BenchmarkReversed setdefault 0.0041 0.00588 1.43276 BenchmarkSetdefault setdefault (unsuccessful search) 0.00411 0.00612 1.49048 BenchmarkSetdefaultAddItem __setitem__ (add new item) 0.00408 0.00725 1.77968 BenchmarkSetitemAddNewItem __setitem__ (replace) 0.00406 0.00719 1.77243 BenchmarkSetitemReplace update 0.0041 0.0072 1.75569 BenchmarkUpdate update (many) 0.00509 0.58493 114.96278 BenchmarkUpdateMany values 0.00407 0.00762 1.87181 BenchmarkValues approximate memory usage subject builtin sqlitecollections ratio class clear 0.0 0.0 1.0 BenchmarkClear __contains__ 0.0 0.0 1.0 BenchmarkContains copy 0.0 0.0 1.0 BenchmarkCopy __delitem__ 0.0 0.0 1.0 BenchmarkDelitem get 0.0 0.0 1.0 BenchmarkGet get (unsuccessful search) 0.0 0.0 1.0 BenchmarkGetDefault __getitem__ 0.0 0.0 1.0 BenchmarkGetitem __init__ 0.0 0.0 1.0 BenchmarkInit __ior__ 0.0 0.0 1.0 BenchmarkIor __ior__ (many) 0.19141 0.0 0.0 BenchmarkIorMany items 0.0 0.23438 inf BenchmarkItems __iter__ 0.0 0.0 1.0 BenchmarkIter keys 0.0 0.0 1.0 BenchmarkKeys __len__ 0.0 0.0 1.0 BenchmarkLen __contains__ (unsuccessful search) 0.0 0.0 1.0 BenchmarkNotContains __or__ 0.0 0.0 1.0 BenchmarkOr __or__ (many) 0.0 0.0 1.0 BenchmarkOrMany pop 0.0 0.0 1.0 BenchmarkPop pop (unsuccessful search) 0.0 0.0 1.0 BenchmarkPopDefault popitem 0.0 0.0 1.0 BenchmarkPopitem reversed 0.0 0.0 1.0 BenchmarkReversed setdefault 0.0 0.0 1.0 BenchmarkSetdefault setdefault (unsuccessful search) 0.0 0.0 1.0 BenchmarkSetdefaultAddItem __setitem__ (add new item) 0.0 0.0 1.0 BenchmarkSetitemAddNewItem __setitem__ (replace) 0.0 0.0 1.0 BenchmarkSetitemReplace update 0.0 0.0 1.0 BenchmarkUpdate update (many) 0.0 0.0 1.0 BenchmarkUpdateMany values 0.0 0.0 1.0 BenchmarkValues timing subject builtin sqlitecollections ratio class __add__ 0.00406 0.01041 2.56556 BenchmarkAdd append 0.00412 0.0069 1.67553 BenchmarkAppend clear 0.0041 0.00686 1.67215 BenchmarkClear __contains__ 0.00398 0.00405 1.01658 BenchmarkContains copy 0.00403 0.00922 2.28679 BenchmarkCopy count 0.00407 0.0041 1.00885 BenchmarkCount __init__ 0.00402 0.01979 4.91969 BenchmarkCreateWithInitialData __delitem__ 0.0041 0.08376 20.44996 BenchmarkDelitem __delitem__ (slice) 0.00407 0.15862 38.95296 BenchmarkDelitemSlice __delitem__ (slice with skip) 0.00405 0.15813 39.08118 BenchmarkDelitemSliceSkip extend 0.00405 0.00706 1.74148 BenchmarkExtend __getitem__ 0.00402 0.00409 1.01947 BenchmarkGetitem __getitem__ (slice) 0.00405 0.09061 22.35812 BenchmarkGetitemSlice __getitem__ (slice with skip) 0.00401 0.01241 3.09711 BenchmarkGetitemSliceSkip __iadd__ 0.00407 0.00717 1.76085 BenchmarkIadd __imult__ 0.00402 0.23777 59.18968 BenchmarkImult index 0.00401 0.00437 1.08953 BenchmarkIndex index (unsuccessful search) 0.00402 0.0044 1.09484 BenchmarkIndexUnsuccessfulSearch insert 0.00408 0.16022 39.31743 BenchmarkInsert __len__ 0.00395 0.00416 1.0533 BenchmarkLen __mult__ 0.00403 0.2431 60.33468 BenchmarkMult __contains__ (unsuccessful search) 0.004 0.00416 1.04133 BenchmarkNotContains pop 0.0041 0.08351 20.3768 BenchmarkPop remove 0.00401 0.11755 29.30453 BenchmarkRemove __setitem__ 0.00407 0.00688 1.6929 BenchmarkSetitem __setitem__ (slice) 0.00401 0.16161 40.28904 BenchmarkSetitemSlice __setitem__ (slice with skip) 0.00398 0.01596 4.01567 BenchmarkSetitemSliceSkip sort 0.00402 0.08869 22.05676 BenchmarkSort approximate memory usage subject builtin sqlitecollections ratio class __add__ 0.0 0.0 1.0 BenchmarkAdd append 0.0 0.0 1.0 BenchmarkAppend clear 0.0 0.0 1.0 BenchmarkClear __contains__ 0.0 0.0 1.0 BenchmarkContains copy 0.0 0.0 1.0 BenchmarkCopy count 0.0 0.0 1.0 BenchmarkCount __init__ 0.0 0.0 1.0 BenchmarkCreateWithInitialData __delitem__ 0.0 0.0 1.0 BenchmarkDelitem __delitem__ (slice) 0.0 0.0 1.0 BenchmarkDelitemSlice __delitem__ (slice with skip) 0.0 0.0 1.0 BenchmarkDelitemSliceSkip extend 0.0 0.0 1.0 BenchmarkExtend __getitem__ 0.0 0.0 1.0 BenchmarkGetitem __getitem__ (slice) 0.0 0.0 1.0 BenchmarkGetitemSlice __getitem__ (slice with skip) 0.0 0.0 1.0 BenchmarkGetitemSliceSkip __iadd__ 0.0 0.0 1.0 BenchmarkIadd __imult__ 0.0 0.0 1.0 BenchmarkImult index 0.0 0.0 1.0 BenchmarkIndex index (unsuccessful search) 0.0 0.0 1.0 BenchmarkIndexUnsuccessfulSearch insert 0.0 0.0 1.0 BenchmarkInsert __len__ 0.0 0.0 1.0 BenchmarkLen __mult__ 0.0 0.0 1.0 BenchmarkMult __contains__ (unsuccessful search) 0.0 0.0 1.0 BenchmarkNotContains pop 0.0 0.0 1.0 BenchmarkPop remove 0.0 0.0 1.0 BenchmarkRemove __setitem__ 0.0 0.0 1.0 BenchmarkSetitem __setitem__ (slice) 0.0 0.0 1.0 BenchmarkSetitemSlice __setitem__ (slice with skip) 0.0 0.0 1.0 BenchmarkSetitemSliceSkip sort 0.0 0.67969 inf BenchmarkSort timing subject builtin sqlitecollections ratio class add (existing item) 0.00388 0.00541 1.39219 BenchmarkAddExistingItem add (new item) 0.00396 0.00668 1.68884 BenchmarkAddNewItem __and__ 0.00391 0.01084 2.77027 BenchmarkAnd clear 0.00396 0.00646 1.62981 BenchmarkClear __contains__ 0.00397 0.00405 1.02038 BenchmarkContains copy 0.00399 0.00835 2.09484 BenchmarkCopy difference 0.00397 0.00866 2.18273 BenchmarkDifference discard 0.00401 0.00675 1.68421 BenchmarkDiscard discard (no changes) 0.00399 0.00547 1.37259 BenchmarkDiscardNoChanges __ge__ 0.00397 0.00395 0.99533 BenchmarkGe __ge__ (not greater than or equals to) 0.00394 0.00433 1.09839 BenchmarkGeNot __gt__ 0.00395 0.00681 1.72197 BenchmarkGt __gt__ (not greater than) 0.00397 0.03225 8.11555 BenchmarkGtNot __iand__ 0.00397 0.00841 2.11874 BenchmarkIand __init__ 0.00402 0.01626 4.04579 BenchmarkInit intersection 0.004 0.01093 2.73556 BenchmarkIntersection intersection_update 0.00394 0.0085 2.15752 BenchmarkIntersectionUpdate __ior__ 0.00398 0.00851 2.1355 BenchmarkIor isdisjoint 0.00401 0.00401 0.99828 BenchmarkIsdisjoint isdisjoint (not disjoint) 0.00396 0.00399 1.00596 BenchmarkIsdisjointNot issubset 0.00399 0.18415 46.10756 BenchmarkIssubset issubset (not subset) 0.00406 0.01134 2.79634 BenchmarkIssubsetNot issuperset 0.00398 0.02385 5.98757 BenchmarkIssuperset issuperset (not superset) 0.00399 0.00454 1.14019 BenchmarkIssupersetNot __ixor__ 0.004 0.03876 9.70197 BenchmarkIxor __le__ 0.00403 0.00468 1.16106 BenchmarkLe __le__ (not less than or equals to) 0.00408 0.00398 0.97449 BenchmarkLeNot __len__ 0.00395 0.00397 1.0046 BenchmarkLen __lt__ 0.00426 0.00473 1.1107 BenchmarkLt __lt__ (not less than) 0.00401 0.00396 0.9863 BenchmarkLtNot __contains__ (unsuccessful search) 0.00403 0.00402 0.99712 BenchmarkNotContains __or__ 0.00407 0.01145 2.8135 BenchmarkOr pop 0.004 0.00666 1.66442 BenchmarkPop remove 0.00398 0.00668 1.67866 BenchmarkRemove __sub__ 0.00395 0.00866 2.19188 BenchmarkSub symmetric_difference 0.00398 0.04096 10.29295 BenchmarkSymmetricDifference symmetric_difference_update 0.00398 0.04019 10.08677 BenchmarkSymmetricDifferenceUpdate union 0.00396 0.01146 2.89159 BenchmarkUnion update 0.00403 0.00829 2.05549 BenchmarkUpdate __xor__ 0.00397 0.0411 10.35462 BenchmarkXor approximate memory usage subject builtin sqlitecollections ratio class add (existing item) 0.0 0.0 1.0 BenchmarkAddExistingItem add (new item) 0.0 0.0 1.0 BenchmarkAddNewItem __and__ 0.0 0.0 1.0 BenchmarkAnd clear 0.0 0.0 1.0 BenchmarkClear __contains__ 0.0 0.0 1.0 BenchmarkContains copy 0.0 0.0 1.0 BenchmarkCopy difference 0.0 0.0 1.0 BenchmarkDifference discard 0.0 0.0 1.0 BenchmarkDiscard discard (no changes) 0.0 0.0 1.0 BenchmarkDiscardNoChanges __ge__ 0.0 0.0 1.0 BenchmarkGe __ge__ (not greater than or equals to) 0.0 0.0 1.0 BenchmarkGeNot __gt__ 0.0 0.0 1.0 BenchmarkGt __gt__ (not greater than) 0.0 0.0 1.0 BenchmarkGtNot __iand__ 0.0 0.0 1.0 BenchmarkIand __init__ 0.0 0.0 1.0 BenchmarkInit intersection 0.0 0.0 1.0 BenchmarkIntersection intersection_update 0.0 0.0 1.0 BenchmarkIntersectionUpdate __ior__ 0.0 0.0 1.0 BenchmarkIor isdisjoint 0.0 0.0 1.0 BenchmarkIsdisjoint isdisjoint (not disjoint) 0.0 0.0 1.0 BenchmarkIsdisjointNot issubset 0.0 0.0 1.0 BenchmarkIssubset issubset (not subset) 0.0 0.0 1.0 BenchmarkIssubsetNot issuperset 0.0 0.0 1.0 BenchmarkIssuperset issuperset (not superset) 0.0 0.0 1.0 BenchmarkIssupersetNot __ixor__ 0.0 0.0 1.0 BenchmarkIxor __le__ 0.0 0.0 1.0 BenchmarkLe __le__ (not less than or equals to) 0.0 0.0 1.0 BenchmarkLeNot __len__ 0.0 0.0 1.0 BenchmarkLen __lt__ 0.0 0.0 1.0 BenchmarkLt __lt__ (not less than) 0.0 0.0 1.0 BenchmarkLtNot __contains__ (unsuccessful search) 0.0 0.0 1.0 BenchmarkNotContains __or__ 0.0 0.0 1.0 BenchmarkOr pop 0.0 0.0 1.0 BenchmarkPop remove 0.0 0.0 1.0 BenchmarkRemove __sub__ 0.0 0.0 1.0 BenchmarkSub symmetric_difference 0.0 0.0 1.0 BenchmarkSymmetricDifference symmetric_difference_update 0.0 0.0 1.0 BenchmarkSymmetricDifferenceUpdate union 0.0 0.0 1.0 BenchmarkUnion update 0.0 0.0 1.0 BenchmarkUpdate __xor__ 0.0 0.0 1.0 BenchmarkXor dict list set timing subject builtin sqlitecollections ratio class clear 0.00534 0.00729 1.36579 BenchmarkClear __contains__ 0.00417 0.00464 1.11155 BenchmarkContains copy 0.00422 0.01292 3.06029 BenchmarkCopy __delitem__ 0.00454 0.00718 1.58117 BenchmarkDelitem get 0.00422 0.0047 1.11358 BenchmarkGet get (unsuccessful search) 0.00523 0.00451 0.86104 BenchmarkGetDefault __getitem__ 0.00424 0.00449 1.06119 BenchmarkGetitem __init__ 0.00433 0.04179 9.66056 BenchmarkInit __ior__ 0.005 0.01058 2.11573 BenchmarkIor __ior__ (many) 0.00646 0.59503 92.1591 BenchmarkIorMany items 0.00509 0.01255 2.46526 BenchmarkItems __iter__ 0.00708 0.00954 1.34655 BenchmarkIter keys 0.00488 0.01105 2.26553 BenchmarkKeys __len__ 0.00486 0.00462 0.95111 BenchmarkLen __contains__ (unsuccessful search) 0.00488 0.00457 0.93462 BenchmarkNotContains __or__ 0.0043 0.01331 3.09466 BenchmarkOr __or__ (many) 0.00581 0.59626 102.64348 BenchmarkOrMany pop 0.00537 0.00883 1.64329 BenchmarkPop pop (unsuccessful search) 0.00452 0.00709 1.56856 BenchmarkPopDefault popitem 0.00503 0.00992 1.97121 BenchmarkPopitem reversed 0.00527 0.00959 1.81848 BenchmarkReversed setdefault 0.00528 0.0079 1.49743 BenchmarkSetdefault setdefault (unsuccessful search) 0.00466 0.00682 1.46307 BenchmarkSetdefaultAddItem __setitem__ (add new item) 0.00531 0.00862 1.62335 BenchmarkSetitemAddNewItem __setitem__ (replace) 0.00433 0.00904 2.08578 BenchmarkSetitemReplace update 0.00439 0.01428 3.25162 BenchmarkUpdate update (many) 0.00615 0.58864 95.7803 BenchmarkUpdateMany values 0.00432 0.00797 1.84722 BenchmarkValues approximate memory usage subject builtin sqlitecollections ratio class clear 0.0 0.0 1.0 BenchmarkClear __contains__ 0.0 0.0 1.0 BenchmarkContains copy 0.0 0.0 1.0 BenchmarkCopy __delitem__ 0.0 0.0 1.0 BenchmarkDelitem get 0.0 0.0 1.0 BenchmarkGet get (unsuccessful search) 0.0 0.0 1.0 BenchmarkGetDefault __getitem__ 0.0 0.0 1.0 BenchmarkGetitem __init__ 0.0 0.0 1.0 BenchmarkInit __ior__ 0.0 0.0 1.0 BenchmarkIor __ior__ (many) 0.18359 0.0 0.0 BenchmarkIorMany items 0.0 0.17188 inf BenchmarkItems __iter__ 0.0 0.0 1.0 BenchmarkIter keys 0.0 0.0 1.0 BenchmarkKeys __len__ 0.0 0.0 1.0 BenchmarkLen __contains__ (unsuccessful search) 0.0 0.0 1.0 BenchmarkNotContains __or__ 0.0 0.0 1.0 BenchmarkOr __or__ (many) 0.03125 0.0 0.0 BenchmarkOrMany pop 0.0 0.0 1.0 BenchmarkPop pop (unsuccessful search) 0.0 0.0 1.0 BenchmarkPopDefault popitem 0.0 0.0 1.0 BenchmarkPopitem reversed 0.0 0.0 1.0 BenchmarkReversed setdefault 0.0 0.0 1.0 BenchmarkSetdefault setdefault (unsuccessful search) 0.0 0.00391 inf BenchmarkSetdefaultAddItem __setitem__ (add new item) 0.0 0.0 1.0 BenchmarkSetitemAddNewItem __setitem__ (replace) 0.0 0.0 1.0 BenchmarkSetitemReplace update 0.0 0.0 1.0 BenchmarkUpdate update (many) 0.0 0.0 1.0 BenchmarkUpdateMany values 0.0 0.0 1.0 BenchmarkValues timing subject builtin sqlitecollections ratio class __add__ 0.00437 0.01627 3.72583 BenchmarkAdd append 0.00434 0.00903 2.08248 BenchmarkAppend clear 0.00427 0.0124 2.90323 BenchmarkClear __contains__ 0.0048 0.00557 1.1596 BenchmarkContains copy 0.00554 0.01399 2.52706 BenchmarkCopy count 0.00548 0.00559 1.02119 BenchmarkCount __init__ 0.00499 0.0263 5.27042 BenchmarkCreateWithInitialData __delitem__ 0.00468 0.08638 18.44061 BenchmarkDelitem __delitem__ (slice) 0.00517 0.16678 32.2787 BenchmarkDelitemSlice __delitem__ (slice with skip) 0.0043 0.1647 38.25869 BenchmarkDelitemSliceSkip extend 0.00429 0.00996 2.32342 BenchmarkExtend __getitem__ 0.00435 0.0044 1.01169 BenchmarkGetitem __getitem__ (slice) 0.00511 0.09544 18.67585 BenchmarkGetitemSlice __getitem__ (slice with skip) 0.0044 0.01505 3.42175 BenchmarkGetitemSliceSkip __iadd__ 0.00518 0.01314 2.53709 BenchmarkIadd __imult__ 0.00582 0.25361 43.57621 BenchmarkImult index 0.00434 0.0047 1.08355 BenchmarkIndex index (unsuccessful search) 0.00481 0.00543 1.1285 BenchmarkIndexUnsuccessfulSearch insert 0.0046 0.15821 34.42648 BenchmarkInsert __len__ 0.00432 0.00435 1.00676 BenchmarkLen __mult__ 0.00431 0.24846 57.61463 BenchmarkMult __contains__ (unsuccessful search) 0.00431 0.00441 1.02248 BenchmarkNotContains pop 0.00524 0.08803 16.78499 BenchmarkPop remove 0.00475 0.12744 26.82144 BenchmarkRemove __setitem__ 0.00701 0.01375 1.96254 BenchmarkSetitem __setitem__ (slice) 0.00501 0.18086 36.09371 BenchmarkSetitemSlice __setitem__ (slice with skip) 0.00486 0.01882 3.87416 BenchmarkSetitemSliceSkip sort 0.00511 0.09985 19.54574 BenchmarkSort approximate memory usage subject builtin sqlitecollections ratio class __add__ 0.0 0.0 1.0 BenchmarkAdd append 0.0 0.0 1.0 BenchmarkAppend clear 0.0 0.0 1.0 BenchmarkClear __contains__ 0.0 0.0 1.0 BenchmarkContains copy 0.0 0.0 1.0 BenchmarkCopy count 0.0 0.0 1.0 BenchmarkCount __init__ 0.0 0.0 1.0 BenchmarkCreateWithInitialData __delitem__ 0.0 0.0 1.0 BenchmarkDelitem __delitem__ (slice) 0.0 0.0 1.0 BenchmarkDelitemSlice __delitem__ (slice with skip) 0.0 0.0 1.0 BenchmarkDelitemSliceSkip extend 0.0 0.0 1.0 BenchmarkExtend __getitem__ 0.0 0.0 1.0 BenchmarkGetitem __getitem__ (slice) 0.0 0.0 1.0 BenchmarkGetitemSlice __getitem__ (slice with skip) 0.0 0.0 1.0 BenchmarkGetitemSliceSkip __iadd__ 0.0 0.0 1.0 BenchmarkIadd __imult__ 0.0 0.0 1.0 BenchmarkImult index 0.0 0.0 1.0 BenchmarkIndex index (unsuccessful search) 0.0 0.0 1.0 BenchmarkIndexUnsuccessfulSearch insert 0.0 0.0 1.0 BenchmarkInsert __len__ 0.0 0.0 1.0 BenchmarkLen __mult__ 0.0 0.0 1.0 BenchmarkMult __contains__ (unsuccessful search) 0.0 0.0 1.0 BenchmarkNotContains pop 0.0 0.0 1.0 BenchmarkPop remove 0.0 0.0 1.0 BenchmarkRemove __setitem__ 0.0 0.0 1.0 BenchmarkSetitem __setitem__ (slice) 0.0 0.0 1.0 BenchmarkSetitemSlice __setitem__ (slice with skip) 0.0 0.0 1.0 BenchmarkSetitemSliceSkip sort 0.0 0.58203 inf BenchmarkSort timing subject builtin sqlitecollections ratio class add (existing item) 0.004 0.00687 1.71666 BenchmarkAddExistingItem add (new item) 0.00533 0.01147 2.15268 BenchmarkAddNewItem __and__ 0.00508 0.01804 3.54918 BenchmarkAnd clear 0.00563 0.01181 2.09584 BenchmarkClear __contains__ 0.00417 0.00428 1.02821 BenchmarkContains copy 0.00424 0.01395 3.29088 BenchmarkCopy difference 0.00538 0.01289 2.39679 BenchmarkDifference discard 0.00534 0.01239 2.31867 BenchmarkDiscard discard (no changes) 0.00524 0.00675 1.28966 BenchmarkDiscardNoChanges __ge__ 0.00462 0.00559 1.21153 BenchmarkGe __ge__ (not greater than or equals to) 0.0048 0.00469 0.97705 BenchmarkGeNot __gt__ 0.00487 0.01109 2.27999 BenchmarkGt __gt__ (not greater than) 0.0055 0.03603 6.5469 BenchmarkGtNot __iand__ 0.00527 0.01376 2.61247 BenchmarkIand __init__ 0.00542 0.12837 23.668 BenchmarkInit intersection 0.006 0.01616 2.69534 BenchmarkIntersection intersection_update 0.00516 0.01408 2.72992 BenchmarkIntersectionUpdate __ior__ 0.00656 0.00917 1.39873 BenchmarkIor isdisjoint 0.00418 0.0042 1.00455 BenchmarkIsdisjoint isdisjoint (not disjoint) 0.00492 0.00481 0.97783 BenchmarkIsdisjointNot issubset 0.00431 0.03283 7.62122 BenchmarkIssubset issubset (not subset) 0.00415 0.01349 3.25244 BenchmarkIssubsetNot issuperset 0.00615 0.02796 4.54451 BenchmarkIssuperset issuperset (not superset) 0.00416 0.0043 1.0327 BenchmarkIssupersetNot __ixor__ 0.00458 0.04323 9.43131 BenchmarkIxor __le__ 0.00426 0.00521 1.22329 BenchmarkLe __le__ (not less than or equals to) 0.00478 0.00499 1.04356 BenchmarkLeNot __len__ 0.00424 0.0043 1.01353 BenchmarkLen __lt__ 0.00498 0.00556 1.11787 BenchmarkLt __lt__ (not less than) 0.00507 0.00516 1.01826 BenchmarkLtNot __contains__ (unsuccessful search) 0.00562 0.00467 0.831 BenchmarkNotContains __or__ 0.00415 0.01369 3.29758 BenchmarkOr pop 0.0041 0.0086 2.09803 BenchmarkPop remove 0.00446 0.00815 1.82816 BenchmarkRemove __sub__ 0.00401 0.01284 3.19807 BenchmarkSub symmetric_difference 0.00511 0.0469 9.17588 BenchmarkSymmetricDifference symmetric_difference_update 0.00411 0.0446 10.84698 BenchmarkSymmetricDifferenceUpdate union 0.00411 0.01384 3.37077 BenchmarkUnion update 0.00535 0.01367 2.55739 BenchmarkUpdate __xor__ 0.00669 0.05224 7.80446 BenchmarkXor approximate memory usage subject builtin sqlitecollections ratio class add (existing item) 0.0 0.0 1.0 BenchmarkAddExistingItem add (new item) 0.0 0.0 1.0 BenchmarkAddNewItem __and__ 0.0 0.0 1.0 BenchmarkAnd clear 0.0 0.0 1.0 BenchmarkClear __contains__ 0.0 0.0 1.0 BenchmarkContains copy 0.0 0.0 1.0 BenchmarkCopy difference 0.0 0.0 1.0 BenchmarkDifference discard 0.0 0.0 1.0 BenchmarkDiscard discard (no changes) 0.0 0.0 1.0 BenchmarkDiscardNoChanges __ge__ 0.0 0.0 1.0 BenchmarkGe __ge__ (not greater than or equals to) 0.0 0.0 1.0 BenchmarkGeNot __gt__ 0.0 0.0 1.0 BenchmarkGt __gt__ (not greater than) 0.0 0.0 1.0 BenchmarkGtNot __iand__ 0.0 0.0 1.0 BenchmarkIand __init__ 0.0 0.0 1.0 BenchmarkInit intersection 0.0 0.0 1.0 BenchmarkIntersection intersection_update 0.0 0.0 1.0 BenchmarkIntersectionUpdate __ior__ 0.0 0.0 1.0 BenchmarkIor isdisjoint 0.0 0.0 1.0 BenchmarkIsdisjoint isdisjoint (not disjoint) 0.0 0.0 1.0 BenchmarkIsdisjointNot issubset 0.0 0.0 1.0 BenchmarkIssubset issubset (not subset) 0.0 0.0 1.0 BenchmarkIssubsetNot issuperset 0.0 0.0 1.0 BenchmarkIssuperset issuperset (not superset) 0.0 0.0 1.0 BenchmarkIssupersetNot __ixor__ 0.0 0.0 1.0 BenchmarkIxor __le__ 0.0 0.0 1.0 BenchmarkLe __le__ (not less than or equals to) 0.0 0.0 1.0 BenchmarkLeNot __len__ 0.0 0.0 1.0 BenchmarkLen __lt__ 0.0 0.0 1.0 BenchmarkLt __lt__ (not less than) 0.0 0.0 1.0 BenchmarkLtNot __contains__ (unsuccessful search) 0.0 0.0 1.0 BenchmarkNotContains __or__ 0.0 0.0 1.0 BenchmarkOr pop 0.0 0.0 1.0 BenchmarkPop remove 0.0 0.0 1.0 BenchmarkRemove __sub__ 0.0 0.0 1.0 BenchmarkSub symmetric_difference 0.0 0.0 1.0 BenchmarkSymmetricDifference symmetric_difference_update 0.0 0.0 1.0 BenchmarkSymmetricDifferenceUpdate union 0.0 0.0 1.0 BenchmarkUnion update 0.0 0.0 1.0 BenchmarkUpdate __xor__ 0.0 0.0 1.0 BenchmarkXor","title":"Benchmark"},{"location":"development/","text":"Development Tests, type checking and linting locally To run tests, type checking and linting locally, you'll need to have python 3.6 , 3.7 , 3.8 , 3.9 and 3.10 installed. We use tox to run tests and type checking on all the supported python versions. You can set up the development environment with the following commands: git clone git@github.com:osoken/sqlitecollections.git cd sqlitecollections python -m venv .venv source ./.venv/bin/activate pip install -e .[dev] Then, run tests is as easy as: tox After a while, you'll see the following message at the bottom of the long logs from pytest and others. __________________ summary __________________ lint: commands succeeded py36: commands succeeded py37: commands succeeded py38: commands succeeded py39: commands succeeded py310: commands succeeded congratulations :) Building documents We use mkdocs to build the documentation. To set up the environment for building the document, run the following commands: git clone git@github.com:osoken/sqlitecollections.git cd sqlitecollections python -m venv .venv source ./.venv/bin/activate pip install -e .[docs] Then, building the documentation can be done by the following command: mkdocs build The output will be located in site directory in your current directory. During development, you can also run mkdoc 's builtin development server with hot-reloading enabled with the following command: mkdocs serve In that case, you can check the result on http://127.0.0.1:8000 . Benchmarks We have our own benchmark package. Setup the benchmark package To setup, run the following commands: pip install docs/scbenchmarker Run all benchmarks and render the results Benchmarking is done in two steps: Step 1: Run all benchmarks python -m scbenchmarker --prefix=[prefix] benchmarking Step 2: Render the results to markdown: python -m scbenchmarker --prefix=[prefix] render Results are stored in docs/benchmark_results/[prefix]/ . You can check the results on http://127.0.0.1:8000/benchmark/ . Verbose mode python -m scbenchmarker --verbose --prefix=[prefix] benchmarking An example output is as follows: benchmark_dict.py::BenchmarkSetitemAddNewItem: {'subject': '`__setitem__` (add new item)', 'one': {'name': '`dict`', 'timing': 0.0026721060276031494, 'memory': 0.00390625}, 'another': {'name': '`sqlitecollections.Dict`', 'timing': 0.006042510271072388, 'memory': 0.00390625}, 'ratio': {'timing': 2.2613287828598834, 'memory': 1.0}} Run individual benchmarks You can also run individual benchmarks. python -m scbenchmarker --prefix=[prefix] benchmarking [benchmark script]::[benchmark name] This command runs only a single benchmark. Together with the verbose mode, this is convenient for improving a single method and checking benchmarks frequently. Compatibility policy We aim to implement containers that are as compatible as possible with the built-in containers, but we have a few implementations that intentionally behave differently. Normal behavior will be compatible, but in case of errors it may be different. The constructor arguments are not compatible, as they require arguments specific to this package's container, such as sqlite3 DB file paths and serialization methods. copy method in each container behaves similarly to deep copy, since it copies the table containing serialized elements. Dict 's item order is guaranteed to be insertion order not only for python 3.7 and upper but for all versions. Dict.fromkeys class method is not provided. Any member in the container cannot be mutated directly. If you want to mutate any member, mutate it via temporary variable then write it back. import sqlitecollections as sc x = sc . Dict ({ \"a\" : []}) # create {\"a\": []} x [ \"a\" ] . append ( \"b\" ) # try to mutate the empty list print ( x [ \"a\" ]) # not [\"b\"] but [] temp = x [ \"a\" ] # temporarily substitute the list to a variable temp . append ( \"b\" ) # mutate the temporary variable x [ \"a\" ] = temp # then, write it back print ( x [ \"a\" ]) # now, we get [\"b\"]","title":"Development"},{"location":"development/#development","text":"","title":"Development"},{"location":"development/#tests-type-checking-and-linting-locally","text":"To run tests, type checking and linting locally, you'll need to have python 3.6 , 3.7 , 3.8 , 3.9 and 3.10 installed. We use tox to run tests and type checking on all the supported python versions. You can set up the development environment with the following commands: git clone git@github.com:osoken/sqlitecollections.git cd sqlitecollections python -m venv .venv source ./.venv/bin/activate pip install -e .[dev] Then, run tests is as easy as: tox After a while, you'll see the following message at the bottom of the long logs from pytest and others. __________________ summary __________________ lint: commands succeeded py36: commands succeeded py37: commands succeeded py38: commands succeeded py39: commands succeeded py310: commands succeeded congratulations :)","title":"Tests, type checking and linting locally"},{"location":"development/#building-documents","text":"We use mkdocs to build the documentation. To set up the environment for building the document, run the following commands: git clone git@github.com:osoken/sqlitecollections.git cd sqlitecollections python -m venv .venv source ./.venv/bin/activate pip install -e .[docs] Then, building the documentation can be done by the following command: mkdocs build The output will be located in site directory in your current directory. During development, you can also run mkdoc 's builtin development server with hot-reloading enabled with the following command: mkdocs serve In that case, you can check the result on http://127.0.0.1:8000 .","title":"Building documents"},{"location":"development/#benchmarks","text":"We have our own benchmark package.","title":"Benchmarks"},{"location":"development/#setup-the-benchmark-package","text":"To setup, run the following commands: pip install docs/scbenchmarker","title":"Setup the benchmark package"},{"location":"development/#run-all-benchmarks-and-render-the-results","text":"Benchmarking is done in two steps: Step 1: Run all benchmarks python -m scbenchmarker --prefix=[prefix] benchmarking Step 2: Render the results to markdown: python -m scbenchmarker --prefix=[prefix] render Results are stored in docs/benchmark_results/[prefix]/ . You can check the results on http://127.0.0.1:8000/benchmark/ .","title":"Run all benchmarks and render the results"},{"location":"development/#verbose-mode","text":"python -m scbenchmarker --verbose --prefix=[prefix] benchmarking An example output is as follows: benchmark_dict.py::BenchmarkSetitemAddNewItem: {'subject': '`__setitem__` (add new item)', 'one': {'name': '`dict`', 'timing': 0.0026721060276031494, 'memory': 0.00390625}, 'another': {'name': '`sqlitecollections.Dict`', 'timing': 0.006042510271072388, 'memory': 0.00390625}, 'ratio': {'timing': 2.2613287828598834, 'memory': 1.0}}","title":"Verbose mode"},{"location":"development/#run-individual-benchmarks","text":"You can also run individual benchmarks. python -m scbenchmarker --prefix=[prefix] benchmarking [benchmark script]::[benchmark name] This command runs only a single benchmark. Together with the verbose mode, this is convenient for improving a single method and checking benchmarks frequently.","title":"Run individual benchmarks"},{"location":"development/#compatibility-policy","text":"We aim to implement containers that are as compatible as possible with the built-in containers, but we have a few implementations that intentionally behave differently. Normal behavior will be compatible, but in case of errors it may be different. The constructor arguments are not compatible, as they require arguments specific to this package's container, such as sqlite3 DB file paths and serialization methods. copy method in each container behaves similarly to deep copy, since it copies the table containing serialized elements. Dict 's item order is guaranteed to be insertion order not only for python 3.7 and upper but for all versions. Dict.fromkeys class method is not provided. Any member in the container cannot be mutated directly. If you want to mutate any member, mutate it via temporary variable then write it back. import sqlitecollections as sc x = sc . Dict ({ \"a\" : []}) # create {\"a\": []} x [ \"a\" ] . append ( \"b\" ) # try to mutate the empty list print ( x [ \"a\" ]) # not [\"b\"] but [] temp = x [ \"a\" ] # temporarily substitute the list to a variable temp . append ( \"b\" ) # mutate the temporary variable x [ \"a\" ] = temp # then, write it back print ( x [ \"a\" ]) # now, we get [\"b\"]","title":"Compatibility policy"},{"location":"install/","text":"Install pip install sqlitecollections","title":"Install"},{"location":"install/#install","text":"pip install sqlitecollections","title":"Install"},{"location":"benchmark_results/py310/dict/","text":"timing | subject | `builtin` | `sqlitecollections` | ratio | class | | :------ | --------: | ------------------: | ----: | :---- | | `clear` | 0.00534 | 0.00729 | 1.36579 | `BenchmarkClear` | | `__contains__` | 0.00417 | 0.00464 | 1.11155 | `BenchmarkContains` | | `copy` | 0.00422 | 0.01292 | 3.06029 | `BenchmarkCopy` | | `__delitem__` | 0.00454 | 0.00718 | 1.58117 | `BenchmarkDelitem` | | `get` | 0.00422 | 0.0047 | 1.11358 | `BenchmarkGet` | | `get (unsuccessful search)` | 0.00523 | 0.00451 | 0.86104 | `BenchmarkGetDefault` | | `__getitem__` | 0.00424 | 0.00449 | 1.06119 | `BenchmarkGetitem` | | `__init__` | 0.00433 | 0.04179 | 9.66056 | `BenchmarkInit` | | `__ior__` | 0.005 | 0.01058 | 2.11573 | `BenchmarkIor` | | `__ior__` (many) | 0.00646 | 0.59503 | 92.1591 | `BenchmarkIorMany` | | `items` | 0.00509 | 0.01255 | 2.46526 | `BenchmarkItems` | | `__iter__` | 0.00708 | 0.00954 | 1.34655 | `BenchmarkIter` | | `keys` | 0.00488 | 0.01105 | 2.26553 | `BenchmarkKeys` | | `__len__` | 0.00486 | 0.00462 | 0.95111 | `BenchmarkLen` | | `__contains__` (unsuccessful search) | 0.00488 | 0.00457 | 0.93462 | `BenchmarkNotContains` | | `__or__` | 0.0043 | 0.01331 | 3.09466 | `BenchmarkOr` | | `__or__` (many) | 0.00581 | 0.59626 | 102.64348 | `BenchmarkOrMany` | | `pop` | 0.00537 | 0.00883 | 1.64329 | `BenchmarkPop` | | `pop (unsuccessful search)` | 0.00452 | 0.00709 | 1.56856 | `BenchmarkPopDefault` | | `popitem` | 0.00503 | 0.00992 | 1.97121 | `BenchmarkPopitem` | | `reversed` | 0.00527 | 0.00959 | 1.81848 | `BenchmarkReversed` | | `setdefault` | 0.00528 | 0.0079 | 1.49743 | `BenchmarkSetdefault` | | `setdefault (unsuccessful search)` | 0.00466 | 0.00682 | 1.46307 | `BenchmarkSetdefaultAddItem` | | `__setitem__` (add new item) | 0.00531 | 0.00862 | 1.62335 | `BenchmarkSetitemAddNewItem` | | `__setitem__` (replace) | 0.00433 | 0.00904 | 2.08578 | `BenchmarkSetitemReplace` | | `update` | 0.00439 | 0.01428 | 3.25162 | `BenchmarkUpdate` | | `update` (many) | 0.00615 | 0.58864 | 95.7803 | `BenchmarkUpdateMany` | | `values` | 0.00432 | 0.00797 | 1.84722 | `BenchmarkValues` | approximate memory usage | subject | `builtin` | `sqlitecollections` | ratio | class | | :------ | --------: | ------------------: | ----: | :---- | | `clear` | 0.0 | 0.0 | 1.0 | `BenchmarkClear` | | `__contains__` | 0.0 | 0.0 | 1.0 | `BenchmarkContains` | | `copy` | 0.0 | 0.0 | 1.0 | `BenchmarkCopy` | | `__delitem__` | 0.0 | 0.0 | 1.0 | `BenchmarkDelitem` | | `get` | 0.0 | 0.0 | 1.0 | `BenchmarkGet` | | `get (unsuccessful search)` | 0.0 | 0.0 | 1.0 | `BenchmarkGetDefault` | | `__getitem__` | 0.0 | 0.0 | 1.0 | `BenchmarkGetitem` | | `__init__` | 0.0 | 0.0 | 1.0 | `BenchmarkInit` | | `__ior__` | 0.0 | 0.0 | 1.0 | `BenchmarkIor` | | `__ior__` (many) | 0.18359 | 0.0 | 0.0 | `BenchmarkIorMany` | | `items` | 0.0 | 0.17188 | inf | `BenchmarkItems` | | `__iter__` | 0.0 | 0.0 | 1.0 | `BenchmarkIter` | | `keys` | 0.0 | 0.0 | 1.0 | `BenchmarkKeys` | | `__len__` | 0.0 | 0.0 | 1.0 | `BenchmarkLen` | | `__contains__` (unsuccessful search) | 0.0 | 0.0 | 1.0 | `BenchmarkNotContains` | | `__or__` | 0.0 | 0.0 | 1.0 | `BenchmarkOr` | | `__or__` (many) | 0.03125 | 0.0 | 0.0 | `BenchmarkOrMany` | | `pop` | 0.0 | 0.0 | 1.0 | `BenchmarkPop` | | `pop (unsuccessful search)` | 0.0 | 0.0 | 1.0 | `BenchmarkPopDefault` | | `popitem` | 0.0 | 0.0 | 1.0 | `BenchmarkPopitem` | | `reversed` | 0.0 | 0.0 | 1.0 | `BenchmarkReversed` | | `setdefault` | 0.0 | 0.0 | 1.0 | `BenchmarkSetdefault` | | `setdefault (unsuccessful search)` | 0.0 | 0.00391 | inf | `BenchmarkSetdefaultAddItem` | | `__setitem__` (add new item) | 0.0 | 0.0 | 1.0 | `BenchmarkSetitemAddNewItem` | | `__setitem__` (replace) | 0.0 | 0.0 | 1.0 | `BenchmarkSetitemReplace` | | `update` | 0.0 | 0.0 | 1.0 | `BenchmarkUpdate` | | `update` (many) | 0.0 | 0.0 | 1.0 | `BenchmarkUpdateMany` | | `values` | 0.0 | 0.0 | 1.0 | `BenchmarkValues` |","title":"Dict"},{"location":"benchmark_results/py310/list/","text":"timing | subject | `builtin` | `sqlitecollections` | ratio | class | | :------ | --------: | ------------------: | ----: | :---- | | `__add__` | 0.00437 | 0.01627 | 3.72583 | `BenchmarkAdd` | | `append` | 0.00434 | 0.00903 | 2.08248 | `BenchmarkAppend` | | `clear` | 0.00427 | 0.0124 | 2.90323 | `BenchmarkClear` | | `__contains__` | 0.0048 | 0.00557 | 1.1596 | `BenchmarkContains` | | `copy` | 0.00554 | 0.01399 | 2.52706 | `BenchmarkCopy` | | `count` | 0.00548 | 0.00559 | 1.02119 | `BenchmarkCount` | | `__init__` | 0.00499 | 0.0263 | 5.27042 | `BenchmarkCreateWithInitialData` | | `__delitem__` | 0.00468 | 0.08638 | 18.44061 | `BenchmarkDelitem` | | `__delitem__` (slice) | 0.00517 | 0.16678 | 32.2787 | `BenchmarkDelitemSlice` | | `__delitem__` (slice with skip) | 0.0043 | 0.1647 | 38.25869 | `BenchmarkDelitemSliceSkip` | | `extend` | 0.00429 | 0.00996 | 2.32342 | `BenchmarkExtend` | | `__getitem__` | 0.00435 | 0.0044 | 1.01169 | `BenchmarkGetitem` | | `__getitem__` (slice) | 0.00511 | 0.09544 | 18.67585 | `BenchmarkGetitemSlice` | | `__getitem__` (slice with skip) | 0.0044 | 0.01505 | 3.42175 | `BenchmarkGetitemSliceSkip` | | `__iadd__` | 0.00518 | 0.01314 | 2.53709 | `BenchmarkIadd` | | `__imult__` | 0.00582 | 0.25361 | 43.57621 | `BenchmarkImult` | | `index` | 0.00434 | 0.0047 | 1.08355 | `BenchmarkIndex` | | `index` (unsuccessful search) | 0.00481 | 0.00543 | 1.1285 | `BenchmarkIndexUnsuccessfulSearch` | | `insert` | 0.0046 | 0.15821 | 34.42648 | `BenchmarkInsert` | | `__len__` | 0.00432 | 0.00435 | 1.00676 | `BenchmarkLen` | | `__mult__` | 0.00431 | 0.24846 | 57.61463 | `BenchmarkMult` | | `__contains__` (unsuccessful search) | 0.00431 | 0.00441 | 1.02248 | `BenchmarkNotContains` | | `pop` | 0.00524 | 0.08803 | 16.78499 | `BenchmarkPop` | | `remove` | 0.00475 | 0.12744 | 26.82144 | `BenchmarkRemove` | | `__setitem__` | 0.00701 | 0.01375 | 1.96254 | `BenchmarkSetitem` | | `__setitem__` (slice) | 0.00501 | 0.18086 | 36.09371 | `BenchmarkSetitemSlice` | | `__setitem__` (slice with skip) | 0.00486 | 0.01882 | 3.87416 | `BenchmarkSetitemSliceSkip` | | `sort` | 0.00511 | 0.09985 | 19.54574 | `BenchmarkSort` | approximate memory usage | subject | `builtin` | `sqlitecollections` | ratio | class | | :------ | --------: | ------------------: | ----: | :---- | | `__add__` | 0.0 | 0.0 | 1.0 | `BenchmarkAdd` | | `append` | 0.0 | 0.0 | 1.0 | `BenchmarkAppend` | | `clear` | 0.0 | 0.0 | 1.0 | `BenchmarkClear` | | `__contains__` | 0.0 | 0.0 | 1.0 | `BenchmarkContains` | | `copy` | 0.0 | 0.0 | 1.0 | `BenchmarkCopy` | | `count` | 0.0 | 0.0 | 1.0 | `BenchmarkCount` | | `__init__` | 0.0 | 0.0 | 1.0 | `BenchmarkCreateWithInitialData` | | `__delitem__` | 0.0 | 0.0 | 1.0 | `BenchmarkDelitem` | | `__delitem__` (slice) | 0.0 | 0.0 | 1.0 | `BenchmarkDelitemSlice` | | `__delitem__` (slice with skip) | 0.0 | 0.0 | 1.0 | `BenchmarkDelitemSliceSkip` | | `extend` | 0.0 | 0.0 | 1.0 | `BenchmarkExtend` | | `__getitem__` | 0.0 | 0.0 | 1.0 | `BenchmarkGetitem` | | `__getitem__` (slice) | 0.0 | 0.0 | 1.0 | `BenchmarkGetitemSlice` | | `__getitem__` (slice with skip) | 0.0 | 0.0 | 1.0 | `BenchmarkGetitemSliceSkip` | | `__iadd__` | 0.0 | 0.0 | 1.0 | `BenchmarkIadd` | | `__imult__` | 0.0 | 0.0 | 1.0 | `BenchmarkImult` | | `index` | 0.0 | 0.0 | 1.0 | `BenchmarkIndex` | | `index` (unsuccessful search) | 0.0 | 0.0 | 1.0 | `BenchmarkIndexUnsuccessfulSearch` | | `insert` | 0.0 | 0.0 | 1.0 | `BenchmarkInsert` | | `__len__` | 0.0 | 0.0 | 1.0 | `BenchmarkLen` | | `__mult__` | 0.0 | 0.0 | 1.0 | `BenchmarkMult` | | `__contains__` (unsuccessful search) | 0.0 | 0.0 | 1.0 | `BenchmarkNotContains` | | `pop` | 0.0 | 0.0 | 1.0 | `BenchmarkPop` | | `remove` | 0.0 | 0.0 | 1.0 | `BenchmarkRemove` | | `__setitem__` | 0.0 | 0.0 | 1.0 | `BenchmarkSetitem` | | `__setitem__` (slice) | 0.0 | 0.0 | 1.0 | `BenchmarkSetitemSlice` | | `__setitem__` (slice with skip) | 0.0 | 0.0 | 1.0 | `BenchmarkSetitemSliceSkip` | | `sort` | 0.0 | 0.58203 | inf | `BenchmarkSort` |","title":"List"},{"location":"benchmark_results/py310/set/","text":"timing | subject | `builtin` | `sqlitecollections` | ratio | class | | :------ | --------: | ------------------: | ----: | :---- | | `add (existing item)` | 0.004 | 0.00687 | 1.71666 | `BenchmarkAddExistingItem` | | `add (new item)` | 0.00533 | 0.01147 | 2.15268 | `BenchmarkAddNewItem` | | `__and__` | 0.00508 | 0.01804 | 3.54918 | `BenchmarkAnd` | | `clear` | 0.00563 | 0.01181 | 2.09584 | `BenchmarkClear` | | `__contains__` | 0.00417 | 0.00428 | 1.02821 | `BenchmarkContains` | | `copy` | 0.00424 | 0.01395 | 3.29088 | `BenchmarkCopy` | | `difference` | 0.00538 | 0.01289 | 2.39679 | `BenchmarkDifference` | | `discard` | 0.00534 | 0.01239 | 2.31867 | `BenchmarkDiscard` | | `discard (no changes)` | 0.00524 | 0.00675 | 1.28966 | `BenchmarkDiscardNoChanges` | | `__ge__` | 0.00462 | 0.00559 | 1.21153 | `BenchmarkGe` | | `__ge__` (not greater than or equals to) | 0.0048 | 0.00469 | 0.97705 | `BenchmarkGeNot` | | `__gt__` | 0.00487 | 0.01109 | 2.27999 | `BenchmarkGt` | | `__gt__` (not greater than) | 0.0055 | 0.03603 | 6.5469 | `BenchmarkGtNot` | | `__iand__` | 0.00527 | 0.01376 | 2.61247 | `BenchmarkIand` | | `__init__` | 0.00542 | 0.12837 | 23.668 | `BenchmarkInit` | | `intersection` | 0.006 | 0.01616 | 2.69534 | `BenchmarkIntersection` | | `intersection_update` | 0.00516 | 0.01408 | 2.72992 | `BenchmarkIntersectionUpdate` | | `__ior__` | 0.00656 | 0.00917 | 1.39873 | `BenchmarkIor` | | `isdisjoint` | 0.00418 | 0.0042 | 1.00455 | `BenchmarkIsdisjoint` | | `isdisjoint` (not disjoint) | 0.00492 | 0.00481 | 0.97783 | `BenchmarkIsdisjointNot` | | `issubset` | 0.00431 | 0.03283 | 7.62122 | `BenchmarkIssubset` | | `issubset` (not subset) | 0.00415 | 0.01349 | 3.25244 | `BenchmarkIssubsetNot` | | `issuperset` | 0.00615 | 0.02796 | 4.54451 | `BenchmarkIssuperset` | | `issuperset` (not superset) | 0.00416 | 0.0043 | 1.0327 | `BenchmarkIssupersetNot` | | `__ixor__` | 0.00458 | 0.04323 | 9.43131 | `BenchmarkIxor` | | `__le__` | 0.00426 | 0.00521 | 1.22329 | `BenchmarkLe` | | `__le__` (not less than or equals to) | 0.00478 | 0.00499 | 1.04356 | `BenchmarkLeNot` | | `__len__` | 0.00424 | 0.0043 | 1.01353 | `BenchmarkLen` | | `__lt__` | 0.00498 | 0.00556 | 1.11787 | `BenchmarkLt` | | `__lt__` (not less than) | 0.00507 | 0.00516 | 1.01826 | `BenchmarkLtNot` | | `__contains__` (unsuccessful search) | 0.00562 | 0.00467 | 0.831 | `BenchmarkNotContains` | | `__or__` | 0.00415 | 0.01369 | 3.29758 | `BenchmarkOr` | | `pop` | 0.0041 | 0.0086 | 2.09803 | `BenchmarkPop` | | `remove` | 0.00446 | 0.00815 | 1.82816 | `BenchmarkRemove` | | `__sub__` | 0.00401 | 0.01284 | 3.19807 | `BenchmarkSub` | | `symmetric_difference` | 0.00511 | 0.0469 | 9.17588 | `BenchmarkSymmetricDifference` | | `symmetric_difference_update` | 0.00411 | 0.0446 | 10.84698 | `BenchmarkSymmetricDifferenceUpdate` | | `union` | 0.00411 | 0.01384 | 3.37077 | `BenchmarkUnion` | | `update` | 0.00535 | 0.01367 | 2.55739 | `BenchmarkUpdate` | | `__xor__` | 0.00669 | 0.05224 | 7.80446 | `BenchmarkXor` | approximate memory usage | subject | `builtin` | `sqlitecollections` | ratio | class | | :------ | --------: | ------------------: | ----: | :---- | | `add (existing item)` | 0.0 | 0.0 | 1.0 | `BenchmarkAddExistingItem` | | `add (new item)` | 0.0 | 0.0 | 1.0 | `BenchmarkAddNewItem` | | `__and__` | 0.0 | 0.0 | 1.0 | `BenchmarkAnd` | | `clear` | 0.0 | 0.0 | 1.0 | `BenchmarkClear` | | `__contains__` | 0.0 | 0.0 | 1.0 | `BenchmarkContains` | | `copy` | 0.0 | 0.0 | 1.0 | `BenchmarkCopy` | | `difference` | 0.0 | 0.0 | 1.0 | `BenchmarkDifference` | | `discard` | 0.0 | 0.0 | 1.0 | `BenchmarkDiscard` | | `discard (no changes)` | 0.0 | 0.0 | 1.0 | `BenchmarkDiscardNoChanges` | | `__ge__` | 0.0 | 0.0 | 1.0 | `BenchmarkGe` | | `__ge__` (not greater than or equals to) | 0.0 | 0.0 | 1.0 | `BenchmarkGeNot` | | `__gt__` | 0.0 | 0.0 | 1.0 | `BenchmarkGt` | | `__gt__` (not greater than) | 0.0 | 0.0 | 1.0 | `BenchmarkGtNot` | | `__iand__` | 0.0 | 0.0 | 1.0 | `BenchmarkIand` | | `__init__` | 0.0 | 0.0 | 1.0 | `BenchmarkInit` | | `intersection` | 0.0 | 0.0 | 1.0 | `BenchmarkIntersection` | | `intersection_update` | 0.0 | 0.0 | 1.0 | `BenchmarkIntersectionUpdate` | | `__ior__` | 0.0 | 0.0 | 1.0 | `BenchmarkIor` | | `isdisjoint` | 0.0 | 0.0 | 1.0 | `BenchmarkIsdisjoint` | | `isdisjoint` (not disjoint) | 0.0 | 0.0 | 1.0 | `BenchmarkIsdisjointNot` | | `issubset` | 0.0 | 0.0 | 1.0 | `BenchmarkIssubset` | | `issubset` (not subset) | 0.0 | 0.0 | 1.0 | `BenchmarkIssubsetNot` | | `issuperset` | 0.0 | 0.0 | 1.0 | `BenchmarkIssuperset` | | `issuperset` (not superset) | 0.0 | 0.0 | 1.0 | `BenchmarkIssupersetNot` | | `__ixor__` | 0.0 | 0.0 | 1.0 | `BenchmarkIxor` | | `__le__` | 0.0 | 0.0 | 1.0 | `BenchmarkLe` | | `__le__` (not less than or equals to) | 0.0 | 0.0 | 1.0 | `BenchmarkLeNot` | | `__len__` | 0.0 | 0.0 | 1.0 | `BenchmarkLen` | | `__lt__` | 0.0 | 0.0 | 1.0 | `BenchmarkLt` | | `__lt__` (not less than) | 0.0 | 0.0 | 1.0 | `BenchmarkLtNot` | | `__contains__` (unsuccessful search) | 0.0 | 0.0 | 1.0 | `BenchmarkNotContains` | | `__or__` | 0.0 | 0.0 | 1.0 | `BenchmarkOr` | | `pop` | 0.0 | 0.0 | 1.0 | `BenchmarkPop` | | `remove` | 0.0 | 0.0 | 1.0 | `BenchmarkRemove` | | `__sub__` | 0.0 | 0.0 | 1.0 | `BenchmarkSub` | | `symmetric_difference` | 0.0 | 0.0 | 1.0 | `BenchmarkSymmetricDifference` | | `symmetric_difference_update` | 0.0 | 0.0 | 1.0 | `BenchmarkSymmetricDifferenceUpdate` | | `union` | 0.0 | 0.0 | 1.0 | `BenchmarkUnion` | | `update` | 0.0 | 0.0 | 1.0 | `BenchmarkUpdate` | | `__xor__` | 0.0 | 0.0 | 1.0 | `BenchmarkXor` |","title":"Set"},{"location":"benchmark_results/py36/dict/","text":"timing | subject | `builtin` | `sqlitecollections` | ratio | class | | :------ | --------: | ------------------: | ----: | :---- | | `clear` | 0.00412 | 0.00671 | 1.62859 | `BenchmarkClear` | | `__contains__` | 0.00399 | 0.00411 | 1.03026 | `BenchmarkContains` | | `copy` | 0.00402 | 0.00937 | 2.3315 | `BenchmarkCopy` | | `__delitem__` | 0.0041 | 0.00708 | 1.72505 | `BenchmarkDelitem` | | `get` | 0.00396 | 0.00417 | 1.05065 | `BenchmarkGet` | | `get (unsuccessful search)` | 0.00403 | 0.00412 | 1.02372 | `BenchmarkGetDefault` | | `__getitem__` | 0.00405 | 0.00414 | 1.02198 | `BenchmarkGetitem` | | `__init__` | 0.00403 | 0.04547 | 11.2817 | `BenchmarkInit` | | `items` | 0.0045 | 0.01225 | 2.72271 | `BenchmarkItems` | | `__iter__` | 0.00405 | 0.00829 | 2.04953 | `BenchmarkIter` | | `keys` | 0.004 | 0.00857 | 2.14131 | `BenchmarkKeys` | | `__len__` | 0.00399 | 0.004 | 1.00216 | `BenchmarkLen` | | `__contains__` (unsuccessful search) | 0.00409 | 0.00416 | 1.01708 | `BenchmarkNotContains` | | `pop` | 0.00402 | 0.00717 | 1.78134 | `BenchmarkPop` | | `pop (unsuccessful search)` | 0.00401 | 0.0057 | 1.42383 | `BenchmarkPopDefault` | | `popitem` | 0.00409 | 0.00746 | 1.82353 | `BenchmarkPopitem` | | `setdefault` | 0.00404 | 0.00578 | 1.42996 | `BenchmarkSetdefault` | | `setdefault (unsuccessful search)` | 0.00409 | 0.00596 | 1.45831 | `BenchmarkSetdefaultAddItem` | | `__setitem__` (add new item) | 0.00403 | 0.00722 | 1.79273 | `BenchmarkSetitemAddNewItem` | | `__setitem__` (replace) | 0.00404 | 0.00704 | 1.74117 | `BenchmarkSetitemReplace` | | `update` | 0.00405 | 0.00745 | 1.84032 | `BenchmarkUpdate` | | `update` (many) | 0.00489 | 0.59542 | 121.80987 | `BenchmarkUpdateMany` | | `values` | 0.00399 | 0.00812 | 2.03781 | `BenchmarkValues` | approximate memory usage | subject | `builtin` | `sqlitecollections` | ratio | class | | :------ | --------: | ------------------: | ----: | :---- | | `clear` | 0.0 | 0.0 | 1.0 | `BenchmarkClear` | | `__contains__` | 0.0 | 0.0 | 1.0 | `BenchmarkContains` | | `copy` | 0.01953 | 0.0 | 0.0 | `BenchmarkCopy` | | `__delitem__` | 0.0 | 0.0 | 1.0 | `BenchmarkDelitem` | | `get` | 0.0 | 0.0 | 1.0 | `BenchmarkGet` | | `get (unsuccessful search)` | 0.0 | 0.0 | 1.0 | `BenchmarkGetDefault` | | `__getitem__` | 0.0 | 0.0 | 1.0 | `BenchmarkGetitem` | | `__init__` | 0.00391 | 0.0 | 0.0 | `BenchmarkInit` | | `items` | 0.23438 | 0.40234 | 1.71667 | `BenchmarkItems` | | `__iter__` | 0.0 | 0.0 | 1.0 | `BenchmarkIter` | | `keys` | 0.0 | 0.0 | 1.0 | `BenchmarkKeys` | | `__len__` | 0.0 | 0.0 | 1.0 | `BenchmarkLen` | | `__contains__` (unsuccessful search) | 0.0 | 0.0 | 1.0 | `BenchmarkNotContains` | | `pop` | 0.0 | 0.0 | 1.0 | `BenchmarkPop` | | `pop (unsuccessful search)` | 0.0 | 0.0 | 1.0 | `BenchmarkPopDefault` | | `popitem` | 0.0 | 0.0 | 1.0 | `BenchmarkPopitem` | | `setdefault` | 0.0 | 0.0 | 1.0 | `BenchmarkSetdefault` | | `setdefault (unsuccessful search)` | 0.0 | 0.0 | 1.0 | `BenchmarkSetdefaultAddItem` | | `__setitem__` (add new item) | 0.0 | 0.0 | 1.0 | `BenchmarkSetitemAddNewItem` | | `__setitem__` (replace) | 0.0 | 0.0 | 1.0 | `BenchmarkSetitemReplace` | | `update` | 0.0 | 0.0 | 1.0 | `BenchmarkUpdate` | | `update` (many) | 0.15234 | 0.0 | 0.0 | `BenchmarkUpdateMany` | | `values` | 0.03125 | 0.0 | 0.0 | `BenchmarkValues` |","title":"Dict"},{"location":"benchmark_results/py36/list/","text":"timing | subject | `builtin` | `sqlitecollections` | ratio | class | | :------ | --------: | ------------------: | ----: | :---- | | `__add__` | 0.00396 | 0.01033 | 2.6052 | `BenchmarkAdd` | | `append` | 0.00409 | 0.0068 | 1.66341 | `BenchmarkAppend` | | `clear` | 0.004 | 0.00664 | 1.65947 | `BenchmarkClear` | | `__contains__` | 0.00398 | 0.00398 | 1.00097 | `BenchmarkContains` | | `copy` | 0.00402 | 0.00922 | 2.29498 | `BenchmarkCopy` | | `count` | 0.00406 | 0.00402 | 0.99087 | `BenchmarkCount` | | `__init__` | 0.004 | 0.02112 | 5.27703 | `BenchmarkCreateWithInitialData` | | `__delitem__` | 0.00406 | 0.08346 | 20.55635 | `BenchmarkDelitem` | | `__delitem__` (slice) | 0.00395 | 0.1596 | 40.42253 | `BenchmarkDelitemSlice` | | `__delitem__` (slice with skip) | 0.00403 | 0.15857 | 39.36555 | `BenchmarkDelitemSliceSkip` | | `extend` | 0.00402 | 0.00698 | 1.7336 | `BenchmarkExtend` | | `__getitem__` | 0.00406 | 0.00397 | 0.97683 | `BenchmarkGetitem` | | `__getitem__` (slice) | 0.00396 | 0.09086 | 22.95061 | `BenchmarkGetitemSlice` | | `__getitem__` (slice with skip) | 0.00401 | 0.01287 | 3.20715 | `BenchmarkGetitemSliceSkip` | | `__iadd__` | 0.00403 | 0.0068 | 1.68781 | `BenchmarkIadd` | | `__imult__` | 0.004 | 0.24211 | 60.46298 | `BenchmarkImult` | | `index` | 0.004 | 0.00425 | 1.0615 | `BenchmarkIndex` | | `index` (unsuccessful search) | 0.00394 | 0.00427 | 1.08338 | `BenchmarkIndexUnsuccessfulSearch` | | `insert` | 0.00405 | 0.15714 | 38.75334 | `BenchmarkInsert` | | `__len__` | 0.00406 | 0.00398 | 0.97982 | `BenchmarkLen` | | `__mult__` | 0.00404 | 0.24622 | 60.88648 | `BenchmarkMult` | | `__contains__` (unsuccessful search) | 0.00404 | 0.00408 | 1.01128 | `BenchmarkNotContains` | | `pop` | 0.00402 | 0.08467 | 21.07215 | `BenchmarkPop` | | `remove` | 0.00401 | 0.1183 | 29.51113 | `BenchmarkRemove` | | `__setitem__` | 0.00407 | 0.00694 | 1.70362 | `BenchmarkSetitem` | | `__setitem__` (slice) | 0.00407 | 0.16273 | 39.93758 | `BenchmarkSetitemSlice` | | `__setitem__` (slice with skip) | 0.00397 | 0.016 | 4.03089 | `BenchmarkSetitemSliceSkip` | | `sort` | 0.00409 | 0.08996 | 21.97232 | `BenchmarkSort` | approximate memory usage | subject | `builtin` | `sqlitecollections` | ratio | class | | :------ | --------: | ------------------: | ----: | :---- | | `__add__` | 0.0 | 0.00391 | inf | `BenchmarkAdd` | | `append` | 0.0 | 0.00391 | inf | `BenchmarkAppend` | | `clear` | 0.0 | 0.0 | 1.0 | `BenchmarkClear` | | `__contains__` | 0.0 | 0.0 | 1.0 | `BenchmarkContains` | | `copy` | 0.0 | 0.0 | 1.0 | `BenchmarkCopy` | | `count` | 0.0 | 0.0 | 1.0 | `BenchmarkCount` | | `__init__` | 0.0 | 0.0 | 1.0 | `BenchmarkCreateWithInitialData` | | `__delitem__` | 0.0 | 0.0 | 1.0 | `BenchmarkDelitem` | | `__delitem__` (slice) | 0.0 | 0.00391 | inf | `BenchmarkDelitemSlice` | | `__delitem__` (slice with skip) | 0.0 | 0.0 | 1.0 | `BenchmarkDelitemSliceSkip` | | `extend` | 0.0 | 0.0 | 1.0 | `BenchmarkExtend` | | `__getitem__` | 0.0 | 0.0 | 1.0 | `BenchmarkGetitem` | | `__getitem__` (slice) | 0.0 | 0.00391 | inf | `BenchmarkGetitemSlice` | | `__getitem__` (slice with skip) | 0.0 | 0.00391 | inf | `BenchmarkGetitemSliceSkip` | | `__iadd__` | 0.0 | 0.0 | 1.0 | `BenchmarkIadd` | | `__imult__` | 0.0 | 0.0 | 1.0 | `BenchmarkImult` | | `index` | 0.0 | 0.0 | 1.0 | `BenchmarkIndex` | | `index` (unsuccessful search) | 0.0 | 0.0 | 1.0 | `BenchmarkIndexUnsuccessfulSearch` | | `insert` | 0.0 | 0.0 | 1.0 | `BenchmarkInsert` | | `__len__` | 0.0 | 0.0 | 1.0 | `BenchmarkLen` | | `__mult__` | 0.0 | 0.0 | 1.0 | `BenchmarkMult` | | `__contains__` (unsuccessful search) | 0.0 | 0.0 | 1.0 | `BenchmarkNotContains` | | `pop` | 0.0 | 0.0 | 1.0 | `BenchmarkPop` | | `remove` | 0.0 | 0.0 | 1.0 | `BenchmarkRemove` | | `__setitem__` | 0.0 | 0.0 | 1.0 | `BenchmarkSetitem` | | `__setitem__` (slice) | 0.0 | 0.00391 | inf | `BenchmarkSetitemSlice` | | `__setitem__` (slice with skip) | 0.0 | 0.0 | 1.0 | `BenchmarkSetitemSliceSkip` | | `sort` | 0.0 | 0.83203 | inf | `BenchmarkSort` |","title":"List"},{"location":"benchmark_results/py36/set/","text":"timing | subject | `builtin` | `sqlitecollections` | ratio | class | | :------ | --------: | ------------------: | ----: | :---- | | `add (existing item)` | 0.00382 | 0.00525 | 1.3735 | `BenchmarkAddExistingItem` | | `add (new item)` | 0.0039 | 0.00639 | 1.63672 | `BenchmarkAddNewItem` | | `__and__` | 0.00385 | 0.0107 | 2.78094 | `BenchmarkAnd` | | `clear` | 0.00387 | 0.00873 | 2.25742 | `BenchmarkClear` | | `__contains__` | 0.00396 | 0.0039 | 0.98539 | `BenchmarkContains` | | `copy` | 0.00392 | 0.0085 | 2.17034 | `BenchmarkCopy` | | `difference` | 0.00426 | 0.00847 | 1.99015 | `BenchmarkDifference` | | `discard` | 0.0039 | 0.00636 | 1.63163 | `BenchmarkDiscard` | | `discard (no changes)` | 0.00391 | 0.00536 | 1.37178 | `BenchmarkDiscardNoChanges` | | `__ge__` | 0.00397 | 0.0039 | 0.98227 | `BenchmarkGe` | | `__ge__` (not greater than or equals to) | 0.00391 | 0.00497 | 1.26954 | `BenchmarkGeNot` | | `__gt__` | 0.0039 | 0.0066 | 1.69319 | `BenchmarkGt` | | `__gt__` (not greater than) | 0.00391 | 0.03451 | 8.8274 | `BenchmarkGtNot` | | `__iand__` | 0.00392 | 0.00858 | 2.1895 | `BenchmarkIand` | | `__init__` | 0.00396 | 0.01683 | 4.25439 | `BenchmarkInit` | | `intersection` | 0.00391 | 0.01059 | 2.71101 | `BenchmarkIntersection` | | `intersection_update` | 0.00402 | 0.00843 | 2.09699 | `BenchmarkIntersectionUpdate` | | `__ior__` | 0.00392 | 0.0085 | 2.16649 | `BenchmarkIor` | | `isdisjoint` | 0.00387 | 0.00391 | 1.01046 | `BenchmarkIsdisjoint` | | `isdisjoint` (not disjoint) | 0.00394 | 0.00389 | 0.98548 | `BenchmarkIsdisjointNot` | | `issubset` | 0.00388 | 0.03072 | 7.91306 | `BenchmarkIssubset` | | `issubset` (not subset) | 0.00388 | 0.01106 | 2.84653 | `BenchmarkIssubsetNot` | | `issuperset` | 0.0039 | 0.02443 | 6.26912 | `BenchmarkIssuperset` | | `issuperset` (not superset) | 0.0039 | 0.00599 | 1.53369 | `BenchmarkIssupersetNot` | | `__ixor__` | 0.00387 | 0.04087 | 10.56293 | `BenchmarkIxor` | | `__le__` | 0.00395 | 0.00465 | 1.17892 | `BenchmarkLe` | | `__le__` (not less than or equals to) | 0.0039 | 0.00388 | 0.99422 | `BenchmarkLeNot` | | `__len__` | 0.00452 | 0.00389 | 0.86052 | `BenchmarkLen` | | `__lt__` | 0.0039 | 0.00481 | 1.23234 | `BenchmarkLt` | | `__lt__` (not less than) | 0.00392 | 0.00387 | 0.98573 | `BenchmarkLtNot` | | `__contains__` (unsuccessful search) | 0.00397 | 0.00389 | 0.98113 | `BenchmarkNotContains` | | `__or__` | 0.00396 | 0.01189 | 3.00474 | `BenchmarkOr` | | `pop` | 0.00393 | 0.0064 | 1.62668 | `BenchmarkPop` | | `remove` | 0.0039 | 0.00639 | 1.6389 | `BenchmarkRemove` | | `__sub__` | 0.00391 | 0.00856 | 2.18655 | `BenchmarkSub` | | `symmetric_difference` | 0.00401 | 0.04291 | 10.70388 | `BenchmarkSymmetricDifference` | | `symmetric_difference_update` | 0.00389 | 0.04084 | 10.49569 | `BenchmarkSymmetricDifferenceUpdate` | | `union` | 0.00391 | 0.0115 | 2.94215 | `BenchmarkUnion` | | `update` | 0.00394 | 0.0082 | 2.08193 | `BenchmarkUpdate` | | `__xor__` | 0.00393 | 0.04285 | 10.90012 | `BenchmarkXor` | approximate memory usage | subject | `builtin` | `sqlitecollections` | ratio | class | | :------ | --------: | ------------------: | ----: | :---- | | `add (existing item)` | 0.0 | 0.0 | 1.0 | `BenchmarkAddExistingItem` | | `add (new item)` | 0.0 | 0.0 | 1.0 | `BenchmarkAddNewItem` | | `__and__` | 0.0 | 0.00391 | inf | `BenchmarkAnd` | | `clear` | 0.0 | 0.0 | 1.0 | `BenchmarkClear` | | `__contains__` | 0.0 | 0.0 | 1.0 | `BenchmarkContains` | | `copy` | 0.0 | 0.0 | 1.0 | `BenchmarkCopy` | | `difference` | 0.0 | 0.0 | 1.0 | `BenchmarkDifference` | | `discard` | 0.0 | 0.0 | 1.0 | `BenchmarkDiscard` | | `discard (no changes)` | 0.0 | 0.0 | 1.0 | `BenchmarkDiscardNoChanges` | | `__ge__` | 0.0 | 0.0 | 1.0 | `BenchmarkGe` | | `__ge__` (not greater than or equals to) | 0.0 | 0.0 | 1.0 | `BenchmarkGeNot` | | `__gt__` | 0.0 | 0.0 | 1.0 | `BenchmarkGt` | | `__gt__` (not greater than) | 0.0 | 0.0 | 1.0 | `BenchmarkGtNot` | | `__iand__` | 0.0 | 0.0 | 1.0 | `BenchmarkIand` | | `__init__` | 0.0 | 0.01172 | inf | `BenchmarkInit` | | `intersection` | 0.0 | 0.0 | 1.0 | `BenchmarkIntersection` | | `intersection_update` | 0.0 | 0.0 | 1.0 | `BenchmarkIntersectionUpdate` | | `__ior__` | 0.0 | 0.0 | 1.0 | `BenchmarkIor` | | `isdisjoint` | 0.0 | 0.0 | 1.0 | `BenchmarkIsdisjoint` | | `isdisjoint` (not disjoint) | 0.0 | 0.0 | 1.0 | `BenchmarkIsdisjointNot` | | `issubset` | 0.0 | 0.0 | 1.0 | `BenchmarkIssubset` | | `issubset` (not subset) | 0.0 | 0.0 | 1.0 | `BenchmarkIssubsetNot` | | `issuperset` | 0.0 | 0.0 | 1.0 | `BenchmarkIssuperset` | | `issuperset` (not superset) | 0.0 | 0.0 | 1.0 | `BenchmarkIssupersetNot` | | `__ixor__` | 0.0 | 0.0 | 1.0 | `BenchmarkIxor` | | `__le__` | 0.0 | 0.0 | 1.0 | `BenchmarkLe` | | `__le__` (not less than or equals to) | 0.0 | 0.0 | 1.0 | `BenchmarkLeNot` | | `__len__` | 0.0 | 0.0 | 1.0 | `BenchmarkLen` | | `__lt__` | 0.0 | 0.0 | 1.0 | `BenchmarkLt` | | `__lt__` (not less than) | 0.0 | 0.0 | 1.0 | `BenchmarkLtNot` | | `__contains__` (unsuccessful search) | 0.0 | 0.0 | 1.0 | `BenchmarkNotContains` | | `__or__` | 0.0 | 0.0 | 1.0 | `BenchmarkOr` | | `pop` | 0.0 | 0.0 | 1.0 | `BenchmarkPop` | | `remove` | 0.0 | 0.0 | 1.0 | `BenchmarkRemove` | | `__sub__` | 0.0 | 0.0 | 1.0 | `BenchmarkSub` | | `symmetric_difference` | 0.0 | 0.0 | 1.0 | `BenchmarkSymmetricDifference` | | `symmetric_difference_update` | 0.0 | 0.0 | 1.0 | `BenchmarkSymmetricDifferenceUpdate` | | `union` | 0.0 | 0.0 | 1.0 | `BenchmarkUnion` | | `update` | 0.0 | 0.0 | 1.0 | `BenchmarkUpdate` | | `__xor__` | 0.0 | 0.0 | 1.0 | `BenchmarkXor` |","title":"Set"},{"location":"benchmark_results/py37/dict/","text":"timing | subject | `builtin` | `sqlitecollections` | ratio | class | | :------ | --------: | ------------------: | ----: | :---- | | `clear` | 0.00359 | 0.00619 | 1.72325 | `BenchmarkClear` | | `__contains__` | 0.00362 | 0.00369 | 1.02143 | `BenchmarkContains` | | `copy` | 0.0036 | 0.00843 | 2.33978 | `BenchmarkCopy` | | `__delitem__` | 0.00367 | 0.0063 | 1.71626 | `BenchmarkDelitem` | | `get` | 0.0036 | 0.0038 | 1.05522 | `BenchmarkGet` | | `get (unsuccessful search)` | 0.00369 | 0.00371 | 1.00629 | `BenchmarkGetDefault` | | `__getitem__` | 0.00364 | 0.00377 | 1.03664 | `BenchmarkGetitem` | | `__init__` | 0.00372 | 0.04475 | 12.02173 | `BenchmarkInit` | | `items` | 0.00412 | 0.01228 | 2.9832 | `BenchmarkItems` | | `__iter__` | 0.00365 | 0.00833 | 2.2848 | `BenchmarkIter` | | `keys` | 0.00363 | 0.0084 | 2.31561 | `BenchmarkKeys` | | `__len__` | 0.00359 | 0.00365 | 1.01587 | `BenchmarkLen` | | `__contains__` (unsuccessful search) | 0.00363 | 0.00378 | 1.03953 | `BenchmarkNotContains` | | `pop` | 0.00367 | 0.00653 | 1.77958 | `BenchmarkPop` | | `pop (unsuccessful search)` | 0.00369 | 0.00532 | 1.44335 | `BenchmarkPopDefault` | | `popitem` | 0.00363 | 0.0069 | 1.90065 | `BenchmarkPopitem` | | `setdefault` | 0.00369 | 0.00534 | 1.44781 | `BenchmarkSetdefault` | | `setdefault (unsuccessful search)` | 0.00369 | 0.00556 | 1.50836 | `BenchmarkSetdefaultAddItem` | | `__setitem__` (add new item) | 0.00366 | 0.00664 | 1.81553 | `BenchmarkSetitemAddNewItem` | | `__setitem__` (replace) | 0.00366 | 0.00635 | 1.73469 | `BenchmarkSetitemReplace` | | `update` | 0.00368 | 0.00673 | 1.82629 | `BenchmarkUpdate` | | `update` (many) | 0.00459 | 0.57533 | 125.28656 | `BenchmarkUpdateMany` | | `values` | 0.00365 | 0.00794 | 2.17424 | `BenchmarkValues` | approximate memory usage | subject | `builtin` | `sqlitecollections` | ratio | class | | :------ | --------: | ------------------: | ----: | :---- | | `clear` | 0.0 | 0.0 | 1.0 | `BenchmarkClear` | | `__contains__` | 0.0 | 0.0 | 1.0 | `BenchmarkContains` | | `copy` | 0.03125 | 0.0 | 0.0 | `BenchmarkCopy` | | `__delitem__` | 0.0 | 0.0 | 1.0 | `BenchmarkDelitem` | | `get` | 0.0 | 0.0 | 1.0 | `BenchmarkGet` | | `get (unsuccessful search)` | 0.0 | 0.0 | 1.0 | `BenchmarkGetDefault` | | `__getitem__` | 0.0 | 0.0 | 1.0 | `BenchmarkGetitem` | | `__init__` | 0.0 | 0.0 | 1.0 | `BenchmarkInit` | | `items` | 0.125 | 0.21094 | 1.6875 | `BenchmarkItems` | | `__iter__` | 0.0 | 0.0 | 1.0 | `BenchmarkIter` | | `keys` | 0.0 | 0.0 | 1.0 | `BenchmarkKeys` | | `__len__` | 0.0 | 0.0 | 1.0 | `BenchmarkLen` | | `__contains__` (unsuccessful search) | 0.0 | 0.0 | 1.0 | `BenchmarkNotContains` | | `pop` | 0.0 | 0.0 | 1.0 | `BenchmarkPop` | | `pop (unsuccessful search)` | 0.0 | 0.0 | 1.0 | `BenchmarkPopDefault` | | `popitem` | 0.0 | 0.0 | 1.0 | `BenchmarkPopitem` | | `setdefault` | 0.0 | 0.0 | 1.0 | `BenchmarkSetdefault` | | `setdefault (unsuccessful search)` | 0.0 | 0.0 | 1.0 | `BenchmarkSetdefaultAddItem` | | `__setitem__` (add new item) | 0.0 | 0.0 | 1.0 | `BenchmarkSetitemAddNewItem` | | `__setitem__` (replace) | 0.0 | 0.0 | 1.0 | `BenchmarkSetitemReplace` | | `update` | 0.0 | 0.0 | 1.0 | `BenchmarkUpdate` | | `update` (many) | 0.0 | 0.0 | 1.0 | `BenchmarkUpdateMany` | | `values` | 0.02734 | 0.0 | 0.0 | `BenchmarkValues` |","title":"Dict"},{"location":"benchmark_results/py37/list/","text":"timing | subject | `builtin` | `sqlitecollections` | ratio | class | | :------ | --------: | ------------------: | ----: | :---- | | `__add__` | 0.00364 | 0.0095 | 2.60746 | `BenchmarkAdd` | | `append` | 0.00376 | 0.00622 | 1.65724 | `BenchmarkAppend` | | `clear` | 0.00366 | 0.00603 | 1.64982 | `BenchmarkClear` | | `__contains__` | 0.0037 | 0.00364 | 0.98392 | `BenchmarkContains` | | `copy` | 0.00363 | 0.00851 | 2.34171 | `BenchmarkCopy` | | `count` | 0.0036 | 0.00372 | 1.03071 | `BenchmarkCount` | | `__init__` | 0.00371 | 0.02158 | 5.81409 | `BenchmarkCreateWithInitialData` | | `__delitem__` | 0.00371 | 0.08995 | 24.21396 | `BenchmarkDelitem` | | `__delitem__` (slice) | 0.00365 | 0.16553 | 45.31752 | `BenchmarkDelitemSlice` | | `__delitem__` (slice with skip) | 0.00366 | 0.16561 | 45.31047 | `BenchmarkDelitemSliceSkip` | | `extend` | 0.00369 | 0.00651 | 1.76249 | `BenchmarkExtend` | | `__getitem__` | 0.00364 | 0.00369 | 1.0135 | `BenchmarkGetitem` | | `__getitem__` (slice) | 0.0036 | 0.08892 | 24.69002 | `BenchmarkGetitemSlice` | | `__getitem__` (slice with skip) | 0.00361 | 0.01123 | 3.10685 | `BenchmarkGetitemSliceSkip` | | `__iadd__` | 0.00364 | 0.00625 | 1.71611 | `BenchmarkIadd` | | `__imult__` | 0.00364 | 0.23686 | 65.07135 | `BenchmarkImult` | | `index` | 0.00372 | 0.00391 | 1.04918 | `BenchmarkIndex` | | `index` (unsuccessful search) | 0.00361 | 0.00393 | 1.0889 | `BenchmarkIndexUnsuccessfulSearch` | | `insert` | 0.00366 | 0.15296 | 41.79737 | `BenchmarkInsert` | | `__len__` | 0.00382 | 0.00366 | 0.95888 | `BenchmarkLen` | | `__mult__` | 0.00368 | 0.23571 | 64.03943 | `BenchmarkMult` | | `__contains__` (unsuccessful search) | 0.00368 | 0.00375 | 1.01755 | `BenchmarkNotContains` | | `pop` | 0.00368 | 0.08233 | 22.39729 | `BenchmarkPop` | | `remove` | 0.00363 | 0.11364 | 31.34487 | `BenchmarkRemove` | | `__setitem__` | 0.00365 | 0.00639 | 1.75068 | `BenchmarkSetitem` | | `__setitem__` (slice) | 0.00362 | 0.15592 | 43.01418 | `BenchmarkSetitemSlice` | | `__setitem__` (slice with skip) | 0.00367 | 0.0149 | 4.06626 | `BenchmarkSetitemSliceSkip` | | `sort` | 0.00365 | 0.07973 | 21.83423 | `BenchmarkSort` | approximate memory usage | subject | `builtin` | `sqlitecollections` | ratio | class | | :------ | --------: | ------------------: | ----: | :---- | | `__add__` | 0.0 | 0.0 | 1.0 | `BenchmarkAdd` | | `append` | 0.0 | 0.0 | 1.0 | `BenchmarkAppend` | | `clear` | 0.0 | 0.0 | 1.0 | `BenchmarkClear` | | `__contains__` | 0.0 | 0.0 | 1.0 | `BenchmarkContains` | | `copy` | 0.0 | 0.0 | 1.0 | `BenchmarkCopy` | | `count` | 0.0 | 0.0 | 1.0 | `BenchmarkCount` | | `__init__` | 0.0 | 0.0 | 1.0 | `BenchmarkCreateWithInitialData` | | `__delitem__` | 0.0 | 0.0 | 1.0 | `BenchmarkDelitem` | | `__delitem__` (slice) | 0.0 | 0.0 | 1.0 | `BenchmarkDelitemSlice` | | `__delitem__` (slice with skip) | 0.0 | 0.0 | 1.0 | `BenchmarkDelitemSliceSkip` | | `extend` | 0.0 | 0.0 | 1.0 | `BenchmarkExtend` | | `__getitem__` | 0.0 | 0.0 | 1.0 | `BenchmarkGetitem` | | `__getitem__` (slice) | 0.0 | 0.0 | 1.0 | `BenchmarkGetitemSlice` | | `__getitem__` (slice with skip) | 0.0 | 0.0 | 1.0 | `BenchmarkGetitemSliceSkip` | | `__iadd__` | 0.0 | 0.0 | 1.0 | `BenchmarkIadd` | | `__imult__` | 0.0 | 0.0 | 1.0 | `BenchmarkImult` | | `index` | 0.0 | 0.0 | 1.0 | `BenchmarkIndex` | | `index` (unsuccessful search) | 0.0 | 0.0 | 1.0 | `BenchmarkIndexUnsuccessfulSearch` | | `insert` | 0.0 | 0.0 | 1.0 | `BenchmarkInsert` | | `__len__` | 0.0 | 0.0 | 1.0 | `BenchmarkLen` | | `__mult__` | 0.0 | 0.0 | 1.0 | `BenchmarkMult` | | `__contains__` (unsuccessful search) | 0.0 | 0.0 | 1.0 | `BenchmarkNotContains` | | `pop` | 0.0 | 0.0 | 1.0 | `BenchmarkPop` | | `remove` | 0.0 | 0.0 | 1.0 | `BenchmarkRemove` | | `__setitem__` | 0.0 | 0.0 | 1.0 | `BenchmarkSetitem` | | `__setitem__` (slice) | 0.0 | 0.0 | 1.0 | `BenchmarkSetitemSlice` | | `__setitem__` (slice with skip) | 0.0 | 0.0 | 1.0 | `BenchmarkSetitemSliceSkip` | | `sort` | 0.0 | 0.63281 | inf | `BenchmarkSort` |","title":"List"},{"location":"benchmark_results/py37/set/","text":"timing | subject | `builtin` | `sqlitecollections` | ratio | class | | :------ | --------: | ------------------: | ----: | :---- | | `add (existing item)` | 0.00349 | 0.00482 | 1.38192 | `BenchmarkAddExistingItem` | | `add (new item)` | 0.00357 | 0.00634 | 1.77708 | `BenchmarkAddNewItem` | | `__and__` | 0.00364 | 0.01024 | 2.81143 | `BenchmarkAnd` | | `clear` | 0.00355 | 0.00548 | 1.54153 | `BenchmarkClear` | | `__contains__` | 0.00359 | 0.00363 | 1.01192 | `BenchmarkContains` | | `copy` | 0.00368 | 0.011 | 2.99366 | `BenchmarkCopy` | | `difference` | 0.00356 | 0.00772 | 2.1691 | `BenchmarkDifference` | | `discard` | 0.0036 | 0.00609 | 1.69165 | `BenchmarkDiscard` | | `discard (no changes)` | 0.00361 | 0.00494 | 1.3695 | `BenchmarkDiscardNoChanges` | | `__ge__` | 0.00357 | 0.00357 | 1.00123 | `BenchmarkGe` | | `__ge__` (not greater than or equals to) | 0.00354 | 0.00372 | 1.04847 | `BenchmarkGeNot` | | `__gt__` | 0.0036 | 0.00611 | 1.69961 | `BenchmarkGt` | | `__gt__` (not greater than) | 0.00356 | 0.03183 | 8.94582 | `BenchmarkGtNot` | | `__iand__` | 0.00354 | 0.00815 | 2.2999 | `BenchmarkIand` | | `__init__` | 0.00357 | 0.01677 | 4.70033 | `BenchmarkInit` | | `intersection` | 0.00363 | 0.01033 | 2.84771 | `BenchmarkIntersection` | | `intersection_update` | 0.00359 | 0.00763 | 2.12628 | `BenchmarkIntersectionUpdate` | | `__ior__` | 0.0036 | 0.00798 | 2.21924 | `BenchmarkIor` | | `isdisjoint` | 0.00388 | 0.00361 | 0.93092 | `BenchmarkIsdisjoint` | | `isdisjoint` (not disjoint) | 0.00357 | 0.00358 | 1.00488 | `BenchmarkIsdisjointNot` | | `issubset` | 0.00357 | 0.02983 | 8.35876 | `BenchmarkIssubset` | | `issubset` (not subset) | 0.00356 | 0.01014 | 2.84533 | `BenchmarkIssubsetNot` | | `issuperset` | 0.00355 | 0.02412 | 6.78734 | `BenchmarkIssuperset` | | `issuperset` (not superset) | 0.00355 | 0.00371 | 1.04556 | `BenchmarkIssupersetNot` | | `__ixor__` | 0.00358 | 0.04023 | 11.23215 | `BenchmarkIxor` | | `__le__` | 0.00358 | 0.00449 | 1.25189 | `BenchmarkLe` | | `__le__` (not less than or equals to) | 0.00357 | 0.0036 | 1.00975 | `BenchmarkLeNot` | | `__len__` | 0.00389 | 0.00362 | 0.92954 | `BenchmarkLen` | | `__lt__` | 0.00356 | 0.00457 | 1.28179 | `BenchmarkLt` | | `__lt__` (not less than) | 0.00365 | 0.00358 | 0.98234 | `BenchmarkLtNot` | | `__contains__` (unsuccessful search) | 0.00359 | 0.00362 | 1.00892 | `BenchmarkNotContains` | | `__or__` | 0.00361 | 0.01142 | 3.16725 | `BenchmarkOr` | | `pop` | 0.00359 | 0.00578 | 1.60839 | `BenchmarkPop` | | `remove` | 0.0036 | 0.00576 | 1.60019 | `BenchmarkRemove` | | `__sub__` | 0.004 | 0.00784 | 1.95887 | `BenchmarkSub` | | `symmetric_difference` | 0.00357 | 0.04276 | 11.98336 | `BenchmarkSymmetricDifference` | | `symmetric_difference_update` | 0.00359 | 0.04027 | 11.22791 | `BenchmarkSymmetricDifferenceUpdate` | | `union` | 0.0036 | 0.01044 | 2.90125 | `BenchmarkUnion` | | `update` | 0.00356 | 0.00777 | 2.18288 | `BenchmarkUpdate` | | `__xor__` | 0.00359 | 0.043 | 11.99143 | `BenchmarkXor` | approximate memory usage | subject | `builtin` | `sqlitecollections` | ratio | class | | :------ | --------: | ------------------: | ----: | :---- | | `add (existing item)` | 0.0 | 0.0 | 1.0 | `BenchmarkAddExistingItem` | | `add (new item)` | 0.0 | 0.0 | 1.0 | `BenchmarkAddNewItem` | | `__and__` | 0.0 | 0.00391 | inf | `BenchmarkAnd` | | `clear` | 0.0 | 0.0 | 1.0 | `BenchmarkClear` | | `__contains__` | 0.0 | 0.0 | 1.0 | `BenchmarkContains` | | `copy` | 0.0 | 0.0 | 1.0 | `BenchmarkCopy` | | `difference` | 0.0 | 0.0 | 1.0 | `BenchmarkDifference` | | `discard` | 0.0 | 0.0 | 1.0 | `BenchmarkDiscard` | | `discard (no changes)` | 0.0 | 0.0 | 1.0 | `BenchmarkDiscardNoChanges` | | `__ge__` | 0.0 | 0.0 | 1.0 | `BenchmarkGe` | | `__ge__` (not greater than or equals to) | 0.0 | 0.0 | 1.0 | `BenchmarkGeNot` | | `__gt__` | 0.0 | 0.0 | 1.0 | `BenchmarkGt` | | `__gt__` (not greater than) | 0.0 | 0.0 | 1.0 | `BenchmarkGtNot` | | `__iand__` | 0.0 | 0.0 | 1.0 | `BenchmarkIand` | | `__init__` | 0.0 | 0.0 | 1.0 | `BenchmarkInit` | | `intersection` | 0.0 | 0.0 | 1.0 | `BenchmarkIntersection` | | `intersection_update` | 0.0 | 0.0 | 1.0 | `BenchmarkIntersectionUpdate` | | `__ior__` | 0.0 | 0.0 | 1.0 | `BenchmarkIor` | | `isdisjoint` | 0.0 | 0.0 | 1.0 | `BenchmarkIsdisjoint` | | `isdisjoint` (not disjoint) | 0.0 | 0.0 | 1.0 | `BenchmarkIsdisjointNot` | | `issubset` | 0.0 | 0.0 | 1.0 | `BenchmarkIssubset` | | `issubset` (not subset) | 0.0 | 0.0 | 1.0 | `BenchmarkIssubsetNot` | | `issuperset` | 0.0 | 0.0 | 1.0 | `BenchmarkIssuperset` | | `issuperset` (not superset) | 0.0 | 0.0 | 1.0 | `BenchmarkIssupersetNot` | | `__ixor__` | 0.0 | 0.0 | 1.0 | `BenchmarkIxor` | | `__le__` | 0.0 | 0.0 | 1.0 | `BenchmarkLe` | | `__le__` (not less than or equals to) | 0.0 | 0.0 | 1.0 | `BenchmarkLeNot` | | `__len__` | 0.0 | 0.0 | 1.0 | `BenchmarkLen` | | `__lt__` | 0.0 | 0.0 | 1.0 | `BenchmarkLt` | | `__lt__` (not less than) | 0.0 | 0.0 | 1.0 | `BenchmarkLtNot` | | `__contains__` (unsuccessful search) | 0.0 | 0.0 | 1.0 | `BenchmarkNotContains` | | `__or__` | 0.0 | 0.0 | 1.0 | `BenchmarkOr` | | `pop` | 0.0 | 0.0 | 1.0 | `BenchmarkPop` | | `remove` | 0.0 | 0.0 | 1.0 | `BenchmarkRemove` | | `__sub__` | 0.0 | 0.0 | 1.0 | `BenchmarkSub` | | `symmetric_difference` | 0.0 | 0.0 | 1.0 | `BenchmarkSymmetricDifference` | | `symmetric_difference_update` | 0.0 | 0.0 | 1.0 | `BenchmarkSymmetricDifferenceUpdate` | | `union` | 0.0 | 0.0 | 1.0 | `BenchmarkUnion` | | `update` | 0.0 | 0.0 | 1.0 | `BenchmarkUpdate` | | `__xor__` | 0.0 | 0.0 | 1.0 | `BenchmarkXor` |","title":"Set"},{"location":"benchmark_results/py38/dict/","text":"timing | subject | `builtin` | `sqlitecollections` | ratio | class | | :------ | --------: | ------------------: | ----: | :---- | | `clear` | 0.00351 | 0.00617 | 1.75982 | `BenchmarkClear` | | `__contains__` | 0.00351 | 0.00365 | 1.04052 | `BenchmarkContains` | | `copy` | 0.00352 | 0.00819 | 2.33016 | `BenchmarkCopy` | | `__delitem__` | 0.00366 | 0.0061 | 1.66758 | `BenchmarkDelitem` | | `get` | 0.00355 | 0.00375 | 1.05787 | `BenchmarkGet` | | `get (unsuccessful search)` | 0.00353 | 0.00366 | 1.03579 | `BenchmarkGetDefault` | | `__getitem__` | 0.00353 | 0.00376 | 1.06391 | `BenchmarkGetitem` | | `__init__` | 0.00376 | 0.03868 | 10.29149 | `BenchmarkInit` | | `items` | 0.00404 | 0.01042 | 2.58205 | `BenchmarkItems` | | `__iter__` | 0.0036 | 0.00742 | 2.0589 | `BenchmarkIter` | | `keys` | 0.00362 | 0.0074 | 2.0451 | `BenchmarkKeys` | | `__len__` | 0.00354 | 0.00359 | 1.01227 | `BenchmarkLen` | | `__contains__` (unsuccessful search) | 0.00353 | 0.0037 | 1.04867 | `BenchmarkNotContains` | | `pop` | 0.00361 | 0.00647 | 1.79207 | `BenchmarkPop` | | `pop (unsuccessful search)` | 0.00363 | 0.00537 | 1.48029 | `BenchmarkPopDefault` | | `popitem` | 0.00365 | 0.00719 | 1.97074 | `BenchmarkPopitem` | | `reversed` | 0.00362 | 0.00729 | 2.01651 | `BenchmarkReversed` | | `setdefault` | 0.00364 | 0.00539 | 1.48381 | `BenchmarkSetdefault` | | `setdefault (unsuccessful search)` | 0.00365 | 0.00566 | 1.54899 | `BenchmarkSetdefaultAddItem` | | `__setitem__` (add new item) | 0.00363 | 0.00706 | 1.9444 | `BenchmarkSetitemAddNewItem` | | `__setitem__` (replace) | 0.00363 | 0.00661 | 1.8242 | `BenchmarkSetitemReplace` | | `update` | 0.00367 | 0.00662 | 1.80409 | `BenchmarkUpdate` | | `update` (many) | 0.00458 | 0.56015 | 122.41949 | `BenchmarkUpdateMany` | | `values` | 0.00357 | 0.00696 | 1.94793 | `BenchmarkValues` | approximate memory usage | subject | `builtin` | `sqlitecollections` | ratio | class | | :------ | --------: | ------------------: | ----: | :---- | | `clear` | 0.0 | 0.0 | 1.0 | `BenchmarkClear` | | `__contains__` | 0.0 | 0.0 | 1.0 | `BenchmarkContains` | | `copy` | 0.03906 | 0.0 | 0.0 | `BenchmarkCopy` | | `__delitem__` | 0.0 | 0.0 | 1.0 | `BenchmarkDelitem` | | `get` | 0.0 | 0.0 | 1.0 | `BenchmarkGet` | | `get (unsuccessful search)` | 0.0 | 0.0 | 1.0 | `BenchmarkGetDefault` | | `__getitem__` | 0.0 | 0.0 | 1.0 | `BenchmarkGetitem` | | `__init__` | 0.0 | 0.05469 | inf | `BenchmarkInit` | | `items` | 0.125 | 0.31641 | 2.53125 | `BenchmarkItems` | | `__iter__` | 0.0 | 0.0 | 1.0 | `BenchmarkIter` | | `keys` | 0.0 | 0.0 | 1.0 | `BenchmarkKeys` | | `__len__` | 0.0 | 0.0 | 1.0 | `BenchmarkLen` | | `__contains__` (unsuccessful search) | 0.0 | 0.0 | 1.0 | `BenchmarkNotContains` | | `pop` | 0.0 | 0.0 | 1.0 | `BenchmarkPop` | | `pop (unsuccessful search)` | 0.0 | 0.0 | 1.0 | `BenchmarkPopDefault` | | `popitem` | 0.0 | 0.0 | 1.0 | `BenchmarkPopitem` | | `reversed` | 0.0 | 0.0 | 1.0 | `BenchmarkReversed` | | `setdefault` | 0.0 | 0.0 | 1.0 | `BenchmarkSetdefault` | | `setdefault (unsuccessful search)` | 0.0 | 0.0 | 1.0 | `BenchmarkSetdefaultAddItem` | | `__setitem__` (add new item) | 0.0 | 0.0 | 1.0 | `BenchmarkSetitemAddNewItem` | | `__setitem__` (replace) | 0.0 | 0.0 | 1.0 | `BenchmarkSetitemReplace` | | `update` | 0.0 | 0.0 | 1.0 | `BenchmarkUpdate` | | `update` (many) | 0.0 | 0.0 | 1.0 | `BenchmarkUpdateMany` | | `values` | 0.0 | 0.0 | 1.0 | `BenchmarkValues` |","title":"Dict"},{"location":"benchmark_results/py38/list/","text":"timing | subject | `builtin` | `sqlitecollections` | ratio | class | | :------ | --------: | ------------------: | ----: | :---- | | `__add__` | 0.00359 | 0.00977 | 2.72061 | `BenchmarkAdd` | | `append` | 0.00368 | 0.0068 | 1.84718 | `BenchmarkAppend` | | `clear` | 0.00359 | 0.00649 | 1.80792 | `BenchmarkClear` | | `__contains__` | 0.00356 | 0.00362 | 1.01722 | `BenchmarkContains` | | `copy` | 0.00364 | 0.00855 | 2.34635 | `BenchmarkCopy` | | `count` | 0.00359 | 0.0037 | 1.03014 | `BenchmarkCount` | | `__init__` | 0.00363 | 0.01962 | 5.39748 | `BenchmarkCreateWithInitialData` | | `__delitem__` | 0.00364 | 0.0795 | 21.83687 | `BenchmarkDelitem` | | `__delitem__` (slice) | 0.00362 | 0.15406 | 42.58048 | `BenchmarkDelitemSlice` | | `__delitem__` (slice with skip) | 0.00375 | 0.15357 | 40.99709 | `BenchmarkDelitemSliceSkip` | | `extend` | 0.00363 | 0.00653 | 1.79996 | `BenchmarkExtend` | | `__getitem__` | 0.00358 | 0.00363 | 1.01207 | `BenchmarkGetitem` | | `__getitem__` (slice) | 0.00363 | 0.08877 | 24.48007 | `BenchmarkGetitemSlice` | | `__getitem__` (slice with skip) | 0.00359 | 0.01204 | 3.34987 | `BenchmarkGetitemSliceSkip` | | `__iadd__` | 0.00362 | 0.00629 | 1.74085 | `BenchmarkIadd` | | `__imult__` | 0.00357 | 0.22953 | 64.24509 | `BenchmarkImult` | | `index` | 0.00361 | 0.0039 | 1.08127 | `BenchmarkIndex` | | `index` (unsuccessful search) | 0.00361 | 0.00397 | 1.10228 | `BenchmarkIndexUnsuccessfulSearch` | | `insert` | 0.00363 | 0.15121 | 41.63 | `BenchmarkInsert` | | `__len__` | 0.0036 | 0.00363 | 1.00765 | `BenchmarkLen` | | `__mult__` | 0.00359 | 0.24105 | 67.06885 | `BenchmarkMult` | | `__contains__` (unsuccessful search) | 0.00362 | 0.0038 | 1.04934 | `BenchmarkNotContains` | | `pop` | 0.00373 | 0.08065 | 21.64877 | `BenchmarkPop` | | `remove` | 0.00377 | 0.1196 | 31.72838 | `BenchmarkRemove` | | `__setitem__` | 0.00373 | 0.00705 | 1.89154 | `BenchmarkSetitem` | | `__setitem__` (slice) | 0.00373 | 0.15868 | 42.52852 | `BenchmarkSetitemSlice` | | `__setitem__` (slice with skip) | 0.00371 | 0.01519 | 4.09835 | `BenchmarkSetitemSliceSkip` | | `sort` | 0.00375 | 0.0787 | 20.98728 | `BenchmarkSort` | approximate memory usage | subject | `builtin` | `sqlitecollections` | ratio | class | | :------ | --------: | ------------------: | ----: | :---- | | `__add__` | 0.0 | 0.0 | 1.0 | `BenchmarkAdd` | | `append` | 0.0 | 0.0 | 1.0 | `BenchmarkAppend` | | `clear` | 0.0 | 0.0 | 1.0 | `BenchmarkClear` | | `__contains__` | 0.0 | 0.0 | 1.0 | `BenchmarkContains` | | `copy` | 0.0 | 0.0 | 1.0 | `BenchmarkCopy` | | `count` | 0.0 | 0.0 | 1.0 | `BenchmarkCount` | | `__init__` | 0.0 | 0.0 | 1.0 | `BenchmarkCreateWithInitialData` | | `__delitem__` | 0.0 | 0.0 | 1.0 | `BenchmarkDelitem` | | `__delitem__` (slice) | 0.0 | 0.0 | 1.0 | `BenchmarkDelitemSlice` | | `__delitem__` (slice with skip) | 0.0 | 0.0 | 1.0 | `BenchmarkDelitemSliceSkip` | | `extend` | 0.0 | 0.0 | 1.0 | `BenchmarkExtend` | | `__getitem__` | 0.0 | 0.0 | 1.0 | `BenchmarkGetitem` | | `__getitem__` (slice) | 0.0 | 0.0 | 1.0 | `BenchmarkGetitemSlice` | | `__getitem__` (slice with skip) | 0.0 | 0.0 | 1.0 | `BenchmarkGetitemSliceSkip` | | `__iadd__` | 0.0 | 0.0 | 1.0 | `BenchmarkIadd` | | `__imult__` | 0.0 | 0.0 | 1.0 | `BenchmarkImult` | | `index` | 0.0 | 0.0 | 1.0 | `BenchmarkIndex` | | `index` (unsuccessful search) | 0.0 | 0.0 | 1.0 | `BenchmarkIndexUnsuccessfulSearch` | | `insert` | 0.0 | 0.0 | 1.0 | `BenchmarkInsert` | | `__len__` | 0.0 | 0.0 | 1.0 | `BenchmarkLen` | | `__mult__` | 0.0 | 0.0 | 1.0 | `BenchmarkMult` | | `__contains__` (unsuccessful search) | 0.0 | 0.0 | 1.0 | `BenchmarkNotContains` | | `pop` | 0.0 | 0.0 | 1.0 | `BenchmarkPop` | | `remove` | 0.0 | 0.0 | 1.0 | `BenchmarkRemove` | | `__setitem__` | 0.0 | 0.0 | 1.0 | `BenchmarkSetitem` | | `__setitem__` (slice) | 0.0 | 0.0 | 1.0 | `BenchmarkSetitemSlice` | | `__setitem__` (slice with skip) | 0.0 | 0.0 | 1.0 | `BenchmarkSetitemSliceSkip` | | `sort` | 0.0 | 0.64062 | inf | `BenchmarkSort` |","title":"List"},{"location":"benchmark_results/py38/set/","text":"timing | subject | `builtin` | `sqlitecollections` | ratio | class | | :------ | --------: | ------------------: | ----: | :---- | | `add (existing item)` | 0.00348 | 0.00509 | 1.46045 | `BenchmarkAddExistingItem` | | `add (new item)` | 0.00356 | 0.00619 | 1.74027 | `BenchmarkAddNewItem` | | `__and__` | 0.00352 | 0.01052 | 2.99167 | `BenchmarkAnd` | | `clear` | 0.00351 | 0.00631 | 1.79946 | `BenchmarkClear` | | `__contains__` | 0.00349 | 0.00353 | 1.01068 | `BenchmarkContains` | | `copy` | 0.00348 | 0.00839 | 2.40974 | `BenchmarkCopy` | | `difference` | 0.00352 | 0.00871 | 2.47738 | `BenchmarkDifference` | | `discard` | 0.00351 | 0.00634 | 1.80732 | `BenchmarkDiscard` | | `discard (no changes)` | 0.00355 | 0.005 | 1.40896 | `BenchmarkDiscardNoChanges` | | `__ge__` | 0.00353 | 0.0035 | 0.99167 | `BenchmarkGe` | | `__ge__` (not greater than or equals to) | 0.00348 | 0.00357 | 1.02408 | `BenchmarkGeNot` | | `__gt__` | 0.00348 | 0.00642 | 1.84628 | `BenchmarkGt` | | `__gt__` (not greater than) | 0.00348 | 0.03057 | 8.77598 | `BenchmarkGtNot` | | `__iand__` | 0.00351 | 0.00801 | 2.28232 | `BenchmarkIand` | | `__init__` | 0.00346 | 0.01666 | 4.8134 | `BenchmarkInit` | | `intersection` | 0.00352 | 0.01071 | 3.04699 | `BenchmarkIntersection` | | `intersection_update` | 0.00383 | 0.00828 | 2.16129 | `BenchmarkIntersectionUpdate` | | `__ior__` | 0.00349 | 0.00769 | 2.20588 | `BenchmarkIor` | | `isdisjoint` | 0.00348 | 0.00351 | 1.00631 | `BenchmarkIsdisjoint` | | `isdisjoint` (not disjoint) | 0.00349 | 0.00353 | 1.01085 | `BenchmarkIsdisjointNot` | | `issubset` | 0.00351 | 0.05313 | 15.14064 | `BenchmarkIssubset` | | `issubset` (not subset) | 0.0035 | 0.01126 | 3.21344 | `BenchmarkIssubsetNot` | | `issuperset` | 0.00353 | 0.02272 | 6.44574 | `BenchmarkIssuperset` | | `issuperset` (not superset) | 0.00352 | 0.0036 | 1.02405 | `BenchmarkIssupersetNot` | | `__ixor__` | 0.00359 | 0.06614 | 18.44713 | `BenchmarkIxor` | | `__le__` | 0.00356 | 0.00433 | 1.21661 | `BenchmarkLe` | | `__le__` (not less than or equals to) | 0.00347 | 0.00365 | 1.05363 | `BenchmarkLeNot` | | `__len__` | 0.0035 | 0.00354 | 1.01087 | `BenchmarkLen` | | `__lt__` | 0.00349 | 0.00433 | 1.24017 | `BenchmarkLt` | | `__lt__` (not less than) | 0.00353 | 0.00353 | 0.9998 | `BenchmarkLtNot` | | `__contains__` (unsuccessful search) | 0.00352 | 0.00362 | 1.02939 | `BenchmarkNotContains` | | `__or__` | 0.00353 | 0.01109 | 3.14395 | `BenchmarkOr` | | `pop` | 0.00355 | 0.00625 | 1.76181 | `BenchmarkPop` | | `remove` | 0.00355 | 0.00641 | 1.80481 | `BenchmarkRemove` | | `__sub__` | 0.00353 | 0.00867 | 2.45352 | `BenchmarkSub` | | `symmetric_difference` | 0.00349 | 0.04085 | 11.69981 | `BenchmarkSymmetricDifference` | | `symmetric_difference_update` | 0.00353 | 0.03844 | 10.88649 | `BenchmarkSymmetricDifferenceUpdate` | | `union` | 0.00353 | 0.0111 | 3.14359 | `BenchmarkUnion` | | `update` | 0.00352 | 0.00809 | 2.29417 | `BenchmarkUpdate` | | `__xor__` | 0.00355 | 0.04073 | 11.47882 | `BenchmarkXor` | approximate memory usage | subject | `builtin` | `sqlitecollections` | ratio | class | | :------ | --------: | ------------------: | ----: | :---- | | `add (existing item)` | 0.0 | 0.0 | 1.0 | `BenchmarkAddExistingItem` | | `add (new item)` | 0.0 | 0.0 | 1.0 | `BenchmarkAddNewItem` | | `__and__` | 0.0 | 0.0 | 1.0 | `BenchmarkAnd` | | `clear` | 0.0 | 0.0 | 1.0 | `BenchmarkClear` | | `__contains__` | 0.0 | 0.0 | 1.0 | `BenchmarkContains` | | `copy` | 0.0 | 0.0 | 1.0 | `BenchmarkCopy` | | `difference` | 0.0 | 0.0 | 1.0 | `BenchmarkDifference` | | `discard` | 0.0 | 0.0 | 1.0 | `BenchmarkDiscard` | | `discard (no changes)` | 0.0 | 0.0 | 1.0 | `BenchmarkDiscardNoChanges` | | `__ge__` | 0.0 | 0.0 | 1.0 | `BenchmarkGe` | | `__ge__` (not greater than or equals to) | 0.0 | 0.0 | 1.0 | `BenchmarkGeNot` | | `__gt__` | 0.0 | 0.0 | 1.0 | `BenchmarkGt` | | `__gt__` (not greater than) | 0.0 | 0.0 | 1.0 | `BenchmarkGtNot` | | `__iand__` | 0.0 | 0.0 | 1.0 | `BenchmarkIand` | | `__init__` | 0.0 | 0.05078 | inf | `BenchmarkInit` | | `intersection` | 0.0 | 0.0 | 1.0 | `BenchmarkIntersection` | | `intersection_update` | 0.0 | 0.0 | 1.0 | `BenchmarkIntersectionUpdate` | | `__ior__` | 0.0 | 0.0 | 1.0 | `BenchmarkIor` | | `isdisjoint` | 0.0 | 0.0 | 1.0 | `BenchmarkIsdisjoint` | | `isdisjoint` (not disjoint) | 0.0 | 0.0 | 1.0 | `BenchmarkIsdisjointNot` | | `issubset` | 0.0 | 0.0 | 1.0 | `BenchmarkIssubset` | | `issubset` (not subset) | 0.0 | 0.0 | 1.0 | `BenchmarkIssubsetNot` | | `issuperset` | 0.0 | 0.0 | 1.0 | `BenchmarkIssuperset` | | `issuperset` (not superset) | 0.0 | 0.0 | 1.0 | `BenchmarkIssupersetNot` | | `__ixor__` | 0.0 | 0.0 | 1.0 | `BenchmarkIxor` | | `__le__` | 0.0 | 0.0 | 1.0 | `BenchmarkLe` | | `__le__` (not less than or equals to) | 0.0 | 0.0 | 1.0 | `BenchmarkLeNot` | | `__len__` | 0.0 | 0.0 | 1.0 | `BenchmarkLen` | | `__lt__` | 0.0 | 0.0 | 1.0 | `BenchmarkLt` | | `__lt__` (not less than) | 0.0 | 0.0 | 1.0 | `BenchmarkLtNot` | | `__contains__` (unsuccessful search) | 0.0 | 0.0 | 1.0 | `BenchmarkNotContains` | | `__or__` | 0.0 | 0.0 | 1.0 | `BenchmarkOr` | | `pop` | 0.0 | 0.0 | 1.0 | `BenchmarkPop` | | `remove` | 0.0 | 0.0 | 1.0 | `BenchmarkRemove` | | `__sub__` | 0.0 | 0.0 | 1.0 | `BenchmarkSub` | | `symmetric_difference` | 0.0 | 0.0 | 1.0 | `BenchmarkSymmetricDifference` | | `symmetric_difference_update` | 0.0 | 0.0 | 1.0 | `BenchmarkSymmetricDifferenceUpdate` | | `union` | 0.0 | 0.0 | 1.0 | `BenchmarkUnion` | | `update` | 0.0 | 0.0 | 1.0 | `BenchmarkUpdate` | | `__xor__` | 0.0 | 0.0 | 1.0 | `BenchmarkXor` |","title":"Set"},{"location":"benchmark_results/py39/dict/","text":"timing | subject | `builtin` | `sqlitecollections` | ratio | class | | :------ | --------: | ------------------: | ----: | :---- | | `clear` | 0.00431 | 0.00715 | 1.66101 | `BenchmarkClear` | | `__contains__` | 0.00398 | 0.00416 | 1.04624 | `BenchmarkContains` | | `copy` | 0.00404 | 0.00969 | 2.39822 | `BenchmarkCopy` | | `__delitem__` | 0.00406 | 0.00716 | 1.76413 | `BenchmarkDelitem` | | `get` | 0.00394 | 0.00417 | 1.05785 | `BenchmarkGet` | | `get (unsuccessful search)` | 0.00397 | 0.00413 | 1.03956 | `BenchmarkGetDefault` | | `__getitem__` | 0.00399 | 0.00417 | 1.04633 | `BenchmarkGetitem` | | `__init__` | 0.00426 | 0.03896 | 9.1404 | `BenchmarkInit` | | `__ior__` | 0.00405 | 0.00721 | 1.77973 | `BenchmarkIor` | | `__ior__` (many) | 0.00517 | 0.58933 | 113.94626 | `BenchmarkIorMany` | | `items` | 0.00456 | 0.01086 | 2.38459 | `BenchmarkItems` | | `__iter__` | 0.00401 | 0.00783 | 1.95041 | `BenchmarkIter` | | `keys` | 0.00408 | 0.00794 | 1.94403 | `BenchmarkKeys` | | `__len__` | 0.00397 | 0.00397 | 1.00155 | `BenchmarkLen` | | `__contains__` (unsuccessful search) | 0.00421 | 0.00421 | 0.99956 | `BenchmarkNotContains` | | `__or__` | 0.00406 | 0.01067 | 2.62761 | `BenchmarkOr` | | `__or__` (many) | 0.00564 | 0.5871 | 104.05662 | `BenchmarkOrMany` | | `pop` | 0.00408 | 0.00723 | 1.77247 | `BenchmarkPop` | | `pop (unsuccessful search)` | 0.00414 | 0.0062 | 1.49664 | `BenchmarkPopDefault` | | `popitem` | 0.00408 | 0.00786 | 1.92626 | `BenchmarkPopitem` | | `reversed` | 0.00401 | 0.00778 | 1.93982 | `BenchmarkReversed` | | `setdefault` | 0.0041 | 0.00588 | 1.43276 | `BenchmarkSetdefault` | | `setdefault (unsuccessful search)` | 0.00411 | 0.00612 | 1.49048 | `BenchmarkSetdefaultAddItem` | | `__setitem__` (add new item) | 0.00408 | 0.00725 | 1.77968 | `BenchmarkSetitemAddNewItem` | | `__setitem__` (replace) | 0.00406 | 0.00719 | 1.77243 | `BenchmarkSetitemReplace` | | `update` | 0.0041 | 0.0072 | 1.75569 | `BenchmarkUpdate` | | `update` (many) | 0.00509 | 0.58493 | 114.96278 | `BenchmarkUpdateMany` | | `values` | 0.00407 | 0.00762 | 1.87181 | `BenchmarkValues` | approximate memory usage | subject | `builtin` | `sqlitecollections` | ratio | class | | :------ | --------: | ------------------: | ----: | :---- | | `clear` | 0.0 | 0.0 | 1.0 | `BenchmarkClear` | | `__contains__` | 0.0 | 0.0 | 1.0 | `BenchmarkContains` | | `copy` | 0.0 | 0.0 | 1.0 | `BenchmarkCopy` | | `__delitem__` | 0.0 | 0.0 | 1.0 | `BenchmarkDelitem` | | `get` | 0.0 | 0.0 | 1.0 | `BenchmarkGet` | | `get (unsuccessful search)` | 0.0 | 0.0 | 1.0 | `BenchmarkGetDefault` | | `__getitem__` | 0.0 | 0.0 | 1.0 | `BenchmarkGetitem` | | `__init__` | 0.0 | 0.0 | 1.0 | `BenchmarkInit` | | `__ior__` | 0.0 | 0.0 | 1.0 | `BenchmarkIor` | | `__ior__` (many) | 0.19141 | 0.0 | 0.0 | `BenchmarkIorMany` | | `items` | 0.0 | 0.23438 | inf | `BenchmarkItems` | | `__iter__` | 0.0 | 0.0 | 1.0 | `BenchmarkIter` | | `keys` | 0.0 | 0.0 | 1.0 | `BenchmarkKeys` | | `__len__` | 0.0 | 0.0 | 1.0 | `BenchmarkLen` | | `__contains__` (unsuccessful search) | 0.0 | 0.0 | 1.0 | `BenchmarkNotContains` | | `__or__` | 0.0 | 0.0 | 1.0 | `BenchmarkOr` | | `__or__` (many) | 0.0 | 0.0 | 1.0 | `BenchmarkOrMany` | | `pop` | 0.0 | 0.0 | 1.0 | `BenchmarkPop` | | `pop (unsuccessful search)` | 0.0 | 0.0 | 1.0 | `BenchmarkPopDefault` | | `popitem` | 0.0 | 0.0 | 1.0 | `BenchmarkPopitem` | | `reversed` | 0.0 | 0.0 | 1.0 | `BenchmarkReversed` | | `setdefault` | 0.0 | 0.0 | 1.0 | `BenchmarkSetdefault` | | `setdefault (unsuccessful search)` | 0.0 | 0.0 | 1.0 | `BenchmarkSetdefaultAddItem` | | `__setitem__` (add new item) | 0.0 | 0.0 | 1.0 | `BenchmarkSetitemAddNewItem` | | `__setitem__` (replace) | 0.0 | 0.0 | 1.0 | `BenchmarkSetitemReplace` | | `update` | 0.0 | 0.0 | 1.0 | `BenchmarkUpdate` | | `update` (many) | 0.0 | 0.0 | 1.0 | `BenchmarkUpdateMany` | | `values` | 0.0 | 0.0 | 1.0 | `BenchmarkValues` |","title":"Dict"},{"location":"benchmark_results/py39/list/","text":"timing | subject | `builtin` | `sqlitecollections` | ratio | class | | :------ | --------: | ------------------: | ----: | :---- | | `__add__` | 0.00406 | 0.01041 | 2.56556 | `BenchmarkAdd` | | `append` | 0.00412 | 0.0069 | 1.67553 | `BenchmarkAppend` | | `clear` | 0.0041 | 0.00686 | 1.67215 | `BenchmarkClear` | | `__contains__` | 0.00398 | 0.00405 | 1.01658 | `BenchmarkContains` | | `copy` | 0.00403 | 0.00922 | 2.28679 | `BenchmarkCopy` | | `count` | 0.00407 | 0.0041 | 1.00885 | `BenchmarkCount` | | `__init__` | 0.00402 | 0.01979 | 4.91969 | `BenchmarkCreateWithInitialData` | | `__delitem__` | 0.0041 | 0.08376 | 20.44996 | `BenchmarkDelitem` | | `__delitem__` (slice) | 0.00407 | 0.15862 | 38.95296 | `BenchmarkDelitemSlice` | | `__delitem__` (slice with skip) | 0.00405 | 0.15813 | 39.08118 | `BenchmarkDelitemSliceSkip` | | `extend` | 0.00405 | 0.00706 | 1.74148 | `BenchmarkExtend` | | `__getitem__` | 0.00402 | 0.00409 | 1.01947 | `BenchmarkGetitem` | | `__getitem__` (slice) | 0.00405 | 0.09061 | 22.35812 | `BenchmarkGetitemSlice` | | `__getitem__` (slice with skip) | 0.00401 | 0.01241 | 3.09711 | `BenchmarkGetitemSliceSkip` | | `__iadd__` | 0.00407 | 0.00717 | 1.76085 | `BenchmarkIadd` | | `__imult__` | 0.00402 | 0.23777 | 59.18968 | `BenchmarkImult` | | `index` | 0.00401 | 0.00437 | 1.08953 | `BenchmarkIndex` | | `index` (unsuccessful search) | 0.00402 | 0.0044 | 1.09484 | `BenchmarkIndexUnsuccessfulSearch` | | `insert` | 0.00408 | 0.16022 | 39.31743 | `BenchmarkInsert` | | `__len__` | 0.00395 | 0.00416 | 1.0533 | `BenchmarkLen` | | `__mult__` | 0.00403 | 0.2431 | 60.33468 | `BenchmarkMult` | | `__contains__` (unsuccessful search) | 0.004 | 0.00416 | 1.04133 | `BenchmarkNotContains` | | `pop` | 0.0041 | 0.08351 | 20.3768 | `BenchmarkPop` | | `remove` | 0.00401 | 0.11755 | 29.30453 | `BenchmarkRemove` | | `__setitem__` | 0.00407 | 0.00688 | 1.6929 | `BenchmarkSetitem` | | `__setitem__` (slice) | 0.00401 | 0.16161 | 40.28904 | `BenchmarkSetitemSlice` | | `__setitem__` (slice with skip) | 0.00398 | 0.01596 | 4.01567 | `BenchmarkSetitemSliceSkip` | | `sort` | 0.00402 | 0.08869 | 22.05676 | `BenchmarkSort` | approximate memory usage | subject | `builtin` | `sqlitecollections` | ratio | class | | :------ | --------: | ------------------: | ----: | :---- | | `__add__` | 0.0 | 0.0 | 1.0 | `BenchmarkAdd` | | `append` | 0.0 | 0.0 | 1.0 | `BenchmarkAppend` | | `clear` | 0.0 | 0.0 | 1.0 | `BenchmarkClear` | | `__contains__` | 0.0 | 0.0 | 1.0 | `BenchmarkContains` | | `copy` | 0.0 | 0.0 | 1.0 | `BenchmarkCopy` | | `count` | 0.0 | 0.0 | 1.0 | `BenchmarkCount` | | `__init__` | 0.0 | 0.0 | 1.0 | `BenchmarkCreateWithInitialData` | | `__delitem__` | 0.0 | 0.0 | 1.0 | `BenchmarkDelitem` | | `__delitem__` (slice) | 0.0 | 0.0 | 1.0 | `BenchmarkDelitemSlice` | | `__delitem__` (slice with skip) | 0.0 | 0.0 | 1.0 | `BenchmarkDelitemSliceSkip` | | `extend` | 0.0 | 0.0 | 1.0 | `BenchmarkExtend` | | `__getitem__` | 0.0 | 0.0 | 1.0 | `BenchmarkGetitem` | | `__getitem__` (slice) | 0.0 | 0.0 | 1.0 | `BenchmarkGetitemSlice` | | `__getitem__` (slice with skip) | 0.0 | 0.0 | 1.0 | `BenchmarkGetitemSliceSkip` | | `__iadd__` | 0.0 | 0.0 | 1.0 | `BenchmarkIadd` | | `__imult__` | 0.0 | 0.0 | 1.0 | `BenchmarkImult` | | `index` | 0.0 | 0.0 | 1.0 | `BenchmarkIndex` | | `index` (unsuccessful search) | 0.0 | 0.0 | 1.0 | `BenchmarkIndexUnsuccessfulSearch` | | `insert` | 0.0 | 0.0 | 1.0 | `BenchmarkInsert` | | `__len__` | 0.0 | 0.0 | 1.0 | `BenchmarkLen` | | `__mult__` | 0.0 | 0.0 | 1.0 | `BenchmarkMult` | | `__contains__` (unsuccessful search) | 0.0 | 0.0 | 1.0 | `BenchmarkNotContains` | | `pop` | 0.0 | 0.0 | 1.0 | `BenchmarkPop` | | `remove` | 0.0 | 0.0 | 1.0 | `BenchmarkRemove` | | `__setitem__` | 0.0 | 0.0 | 1.0 | `BenchmarkSetitem` | | `__setitem__` (slice) | 0.0 | 0.0 | 1.0 | `BenchmarkSetitemSlice` | | `__setitem__` (slice with skip) | 0.0 | 0.0 | 1.0 | `BenchmarkSetitemSliceSkip` | | `sort` | 0.0 | 0.67969 | inf | `BenchmarkSort` |","title":"List"},{"location":"benchmark_results/py39/set/","text":"timing | subject | `builtin` | `sqlitecollections` | ratio | class | | :------ | --------: | ------------------: | ----: | :---- | | `add (existing item)` | 0.00388 | 0.00541 | 1.39219 | `BenchmarkAddExistingItem` | | `add (new item)` | 0.00396 | 0.00668 | 1.68884 | `BenchmarkAddNewItem` | | `__and__` | 0.00391 | 0.01084 | 2.77027 | `BenchmarkAnd` | | `clear` | 0.00396 | 0.00646 | 1.62981 | `BenchmarkClear` | | `__contains__` | 0.00397 | 0.00405 | 1.02038 | `BenchmarkContains` | | `copy` | 0.00399 | 0.00835 | 2.09484 | `BenchmarkCopy` | | `difference` | 0.00397 | 0.00866 | 2.18273 | `BenchmarkDifference` | | `discard` | 0.00401 | 0.00675 | 1.68421 | `BenchmarkDiscard` | | `discard (no changes)` | 0.00399 | 0.00547 | 1.37259 | `BenchmarkDiscardNoChanges` | | `__ge__` | 0.00397 | 0.00395 | 0.99533 | `BenchmarkGe` | | `__ge__` (not greater than or equals to) | 0.00394 | 0.00433 | 1.09839 | `BenchmarkGeNot` | | `__gt__` | 0.00395 | 0.00681 | 1.72197 | `BenchmarkGt` | | `__gt__` (not greater than) | 0.00397 | 0.03225 | 8.11555 | `BenchmarkGtNot` | | `__iand__` | 0.00397 | 0.00841 | 2.11874 | `BenchmarkIand` | | `__init__` | 0.00402 | 0.01626 | 4.04579 | `BenchmarkInit` | | `intersection` | 0.004 | 0.01093 | 2.73556 | `BenchmarkIntersection` | | `intersection_update` | 0.00394 | 0.0085 | 2.15752 | `BenchmarkIntersectionUpdate` | | `__ior__` | 0.00398 | 0.00851 | 2.1355 | `BenchmarkIor` | | `isdisjoint` | 0.00401 | 0.00401 | 0.99828 | `BenchmarkIsdisjoint` | | `isdisjoint` (not disjoint) | 0.00396 | 0.00399 | 1.00596 | `BenchmarkIsdisjointNot` | | `issubset` | 0.00399 | 0.18415 | 46.10756 | `BenchmarkIssubset` | | `issubset` (not subset) | 0.00406 | 0.01134 | 2.79634 | `BenchmarkIssubsetNot` | | `issuperset` | 0.00398 | 0.02385 | 5.98757 | `BenchmarkIssuperset` | | `issuperset` (not superset) | 0.00399 | 0.00454 | 1.14019 | `BenchmarkIssupersetNot` | | `__ixor__` | 0.004 | 0.03876 | 9.70197 | `BenchmarkIxor` | | `__le__` | 0.00403 | 0.00468 | 1.16106 | `BenchmarkLe` | | `__le__` (not less than or equals to) | 0.00408 | 0.00398 | 0.97449 | `BenchmarkLeNot` | | `__len__` | 0.00395 | 0.00397 | 1.0046 | `BenchmarkLen` | | `__lt__` | 0.00426 | 0.00473 | 1.1107 | `BenchmarkLt` | | `__lt__` (not less than) | 0.00401 | 0.00396 | 0.9863 | `BenchmarkLtNot` | | `__contains__` (unsuccessful search) | 0.00403 | 0.00402 | 0.99712 | `BenchmarkNotContains` | | `__or__` | 0.00407 | 0.01145 | 2.8135 | `BenchmarkOr` | | `pop` | 0.004 | 0.00666 | 1.66442 | `BenchmarkPop` | | `remove` | 0.00398 | 0.00668 | 1.67866 | `BenchmarkRemove` | | `__sub__` | 0.00395 | 0.00866 | 2.19188 | `BenchmarkSub` | | `symmetric_difference` | 0.00398 | 0.04096 | 10.29295 | `BenchmarkSymmetricDifference` | | `symmetric_difference_update` | 0.00398 | 0.04019 | 10.08677 | `BenchmarkSymmetricDifferenceUpdate` | | `union` | 0.00396 | 0.01146 | 2.89159 | `BenchmarkUnion` | | `update` | 0.00403 | 0.00829 | 2.05549 | `BenchmarkUpdate` | | `__xor__` | 0.00397 | 0.0411 | 10.35462 | `BenchmarkXor` | approximate memory usage | subject | `builtin` | `sqlitecollections` | ratio | class | | :------ | --------: | ------------------: | ----: | :---- | | `add (existing item)` | 0.0 | 0.0 | 1.0 | `BenchmarkAddExistingItem` | | `add (new item)` | 0.0 | 0.0 | 1.0 | `BenchmarkAddNewItem` | | `__and__` | 0.0 | 0.0 | 1.0 | `BenchmarkAnd` | | `clear` | 0.0 | 0.0 | 1.0 | `BenchmarkClear` | | `__contains__` | 0.0 | 0.0 | 1.0 | `BenchmarkContains` | | `copy` | 0.0 | 0.0 | 1.0 | `BenchmarkCopy` | | `difference` | 0.0 | 0.0 | 1.0 | `BenchmarkDifference` | | `discard` | 0.0 | 0.0 | 1.0 | `BenchmarkDiscard` | | `discard (no changes)` | 0.0 | 0.0 | 1.0 | `BenchmarkDiscardNoChanges` | | `__ge__` | 0.0 | 0.0 | 1.0 | `BenchmarkGe` | | `__ge__` (not greater than or equals to) | 0.0 | 0.0 | 1.0 | `BenchmarkGeNot` | | `__gt__` | 0.0 | 0.0 | 1.0 | `BenchmarkGt` | | `__gt__` (not greater than) | 0.0 | 0.0 | 1.0 | `BenchmarkGtNot` | | `__iand__` | 0.0 | 0.0 | 1.0 | `BenchmarkIand` | | `__init__` | 0.0 | 0.0 | 1.0 | `BenchmarkInit` | | `intersection` | 0.0 | 0.0 | 1.0 | `BenchmarkIntersection` | | `intersection_update` | 0.0 | 0.0 | 1.0 | `BenchmarkIntersectionUpdate` | | `__ior__` | 0.0 | 0.0 | 1.0 | `BenchmarkIor` | | `isdisjoint` | 0.0 | 0.0 | 1.0 | `BenchmarkIsdisjoint` | | `isdisjoint` (not disjoint) | 0.0 | 0.0 | 1.0 | `BenchmarkIsdisjointNot` | | `issubset` | 0.0 | 0.0 | 1.0 | `BenchmarkIssubset` | | `issubset` (not subset) | 0.0 | 0.0 | 1.0 | `BenchmarkIssubsetNot` | | `issuperset` | 0.0 | 0.0 | 1.0 | `BenchmarkIssuperset` | | `issuperset` (not superset) | 0.0 | 0.0 | 1.0 | `BenchmarkIssupersetNot` | | `__ixor__` | 0.0 | 0.0 | 1.0 | `BenchmarkIxor` | | `__le__` | 0.0 | 0.0 | 1.0 | `BenchmarkLe` | | `__le__` (not less than or equals to) | 0.0 | 0.0 | 1.0 | `BenchmarkLeNot` | | `__len__` | 0.0 | 0.0 | 1.0 | `BenchmarkLen` | | `__lt__` | 0.0 | 0.0 | 1.0 | `BenchmarkLt` | | `__lt__` (not less than) | 0.0 | 0.0 | 1.0 | `BenchmarkLtNot` | | `__contains__` (unsuccessful search) | 0.0 | 0.0 | 1.0 | `BenchmarkNotContains` | | `__or__` | 0.0 | 0.0 | 1.0 | `BenchmarkOr` | | `pop` | 0.0 | 0.0 | 1.0 | `BenchmarkPop` | | `remove` | 0.0 | 0.0 | 1.0 | `BenchmarkRemove` | | `__sub__` | 0.0 | 0.0 | 1.0 | `BenchmarkSub` | | `symmetric_difference` | 0.0 | 0.0 | 1.0 | `BenchmarkSymmetricDifference` | | `symmetric_difference_update` | 0.0 | 0.0 | 1.0 | `BenchmarkSymmetricDifferenceUpdate` | | `union` | 0.0 | 0.0 | 1.0 | `BenchmarkUnion` | | `update` | 0.0 | 0.0 | 1.0 | `BenchmarkUpdate` | | `__xor__` | 0.0 | 0.0 | 1.0 | `BenchmarkXor` |","title":"Set"},{"location":"usage/common/","text":"Common features PicklingStrategy PicklingStrategy specifies the way how pickle serializes the sqlitecollection containers. Currently following two methods are supported: PicklingStrategy.whole_table The resulting pickle contains all the records in the collection. It dumps all the records into temporary sqlite3 database file when it is loaded. PicklingStrategy.only_file_name The resulting pickle contains only the file path of the sqlite3 database file. The file path is a relative path returned by os.path.relpath , so it must be loaded with the same structure. MetadataItem MetadataItem(...) Constructor for MetadataItem. Instances of this class are not supposed to be created directly by the user. Arguments: table_name : str ; table name. container_type : str ; container type name. schema_version : str ; schema version. table_name Read-only property for the table name. Return value: str : The table name. container_type Read-only property for the container type. Return value: str : The container type. schema_version Read-only property for the schema version Return value: str : The schema version. MetadataReader MetadataReader(...) Constructor for MetadataReader class which can iterate over all records in the given connection. Arguments: connection : str or sqlite3.Connection ; Connection to sqlite3 to get metadata. If connection is a str , it will be used as the sqlite3 database file name. You can pass a sqlite3.Connection directly. len(metadata_reader) Return the number of records in the metadata table read by metadata_reader . It coincides the number of collections in the sqlite3 database connected by metadata_reader._connection . Return value: int : The number of items in the metadata table. obj in metadata_reader Return whether if obj is in metadata_reader Arguments: obj : object ; object to be checked the membership. Return value: bool : Boolean value whether if metadata_item is in the metadata table. iter(metadata_reader) Return an iterator over the MetadataItem 's in metadata_reader It coincides the records of metadata table in the sqlite3 database connected by metadata_reader._connection . Return value: Iterator[MetadataItem] : an iterator over the MetadataItem 's in metadata_reader","title":"common features"},{"location":"usage/common/#common-features","text":"","title":"Common features"},{"location":"usage/common/#picklingstrategy","text":"PicklingStrategy specifies the way how pickle serializes the sqlitecollection containers. Currently following two methods are supported:","title":"PicklingStrategy"},{"location":"usage/common/#picklingstrategywhole_table","text":"The resulting pickle contains all the records in the collection. It dumps all the records into temporary sqlite3 database file when it is loaded.","title":"PicklingStrategy.whole_table"},{"location":"usage/common/#picklingstrategyonly_file_name","text":"The resulting pickle contains only the file path of the sqlite3 database file. The file path is a relative path returned by os.path.relpath , so it must be loaded with the same structure.","title":"PicklingStrategy.only_file_name"},{"location":"usage/common/#metadataitem","text":"","title":"MetadataItem"},{"location":"usage/common/#metadataitem_1","text":"Constructor for MetadataItem. Instances of this class are not supposed to be created directly by the user.","title":"MetadataItem(...)"},{"location":"usage/common/#arguments","text":"table_name : str ; table name. container_type : str ; container type name. schema_version : str ; schema version.","title":"Arguments:"},{"location":"usage/common/#table_name","text":"Read-only property for the table name.","title":"table_name"},{"location":"usage/common/#return-value","text":"str : The table name.","title":"Return value:"},{"location":"usage/common/#container_type","text":"Read-only property for the container type.","title":"container_type"},{"location":"usage/common/#return-value_1","text":"str : The container type.","title":"Return value:"},{"location":"usage/common/#schema_version","text":"Read-only property for the schema version","title":"schema_version"},{"location":"usage/common/#return-value_2","text":"str : The schema version.","title":"Return value:"},{"location":"usage/common/#metadatareader","text":"","title":"MetadataReader"},{"location":"usage/common/#metadatareader_1","text":"Constructor for MetadataReader class which can iterate over all records in the given connection.","title":"MetadataReader(...)"},{"location":"usage/common/#arguments_1","text":"connection : str or sqlite3.Connection ; Connection to sqlite3 to get metadata. If connection is a str , it will be used as the sqlite3 database file name. You can pass a sqlite3.Connection directly.","title":"Arguments:"},{"location":"usage/common/#lenmetadata_reader","text":"Return the number of records in the metadata table read by metadata_reader . It coincides the number of collections in the sqlite3 database connected by metadata_reader._connection .","title":"len(metadata_reader)"},{"location":"usage/common/#return-value_3","text":"int : The number of items in the metadata table.","title":"Return value:"},{"location":"usage/common/#obj-in-metadata_reader","text":"Return whether if obj is in metadata_reader","title":"obj in metadata_reader"},{"location":"usage/common/#arguments_2","text":"obj : object ; object to be checked the membership.","title":"Arguments:"},{"location":"usage/common/#return-value_4","text":"bool : Boolean value whether if metadata_item is in the metadata table.","title":"Return value:"},{"location":"usage/common/#itermetadata_reader","text":"Return an iterator over the MetadataItem 's in metadata_reader It coincides the records of metadata table in the sqlite3 database connected by metadata_reader._connection .","title":"iter(metadata_reader)"},{"location":"usage/common/#return-value_5","text":"Iterator[MetadataItem] : an iterator over the MetadataItem 's in metadata_reader","title":"Return value:"},{"location":"usage/dict/","text":"Dict Dict is a container compatible with the built-in dict , which serializes keys and values and stores them in a sqlite3 database. It preserves insertion order for all supported python versions. Dict[KT, VT](...) Constructor. Type Parameters: KT : key type VT : value type Arguments: data : Mapping[KT, VT] or Iterable[Tuple[KT, VT]] , optional, positional-only argument, defualt= None ; Initial data. If None or no argument is given, persistent data is used as is if available, otherwise persistent data in the corresponding table is cleared and given data is stored instead. connection : str or sqlite3.Connection , optional, default= None ; If None , temporary file is automatically created. If connection is a str , it will be used as the sqlite3 database file name. You can pass a sqlite3.Connection directly. table_name : str , optional, default= None ; Table name of this container. If None , an auto-generated unique name will be used. Available characters are letters, numbers, and underscores ( _ ). key_serializer : Callable[[KT], bytes] , optional, default= None ; Function to serialize key. If None , pickle.dumps is used. key_deserializer : Callable[[bytes], KT] , optional, default= None ; Function to deserialize key. If None , pickle.loads is used. value_serializer : Callable[[VT], bytes] , optional, default= None ; Function to serialize value. If None , key_serializer is used. value_deserializer : Callable[[bytes], VT] , optional, default= None ; Function to deserialize value. If None , key_deserializer is used. persist : bool , optional, default= True ; If True , table won't be deleted even when the object is deleted. If False , the table is deleted when this object is deleted. pickling_strategy : PicklingStrategy , optional, default= PicklingStrategy.whole_table ; Flag to control pickling method. See PicklingStrategy for more details. len(d) Return the number of items in d: Dict[KT, VT] Return value: int : The number of items in d d[key] Get item of d with key key . Raises a KeyError if key is not in the map. Arguments: key : KT ; Key to retrieve corresponding value Return value: VT : Item of d with key key d[key] = value Set d[key] to value . Arguments: key : KT ; Key to be set value : VT ; Value to be set Return value: None del d[key] Delete d[key] . Arguments: key : KT ; Key to be deleted Return value: None key in d Return whether if key is in d Arguments: key : KT ; Key to be checked Return value: bool : True if key is in d and False otherwise. key not in d Return whether if key is not in d Arguments: key : KT ; Key to be checked Return value: bool : True if key is not in d and False otherwise. iter(d) Return an iterator over the keys of d Return value: Iterator[KT] : an iterator over the keys of d clear() Remove all items from the dictionary Return value: None copy() Return a copy of the dictionary. The actual behavior is to create a table with a unique table name and copy the keys and the values to the new table. Therefore, unlike the built-in dict copy, the behavior is similar to deep copy. Be aware that the copied dictionary is volatile. Return value: Dict[KT, VT] : A volatile copy of the dictionary. get(key[, default]) Return the value for key if key is in the dictionary, else default . If default is not given, it defaults to None , so that this method never raises a KeyError . Arguments: key : KT ; Key to retrieve corresponding value if exists. default : VT , optional, default= None ; Default value in case that key is not in the dictionary Return value: VT : Item of the dictionary with key key if key is in the dictionary, default otherwise. items() Return a new view of the dictionary\u2019s items (key-value pairs). Return value: ItemsView : View object of the dictionary's items keys() Return a new view of the dictionary's keys. Return value: KeysView[KT] : View object of the dictionary's keys. pop(key[, default]) If key is in the dictionary, remove it and return its value, else return default . If default is not given and key is not in the dictionary, a KeyError is raised. Arguments: key : KT ; Key to retrieve corresponding value if exists. default : VT , optional, default= None ; Default value in case that key is not in the dictionary Return value: VT : Item of the dictionary with key key if key is in the dictionary, default otherwise. popitem() Remove and return a key-value pair from the dictionary. Pairs are returned in LIFO order. If the dictionary is empty, raises a KeyError . Return value: Tuple[KT, VT] : Key-value pair that were last inserted into the dictionary reversed(d) Return a reverse iterator over the keys of the dictionary. (provided only python version 3.8 and above) Return value: Iterator[KT] : Reverse iterator over the keys of the dictionary setdefault(key[, default]) If key is in the dictionary, return its value. If not, insert key with a value of default and return default . Arguments: key : KT ; Key to retrieve or set the value default : VT , optional, default= None ; Value to be set if key is not in the dictionary Return value: VT : Item of the dictionary with key key if key is in the dictionary, default otherwise. update([other, **kwargs]) Update the dictionary with the key-value pairs from other , overwriting existing keys. Arguments: other : Mapping[KT, VT] or Iterable[Tuple[KT, VT]] , optional; Key-value pairs to be added kwargs : VT , optional; values to be added Return value: None values() Return a new view of the dictionary's values. Return value: ValuesView : View object of the dictionary's values d | other Create a new dictionary with the merged keys and values of d and other , which must both be dictionaries. The values of other take priority when d and other share keys. The return value is volatile by default. (provided only python version 3.9 and above) Arguments: other : Mapping[KT, VT] or Iterable[Tuple[KT, VT]] ; Key-value pairs to be merged Return value: Dict[KT, VT] : A new volatile dictionary object. d |= other Update the dictionary d with keys and values from other . (provided only python version 3.9 and above) Arguments: other : Mapping[KT, VT] or Iterable[Tuple[KT, VT]] ; Key-value pairs to be merged Return value: Dict[KT, VT] : The dictionary object.","title":"Dict"},{"location":"usage/dict/#dict","text":"Dict is a container compatible with the built-in dict , which serializes keys and values and stores them in a sqlite3 database. It preserves insertion order for all supported python versions.","title":"Dict"},{"location":"usage/dict/#dictkt-vt","text":"Constructor.","title":"Dict[KT, VT](...)"},{"location":"usage/dict/#type-parameters","text":"KT : key type VT : value type","title":"Type Parameters:"},{"location":"usage/dict/#arguments","text":"data : Mapping[KT, VT] or Iterable[Tuple[KT, VT]] , optional, positional-only argument, defualt= None ; Initial data. If None or no argument is given, persistent data is used as is if available, otherwise persistent data in the corresponding table is cleared and given data is stored instead. connection : str or sqlite3.Connection , optional, default= None ; If None , temporary file is automatically created. If connection is a str , it will be used as the sqlite3 database file name. You can pass a sqlite3.Connection directly. table_name : str , optional, default= None ; Table name of this container. If None , an auto-generated unique name will be used. Available characters are letters, numbers, and underscores ( _ ). key_serializer : Callable[[KT], bytes] , optional, default= None ; Function to serialize key. If None , pickle.dumps is used. key_deserializer : Callable[[bytes], KT] , optional, default= None ; Function to deserialize key. If None , pickle.loads is used. value_serializer : Callable[[VT], bytes] , optional, default= None ; Function to serialize value. If None , key_serializer is used. value_deserializer : Callable[[bytes], VT] , optional, default= None ; Function to deserialize value. If None , key_deserializer is used. persist : bool , optional, default= True ; If True , table won't be deleted even when the object is deleted. If False , the table is deleted when this object is deleted. pickling_strategy : PicklingStrategy , optional, default= PicklingStrategy.whole_table ; Flag to control pickling method. See PicklingStrategy for more details.","title":"Arguments:"},{"location":"usage/dict/#lend","text":"Return the number of items in d: Dict[KT, VT]","title":"len(d)"},{"location":"usage/dict/#return-value","text":"int : The number of items in d","title":"Return value:"},{"location":"usage/dict/#dkey","text":"Get item of d with key key . Raises a KeyError if key is not in the map.","title":"d[key]"},{"location":"usage/dict/#arguments_1","text":"key : KT ; Key to retrieve corresponding value","title":"Arguments:"},{"location":"usage/dict/#return-value_1","text":"VT : Item of d with key key","title":"Return value:"},{"location":"usage/dict/#dkey-value","text":"Set d[key] to value .","title":"d[key] = value"},{"location":"usage/dict/#arguments_2","text":"key : KT ; Key to be set value : VT ; Value to be set","title":"Arguments:"},{"location":"usage/dict/#return-value_2","text":"None","title":"Return value:"},{"location":"usage/dict/#del-dkey","text":"Delete d[key] .","title":"del d[key]"},{"location":"usage/dict/#arguments_3","text":"key : KT ; Key to be deleted","title":"Arguments:"},{"location":"usage/dict/#return-value_3","text":"None","title":"Return value:"},{"location":"usage/dict/#key-in-d","text":"Return whether if key is in d","title":"key in d"},{"location":"usage/dict/#arguments_4","text":"key : KT ; Key to be checked","title":"Arguments:"},{"location":"usage/dict/#return-value_4","text":"bool : True if key is in d and False otherwise.","title":"Return value:"},{"location":"usage/dict/#key-not-in-d","text":"Return whether if key is not in d","title":"key not in d"},{"location":"usage/dict/#arguments_5","text":"key : KT ; Key to be checked","title":"Arguments:"},{"location":"usage/dict/#return-value_5","text":"bool : True if key is not in d and False otherwise.","title":"Return value:"},{"location":"usage/dict/#iterd","text":"Return an iterator over the keys of d","title":"iter(d)"},{"location":"usage/dict/#return-value_6","text":"Iterator[KT] : an iterator over the keys of d","title":"Return value:"},{"location":"usage/dict/#clear","text":"Remove all items from the dictionary","title":"clear()"},{"location":"usage/dict/#return-value_7","text":"None","title":"Return value:"},{"location":"usage/dict/#copy","text":"Return a copy of the dictionary. The actual behavior is to create a table with a unique table name and copy the keys and the values to the new table. Therefore, unlike the built-in dict copy, the behavior is similar to deep copy. Be aware that the copied dictionary is volatile.","title":"copy()"},{"location":"usage/dict/#return-value_8","text":"Dict[KT, VT] : A volatile copy of the dictionary.","title":"Return value:"},{"location":"usage/dict/#getkey-default","text":"Return the value for key if key is in the dictionary, else default . If default is not given, it defaults to None , so that this method never raises a KeyError .","title":"get(key[, default])"},{"location":"usage/dict/#arguments_6","text":"key : KT ; Key to retrieve corresponding value if exists. default : VT , optional, default= None ; Default value in case that key is not in the dictionary","title":"Arguments:"},{"location":"usage/dict/#return-value_9","text":"VT : Item of the dictionary with key key if key is in the dictionary, default otherwise.","title":"Return value:"},{"location":"usage/dict/#items","text":"Return a new view of the dictionary\u2019s items (key-value pairs).","title":"items()"},{"location":"usage/dict/#return-value_10","text":"ItemsView : View object of the dictionary's items","title":"Return value:"},{"location":"usage/dict/#keys","text":"Return a new view of the dictionary's keys.","title":"keys()"},{"location":"usage/dict/#return-value_11","text":"KeysView[KT] : View object of the dictionary's keys.","title":"Return value:"},{"location":"usage/dict/#popkey-default","text":"If key is in the dictionary, remove it and return its value, else return default . If default is not given and key is not in the dictionary, a KeyError is raised.","title":"pop(key[, default])"},{"location":"usage/dict/#arguments_7","text":"key : KT ; Key to retrieve corresponding value if exists. default : VT , optional, default= None ; Default value in case that key is not in the dictionary","title":"Arguments:"},{"location":"usage/dict/#return-value_12","text":"VT : Item of the dictionary with key key if key is in the dictionary, default otherwise.","title":"Return value:"},{"location":"usage/dict/#popitem","text":"Remove and return a key-value pair from the dictionary. Pairs are returned in LIFO order. If the dictionary is empty, raises a KeyError .","title":"popitem()"},{"location":"usage/dict/#return-value_13","text":"Tuple[KT, VT] : Key-value pair that were last inserted into the dictionary","title":"Return value:"},{"location":"usage/dict/#reversedd","text":"Return a reverse iterator over the keys of the dictionary. (provided only python version 3.8 and above)","title":"reversed(d)"},{"location":"usage/dict/#return-value_14","text":"Iterator[KT] : Reverse iterator over the keys of the dictionary","title":"Return value:"},{"location":"usage/dict/#setdefaultkey-default","text":"If key is in the dictionary, return its value. If not, insert key with a value of default and return default .","title":"setdefault(key[, default])"},{"location":"usage/dict/#arguments_8","text":"key : KT ; Key to retrieve or set the value default : VT , optional, default= None ; Value to be set if key is not in the dictionary","title":"Arguments:"},{"location":"usage/dict/#return-value_15","text":"VT : Item of the dictionary with key key if key is in the dictionary, default otherwise.","title":"Return value:"},{"location":"usage/dict/#updateother-kwargs","text":"Update the dictionary with the key-value pairs from other , overwriting existing keys.","title":"update([other, **kwargs])"},{"location":"usage/dict/#arguments_9","text":"other : Mapping[KT, VT] or Iterable[Tuple[KT, VT]] , optional; Key-value pairs to be added kwargs : VT , optional; values to be added","title":"Arguments:"},{"location":"usage/dict/#return-value_16","text":"None","title":"Return value:"},{"location":"usage/dict/#values","text":"Return a new view of the dictionary's values.","title":"values()"},{"location":"usage/dict/#return-value_17","text":"ValuesView : View object of the dictionary's values","title":"Return value:"},{"location":"usage/dict/#d-other","text":"Create a new dictionary with the merged keys and values of d and other , which must both be dictionaries. The values of other take priority when d and other share keys. The return value is volatile by default. (provided only python version 3.9 and above)","title":"d | other"},{"location":"usage/dict/#arguments_10","text":"other : Mapping[KT, VT] or Iterable[Tuple[KT, VT]] ; Key-value pairs to be merged","title":"Arguments:"},{"location":"usage/dict/#return-value_18","text":"Dict[KT, VT] : A new volatile dictionary object.","title":"Return value:"},{"location":"usage/dict/#d-other_1","text":"Update the dictionary d with keys and values from other . (provided only python version 3.9 and above)","title":"d |= other"},{"location":"usage/dict/#arguments_11","text":"other : Mapping[KT, VT] or Iterable[Tuple[KT, VT]] ; Key-value pairs to be merged","title":"Arguments:"},{"location":"usage/dict/#return-value_19","text":"Dict[KT, VT] : The dictionary object.","title":"Return value:"},{"location":"usage/factory/","text":"factory module factory module contains a factory for each container: ListFactory for List , SetFactory for Set and DictFactory for Dict . They replace constructors of each container that require extra arguments such as connection , serializer , deserializer etc., and allow users to construct a container without specifying those extra arguments. Example Basic usage The results of the following two examples are almost the same (except for the auto-generated table names). Without factory: import sqlite3 import sqlitecollections as sc conn = sqlite3.connect(\"path/to/file.db\") def encode(x: str) -> bytes: return x.encode(\"utf-8\") def decode(x: bytes) -> str: return x.decode(\"utf-8\") l1 = sc.List[str]([\"Alice\", \"Bob\", \"Carol\"], connection=conn, serializer=encode, deserializer=decode) l2 = sc.List[str]([\"Dave\"], connection=conn, serializer=encode, deserializer=decode) l3 = sc.List[str]([\"Erin\"], connection=conn, serializer=encode, deserializer=decode) With factory: import sqlite3 import sqlitecollections as sc conn = sqlite3.connect(\"path/to/file.db\") def encode(x: str) -> bytes: return x.encode(\"utf-8\") def decode(x: bytes) -> str: return x.decode(\"utf-8\") list_ = sc.ListFactory[str](connection=conn, serializer=encode, deserializer=decode) l1 = list_([\"Alice\", \"Bob\", \"Carol\"]) l2 = list_([\"Dave\"]) l3 = list_([\"Erin\"]) Specifying a table name If you want to specify table names of containers from a factory, you can do that as follows: import sqlite3 import sqlitecollections as sc conn = sqlite3.connect(\"path/to/file.db\") def encode(x: str) -> bytes: return x.encode(\"utf-8\") def decode(x: bytes) -> str: return x.decode(\"utf-8\") list_ = sc.ListFactory[str](connection=conn, serializer=encode, deserializer=decode) l1 = list_[\"first_table_name\"]([\"Alice\", \"Bob\", \"Carol\"]) assert l1.table_name == \"first_table_name\" ListFactory ListFactory[T](...) Constructor of ListFactory which constructs List . Type Parameters: T : value type of the List Arguments: connection : str or sqlite3.Connection , optional, default= None ; If None , temporary file is automatically created. If connection is a str , it will be used as the sqlite3 database file name. You can pass a sqlite3.Connection directly. table_name : str , optional, default= None ; Table name of containers from this factory. This argument is assumed not to be specified directly by users. If None , an auto-generated unique name will be used. serializer : Callable[[T], bytes] , optional, default= None ; Function to serialize value. If None , pickle.dumps is used. deserializer : Callable[[bytes], T] , optional, default= None ; Function to deserialize value. If None , pickle.loads is used. list_(data) Construct List[T] with connection, serializer and deserializer preset from ListFactory[T] list_ . Arguments: data : Iterable[T] , optional, defualt= None ; Initial data. Return value: List[T] : connection, serializer and deserializer are the same as those of the factory list_ . create(data) Construct List[T] with connection, serializer and deserializer preset from the factory. Arguments: data : Iterable[T] , optional, defualt= None ; Initial data. Return value: List[T] : connection, serializer and deserializer are the same as those of the factory. f[t] Return a copy of this factory f that creates container with table name t . Arguments: t : str ; the table name Return value: ListFactory[T] : connection, serializer and deserializer are the same as those of this factory and the table name of the List[T] from this return value will be set to t . === DictFactory DictFactory[KT, VT](...) Constructor of DictFactory which constructs Dict . Type Parameters: KT : key type of the Dict VT : value type of the Dict Arguments: connection : str or sqlite3.Connection , optional, default= None ; If None , temporary file is automatically created. If connection is a str , it will be used as the sqlite3 database file name. You can pass a sqlite3.Connection directly. table_name : str , optional, default= None ; Table name of containers from this factory. This argument is assumed not to be specified directly by users. If None , an auto-generated unique name will be used. key_serializer : Callable[[KT], bytes] , optional, default= None ; Function to serialize key. If None , pickle.dumps is used. key_deserializer : Callable[[bytes], KT] , optional, default= None ; Function to deserialize key. If None , pickle.loads is used. value_serializer : Callable[[VT], bytes] , optional, default= None ; Function to serialize value. If None , key_serializer is used. value_deserializer : Callable[[bytes], VT] , optional, default= None ; Function to deserialize value. If None , key_deserializer is used. dict_(data, **kwargs) Construct Dict[KT, VT] with connection, key*serializer, etc., preset from DictFactory[KT, VT] dict* . Arguments: data : Mapping[KT, VT] or Iterable[Tuple[KT, VT]] , optional, defualt= None ; Initial data. **kwargs : VT , optional; Appended to initial data. Return value: Dict[KT, VT] : connection, key*serializers, etc., are the same as those of the factory dict* . create(data, **kwargs) Construct Dict[KT, VT] with connection, key_serializer, etc., preset from the factory. Arguments: data : Mapping[KT, VT] or Iterable[Tuple[KT, VT]] , optional, defualt= None ; Initial data. **kwargs : VT , optional; Appended to initial data. Return value: Dict[KT, VT] : connection, key_serializers, etc., are the same as those of the factory. f[t] Return a copy of this factory f that creates container with table name t . Arguments: t : str ; the table name Return value: DictFactory[KT, VT] : connection, key_serializer, key_deserializer, value_serializer and value_deserializer are the same as those of this factory and the table name of the Dict[KT, VT] from this return value will be set to t . === SetFactory SetFactory[T](...) Constructor of SetFactory which constructs Set . Type Parameters: T : value type of the Set Arguments: connection : str or sqlite3.Connection , optional, default= None ; If None , temporary file is automatically created. If connection is a str , it will be used as the sqlite3 database file name. You can pass a sqlite3.Connection directly. table_name : str , optional, default= None ; Table name of containers from this factory. This argument is assumed not to be specified directly by users. If None , an auto-generated unique name will be used. serializer : Callable[[T], bytes] , optional, default= None ; Function to serialize value. If None , pickle.dumps is used. deserializer : Callable[[bytes], T] , optional, default= None ; Function to deserialize value. If None , pickle.loads is used. set_(data) Construct Set[T] with connection, serializer and deserializer preset from SetFactory[T] set_ . Arguments: data : Iterable[T] , optional, defualt= None ; Initial data. Return value: Set[T] : connection, serializer and deserializer are the same as those of the factory set_ . create(data) Construct Set[T] with connection, serializer and deserializer preset from the factory. Arguments: data : Iterable[T] , optional, defualt= None ; Initial data. Return value: Set[T] : connection, serializer and deserializer are the same as those of the factory. f[t] Return a copy of this factory f that creates container with table name t . Arguments: t : str ; the table name Return value: SetFactory[T] : connection, serializer and deserializer are the same as those of this factory and the table name of the Set[T] from this return value will be set to t . ===","title":"factory"},{"location":"usage/factory/#factory-module","text":"factory module contains a factory for each container: ListFactory for List , SetFactory for Set and DictFactory for Dict . They replace constructors of each container that require extra arguments such as connection , serializer , deserializer etc., and allow users to construct a container without specifying those extra arguments.","title":"factory module"},{"location":"usage/factory/#example","text":"","title":"Example"},{"location":"usage/factory/#basic-usage","text":"The results of the following two examples are almost the same (except for the auto-generated table names). Without factory: import sqlite3 import sqlitecollections as sc conn = sqlite3.connect(\"path/to/file.db\") def encode(x: str) -> bytes: return x.encode(\"utf-8\") def decode(x: bytes) -> str: return x.decode(\"utf-8\") l1 = sc.List[str]([\"Alice\", \"Bob\", \"Carol\"], connection=conn, serializer=encode, deserializer=decode) l2 = sc.List[str]([\"Dave\"], connection=conn, serializer=encode, deserializer=decode) l3 = sc.List[str]([\"Erin\"], connection=conn, serializer=encode, deserializer=decode) With factory: import sqlite3 import sqlitecollections as sc conn = sqlite3.connect(\"path/to/file.db\") def encode(x: str) -> bytes: return x.encode(\"utf-8\") def decode(x: bytes) -> str: return x.decode(\"utf-8\") list_ = sc.ListFactory[str](connection=conn, serializer=encode, deserializer=decode) l1 = list_([\"Alice\", \"Bob\", \"Carol\"]) l2 = list_([\"Dave\"]) l3 = list_([\"Erin\"])","title":"Basic usage"},{"location":"usage/factory/#specifying-a-table-name","text":"If you want to specify table names of containers from a factory, you can do that as follows: import sqlite3 import sqlitecollections as sc conn = sqlite3.connect(\"path/to/file.db\") def encode(x: str) -> bytes: return x.encode(\"utf-8\") def decode(x: bytes) -> str: return x.decode(\"utf-8\") list_ = sc.ListFactory[str](connection=conn, serializer=encode, deserializer=decode) l1 = list_[\"first_table_name\"]([\"Alice\", \"Bob\", \"Carol\"]) assert l1.table_name == \"first_table_name\"","title":"Specifying a table name"},{"location":"usage/factory/#listfactory","text":"","title":"ListFactory"},{"location":"usage/factory/#listfactoryt","text":"Constructor of ListFactory which constructs List .","title":"ListFactory[T](...)"},{"location":"usage/factory/#type-parameters","text":"T : value type of the List","title":"Type Parameters:"},{"location":"usage/factory/#arguments","text":"connection : str or sqlite3.Connection , optional, default= None ; If None , temporary file is automatically created. If connection is a str , it will be used as the sqlite3 database file name. You can pass a sqlite3.Connection directly. table_name : str , optional, default= None ; Table name of containers from this factory. This argument is assumed not to be specified directly by users. If None , an auto-generated unique name will be used. serializer : Callable[[T], bytes] , optional, default= None ; Function to serialize value. If None , pickle.dumps is used. deserializer : Callable[[bytes], T] , optional, default= None ; Function to deserialize value. If None , pickle.loads is used.","title":"Arguments:"},{"location":"usage/factory/#list_data","text":"Construct List[T] with connection, serializer and deserializer preset from ListFactory[T] list_ .","title":"list_(data)"},{"location":"usage/factory/#arguments_1","text":"data : Iterable[T] , optional, defualt= None ; Initial data.","title":"Arguments:"},{"location":"usage/factory/#return-value","text":"List[T] : connection, serializer and deserializer are the same as those of the factory list_ .","title":"Return value:"},{"location":"usage/factory/#createdata","text":"Construct List[T] with connection, serializer and deserializer preset from the factory.","title":"create(data)"},{"location":"usage/factory/#arguments_2","text":"data : Iterable[T] , optional, defualt= None ; Initial data.","title":"Arguments:"},{"location":"usage/factory/#return-value_1","text":"List[T] : connection, serializer and deserializer are the same as those of the factory.","title":"Return value:"},{"location":"usage/factory/#ft","text":"Return a copy of this factory f that creates container with table name t .","title":"f[t]"},{"location":"usage/factory/#arguments_3","text":"t : str ; the table name","title":"Arguments:"},{"location":"usage/factory/#return-value_2","text":"ListFactory[T] : connection, serializer and deserializer are the same as those of this factory and the table name of the List[T] from this return value will be set to t . ===","title":"Return value:"},{"location":"usage/factory/#dictfactory","text":"","title":"DictFactory"},{"location":"usage/factory/#dictfactorykt-vt","text":"Constructor of DictFactory which constructs Dict .","title":"DictFactory[KT, VT](...)"},{"location":"usage/factory/#type-parameters_1","text":"KT : key type of the Dict VT : value type of the Dict","title":"Type Parameters:"},{"location":"usage/factory/#arguments_4","text":"connection : str or sqlite3.Connection , optional, default= None ; If None , temporary file is automatically created. If connection is a str , it will be used as the sqlite3 database file name. You can pass a sqlite3.Connection directly. table_name : str , optional, default= None ; Table name of containers from this factory. This argument is assumed not to be specified directly by users. If None , an auto-generated unique name will be used. key_serializer : Callable[[KT], bytes] , optional, default= None ; Function to serialize key. If None , pickle.dumps is used. key_deserializer : Callable[[bytes], KT] , optional, default= None ; Function to deserialize key. If None , pickle.loads is used. value_serializer : Callable[[VT], bytes] , optional, default= None ; Function to serialize value. If None , key_serializer is used. value_deserializer : Callable[[bytes], VT] , optional, default= None ; Function to deserialize value. If None , key_deserializer is used.","title":"Arguments:"},{"location":"usage/factory/#dict_data-kwargs","text":"Construct Dict[KT, VT] with connection, key*serializer, etc., preset from DictFactory[KT, VT] dict* .","title":"dict_(data, **kwargs)"},{"location":"usage/factory/#arguments_5","text":"data : Mapping[KT, VT] or Iterable[Tuple[KT, VT]] , optional, defualt= None ; Initial data. **kwargs : VT , optional; Appended to initial data.","title":"Arguments:"},{"location":"usage/factory/#return-value_3","text":"Dict[KT, VT] : connection, key*serializers, etc., are the same as those of the factory dict* .","title":"Return value:"},{"location":"usage/factory/#createdata-kwargs","text":"Construct Dict[KT, VT] with connection, key_serializer, etc., preset from the factory.","title":"create(data, **kwargs)"},{"location":"usage/factory/#arguments_6","text":"data : Mapping[KT, VT] or Iterable[Tuple[KT, VT]] , optional, defualt= None ; Initial data. **kwargs : VT , optional; Appended to initial data.","title":"Arguments:"},{"location":"usage/factory/#return-value_4","text":"Dict[KT, VT] : connection, key_serializers, etc., are the same as those of the factory.","title":"Return value:"},{"location":"usage/factory/#ft_1","text":"Return a copy of this factory f that creates container with table name t .","title":"f[t]"},{"location":"usage/factory/#arguments_7","text":"t : str ; the table name","title":"Arguments:"},{"location":"usage/factory/#return-value_5","text":"DictFactory[KT, VT] : connection, key_serializer, key_deserializer, value_serializer and value_deserializer are the same as those of this factory and the table name of the Dict[KT, VT] from this return value will be set to t . ===","title":"Return value:"},{"location":"usage/factory/#setfactory","text":"","title":"SetFactory"},{"location":"usage/factory/#setfactoryt","text":"Constructor of SetFactory which constructs Set .","title":"SetFactory[T](...)"},{"location":"usage/factory/#type-parameters_2","text":"T : value type of the Set","title":"Type Parameters:"},{"location":"usage/factory/#arguments_8","text":"connection : str or sqlite3.Connection , optional, default= None ; If None , temporary file is automatically created. If connection is a str , it will be used as the sqlite3 database file name. You can pass a sqlite3.Connection directly. table_name : str , optional, default= None ; Table name of containers from this factory. This argument is assumed not to be specified directly by users. If None , an auto-generated unique name will be used. serializer : Callable[[T], bytes] , optional, default= None ; Function to serialize value. If None , pickle.dumps is used. deserializer : Callable[[bytes], T] , optional, default= None ; Function to deserialize value. If None , pickle.loads is used.","title":"Arguments:"},{"location":"usage/factory/#set_data","text":"Construct Set[T] with connection, serializer and deserializer preset from SetFactory[T] set_ .","title":"set_(data)"},{"location":"usage/factory/#arguments_9","text":"data : Iterable[T] , optional, defualt= None ; Initial data.","title":"Arguments:"},{"location":"usage/factory/#return-value_6","text":"Set[T] : connection, serializer and deserializer are the same as those of the factory set_ .","title":"Return value:"},{"location":"usage/factory/#createdata_1","text":"Construct Set[T] with connection, serializer and deserializer preset from the factory.","title":"create(data)"},{"location":"usage/factory/#arguments_10","text":"data : Iterable[T] , optional, defualt= None ; Initial data.","title":"Arguments:"},{"location":"usage/factory/#return-value_7","text":"Set[T] : connection, serializer and deserializer are the same as those of the factory.","title":"Return value:"},{"location":"usage/factory/#ft_2","text":"Return a copy of this factory f that creates container with table name t .","title":"f[t]"},{"location":"usage/factory/#arguments_11","text":"t : str ; the table name","title":"Arguments:"},{"location":"usage/factory/#return-value_8","text":"SetFactory[T] : connection, serializer and deserializer are the same as those of this factory and the table name of the Set[T] from this return value will be set to t . ===","title":"Return value:"},{"location":"usage/list/","text":"List List is a container compatible with the built-in list , which serializes values and stores them in a sqlite3 database. List[T](...) Constructor. Type Parameters: T : value type Arguments: data : Iterable[T] , optional, positional-only argument, defualt= None ; Initial data. If None or no argument is given, persistent data is used as is if available, otherwise persistent data in the corresponding table is cleared and given data is stored instead. connection : str or sqlite3.Connection , optional, default= None ; If None , temporary file is automatically created. If connection is a str , it will be used as the sqlite3 database file name. You can pass a sqlite3.Connection directly. table_name : str , optional, default= None ; Table name of this container. If None , an auto-generated unique name will be used. Available characters are letters, numbers, and underscores ( _ ). serializer : Callable[[T], bytes] , optional, default= None ; Function to serialize value. If None , pickle.dumps is used. deserializer : Callable[[bytes], T] , optional, default= None ; Function to deserialize value. If None , pickle.loads is used. persist : bool , optional, default= True ; If True , table won't be deleted even when the object is deleted. If False , the table is deleted when this object is deleted. pickling_strategy : PicklingStrategy , optional, default= PicklingStrategy.whole_table ; Flag to control pickling method. See PicklingStrategy for more details. x in s True if an item of s is equal to x , else False Arguments: x : object ; an object to be checked Return value: bool : True if x is in s and False otherwise. x not in s False if an item of s is equal to x , else True Arguments: x : object ; an object to be checked Return value: bool : False if x is in s and True otherwise. s + t The concatenation of s and t Arguments: t : Iterable[T] ; An iterable to be concatenated. Return value: List[T] : The concatenation of s and t . s * n or n * s equivalent to adding s to itself n times. Arguments: n : int ; Number of times to repeat. Return value: List[T] : a list of n times s was repeated. s[i] i -th item of s , origin 0 . Arguments: i : int ; Item index. If it is negative, it is equivalent to len(s) + i . Return value: T : i -th item of s , origin 0 . s[i:j] Slice of s from i to j . Arguments: i : int or None ; Item index where the slice starts from. If None , it is treated as 0 . j : int or None ; Item index where the slice stops at. If None , it is treated as len(s) . Return value: List[T] : Slice of s from i to j . s[i:j:k] Slice of s from i to j with step k Arguments: i : int or None ; Item index where the slice starts from. If None , it is treated as 0 . j : int or None ; Item index where the slice stops at. If None , it is treated as len(s) . k : int or None ; Step of the slice. If None , it is treated as 1 . Return value: List[T] : Slice of s from i to j with step k . len(s) Return the number of items in s: List[T] Return value: int : The number of items in s index(x[, i[, j]]]) Return index of the first occurrence of x in the list (at or after index i and before index j ). Raise ValueError if x is not in the list. Arguments: x : T ; Value to retrieve corresponding index if exists. i : int , optional, default= None ; First index to look up the value. If it is None , start from the first element of the list. j : int , optional, default= None ; Index before the last one to look for a value. If None , search to the end. Return value: int : Index of the first occurrence of x in the list. count(x) Return total number of occurrences of x in the list. Arguments: x : T ; Value that counts the number of occurrences. Return value: int : The number of occurrences of x in the list. s[i] = x Replace item i of s by x . Arguments: i : int ; Item index to be set. If it is negative, it is equivalent to len(s) + i x : T ; Value to be set. Return value: None . del s[i] Remove item i of s . Arguments: i : int ; Item index to be removed. If it is negative, it is equivalent to len(s) + i . Return value: None . s[i:j] = t Replace slice of s from i to j by the contents of the iterable t . Arguments: i : int or None ; Item index where the slice starts from. If None , it is treated as 0 . j : int or None ; Item index where the slice stops at. If None , it is treated as len(s) . t : Iterable[T] ; Iterable to be inserted. Return value: None . del s[i:j] Remove slice of s from i to j . Arguments: i : int or None ; Item index where the slice starts from. If None , it is treated as 0 . j : int or None ; Item index where the slice stops at. If None , it is treated as len(s) . Return value: None . s[i:j:k] = t Replace the elements of s[i:j:k] by those ofthe iterable t . The length must be the same. Otherwise, ValueError will be raised. Arguments: i : int or None ; Item index where the slice starts from. If None , it is treated as 0 . j : int or None ; Item index where the slice stops at. If None , it is treated as len(s) . k : int or None ; Step of the slice. If None , it is treated as 1 . t : Iterable[T] ; Iterable to be substituted. The length must be the same as that of the slice. Return value: None . del s[i:j:k] Remove the elements of s[i:j:k] from the list. Arguments: i : int or None ; Item index where the slice starts from. If None , it is treated as 0 . j : int or None ; Item index where the slice stops at. If None , it is treated as len(s) . k : int or None ; Step of the slice. If None , it is treated as 1 . Return value: None . append(x) Append x to the end of the sequence. Arguments: x : T ; Item to be appended. Return value; None . clear() Remove all items from the list. Return value: None . copy() Return a copy of the list. The actual behavior is to create a table with a unique table name and copy the items to the new table. Therefore, unlike the built-in list copy, the behavior is similar to deep copy. Be aware that the copied list is volatile. Return value: List[T] : A volatile copy of the list. extend(t) Concatenate the list and t . Arguments: t : Iterable[T] ; An iterable to be concatenated. Return value: None . s += t Concatenate s and t . Arguments: t : Iterable[T] ; An iterable to be concatenated. Return value: None . s *= n Update s with its contents repeated n times. Arguments: n : int ; Number of times to repeat. Return value: None . insert(i, x) Insert x into the list at the index i . Arguments: i : int ; Index to be inserted. x : T ; Item to be inserted. Return value: None . pop(i) Retrieve the item at i and also remove it from s. Arguments: i : int or None , optional, default= None ; Index to be retrieved and removed. If it is None , it is treated as the last index of the list. Return value: T : i -th item of s , origin 0 . remove(x) Remove the first item of s whose value is equal to x . Arguments: x : T ; Item to be removed. Return value: None . reverse() Reverse the items of the list in place. Return value: None . sort(reverse, key) Sort the items of the list in place. The value of reverse can be either True or False , resulting in descending or ascending order, respectively. key specifies a function of one argument that is used to extract a comparison key from each list element. Arguments: reverse : bool , optional, default= False ; By default, the order is ascending, but if this value is True , the order will be descending. key : Callable[[T], Any] , optional, default= None ; Function to extract a comparison key from each list element. Return value: None .","title":"List"},{"location":"usage/list/#list","text":"List is a container compatible with the built-in list , which serializes values and stores them in a sqlite3 database.","title":"List"},{"location":"usage/list/#listt","text":"Constructor.","title":"List[T](...)"},{"location":"usage/list/#type-parameters","text":"T : value type","title":"Type Parameters:"},{"location":"usage/list/#arguments","text":"data : Iterable[T] , optional, positional-only argument, defualt= None ; Initial data. If None or no argument is given, persistent data is used as is if available, otherwise persistent data in the corresponding table is cleared and given data is stored instead. connection : str or sqlite3.Connection , optional, default= None ; If None , temporary file is automatically created. If connection is a str , it will be used as the sqlite3 database file name. You can pass a sqlite3.Connection directly. table_name : str , optional, default= None ; Table name of this container. If None , an auto-generated unique name will be used. Available characters are letters, numbers, and underscores ( _ ). serializer : Callable[[T], bytes] , optional, default= None ; Function to serialize value. If None , pickle.dumps is used. deserializer : Callable[[bytes], T] , optional, default= None ; Function to deserialize value. If None , pickle.loads is used. persist : bool , optional, default= True ; If True , table won't be deleted even when the object is deleted. If False , the table is deleted when this object is deleted. pickling_strategy : PicklingStrategy , optional, default= PicklingStrategy.whole_table ; Flag to control pickling method. See PicklingStrategy for more details.","title":"Arguments:"},{"location":"usage/list/#x-in-s","text":"True if an item of s is equal to x , else False","title":"x in s"},{"location":"usage/list/#arguments_1","text":"x : object ; an object to be checked","title":"Arguments:"},{"location":"usage/list/#return-value","text":"bool : True if x is in s and False otherwise.","title":"Return value:"},{"location":"usage/list/#x-not-in-s","text":"False if an item of s is equal to x , else True","title":"x not in s"},{"location":"usage/list/#arguments_2","text":"x : object ; an object to be checked","title":"Arguments:"},{"location":"usage/list/#return-value_1","text":"bool : False if x is in s and True otherwise.","title":"Return value:"},{"location":"usage/list/#s-t","text":"The concatenation of s and t","title":"s + t"},{"location":"usage/list/#arguments_3","text":"t : Iterable[T] ; An iterable to be concatenated.","title":"Arguments:"},{"location":"usage/list/#return-value_2","text":"List[T] : The concatenation of s and t .","title":"Return value:"},{"location":"usage/list/#s-n-or-n-s","text":"equivalent to adding s to itself n times.","title":"s * n or n * s"},{"location":"usage/list/#arguments_4","text":"n : int ; Number of times to repeat.","title":"Arguments:"},{"location":"usage/list/#return-value_3","text":"List[T] : a list of n times s was repeated.","title":"Return value:"},{"location":"usage/list/#si","text":"i -th item of s , origin 0 .","title":"s[i]"},{"location":"usage/list/#arguments_5","text":"i : int ; Item index. If it is negative, it is equivalent to len(s) + i .","title":"Arguments:"},{"location":"usage/list/#return-value_4","text":"T : i -th item of s , origin 0 .","title":"Return value:"},{"location":"usage/list/#sij","text":"Slice of s from i to j .","title":"s[i:j]"},{"location":"usage/list/#arguments_6","text":"i : int or None ; Item index where the slice starts from. If None , it is treated as 0 . j : int or None ; Item index where the slice stops at. If None , it is treated as len(s) .","title":"Arguments:"},{"location":"usage/list/#return-value_5","text":"List[T] : Slice of s from i to j .","title":"Return value:"},{"location":"usage/list/#sijk","text":"Slice of s from i to j with step k","title":"s[i:j:k]"},{"location":"usage/list/#arguments_7","text":"i : int or None ; Item index where the slice starts from. If None , it is treated as 0 . j : int or None ; Item index where the slice stops at. If None , it is treated as len(s) . k : int or None ; Step of the slice. If None , it is treated as 1 .","title":"Arguments:"},{"location":"usage/list/#return-value_6","text":"List[T] : Slice of s from i to j with step k .","title":"Return value:"},{"location":"usage/list/#lens","text":"Return the number of items in s: List[T]","title":"len(s)"},{"location":"usage/list/#return-value_7","text":"int : The number of items in s","title":"Return value:"},{"location":"usage/list/#indexx-i-j","text":"Return index of the first occurrence of x in the list (at or after index i and before index j ). Raise ValueError if x is not in the list.","title":"index(x[, i[, j]]])"},{"location":"usage/list/#arguments_8","text":"x : T ; Value to retrieve corresponding index if exists. i : int , optional, default= None ; First index to look up the value. If it is None , start from the first element of the list. j : int , optional, default= None ; Index before the last one to look for a value. If None , search to the end.","title":"Arguments:"},{"location":"usage/list/#return-value_8","text":"int : Index of the first occurrence of x in the list.","title":"Return value:"},{"location":"usage/list/#countx","text":"Return total number of occurrences of x in the list.","title":"count(x)"},{"location":"usage/list/#arguments_9","text":"x : T ; Value that counts the number of occurrences.","title":"Arguments:"},{"location":"usage/list/#return-value_9","text":"int : The number of occurrences of x in the list.","title":"Return value:"},{"location":"usage/list/#si-x","text":"Replace item i of s by x .","title":"s[i] = x"},{"location":"usage/list/#arguments_10","text":"i : int ; Item index to be set. If it is negative, it is equivalent to len(s) + i x : T ; Value to be set.","title":"Arguments:"},{"location":"usage/list/#return-value_10","text":"None .","title":"Return value:"},{"location":"usage/list/#del-si","text":"Remove item i of s .","title":"del s[i]"},{"location":"usage/list/#arguments_11","text":"i : int ; Item index to be removed. If it is negative, it is equivalent to len(s) + i .","title":"Arguments:"},{"location":"usage/list/#return-value_11","text":"None .","title":"Return value:"},{"location":"usage/list/#sij-t","text":"Replace slice of s from i to j by the contents of the iterable t .","title":"s[i:j] = t"},{"location":"usage/list/#arguments_12","text":"i : int or None ; Item index where the slice starts from. If None , it is treated as 0 . j : int or None ; Item index where the slice stops at. If None , it is treated as len(s) . t : Iterable[T] ; Iterable to be inserted.","title":"Arguments:"},{"location":"usage/list/#return-value_12","text":"None .","title":"Return value:"},{"location":"usage/list/#del-sij","text":"Remove slice of s from i to j .","title":"del s[i:j]"},{"location":"usage/list/#arguments_13","text":"i : int or None ; Item index where the slice starts from. If None , it is treated as 0 . j : int or None ; Item index where the slice stops at. If None , it is treated as len(s) .","title":"Arguments:"},{"location":"usage/list/#return-value_13","text":"None .","title":"Return value:"},{"location":"usage/list/#sijk-t","text":"Replace the elements of s[i:j:k] by those ofthe iterable t . The length must be the same. Otherwise, ValueError will be raised.","title":"s[i:j:k] = t"},{"location":"usage/list/#arguments_14","text":"i : int or None ; Item index where the slice starts from. If None , it is treated as 0 . j : int or None ; Item index where the slice stops at. If None , it is treated as len(s) . k : int or None ; Step of the slice. If None , it is treated as 1 . t : Iterable[T] ; Iterable to be substituted. The length must be the same as that of the slice.","title":"Arguments:"},{"location":"usage/list/#return-value_14","text":"None .","title":"Return value:"},{"location":"usage/list/#del-sijk","text":"Remove the elements of s[i:j:k] from the list.","title":"del s[i:j:k]"},{"location":"usage/list/#arguments_15","text":"i : int or None ; Item index where the slice starts from. If None , it is treated as 0 . j : int or None ; Item index where the slice stops at. If None , it is treated as len(s) . k : int or None ; Step of the slice. If None , it is treated as 1 .","title":"Arguments:"},{"location":"usage/list/#return-value_15","text":"None .","title":"Return value:"},{"location":"usage/list/#appendx","text":"Append x to the end of the sequence.","title":"append(x)"},{"location":"usage/list/#arguments_16","text":"x : T ; Item to be appended.","title":"Arguments:"},{"location":"usage/list/#return-value_16","text":"None .","title":"Return value;"},{"location":"usage/list/#clear","text":"Remove all items from the list.","title":"clear()"},{"location":"usage/list/#return-value_17","text":"None .","title":"Return value:"},{"location":"usage/list/#copy","text":"Return a copy of the list. The actual behavior is to create a table with a unique table name and copy the items to the new table. Therefore, unlike the built-in list copy, the behavior is similar to deep copy. Be aware that the copied list is volatile.","title":"copy()"},{"location":"usage/list/#return-value_18","text":"List[T] : A volatile copy of the list.","title":"Return value:"},{"location":"usage/list/#extendt","text":"Concatenate the list and t .","title":"extend(t)"},{"location":"usage/list/#arguments_17","text":"t : Iterable[T] ; An iterable to be concatenated.","title":"Arguments:"},{"location":"usage/list/#return-value_19","text":"None .","title":"Return value:"},{"location":"usage/list/#s-t_1","text":"Concatenate s and t .","title":"s += t"},{"location":"usage/list/#arguments_18","text":"t : Iterable[T] ; An iterable to be concatenated.","title":"Arguments:"},{"location":"usage/list/#return-value_20","text":"None .","title":"Return value:"},{"location":"usage/list/#s-n","text":"Update s with its contents repeated n times.","title":"s *= n"},{"location":"usage/list/#arguments_19","text":"n : int ; Number of times to repeat.","title":"Arguments:"},{"location":"usage/list/#return-value_21","text":"None .","title":"Return value:"},{"location":"usage/list/#inserti-x","text":"Insert x into the list at the index i .","title":"insert(i, x)"},{"location":"usage/list/#arguments_20","text":"i : int ; Index to be inserted. x : T ; Item to be inserted.","title":"Arguments:"},{"location":"usage/list/#return-value_22","text":"None .","title":"Return value:"},{"location":"usage/list/#popi","text":"Retrieve the item at i and also remove it from s.","title":"pop(i)"},{"location":"usage/list/#arguments_21","text":"i : int or None , optional, default= None ; Index to be retrieved and removed. If it is None , it is treated as the last index of the list.","title":"Arguments:"},{"location":"usage/list/#return-value_23","text":"T : i -th item of s , origin 0 .","title":"Return value:"},{"location":"usage/list/#removex","text":"Remove the first item of s whose value is equal to x .","title":"remove(x)"},{"location":"usage/list/#arguments_22","text":"x : T ; Item to be removed.","title":"Arguments:"},{"location":"usage/list/#return-value_24","text":"None .","title":"Return value:"},{"location":"usage/list/#reverse","text":"Reverse the items of the list in place.","title":"reverse()"},{"location":"usage/list/#return-value_25","text":"None .","title":"Return value:"},{"location":"usage/list/#sortreverse-key","text":"Sort the items of the list in place. The value of reverse can be either True or False , resulting in descending or ascending order, respectively. key specifies a function of one argument that is used to extract a comparison key from each list element.","title":"sort(reverse, key)"},{"location":"usage/list/#arguments_23","text":"reverse : bool , optional, default= False ; By default, the order is ascending, but if this value is True , the order will be descending. key : Callable[[T], Any] , optional, default= None ; Function to extract a comparison key from each list element.","title":"Arguments:"},{"location":"usage/list/#return-value_26","text":"None .","title":"Return value:"},{"location":"usage/set/","text":"Set Set is a container compatible with the built-in set , which serializes values and stores them in a sqlite3 database. Set[T](...) Constructor. Type Parameters: T : value type Arguments: data : Iterable[T] , optional, positional-only argument, defualt= None ; Initial data. If None or no argument is given, persistent data is used as is if available, otherwise persistent data in the corresponding table is cleared and given data is stored instead. connection : str or sqlite3.Connection , optional, default= None ; If None , temporary file is automatically created. If connection is a str , it will be used as the sqlite3 database file name. You can pass a sqlite3.Connection directly. table_name : str , optional, default= None ; Table name of this container. If None , an auto-generated unique name will be used. Available characters are letters, numbers, and underscores ( _ ). serializer : Callable[[T], bytes] , optional, default= None ; Function to serialize value. If None , pickle.dumps is used. deserializer : Callable[[bytes], T] , optional, default= None ; Function to deserialize value. If None , pickle.loads is used. persist : bool , optional, default= True ; If True , table won't be deleted even when the object is deleted. If False , the table is deleted when this object is deleted. pickling_strategy : PicklingStrategy , optional, default= PicklingStrategy.whole_table ; Flag to control pickling method. See PicklingStrategy for more details. len(s) Return the number of items in s: Set[T] Return value: int : The number of items in s x in s True if x is in s , else False Arguments: x : object ; an object to be checked Return value: bool : True if x is in s and False otherwise. x not in s False if x is in s , else True Arguments: x : object ; an object to be checked Return value: bool : False if x is in s and True otherwise. isdisjoint(other) Return True if the set has no elements in common with other . Arguments: other : Iterable[T] ; Iterable to check if disjoint. Return value: bool : True if the set is disjoint with other , False otherwise. issubset(other) Return True if every element in the set is in other . Arguments: other : Iterable[T] ; Iterable to check if this one contains the set. Return value: bool : True if the set is subset of other , False otherwise. s <= other Return True if every element in the set is in other . Argument: other : Iterable[T] ; Iterable to check if this one contains all the elements in the set. Return value: bool : True if the set is subset of other , False otherwise. s < other Return True if every element in the set is in other and s is not equal to other . Arguments: other : Iterable[T] ; Iterable to check if it contains all elements of the set and is not equal to the set. Return value: bool : True if the set is a proper subset of other , False otherwise. issuperset(other) Return True if every element in other is in the set. Arguments: other : Iterable[T] ; Iterable to check if the elements are contained. Return value: bool : True if the set is superset of other , False otherwise. s >= other Return True if every element in other is in the set. Argument: other : Iterable[T] ; Iterable to check if the elements are contained. Return value: bool : True if the set is superset of other , False otherwise. s > other Return True if every element in other is in the set and s is not equal to other . Arguments: other : Iterable[T] ; Iterable to check if it all elements are in the set and is not equal to the set. Return value: bool : True if the set is a proper superset of other , False otherwise. union(*others) Return a new set with elements from the set and all others . Arguments: others : Iterable[T] ; Iterables to take the union. Return value: Set[T] : A new set with elements from the set and all others . s | other Return a new set with elements from s and other . Arguments: other : Iterable[T] ; Iterable to take the union. Return value: Set[T] : A new set with elements from s and other . intersection(*others) Return a new set with elements common to the set and all others . Arguments: others : Iterable[T] ; Iterables to take the intersection. Return value: Set[T] : A new set with elements common to the set and all others . s & other Return a new set with elements common to s and other . Arguments: other : Iterable[T] ; Iterable to take the intersection. Return value: Set[T] : A new set with elements common to s and other . difference(*others) Return a new set with elements in the set that are not in the others . Arguments: others : Iterable[T] ; Iterables to take the difference. Return value: Set[T] : A new set with elements in the set that are not in the others . s - other Return a new set with elements in the set that are not in the other . Arguments: other : Iterable[T] ; Iterable to take the difference. Return value: Set[T] : A new set with elements in the set that are not in the other . symmetric_difference(other) Return a new set with elements in either the set or other but not both. Arguments: other : Iterable[T] ; Iterable to take the symmetric difference. Return value: Set[T] : A new set with elements in either the set or other but not both. s ^ other Return a new set with elements in either the set or other but not both. Arguments: other : Iterable[T] ; Iterable to take the symmetric difference. Return value: Set[T] : A new set with elements in either the set or other but not both. copy() Return a copy of the set. The actual behavior is to create a table with a unique table name and copy the elements to the new table. Therefore, unlike the built-in set copy, the behavior is similar to deep copy. Be aware that the copied set is volatile. Return value: Set[T] : A volatile copy of the set. update(*others) Update the set by adding elements from all others . Arguments: others : Iterable[T] ; Iterables to take the union. Return value: None . s |= other Update the set by adding elements from other . Arguments: other : Iterable[T] ; Iterable to take the union. Return value: None . intersection_update(*others) Update the set by keeping only elements found in the set and all others . Arguments: others : Iterable[T] ; Iterables to take the intersection. Return value: None . s &= other Update the set by keeping only elements found in the set and other . Arguments: other : Iterable[T] ; Iterable to take the intersection. Return value: None . symmetric_difference_update(other) Update the set by keeping only elements found in either the set or other but not both. Arguments: other : Iterable[T] ; Iterable to take the symmetric difference. Return value: None . s ^= other Update the set by keeping only elements found in either the set or other but not both. Arguments: other : Iterable[T] ; Iterable to take the symmetric difference. Return value: None . add(elem) Add an element elem to the set. Arguments: elem : T ; An element to be added. Return value: None . remove(elem) Remove an element elem from the set. Raises KeyError if elem is not contained in the set. Arguemnts: elem : T ; An element to be removed. Return value: None . discard(elem) Remove an element elem from the set if it is present. Arguments: elem : T ; An element to be removed. Return value: None . pop() Remove and return an arbitrary element from the set. Raises KeyError if the set is empty. Return value: T : An element in the set. clear() Remove all elements from the set. Return value: None .","title":"Set"},{"location":"usage/set/#set","text":"Set is a container compatible with the built-in set , which serializes values and stores them in a sqlite3 database.","title":"Set"},{"location":"usage/set/#sett","text":"Constructor.","title":"Set[T](...)"},{"location":"usage/set/#type-parameters","text":"T : value type","title":"Type Parameters:"},{"location":"usage/set/#arguments","text":"data : Iterable[T] , optional, positional-only argument, defualt= None ; Initial data. If None or no argument is given, persistent data is used as is if available, otherwise persistent data in the corresponding table is cleared and given data is stored instead. connection : str or sqlite3.Connection , optional, default= None ; If None , temporary file is automatically created. If connection is a str , it will be used as the sqlite3 database file name. You can pass a sqlite3.Connection directly. table_name : str , optional, default= None ; Table name of this container. If None , an auto-generated unique name will be used. Available characters are letters, numbers, and underscores ( _ ). serializer : Callable[[T], bytes] , optional, default= None ; Function to serialize value. If None , pickle.dumps is used. deserializer : Callable[[bytes], T] , optional, default= None ; Function to deserialize value. If None , pickle.loads is used. persist : bool , optional, default= True ; If True , table won't be deleted even when the object is deleted. If False , the table is deleted when this object is deleted. pickling_strategy : PicklingStrategy , optional, default= PicklingStrategy.whole_table ; Flag to control pickling method. See PicklingStrategy for more details.","title":"Arguments:"},{"location":"usage/set/#lens","text":"Return the number of items in s: Set[T]","title":"len(s)"},{"location":"usage/set/#return-value","text":"int : The number of items in s","title":"Return value:"},{"location":"usage/set/#x-in-s","text":"True if x is in s , else False","title":"x in s"},{"location":"usage/set/#arguments_1","text":"x : object ; an object to be checked","title":"Arguments:"},{"location":"usage/set/#return-value_1","text":"bool : True if x is in s and False otherwise.","title":"Return value:"},{"location":"usage/set/#x-not-in-s","text":"False if x is in s , else True","title":"x not in s"},{"location":"usage/set/#arguments_2","text":"x : object ; an object to be checked","title":"Arguments:"},{"location":"usage/set/#return-value_2","text":"bool : False if x is in s and True otherwise.","title":"Return value:"},{"location":"usage/set/#isdisjointother","text":"Return True if the set has no elements in common with other .","title":"isdisjoint(other)"},{"location":"usage/set/#arguments_3","text":"other : Iterable[T] ; Iterable to check if disjoint.","title":"Arguments:"},{"location":"usage/set/#return-value_3","text":"bool : True if the set is disjoint with other , False otherwise.","title":"Return value:"},{"location":"usage/set/#issubsetother","text":"Return True if every element in the set is in other .","title":"issubset(other)"},{"location":"usage/set/#arguments_4","text":"other : Iterable[T] ; Iterable to check if this one contains the set.","title":"Arguments:"},{"location":"usage/set/#return-value_4","text":"bool : True if the set is subset of other , False otherwise.","title":"Return value:"},{"location":"usage/set/#s-other","text":"Return True if every element in the set is in other .","title":"s &lt;= other"},{"location":"usage/set/#argument","text":"other : Iterable[T] ; Iterable to check if this one contains all the elements in the set.","title":"Argument:"},{"location":"usage/set/#return-value_5","text":"bool : True if the set is subset of other , False otherwise.","title":"Return value:"},{"location":"usage/set/#s-other_1","text":"Return True if every element in the set is in other and s is not equal to other .","title":"s &lt; other"},{"location":"usage/set/#arguments_5","text":"other : Iterable[T] ; Iterable to check if it contains all elements of the set and is not equal to the set.","title":"Arguments:"},{"location":"usage/set/#return-value_6","text":"bool : True if the set is a proper subset of other , False otherwise.","title":"Return value:"},{"location":"usage/set/#issupersetother","text":"Return True if every element in other is in the set.","title":"issuperset(other)"},{"location":"usage/set/#arguments_6","text":"other : Iterable[T] ; Iterable to check if the elements are contained.","title":"Arguments:"},{"location":"usage/set/#return-value_7","text":"bool : True if the set is superset of other , False otherwise.","title":"Return value:"},{"location":"usage/set/#s-other_2","text":"Return True if every element in other is in the set.","title":"s &gt;= other"},{"location":"usage/set/#argument_1","text":"other : Iterable[T] ; Iterable to check if the elements are contained.","title":"Argument:"},{"location":"usage/set/#return-value_8","text":"bool : True if the set is superset of other , False otherwise.","title":"Return value:"},{"location":"usage/set/#s-other_3","text":"Return True if every element in other is in the set and s is not equal to other .","title":"s &gt; other"},{"location":"usage/set/#arguments_7","text":"other : Iterable[T] ; Iterable to check if it all elements are in the set and is not equal to the set.","title":"Arguments:"},{"location":"usage/set/#return-value_9","text":"bool : True if the set is a proper superset of other , False otherwise.","title":"Return value:"},{"location":"usage/set/#unionothers","text":"Return a new set with elements from the set and all others .","title":"union(*others)"},{"location":"usage/set/#arguments_8","text":"others : Iterable[T] ; Iterables to take the union.","title":"Arguments:"},{"location":"usage/set/#return-value_10","text":"Set[T] : A new set with elements from the set and all others .","title":"Return value:"},{"location":"usage/set/#s-other_4","text":"Return a new set with elements from s and other .","title":"s | other"},{"location":"usage/set/#arguments_9","text":"other : Iterable[T] ; Iterable to take the union.","title":"Arguments:"},{"location":"usage/set/#return-value_11","text":"Set[T] : A new set with elements from s and other .","title":"Return value:"},{"location":"usage/set/#intersectionothers","text":"Return a new set with elements common to the set and all others .","title":"intersection(*others)"},{"location":"usage/set/#arguments_10","text":"others : Iterable[T] ; Iterables to take the intersection.","title":"Arguments:"},{"location":"usage/set/#return-value_12","text":"Set[T] : A new set with elements common to the set and all others .","title":"Return value:"},{"location":"usage/set/#s-other_5","text":"Return a new set with elements common to s and other .","title":"s &amp; other"},{"location":"usage/set/#arguments_11","text":"other : Iterable[T] ; Iterable to take the intersection.","title":"Arguments:"},{"location":"usage/set/#return-value_13","text":"Set[T] : A new set with elements common to s and other .","title":"Return value:"},{"location":"usage/set/#differenceothers","text":"Return a new set with elements in the set that are not in the others .","title":"difference(*others)"},{"location":"usage/set/#arguments_12","text":"others : Iterable[T] ; Iterables to take the difference.","title":"Arguments:"},{"location":"usage/set/#return-value_14","text":"Set[T] : A new set with elements in the set that are not in the others .","title":"Return value:"},{"location":"usage/set/#s-other_6","text":"Return a new set with elements in the set that are not in the other .","title":"s - other"},{"location":"usage/set/#arguments_13","text":"other : Iterable[T] ; Iterable to take the difference.","title":"Arguments:"},{"location":"usage/set/#return-value_15","text":"Set[T] : A new set with elements in the set that are not in the other .","title":"Return value:"},{"location":"usage/set/#symmetric_differenceother","text":"Return a new set with elements in either the set or other but not both.","title":"symmetric_difference(other)"},{"location":"usage/set/#arguments_14","text":"other : Iterable[T] ; Iterable to take the symmetric difference.","title":"Arguments:"},{"location":"usage/set/#return-value_16","text":"Set[T] : A new set with elements in either the set or other but not both.","title":"Return value:"},{"location":"usage/set/#s-other_7","text":"Return a new set with elements in either the set or other but not both.","title":"s ^ other"},{"location":"usage/set/#arguments_15","text":"other : Iterable[T] ; Iterable to take the symmetric difference.","title":"Arguments:"},{"location":"usage/set/#return-value_17","text":"Set[T] : A new set with elements in either the set or other but not both.","title":"Return value:"},{"location":"usage/set/#copy","text":"Return a copy of the set. The actual behavior is to create a table with a unique table name and copy the elements to the new table. Therefore, unlike the built-in set copy, the behavior is similar to deep copy. Be aware that the copied set is volatile.","title":"copy()"},{"location":"usage/set/#return-value_18","text":"Set[T] : A volatile copy of the set.","title":"Return value:"},{"location":"usage/set/#updateothers","text":"Update the set by adding elements from all others .","title":"update(*others)"},{"location":"usage/set/#arguments_16","text":"others : Iterable[T] ; Iterables to take the union.","title":"Arguments:"},{"location":"usage/set/#return-value_19","text":"None .","title":"Return value:"},{"location":"usage/set/#s-other_8","text":"Update the set by adding elements from other .","title":"s |= other"},{"location":"usage/set/#arguments_17","text":"other : Iterable[T] ; Iterable to take the union.","title":"Arguments:"},{"location":"usage/set/#return-value_20","text":"None .","title":"Return value:"},{"location":"usage/set/#intersection_updateothers","text":"Update the set by keeping only elements found in the set and all others .","title":"intersection_update(*others)"},{"location":"usage/set/#arguments_18","text":"others : Iterable[T] ; Iterables to take the intersection.","title":"Arguments:"},{"location":"usage/set/#return-value_21","text":"None .","title":"Return value:"},{"location":"usage/set/#s-other_9","text":"Update the set by keeping only elements found in the set and other .","title":"s &amp;= other"},{"location":"usage/set/#arguments_19","text":"other : Iterable[T] ; Iterable to take the intersection.","title":"Arguments:"},{"location":"usage/set/#return-value_22","text":"None .","title":"Return value:"},{"location":"usage/set/#symmetric_difference_updateother","text":"Update the set by keeping only elements found in either the set or other but not both.","title":"symmetric_difference_update(other)"},{"location":"usage/set/#arguments_20","text":"other : Iterable[T] ; Iterable to take the symmetric difference.","title":"Arguments:"},{"location":"usage/set/#return-value_23","text":"None .","title":"Return value:"},{"location":"usage/set/#s-other_10","text":"Update the set by keeping only elements found in either the set or other but not both.","title":"s ^= other"},{"location":"usage/set/#arguments_21","text":"other : Iterable[T] ; Iterable to take the symmetric difference.","title":"Arguments:"},{"location":"usage/set/#return-value_24","text":"None .","title":"Return value:"},{"location":"usage/set/#addelem","text":"Add an element elem to the set.","title":"add(elem)"},{"location":"usage/set/#arguments_22","text":"elem : T ; An element to be added.","title":"Arguments:"},{"location":"usage/set/#return-value_25","text":"None .","title":"Return value:"},{"location":"usage/set/#removeelem","text":"Remove an element elem from the set. Raises KeyError if elem is not contained in the set.","title":"remove(elem)"},{"location":"usage/set/#arguemnts","text":"elem : T ; An element to be removed.","title":"Arguemnts:"},{"location":"usage/set/#return-value_26","text":"None .","title":"Return value:"},{"location":"usage/set/#discardelem","text":"Remove an element elem from the set if it is present.","title":"discard(elem)"},{"location":"usage/set/#arguments_23","text":"elem : T ; An element to be removed.","title":"Arguments:"},{"location":"usage/set/#return-value_27","text":"None .","title":"Return value:"},{"location":"usage/set/#pop","text":"Remove and return an arbitrary element from the set. Raises KeyError if the set is empty.","title":"pop()"},{"location":"usage/set/#return-value_28","text":"T : An element in the set.","title":"Return value:"},{"location":"usage/set/#clear","text":"Remove all elements from the set.","title":"clear()"},{"location":"usage/set/#return-value_29","text":"None .","title":"Return value:"},{"location":"usage/dictview/itemsview/","text":"ItemsView ItemsView is a view object which is returned by dict.items() . It provides a dynamic view on the dictionary's (key, value) tuples, which means when dictionay changes, the view reflects these changes. len(itemsview) Return the number of items in the dictionary d: Dict[KT, VT] where itemsview=d.items() . Return value: int : The number of items in d iter(itemsview) Return an iterator over the (key, value) tuples in the dictionary. The order of the items is guaranteed to be inserted order. Return value: Iterable[Tuple[_KT_co, _VT_co]] : The iterator over the keys in the dictionary. item in itemsview Return whether if item is in the dictionary. Arguments: item : object ; An object to be checked Return value: bool : True if item is in the dictionary and False otherwise. reversed(itemsview) Return a reverse iterator over the (key, value) tuples of the dictionary. (provided only python version 3.8 and above) Return value: Iterator[Tuple[_KT_co, _VT_co]] : The reverse iterator over the (key, value) tuples in the dictonary. itemsview & other Return a set with elements common to itemsview and other . Arguments: other : Iterable[Any] ; Iterable to take the intersection. Return value: Set[Tuple[_KT_co, _VT_co]] : A set with elements common to itemsview and other . other & itemsview Return a set with elements common to itemsview and other . Arguments: other : Iterable[_T] ; Iterable to take the intersection. Return value: Set[_T] : A set with elements common to itemsview and other . itemsview | other Return a new set with elements from itemsview and other . Arguments: other : Iterable[_T] ; Iterable to take the union. Return value: Set[Union[Tuple[_KT_co, _VT_co], _T]] : A new set with elements from itemsview and other . other | itemsview Return a new set with elements from itemsview and other . Arguments: other : Iterable[_T] ; Iterable to take the union. Return value: Set[Union[Tuple[_KT_co, _VT_co], _T]] : A new set with elements from itemsview and other . itemsview - other Return a new set with elements in the itemsview that are not in the other . Arguments: other : Iterable[Any] ; Iterable to take the difference. Return value: Set[Tuple[_KT_co, _VT_co]] : A new set with elements in the set that are not in the other . other - itemsview Return a new set with elements in the other that are not in the itemsview . Arguments: other : Iterable[_T] ; Iterable to take the difference. Return value: Set[_T] : A new set with elements in the other that are not in the itemsview . itemsview ^ other Return a new set with elements in either the itemsview or other but not both. Arguments: other : Iterable[_T] ; Iterable to take the symmetric difference. Return value Set[Union[Tuple[_KT_co, _VT_co], _T]] : A new set with elements in either the itemsview or other but not both. other ^ itemsview Return a new set with elements in either the itemsview or other but not both. Arguments: other : Iterable[_T] ; Iterable to take the symmetric difference. Return value Set[Union[Tuple[_KT_co, _VT_co], _T]] : A new set with elements in either the itemsview or other but not both. itemsview.mapping Return a MappingProxyType that wraps the original dictionary to which the view refers. (provided only python version 3.10 and above) Return value MappingProxyType : A read-only proxy of the original dictionary.","title":"ItemsView"},{"location":"usage/dictview/itemsview/#itemsview","text":"ItemsView is a view object which is returned by dict.items() . It provides a dynamic view on the dictionary's (key, value) tuples, which means when dictionay changes, the view reflects these changes.","title":"ItemsView"},{"location":"usage/dictview/itemsview/#lenitemsview","text":"Return the number of items in the dictionary d: Dict[KT, VT] where itemsview=d.items() .","title":"len(itemsview)"},{"location":"usage/dictview/itemsview/#return-value","text":"int : The number of items in d","title":"Return value:"},{"location":"usage/dictview/itemsview/#iteritemsview","text":"Return an iterator over the (key, value) tuples in the dictionary. The order of the items is guaranteed to be inserted order.","title":"iter(itemsview)"},{"location":"usage/dictview/itemsview/#return-value_1","text":"Iterable[Tuple[_KT_co, _VT_co]] : The iterator over the keys in the dictionary.","title":"Return value:"},{"location":"usage/dictview/itemsview/#item-in-itemsview","text":"Return whether if item is in the dictionary.","title":"item in itemsview"},{"location":"usage/dictview/itemsview/#arguments","text":"item : object ; An object to be checked","title":"Arguments:"},{"location":"usage/dictview/itemsview/#return-value_2","text":"bool : True if item is in the dictionary and False otherwise.","title":"Return value:"},{"location":"usage/dictview/itemsview/#reverseditemsview","text":"Return a reverse iterator over the (key, value) tuples of the dictionary. (provided only python version 3.8 and above)","title":"reversed(itemsview)"},{"location":"usage/dictview/itemsview/#return-value_3","text":"Iterator[Tuple[_KT_co, _VT_co]] : The reverse iterator over the (key, value) tuples in the dictonary.","title":"Return value:"},{"location":"usage/dictview/itemsview/#itemsview-other","text":"Return a set with elements common to itemsview and other .","title":"itemsview &amp; other"},{"location":"usage/dictview/itemsview/#arguments_1","text":"other : Iterable[Any] ; Iterable to take the intersection.","title":"Arguments:"},{"location":"usage/dictview/itemsview/#return-value_4","text":"Set[Tuple[_KT_co, _VT_co]] : A set with elements common to itemsview and other .","title":"Return value:"},{"location":"usage/dictview/itemsview/#other-itemsview","text":"Return a set with elements common to itemsview and other .","title":"other &amp; itemsview"},{"location":"usage/dictview/itemsview/#arguments_2","text":"other : Iterable[_T] ; Iterable to take the intersection.","title":"Arguments:"},{"location":"usage/dictview/itemsview/#return-value_5","text":"Set[_T] : A set with elements common to itemsview and other .","title":"Return value:"},{"location":"usage/dictview/itemsview/#itemsview-other_1","text":"Return a new set with elements from itemsview and other .","title":"itemsview | other"},{"location":"usage/dictview/itemsview/#arguments_3","text":"other : Iterable[_T] ; Iterable to take the union.","title":"Arguments:"},{"location":"usage/dictview/itemsview/#return-value_6","text":"Set[Union[Tuple[_KT_co, _VT_co], _T]] : A new set with elements from itemsview and other .","title":"Return value:"},{"location":"usage/dictview/itemsview/#other-itemsview_1","text":"Return a new set with elements from itemsview and other .","title":"other | itemsview"},{"location":"usage/dictview/itemsview/#arguments_4","text":"other : Iterable[_T] ; Iterable to take the union.","title":"Arguments:"},{"location":"usage/dictview/itemsview/#return-value_7","text":"Set[Union[Tuple[_KT_co, _VT_co], _T]] : A new set with elements from itemsview and other .","title":"Return value:"},{"location":"usage/dictview/itemsview/#itemsview-other_2","text":"Return a new set with elements in the itemsview that are not in the other .","title":"itemsview - other"},{"location":"usage/dictview/itemsview/#arguments_5","text":"other : Iterable[Any] ; Iterable to take the difference.","title":"Arguments:"},{"location":"usage/dictview/itemsview/#return-value_8","text":"Set[Tuple[_KT_co, _VT_co]] : A new set with elements in the set that are not in the other .","title":"Return value:"},{"location":"usage/dictview/itemsview/#other-itemsview_2","text":"Return a new set with elements in the other that are not in the itemsview .","title":"other - itemsview"},{"location":"usage/dictview/itemsview/#arguments_6","text":"other : Iterable[_T] ; Iterable to take the difference.","title":"Arguments:"},{"location":"usage/dictview/itemsview/#return-value_9","text":"Set[_T] : A new set with elements in the other that are not in the itemsview .","title":"Return value:"},{"location":"usage/dictview/itemsview/#itemsview-other_3","text":"Return a new set with elements in either the itemsview or other but not both.","title":"itemsview ^ other"},{"location":"usage/dictview/itemsview/#arguments_7","text":"other : Iterable[_T] ; Iterable to take the symmetric difference.","title":"Arguments:"},{"location":"usage/dictview/itemsview/#return-value_10","text":"Set[Union[Tuple[_KT_co, _VT_co], _T]] : A new set with elements in either the itemsview or other but not both.","title":"Return value"},{"location":"usage/dictview/itemsview/#other-itemsview_3","text":"Return a new set with elements in either the itemsview or other but not both.","title":"other ^ itemsview"},{"location":"usage/dictview/itemsview/#arguments_8","text":"other : Iterable[_T] ; Iterable to take the symmetric difference.","title":"Arguments:"},{"location":"usage/dictview/itemsview/#return-value_11","text":"Set[Union[Tuple[_KT_co, _VT_co], _T]] : A new set with elements in either the itemsview or other but not both.","title":"Return value"},{"location":"usage/dictview/itemsview/#itemsviewmapping","text":"Return a MappingProxyType that wraps the original dictionary to which the view refers. (provided only python version 3.10 and above)","title":"itemsview.mapping"},{"location":"usage/dictview/itemsview/#return-value_12","text":"MappingProxyType : A read-only proxy of the original dictionary.","title":"Return value"},{"location":"usage/dictview/keysview/","text":"KeysView KeysView is a view object which is returned by dict.keys() . It provides a dynamic view on the dictionary's keys, which means when dictionay changes, the view reflects these changes. len(keysview) Return the number of items in the dictionary d: Dict[KT, VT] where keysview=d.keys() . Return value: int : The number of items in d iter(keysview) Return an iterator over the keys in the dictionary. The order of the keys is guaranteed to be inserted order. Return value: Iterator[_KT_co] : The iterator over the keys in the dictonary. key in keysview Return whether if key is in the dictionary. Arguments: key : object ; An object to be checked Return value: bool : True if key is in the dictionary and False otherwise. reversed(keysview) Return a reverse iterator over the keys of the dictionary. (provided only python version 3.8 and above) Return value: Iterator[_KT_co] : The reverse iterator over the keys in the dictonary. keysview & other Return a set with elements common to keysview and other . Arguments: other : Iterable[Any] ; Iterable to take the intersection. Return value: Set[_KT_co] : A set with elements common to keysview and other . other & keysview Return a set with elements common to keysview and other . Arguments: other : Iterable[_T] ; Iterable to take the intersection. Return value: Set[_T] : A set with elements common to keysview and other . keysview | other Return a new set with elements from keysview and other . Arguments: other : Iterable[_T] ; Iterable to take the union. Return value: Set[Union[_KT_co, _T]] : A new set with elements from keysview and other . other | keysview Return a new set with elements from keysview and other . Arguments: other : Iterable[_T] ; Iterable to take the union. Return value: Set[Union[_KT_co, _T]] : A new set with elements from keysview and other . keysview - other Return a new set with elements in the keysview that are not in the other . Arguments: other : Iterable[Any] ; Iterable to take the difference. Return value: Set[_KT_co] : A new set with elements in the set that are not in the other . other - keysview Return a new set with elements in the other that are not in the keysview . Arguments: other : Iterable[_T] ; Iterable to be taken the difference. Return value: Set[_T] : A new set with elements in other that are not in the keysview . keysview ^ other Return a new set with elements in either the keysview or other but not both. Arguments: other : Iterable[_T] ; Iterable to take the symmetric difference. Return value Set[Union[_KT_co, _T]] : A new set with elements in either the keysview or other but not both. other ^ keysview Return a new set with elements in either the keysview or other but not both. Arguments: other : Iterable[_T] ; Iterable to take the symmetric difference. Return value Set[Union[_KT_co, _T]] : A new set with elements in either the keysview or other but not both. keysview.mapping Return a MappingProxyType that wraps the original dictionary to which the view refers. (provided only python version 3.10 and above) Return value MappingProxyType : A read-only proxy of the original dictionary.","title":"KeysView"},{"location":"usage/dictview/keysview/#keysview","text":"KeysView is a view object which is returned by dict.keys() . It provides a dynamic view on the dictionary's keys, which means when dictionay changes, the view reflects these changes.","title":"KeysView"},{"location":"usage/dictview/keysview/#lenkeysview","text":"Return the number of items in the dictionary d: Dict[KT, VT] where keysview=d.keys() .","title":"len(keysview)"},{"location":"usage/dictview/keysview/#return-value","text":"int : The number of items in d","title":"Return value:"},{"location":"usage/dictview/keysview/#iterkeysview","text":"Return an iterator over the keys in the dictionary. The order of the keys is guaranteed to be inserted order.","title":"iter(keysview)"},{"location":"usage/dictview/keysview/#return-value_1","text":"Iterator[_KT_co] : The iterator over the keys in the dictonary.","title":"Return value:"},{"location":"usage/dictview/keysview/#key-in-keysview","text":"Return whether if key is in the dictionary.","title":"key in keysview"},{"location":"usage/dictview/keysview/#arguments","text":"key : object ; An object to be checked","title":"Arguments:"},{"location":"usage/dictview/keysview/#return-value_2","text":"bool : True if key is in the dictionary and False otherwise.","title":"Return value:"},{"location":"usage/dictview/keysview/#reversedkeysview","text":"Return a reverse iterator over the keys of the dictionary. (provided only python version 3.8 and above)","title":"reversed(keysview)"},{"location":"usage/dictview/keysview/#return-value_3","text":"Iterator[_KT_co] : The reverse iterator over the keys in the dictonary.","title":"Return value:"},{"location":"usage/dictview/keysview/#keysview-other","text":"Return a set with elements common to keysview and other .","title":"keysview &amp; other"},{"location":"usage/dictview/keysview/#arguments_1","text":"other : Iterable[Any] ; Iterable to take the intersection.","title":"Arguments:"},{"location":"usage/dictview/keysview/#return-value_4","text":"Set[_KT_co] : A set with elements common to keysview and other .","title":"Return value:"},{"location":"usage/dictview/keysview/#other-keysview","text":"Return a set with elements common to keysview and other .","title":"other &amp; keysview"},{"location":"usage/dictview/keysview/#arguments_2","text":"other : Iterable[_T] ; Iterable to take the intersection.","title":"Arguments:"},{"location":"usage/dictview/keysview/#return-value_5","text":"Set[_T] : A set with elements common to keysview and other .","title":"Return value:"},{"location":"usage/dictview/keysview/#keysview-other_1","text":"Return a new set with elements from keysview and other .","title":"keysview | other"},{"location":"usage/dictview/keysview/#arguments_3","text":"other : Iterable[_T] ; Iterable to take the union.","title":"Arguments:"},{"location":"usage/dictview/keysview/#return-value_6","text":"Set[Union[_KT_co, _T]] : A new set with elements from keysview and other .","title":"Return value:"},{"location":"usage/dictview/keysview/#other-keysview_1","text":"Return a new set with elements from keysview and other .","title":"other | keysview"},{"location":"usage/dictview/keysview/#arguments_4","text":"other : Iterable[_T] ; Iterable to take the union.","title":"Arguments:"},{"location":"usage/dictview/keysview/#return-value_7","text":"Set[Union[_KT_co, _T]] : A new set with elements from keysview and other .","title":"Return value:"},{"location":"usage/dictview/keysview/#keysview-other_2","text":"Return a new set with elements in the keysview that are not in the other .","title":"keysview - other"},{"location":"usage/dictview/keysview/#arguments_5","text":"other : Iterable[Any] ; Iterable to take the difference.","title":"Arguments:"},{"location":"usage/dictview/keysview/#return-value_8","text":"Set[_KT_co] : A new set with elements in the set that are not in the other .","title":"Return value:"},{"location":"usage/dictview/keysview/#other-keysview_2","text":"Return a new set with elements in the other that are not in the keysview .","title":"other - keysview"},{"location":"usage/dictview/keysview/#arguments_6","text":"other : Iterable[_T] ; Iterable to be taken the difference.","title":"Arguments:"},{"location":"usage/dictview/keysview/#return-value_9","text":"Set[_T] : A new set with elements in other that are not in the keysview .","title":"Return value:"},{"location":"usage/dictview/keysview/#keysview-other_3","text":"Return a new set with elements in either the keysview or other but not both.","title":"keysview ^ other"},{"location":"usage/dictview/keysview/#arguments_7","text":"other : Iterable[_T] ; Iterable to take the symmetric difference.","title":"Arguments:"},{"location":"usage/dictview/keysview/#return-value_10","text":"Set[Union[_KT_co, _T]] : A new set with elements in either the keysview or other but not both.","title":"Return value"},{"location":"usage/dictview/keysview/#other-keysview_3","text":"Return a new set with elements in either the keysview or other but not both.","title":"other ^ keysview"},{"location":"usage/dictview/keysview/#arguments_8","text":"other : Iterable[_T] ; Iterable to take the symmetric difference.","title":"Arguments:"},{"location":"usage/dictview/keysview/#return-value_11","text":"Set[Union[_KT_co, _T]] : A new set with elements in either the keysview or other but not both.","title":"Return value"},{"location":"usage/dictview/keysview/#keysviewmapping","text":"Return a MappingProxyType that wraps the original dictionary to which the view refers. (provided only python version 3.10 and above)","title":"keysview.mapping"},{"location":"usage/dictview/keysview/#return-value_12","text":"MappingProxyType : A read-only proxy of the original dictionary.","title":"Return value"},{"location":"usage/dictview/valuesview/","text":"ValuesView ValuesView is a view object which is returned by dict.views() . It provides a dynamic view on the dictionary's values, which means when dictionay changes, the view reflects these changes. len(valuesview) Return the number of items in the dictionay d: Dict[KT, VT] where valuesview=d.values() . Return value: int : The number of items in d iter(valuesview) Return an iterator over the values in the dictionary. The order of the values is guaranteed to be inserted order. Return value: Iterator[_VT_co] : The iterator over the values in the dictionary. value in valuesview Return whether if value is in the dictionary. Arguments: value : object ; An object to be checked Return value: bool : True if value is in the dictionary and False otherwise. reversed(valuesview) Return a reverse iterator over the values of the dictionary. (provided only python version 3.8 and above) Return value: Iterator[_VT_co] : The reverse iterator over the values in the dictonary. valuesview.mapping Return a MappingProxyType that wraps the original dictionary to which the view refers. (provided only python version 3.10 and above) Return value MappingProxyType : A read-only proxy of the original dictionary.","title":"ValuesView"},{"location":"usage/dictview/valuesview/#valuesview","text":"ValuesView is a view object which is returned by dict.views() . It provides a dynamic view on the dictionary's values, which means when dictionay changes, the view reflects these changes.","title":"ValuesView"},{"location":"usage/dictview/valuesview/#lenvaluesview","text":"Return the number of items in the dictionay d: Dict[KT, VT] where valuesview=d.values() .","title":"len(valuesview)"},{"location":"usage/dictview/valuesview/#return-value","text":"int : The number of items in d","title":"Return value:"},{"location":"usage/dictview/valuesview/#itervaluesview","text":"Return an iterator over the values in the dictionary. The order of the values is guaranteed to be inserted order.","title":"iter(valuesview)"},{"location":"usage/dictview/valuesview/#return-value_1","text":"Iterator[_VT_co] : The iterator over the values in the dictionary.","title":"Return value:"},{"location":"usage/dictview/valuesview/#value-in-valuesview","text":"Return whether if value is in the dictionary.","title":"value in valuesview"},{"location":"usage/dictview/valuesview/#arguments","text":"value : object ; An object to be checked","title":"Arguments:"},{"location":"usage/dictview/valuesview/#return-value_2","text":"bool : True if value is in the dictionary and False otherwise.","title":"Return value:"},{"location":"usage/dictview/valuesview/#reversedvaluesview","text":"Return a reverse iterator over the values of the dictionary. (provided only python version 3.8 and above)","title":"reversed(valuesview)"},{"location":"usage/dictview/valuesview/#return-value_3","text":"Iterator[_VT_co] : The reverse iterator over the values in the dictonary.","title":"Return value:"},{"location":"usage/dictview/valuesview/#valuesviewmapping","text":"Return a MappingProxyType that wraps the original dictionary to which the view refers. (provided only python version 3.10 and above)","title":"valuesview.mapping"},{"location":"usage/dictview/valuesview/#return-value_4","text":"MappingProxyType : A read-only proxy of the original dictionary.","title":"Return value"}]}