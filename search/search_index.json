{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Overview Documentation for version: 1.0.3 sqlitecollections is a sort of containers that are backended by sqlite3 DB and are compatible with corresponding built-in collections. Since containers consume disk space instead of RAM, they can handle large amounts of data even in environments with limited RAM. Migrating from existing code using the built-in container is as simple as importing the library and changing the constructor. The elements of the container are automatically serialized and stored in the sqlite3 database, and are automatically read from the sqlite3 database and deserialized when accessed. Current version supports List (mutable sequence), Dict (mutable mapping) and Set (mutable set) and almost all methods are compatible with list, dict and set respectively. Installation pip install sqlitecollections Example import sqlitecollections as sc l = sc . List [ str ]([ \"Alice\" , \"Bob\" , \"Carol\" ]) print ( l [ 2 ]) #> Carol print ( len ( l )) #> 3 l . append ( \"Dave\" ) print ( l . index ( \"Bob\" )) #> 1 print ( l . index ( \"Dave\" )) #> 3 d = sc . Dict [ str , str ]({ \"a\" : \"Alice\" , \"b\" : \"Bob\" }) print ( d [ \"a\" ]) #> Alice d [ \"c\" ] = \"Carol\" print ( list ( d . keys ())) #> ['a', 'b', 'c'] print ( list ( d . values ())) #> ['Alice', 'Bob', 'Carol'] s = sc . Set [ str ]([ \"Alice\" , \"Bob\" , \"Carol\" , \"Dave\" ]) print ( \"Ellen\" in s ) #> False print ( \"Alice\" in s ) #> True print ( list ( s . intersection ([ \"Alice\" , \"Carol\" ]))) #> ['Alice', 'Carol'] In the above example, a temporary file is created every time a container is created, and the elements are written to the sqlite3 database created on the file, thus consuming very little RAM. If you want to reuse the container you created, you can create it by specifying the file path and table name of the sqlite3 database. import sqlitecollections as sc l = sc . List [ str ]([ \"Alice\" , \"Bob\" , \"Carol\" ], connection = \"path/to/file.db\" , table_name = \"list_example\" ) l . append ( \"Dave\" ) exit () When you load it, you can restore the previous state by specifying the same file path and table name. import sqlitecollections as sc l = sc . List [ str ]( connection = \"path/to/file.db\" , table_name = \"list_example\" ) print ( len ( l )) #> 4 print ( list ( l )) #> ['Alice', 'Bob', 'Carol', 'Dave'] Pros and cons for built-in containers Pros Save memory usage. Once the database is built, loading time is almost zero, even for huge data. Cons Each operation has the overhead of serialize/deserialize. Some operations are incompatible and unavailable. For example, directly rewriting the mutable elements of a container.","title":"Overview"},{"location":"#overview","text":"Documentation for version: 1.0.3 sqlitecollections is a sort of containers that are backended by sqlite3 DB and are compatible with corresponding built-in collections. Since containers consume disk space instead of RAM, they can handle large amounts of data even in environments with limited RAM. Migrating from existing code using the built-in container is as simple as importing the library and changing the constructor. The elements of the container are automatically serialized and stored in the sqlite3 database, and are automatically read from the sqlite3 database and deserialized when accessed. Current version supports List (mutable sequence), Dict (mutable mapping) and Set (mutable set) and almost all methods are compatible with list, dict and set respectively.","title":"Overview"},{"location":"#installation","text":"pip install sqlitecollections","title":"Installation"},{"location":"#example","text":"import sqlitecollections as sc l = sc . List [ str ]([ \"Alice\" , \"Bob\" , \"Carol\" ]) print ( l [ 2 ]) #> Carol print ( len ( l )) #> 3 l . append ( \"Dave\" ) print ( l . index ( \"Bob\" )) #> 1 print ( l . index ( \"Dave\" )) #> 3 d = sc . Dict [ str , str ]({ \"a\" : \"Alice\" , \"b\" : \"Bob\" }) print ( d [ \"a\" ]) #> Alice d [ \"c\" ] = \"Carol\" print ( list ( d . keys ())) #> ['a', 'b', 'c'] print ( list ( d . values ())) #> ['Alice', 'Bob', 'Carol'] s = sc . Set [ str ]([ \"Alice\" , \"Bob\" , \"Carol\" , \"Dave\" ]) print ( \"Ellen\" in s ) #> False print ( \"Alice\" in s ) #> True print ( list ( s . intersection ([ \"Alice\" , \"Carol\" ]))) #> ['Alice', 'Carol'] In the above example, a temporary file is created every time a container is created, and the elements are written to the sqlite3 database created on the file, thus consuming very little RAM. If you want to reuse the container you created, you can create it by specifying the file path and table name of the sqlite3 database. import sqlitecollections as sc l = sc . List [ str ]([ \"Alice\" , \"Bob\" , \"Carol\" ], connection = \"path/to/file.db\" , table_name = \"list_example\" ) l . append ( \"Dave\" ) exit () When you load it, you can restore the previous state by specifying the same file path and table name. import sqlitecollections as sc l = sc . List [ str ]( connection = \"path/to/file.db\" , table_name = \"list_example\" ) print ( len ( l )) #> 4 print ( list ( l )) #> ['Alice', 'Bob', 'Carol', 'Dave']","title":"Example"},{"location":"#pros-and-cons-for-built-in-containers","text":"","title":"Pros and cons for built-in containers"},{"location":"#pros","text":"Save memory usage. Once the database is built, loading time is almost zero, even for huge data.","title":"Pros"},{"location":"#cons","text":"Each operation has the overhead of serialize/deserialize. Some operations are incompatible and unavailable. For example, directly rewriting the mutable elements of a container.","title":"Cons"},{"location":"benchmark/","text":"py36 py37 py38 py39 py310 dict list set timing subject builtin sqlitecollections ratio clear 0.00376 0.00611 1.62228 __contains__ 0.00377 0.0038 1.00576 copy 0.00375 0.00838 2.23715 __delitem__ 0.00376 0.00612 1.62609 get 0.00367 0.00389 1.06032 get (unsuccessful search) 0.00364 0.00373 1.02479 __getitem__ 0.00367 0.00381 1.03661 __init__ 0.0037 0.04359 11.79452 items 0.004 0.01153 2.88463 __iter__ 0.00374 0.00807 2.1595 keys 0.00397 0.00822 2.06945 __len__ 0.00385 0.00368 0.95737 __contains__ (unsuccessful search) 0.0037 0.0038 1.02788 pop 0.00375 0.00635 1.69294 pop (unsuccessful search) 0.00388 0.0053 1.36541 popitem 0.0038 0.00681 1.79244 setdefault 0.00377 0.0051 1.3543 setdefault (unsuccessful search) 0.00374 0.00544 1.45494 __setitem__ (add new item) 0.00369 0.00622 1.68542 __setitem__ (replace) 0.00372 0.00622 1.66931 update 0.00374 0.00631 1.68602 update (many) 0.00516 0.56484 109.41628 values 0.00371 0.00802 2.16006 approximate memory usage subject builtin sqlitecollections ratio clear 0.0 0.0 1.0 __contains__ 0.0 0.0 1.0 copy 0.0 0.0 1.0 __delitem__ 0.0 0.0 1.0 get 0.0 0.0 1.0 get (unsuccessful search) 0.0 0.0 1.0 __getitem__ 0.0 0.0 1.0 __init__ 0.0 0.0 1.0 items 0.125 0.23047 1.84375 __iter__ 0.0 0.0 1.0 keys 0.0 0.06641 inf __len__ 0.0 0.0 1.0 __contains__ (unsuccessful search) 0.0 0.0 1.0 pop 0.0 0.0 1.0 pop (unsuccessful search) 0.0 0.0 1.0 popitem 0.0 0.0 1.0 setdefault 0.0 0.0 1.0 setdefault (unsuccessful search) 0.0 0.0 1.0 __setitem__ (add new item) 0.0 0.0 1.0 __setitem__ (replace) 0.0 0.0 1.0 update 0.0 0.0 1.0 update (many) 0.17188 0.0 0.0 values 0.0 0.0 1.0 timing subject builtin sqlitecollections ratio __add__ 0.00376 0.00879 2.33558 append 0.00366 0.00592 1.61745 clear 0.00362 0.00582 1.60838 __contains__ 0.00374 0.00369 0.98433 copy 0.00363 0.00805 2.21488 count 0.00372 0.00364 0.97691 __init__ 0.00368 0.02 5.43041 __delitem__ 0.00365 0.07984 21.89816 __delitem__ (slice) 0.00366 0.15454 42.25218 __delitem__ (slice with skip) 0.00364 0.1549 42.59581 extend 0.00371 0.006 1.61447 __getitem__ 0.0036 0.0036 1.00039 __getitem__ (slice) 0.00359 0.08705 24.2193 __getitem__ (slice with skip) 0.0037 0.01097 2.96727 __iadd__ 0.00376 0.00591 1.57476 __imult__ 0.00363 0.23012 63.37705 index 0.00361 0.00387 1.07133 index (unsuccessful search) 0.00366 0.00393 1.07418 insert 0.00372 0.15154 40.72737 __len__ 0.00368 0.00375 1.01669 __mult__ 0.00368 0.23616 64.12442 __contains__ (unsuccessful search) 0.0037 0.00371 1.00327 pop 0.00369 0.08035 21.78628 remove 0.00364 0.11295 30.99403 __setitem__ 0.00373 0.00605 1.62142 __setitem__ (slice) 0.0036 13.55872 3761.76203 __setitem__ (slice with skip) 0.00367 0.0147 4.00239 sort 0.00377 0.08146 21.6042 approximate memory usage subject builtin sqlitecollections ratio __add__ 0.0 0.0 1.0 append 0.0 0.0 1.0 clear 0.0 0.0 1.0 __contains__ 0.0 0.0 1.0 copy 0.0 0.0 1.0 count 0.0 0.0 1.0 __init__ 0.0 0.0 1.0 __delitem__ 0.0 0.0 1.0 __delitem__ (slice) 0.0 0.0 1.0 __delitem__ (slice with skip) 0.0 0.0 1.0 extend 0.0 0.0 1.0 __getitem__ 0.0 0.0 1.0 __getitem__ (slice) 0.0 0.0 1.0 __getitem__ (slice with skip) 0.0 0.0 1.0 __iadd__ 0.0 0.0 1.0 __imult__ 0.0 0.0 1.0 index 0.0 0.00391 inf index (unsuccessful search) 0.0 0.0 1.0 insert 0.0 0.0 1.0 __len__ 0.0 0.0 1.0 __mult__ 0.0 0.0 1.0 __contains__ (unsuccessful search) 0.0 0.0 1.0 pop 0.0 0.0 1.0 remove 0.0 0.0 1.0 __setitem__ 0.0 0.0 1.0 __setitem__ (slice) 0.0 0.0 1.0 __setitem__ (slice with skip) 0.00391 0.0 0.0 sort 0.0 1.25 inf timing subject builtin sqlitecollections ratio add (existing item) 0.00353 0.0049 1.38843 add (new item) 0.00357 0.00567 1.58692 __and__ 0.00364 0.01949 5.34993 clear 0.0036 0.00573 1.59016 __contains__ 0.00359 0.00359 0.99897 copy 0.00374 0.01557 4.15784 difference 0.00361 0.01536 4.25514 discard 0.00363 0.02212 6.09656 discard (no changes) 0.00359 0.00509 1.41702 __ge__ 0.00358 0.00362 1.01081 __ge__ (not greater than or equals to) 0.00355 0.00365 1.0293 __gt__ 0.00362 0.01024 2.8317 __gt__ (not greater than) 0.00359 0.01887 5.25622 __iand__ 0.00363 0.00753 2.07179 __init__ 0.00357 0.01544 4.32808 intersection 0.00369 0.0196 5.313 intersection_update 0.00363 0.00759 2.09246 __ior__ 0.00363 0.00669 1.84646 isdisjoint 0.00359 0.00361 1.00475 isdisjoint (not disjoint) 0.00359 0.00372 1.03371 issubset 0.00361 0.04132 11.43991 issubset (not subset) 0.00364 0.01993 5.46815 issuperset 0.00359 0.0133 3.70098 issuperset (not superset) 0.00358 0.00375 1.04633 __ixor__ 0.00364 0.0258 7.0851 __le__ 0.00357 0.00442 1.23722 __le__ (not less than or equals to) 0.00362 0.00359 0.99128 __len__ 0.00358 0.00363 1.01312 __lt__ 0.00365 0.00451 1.23434 __lt__ (not less than) 0.00362 0.00361 0.99867 __contains__ (unsuccessful search) 0.00366 0.00368 1.00491 __or__ 0.00358 0.01727 4.81895 pop 0.00389 0.00569 1.4618 remove 0.00359 0.00563 1.56969 __sub__ 0.00362 0.01575 4.35502 symmetric_difference 0.00366 0.04199 11.48666 symmetric_difference_update 0.00361 0.02545 7.05348 union 0.00361 0.01718 4.75606 update 0.0037 0.00665 1.7972 __xor__ 0.0037 0.042 11.34405 approximate memory usage subject builtin sqlitecollections ratio add (existing item) 0.0 0.0 1.0 add (new item) 0.0 0.0 1.0 __and__ 0.0 0.01172 inf clear 0.0 0.0 1.0 __contains__ 0.0 0.0 1.0 copy 0.0 0.0 1.0 difference 0.0 0.0 1.0 discard 0.0 0.0 1.0 discard (no changes) 0.0 0.0 1.0 __ge__ 0.0 0.0 1.0 __ge__ (not greater than or equals to) 0.0 0.0 1.0 __gt__ 0.0 0.0 1.0 __gt__ (not greater than) 0.0 0.0 1.0 __iand__ 0.0 0.0 1.0 __init__ 0.0 0.05078 inf intersection 0.0 0.01172 inf intersection_update 0.0 0.0 1.0 __ior__ 0.0 0.0 1.0 isdisjoint 0.0 0.0 1.0 isdisjoint (not disjoint) 0.0 0.0 1.0 issubset 0.0 0.0 1.0 issubset (not subset) 0.0 0.0 1.0 issuperset 0.0 0.0 1.0 issuperset (not superset) 0.0 0.0 1.0 __ixor__ 0.0 0.0 1.0 __le__ 0.0 0.0 1.0 __le__ (not less than or equals to) 0.0 0.0 1.0 __len__ 0.0 0.0 1.0 __lt__ 0.0 0.0 1.0 __lt__ (not less than) 0.0 0.0 1.0 __contains__ (unsuccessful search) 0.0 0.0 1.0 __or__ 0.0 0.0 1.0 pop 0.0 0.0 1.0 remove 0.0 0.0 1.0 __sub__ 0.0 0.0 1.0 symmetric_difference 0.0 0.0 1.0 symmetric_difference_update 0.0 0.0 1.0 union 0.0 0.0 1.0 update 0.0 0.0 1.0 __xor__ 0.0 0.00391 inf dict list set timing subject builtin sqlitecollections ratio clear 0.00547 0.00996 1.8204 __contains__ 0.00555 0.0063 1.13496 copy 0.00576 0.01516 2.62976 __delitem__ 0.0056 0.00914 1.63181 get 0.00597 0.00592 0.99125 get (unsuccessful search) 0.00526 0.00574 1.08949 __getitem__ 0.00562 0.00554 0.98497 __init__ 0.00539 0.0623 11.55173 items 0.00596 0.01624 2.72608 __iter__ 0.00523 0.01101 2.10553 keys 0.00537 0.01163 2.16581 __len__ 0.00551 0.00536 0.97258 __contains__ (unsuccessful search) 0.00536 0.00707 1.31778 pop 0.00538 0.01075 1.99715 pop (unsuccessful search) 0.00574 0.0082 1.42903 popitem 0.00576 0.01089 1.89046 setdefault 0.0055 0.01028 1.86922 setdefault (unsuccessful search) 0.00536 0.00864 1.61181 __setitem__ (add new item) 0.00533 0.00986 1.8507 __setitem__ (replace) 0.00538 0.0098 1.81996 update 0.00561 0.01011 1.80369 update (many) 0.00667 0.75888 113.75602 values 0.00591 0.01108 1.87395 approximate memory usage subject builtin sqlitecollections ratio clear 0.0 0.0 1.0 __contains__ 0.0 0.0 1.0 copy 0.0 0.0 1.0 __delitem__ 0.0 0.0 1.0 get 0.0 0.0 1.0 get (unsuccessful search) 0.0 0.0 1.0 __getitem__ 0.0 0.0 1.0 __init__ 0.0 0.0 1.0 items 0.05078 0.32812 6.46154 __iter__ 0.0 0.0 1.0 keys 0.0 0.0 1.0 __len__ 0.0 0.0 1.0 __contains__ (unsuccessful search) 0.0 0.0 1.0 pop 0.0 0.0 1.0 pop (unsuccessful search) 0.0 0.0 1.0 popitem 0.0 0.0 1.0 setdefault 0.0 0.0 1.0 setdefault (unsuccessful search) 0.0 0.0 1.0 __setitem__ (add new item) 0.0 0.0 1.0 __setitem__ (replace) 0.0 0.0 1.0 update 0.0 0.0 1.0 update (many) 0.0 0.0 1.0 values 0.0 0.0 1.0 timing subject builtin sqlitecollections ratio __add__ 0.00593 0.01461 2.46477 append 0.00523 0.00983 1.88025 clear 0.00521 0.01132 2.17281 __contains__ 0.00516 0.00513 0.99467 copy 0.00525 0.01456 2.77256 count 0.00519 0.00519 0.99853 __init__ 0.00516 0.03015 5.8387 __delitem__ 0.00556 0.11333 20.40212 __delitem__ (slice) 0.00522 0.20171 38.63059 __delitem__ (slice with skip) 0.00556 0.20509 36.91014 extend 0.00526 0.00954 1.81245 __getitem__ 0.00579 0.00602 1.03988 __getitem__ (slice) 0.00559 0.11828 21.15741 __getitem__ (slice with skip) 0.00511 0.01846 3.61479 __iadd__ 0.00533 0.0092 1.72429 __imult__ 0.00528 0.30083 57.00587 index 0.00562 0.00593 1.05541 index (unsuccessful search) 0.00557 0.00655 1.17598 insert 0.00549 0.19788 36.0275 __len__ 0.00557 0.00562 1.00954 __mult__ 0.00537 0.31401 58.42584 __contains__ (unsuccessful search) 0.00522 0.00649 1.24318 pop 0.00525 0.10625 20.21863 remove 0.00528 0.15541 29.42491 __setitem__ 0.00561 0.00989 1.76237 __setitem__ (slice) 0.00523 18.37516 3513.58827 __setitem__ (slice with skip) 0.00527 0.02206 4.18336 sort 0.00536 0.12037 22.45183 approximate memory usage subject builtin sqlitecollections ratio __add__ 0.0 0.0 1.0 append 0.0 0.0 1.0 clear 0.0 0.0 1.0 __contains__ 0.0 0.0 1.0 copy 0.0 0.0 1.0 count 0.0 0.0 1.0 __init__ 0.0 0.0 1.0 __delitem__ 0.0 0.0 1.0 __delitem__ (slice) 0.0 0.0 1.0 __delitem__ (slice with skip) 0.0 0.0 1.0 extend 0.0 0.0 1.0 __getitem__ 0.0 0.0 1.0 __getitem__ (slice) 0.0 0.0 1.0 __getitem__ (slice with skip) 0.0 0.0 1.0 __iadd__ 0.0 0.0 1.0 __imult__ 0.0 0.0 1.0 index 0.0 0.0 1.0 index (unsuccessful search) 0.0 0.0 1.0 insert 0.0 0.0 1.0 __len__ 0.0 0.0 1.0 __mult__ 0.0 0.0 1.0 __contains__ (unsuccessful search) 0.0 0.0 1.0 pop 0.0 0.0 1.0 remove 0.0 0.0 1.0 __setitem__ 0.0 0.0 1.0 __setitem__ (slice) 0.0 0.0 1.0 __setitem__ (slice with skip) 0.0 0.0 1.0 sort 0.0 0.98828 inf timing subject builtin sqlitecollections ratio add (existing item) 0.0051 0.01031 2.02158 add (new item) 0.0055 0.01014 1.84251 __and__ 0.00664 0.03375 5.08346 clear 0.00541 0.00919 1.69807 __contains__ 0.00553 0.00571 1.03139 copy 0.00529 0.02529 4.77677 difference 0.00508 0.02459 4.84436 discard 0.00516 0.01117 2.1634 discard (no changes) 0.00524 0.00808 1.54284 __ge__ 0.00554 0.00504 0.90939 __ge__ (not greater than or equals to) 0.00497 0.00543 1.09248 __gt__ 0.00542 0.01047 1.93273 __gt__ (not greater than) 0.00534 0.0257 4.81642 __iand__ 0.00583 0.01408 2.41534 __init__ 0.00516 0.37055 71.8696 intersection 0.00559 0.03321 5.94102 intersection_update 0.00598 0.01326 2.21796 __ior__ 0.00514 0.01129 2.19445 isdisjoint 0.00514 0.00591 1.15003 isdisjoint (not disjoint) 0.00531 0.00534 1.00496 issubset 0.00532 0.05957 11.19365 issubset (not subset) 0.00518 0.0297 5.73527 issuperset 0.00519 0.01664 3.2047 issuperset (not superset) 0.00516 0.00563 1.09123 __ixor__ 0.0053 0.04049 7.63607 __le__ 0.00533 0.00705 1.32265 __le__ (not less than or equals to) 0.00532 0.00525 0.98717 __len__ 0.00513 0.00516 1.00633 __lt__ 0.00534 0.0066 1.23568 __lt__ (not less than) 0.00534 0.00536 1.00252 __contains__ (unsuccessful search) 0.00587 0.00534 0.90912 __or__ 0.00564 0.02894 5.13095 pop 0.00534 0.01074 2.01132 remove 0.00554 0.01014 1.82986 __sub__ 0.00529 0.02881 5.44689 symmetric_difference 0.00525 0.06266 11.9392 symmetric_difference_update 0.0053 0.03464 6.53607 union 0.00554 0.0306 5.52759 update 0.00556 0.01069 1.92311 __xor__ 0.00524 0.06631 12.65237 approximate memory usage subject builtin sqlitecollections ratio add (existing item) 0.0 0.0 1.0 add (new item) 0.0 0.0 1.0 __and__ 0.0 0.01953 inf clear 0.0 0.0 1.0 __contains__ 0.0 0.0 1.0 copy 0.0 0.0 1.0 difference 0.0 0.0 1.0 discard 0.0 0.0 1.0 discard (no changes) 0.0 0.0 1.0 __ge__ 0.0 0.0 1.0 __ge__ (not greater than or equals to) 0.0 0.0 1.0 __gt__ 0.0 0.0 1.0 __gt__ (not greater than) 0.0 0.0 1.0 __iand__ 0.0 0.0 1.0 __init__ 0.0 0.03906 inf intersection 0.0 0.0 1.0 intersection_update 0.0 0.0 1.0 __ior__ 0.0 0.0 1.0 isdisjoint 0.0 0.0 1.0 isdisjoint (not disjoint) 0.0 0.0 1.0 issubset 0.0 0.0 1.0 issubset (not subset) 0.0 0.0 1.0 issuperset 0.0 0.0 1.0 issuperset (not superset) 0.0 0.0 1.0 __ixor__ 0.0 0.0 1.0 __le__ 0.0 0.0 1.0 __le__ (not less than or equals to) 0.0 0.0 1.0 __len__ 0.0 0.0 1.0 __lt__ 0.0 0.0 1.0 __lt__ (not less than) 0.0 0.0 1.0 __contains__ (unsuccessful search) 0.0 0.0 1.0 __or__ 0.0 0.0 1.0 pop 0.0 0.0 1.0 remove 0.0 0.0 1.0 __sub__ 0.0 0.0 1.0 symmetric_difference 0.0 0.0 1.0 symmetric_difference_update 0.0 0.0 1.0 union 0.0 0.0 1.0 update 0.0 0.0 1.0 __xor__ 0.0 0.0 1.0 dict list set timing subject builtin sqlitecollections ratio clear 0.00513 0.00904 1.75961 __contains__ 0.00523 0.00561 1.07246 copy 0.00503 0.01256 2.49564 __delitem__ 0.00539 0.0093 1.72552 get 0.00505 0.00518 1.02574 get (unsuccessful search) 0.00497 0.00513 1.03195 __getitem__ 0.00548 0.00551 1.00557 __init__ 0.00513 0.05159 10.06 items 0.00574 0.01352 2.3541 __iter__ 0.00509 0.00984 1.93386 keys 0.00485 0.00946 1.9494 __len__ 0.00498 0.00547 1.10002 __contains__ (unsuccessful search) 0.00511 0.00554 1.08443 pop 0.00576 0.00915 1.58942 pop (unsuccessful search) 0.00501 0.00773 1.54297 popitem 0.00501 0.00986 1.96524 reversed 0.00507 0.00947 1.86715 setdefault 0.00541 0.00748 1.38183 setdefault (unsuccessful search) 0.00513 0.00794 1.54996 __setitem__ (add new item) 0.00522 0.0096 1.83973 __setitem__ (replace) 0.00522 0.00924 1.77146 update 0.00511 0.00921 1.80105 update (many) 0.00686 0.67012 97.64172 values 0.00501 0.00932 1.85956 approximate memory usage subject builtin sqlitecollections ratio clear 0.0 0.0 1.0 __contains__ 0.0 0.0 1.0 copy 0.0 0.0 1.0 __delitem__ 0.0 0.0 1.0 get 0.0 0.0 1.0 get (unsuccessful search) 0.0 0.0 1.0 __getitem__ 0.0 0.0 1.0 __init__ 0.0 0.0 1.0 items 0.05859 0.28125 4.8 __iter__ 0.0 0.0 1.0 keys 0.0 0.0 1.0 __len__ 0.0 0.0 1.0 __contains__ (unsuccessful search) 0.0 0.0 1.0 pop 0.0 0.0 1.0 pop (unsuccessful search) 0.0 0.0 1.0 popitem 0.0 0.0 1.0 reversed 0.0 0.0 1.0 setdefault 0.0 0.0 1.0 setdefault (unsuccessful search) 0.0 0.0 1.0 __setitem__ (add new item) 0.0 0.0 1.0 __setitem__ (replace) 0.0 0.0 1.0 update 0.0 0.0 1.0 update (many) 0.0 0.0 1.0 values 0.0 0.0 1.0 timing subject builtin sqlitecollections ratio __add__ 0.00503 0.01612 3.20649 append 0.00574 0.00999 1.7398 clear 0.0048 0.00888 1.85122 __contains__ 0.00522 0.00483 0.92679 copy 0.00485 0.01138 2.34641 count 0.00483 0.00534 1.10576 __init__ 0.00499 0.02562 5.13028 __delitem__ 0.00501 0.09892 19.75522 __delitem__ (slice) 0.00504 0.18452 36.60712 __delitem__ (slice with skip) 0.00497 0.19363 38.99872 extend 0.00487 0.00896 1.84071 __getitem__ 0.00493 0.00682 1.38351 __getitem__ (slice) 0.00514 0.11119 21.64244 __getitem__ (slice with skip) 0.00527 0.01719 3.26447 __iadd__ 0.00511 0.00897 1.7531 __imult__ 0.00514 0.28483 55.36146 index 0.00566 0.0061 1.07731 index (unsuccessful search) 0.00501 0.00598 1.19277 insert 0.00506 0.18438 36.44724 __len__ 0.00525 0.00548 1.04481 __mult__ 0.00526 0.28478 54.08886 __contains__ (unsuccessful search) 0.00522 0.00517 0.99151 pop 0.00505 0.10121 20.05969 remove 0.00491 0.13772 28.07563 __setitem__ 0.00487 0.00952 1.95522 __setitem__ (slice) 0.00521 17.47582 3355.67729 __setitem__ (slice with skip) 0.00497 0.0206 4.14014 sort 0.00518 0.09492 18.32359 approximate memory usage subject builtin sqlitecollections ratio __add__ 0.0 0.0 1.0 append 0.0 0.0 1.0 clear 0.0 0.0 1.0 __contains__ 0.0 0.0 1.0 copy 0.0 0.0 1.0 count 0.0 0.0 1.0 __init__ 0.0 0.0 1.0 __delitem__ 0.0 0.0 1.0 __delitem__ (slice) 0.0 0.0 1.0 __delitem__ (slice with skip) 0.0 0.0 1.0 extend 0.0 0.0 1.0 __getitem__ 0.0 0.0 1.0 __getitem__ (slice) 0.0 0.0 1.0 __getitem__ (slice with skip) 0.0 0.0 1.0 __iadd__ 0.0 0.0 1.0 __imult__ 0.0 0.0 1.0 index 0.0 0.0 1.0 index (unsuccessful search) 0.0 0.0 1.0 insert 0.0 0.0 1.0 __len__ 0.0 0.0 1.0 __mult__ 0.0 0.0 1.0 __contains__ (unsuccessful search) 0.0 0.0 1.0 pop 0.0 0.0 1.0 remove 0.0 0.0 1.0 __setitem__ 0.0 0.0 1.0 __setitem__ (slice) 0.0 0.0 1.0 __setitem__ (slice with skip) 0.0 0.0 1.0 sort 0.0 0.99219 inf timing subject builtin sqlitecollections ratio add (existing item) 0.00525 0.0071 1.35225 add (new item) 0.00505 0.00922 1.82425 __and__ 0.00521 0.06448 12.3787 clear 0.00522 0.00906 1.73662 __contains__ 0.00523 0.00493 0.94267 copy 0.00573 0.02343 4.0912 difference 0.00501 0.02367 4.72793 discard 0.00525 0.00914 1.73892 discard (no changes) 0.00533 0.01064 1.99849 __ge__ 0.00536 0.00527 0.98369 __ge__ (not greater than or equals to) 0.00506 0.00524 1.03514 __gt__ 0.00476 0.00987 2.07225 __gt__ (not greater than) 0.0059 0.02317 3.92895 __iand__ 0.00475 0.01196 2.51684 __init__ 0.005 0.02462 4.92679 intersection 0.00536 0.40194 74.94939 intersection_update 0.00542 0.01474 2.72089 __ior__ 0.00587 0.0119 2.02786 isdisjoint 0.0056 0.00567 1.01357 isdisjoint (not disjoint) 0.00545 0.00532 0.97598 issubset 0.00552 0.05785 10.48628 issubset (not subset) 0.00534 0.03077 5.76388 issuperset 0.00547 0.01772 3.23953 issuperset (not superset) 0.00569 0.00543 0.95433 __ixor__ 0.00526 0.03142 5.97168 __le__ 0.00514 0.00548 1.06582 __le__ (not less than or equals to) 0.00547 0.00482 0.88085 __len__ 0.00489 0.0058 1.18506 __lt__ 0.00481 0.006 1.2489 __lt__ (not less than) 0.00543 0.00546 1.0058 __contains__ (unsuccessful search) 0.00482 0.0047 0.97525 __or__ 0.00499 0.02395 4.79444 pop 0.00484 0.00841 1.73844 remove 0.00551 0.00942 1.70994 __sub__ 0.00485 0.02231 4.59806 symmetric_difference 0.00482 0.05445 11.29154 symmetric_difference_update 0.0048 0.0315 6.55846 union 0.0051 0.02322 4.55413 update 0.00485 0.00994 2.05143 __xor__ 0.00515 0.05742 11.15474 approximate memory usage subject builtin sqlitecollections ratio add (existing item) 0.0 0.0 1.0 add (new item) 0.0 0.0 1.0 __and__ 0.0 0.00391 inf clear 0.0 0.0 1.0 __contains__ 0.0 0.0 1.0 copy 0.0 0.0 1.0 difference 0.0 0.0 1.0 discard 0.0 0.0 1.0 discard (no changes) 0.0 0.0 1.0 __ge__ 0.0 0.0 1.0 __ge__ (not greater than or equals to) 0.0 0.0 1.0 __gt__ 0.0 0.0 1.0 __gt__ (not greater than) 0.0 0.0 1.0 __iand__ 0.0 0.0 1.0 __init__ 0.0 0.05078 inf intersection 0.0 0.0 1.0 intersection_update 0.0 0.0 1.0 __ior__ 0.0 0.0 1.0 isdisjoint 0.0 0.0 1.0 isdisjoint (not disjoint) 0.0 0.0 1.0 issubset 0.0 0.0 1.0 issubset (not subset) 0.0 0.0 1.0 issuperset 0.0 0.0 1.0 issuperset (not superset) 0.0 0.0 1.0 __ixor__ 0.0 0.0 1.0 __le__ 0.0 0.0 1.0 __le__ (not less than or equals to) 0.0 0.0 1.0 __len__ 0.0 0.0 1.0 __lt__ 0.0 0.0 1.0 __lt__ (not less than) 0.0 0.0 1.0 __contains__ (unsuccessful search) 0.0 0.0 1.0 __or__ 0.0 0.0 1.0 pop 0.0 0.0 1.0 remove 0.0 0.0 1.0 __sub__ 0.0 0.0 1.0 symmetric_difference 0.0 0.0 1.0 symmetric_difference_update 0.0 0.0 1.0 union 0.0 0.0 1.0 update 0.0 0.0 1.0 __xor__ 0.0 0.0 1.0 dict list set timing subject builtin sqlitecollections ratio clear 0.0042 0.0075 1.78543 __contains__ 0.0042 0.00442 1.05334 copy 0.00421 0.00976 2.3155 __delitem__ 0.0042 0.00727 1.73157 get 0.00415 0.00435 1.04854 get (unsuccessful search) 0.00424 0.00436 1.02772 __getitem__ 0.00413 0.00456 1.10321 __init__ 0.00459 0.04006 8.72151 __ior__ 0.00444 0.00836 1.88375 __ior__ (many) 0.0056 0.58957 105.24688 items 0.00478 0.0112 2.34056 __iter__ 0.00421 0.00822 1.95331 keys 0.00436 0.00839 1.92298 __len__ 0.00427 0.0043 1.00784 __contains__ (unsuccessful search) 0.00445 0.00453 1.01941 __or__ 0.00488 0.01217 2.49437 __or__ (many) 0.00586 0.59935 102.26175 pop 0.00443 0.00768 1.7346 pop (unsuccessful search) 0.00442 0.00617 1.39616 popitem 0.00444 0.00796 1.79123 reversed 0.00422 0.00795 1.8844 setdefault 0.00425 0.00606 1.42412 setdefault (unsuccessful search) 0.00421 0.00632 1.50267 __setitem__ (add new item) 0.00425 0.00795 1.87319 __setitem__ (replace) 0.0042 0.00753 1.79521 update 0.00422 0.00861 2.03897 update (many) 0.00519 0.58853 113.29944 values 0.00417 0.00768 1.84082 approximate memory usage subject builtin sqlitecollections ratio clear 0.0 0.0 1.0 __contains__ 0.0 0.0 1.0 copy 0.0 0.0 1.0 __delitem__ 0.0 0.0 1.0 get 0.0 0.0 1.0 get (unsuccessful search) 0.0 0.0 1.0 __getitem__ 0.0 0.0 1.0 __init__ 0.0 0.0 1.0 __ior__ 0.0 0.0 1.0 __ior__ (many) 0.18359 0.0 0.0 items 0.0 0.21094 inf __iter__ 0.0 0.0 1.0 keys 0.0 0.0 1.0 __len__ 0.0 0.0 1.0 __contains__ (unsuccessful search) 0.0 0.0 1.0 __or__ 0.0 0.0 1.0 __or__ (many) 0.0 0.0 1.0 pop 0.0 0.0 1.0 pop (unsuccessful search) 0.0 0.0 1.0 popitem 0.0 0.0 1.0 reversed 0.0 0.0 1.0 setdefault 0.0 0.0 1.0 setdefault (unsuccessful search) 0.0 0.0 1.0 __setitem__ (add new item) 0.0 0.0 1.0 __setitem__ (replace) 0.0 0.0 1.0 update 0.0 0.0 1.0 update (many) 0.0 0.0 1.0 values 0.0 0.0 1.0 timing subject builtin sqlitecollections ratio __add__ 0.00426 0.01134 2.65971 append 0.00423 0.00729 1.72299 clear 0.00417 0.00731 1.75377 __contains__ 0.00411 0.00407 0.99019 copy 0.00402 0.00913 2.272 count 0.00406 0.00429 1.05456 __init__ 0.00405 0.02045 5.0505 __delitem__ 0.00421 0.08415 19.98835 __delitem__ (slice) 0.0041 0.16185 39.46883 __delitem__ (slice with skip) 0.00411 0.16208 39.44146 extend 0.00408 0.00707 1.73158 __getitem__ 0.00404 0.00412 1.02014 __getitem__ (slice) 0.00404 0.09126 22.59225 __getitem__ (slice with skip) 0.00401 0.01248 3.11278 __iadd__ 0.00409 0.00715 1.74763 __imult__ 0.00407 0.23777 58.46718 index 0.00417 0.0044 1.05425 index (unsuccessful search) 0.0041 0.00442 1.0791 insert 0.00414 0.15831 38.2786 __len__ 0.00413 0.00423 1.02231 __mult__ 0.00421 0.24188 57.50141 __contains__ (unsuccessful search) 0.00416 0.00424 1.02009 pop 0.00425 0.08529 20.07041 remove 0.00414 0.11963 28.9019 __setitem__ 0.0042 0.00714 1.70131 __setitem__ (slice) 0.00418 14.09446 3373.86638 __setitem__ (slice with skip) 0.00406 0.01639 4.03572 sort 0.00409 0.08976 21.95547 approximate memory usage subject builtin sqlitecollections ratio __add__ 0.0 0.0 1.0 append 0.0 0.0 1.0 clear 0.0 0.0 1.0 __contains__ 0.0 0.0 1.0 copy 0.0 0.0 1.0 count 0.0 0.0 1.0 __init__ 0.0 0.0 1.0 __delitem__ 0.0 0.00391 inf __delitem__ (slice) 0.0 0.0 1.0 __delitem__ (slice with skip) 0.0 0.0 1.0 extend 0.0 0.0 1.0 __getitem__ 0.0 0.0 1.0 __getitem__ (slice) 0.0 0.0 1.0 __getitem__ (slice with skip) 0.0 0.0 1.0 __iadd__ 0.0 0.0 1.0 __imult__ 0.0 0.0 1.0 index 0.0 0.0 1.0 index (unsuccessful search) 0.0 0.0 1.0 insert 0.0 0.0 1.0 __len__ 0.0 0.0 1.0 __mult__ 0.0 0.0 1.0 __contains__ (unsuccessful search) 0.0 0.0 1.0 pop 0.0 0.0 1.0 remove 0.0 0.0 1.0 __setitem__ 0.0 0.0 1.0 __setitem__ (slice) 0.0 0.0 1.0 __setitem__ (slice with skip) 0.0 0.0 1.0 sort 0.0 0.64453 inf timing subject builtin sqlitecollections ratio add (existing item) 0.00416 0.00554 1.33163 add (new item) 0.00407 0.00683 1.67872 __and__ 0.00403 0.03556 8.82331 clear 0.00401 0.00667 1.66354 __contains__ 0.00421 0.00409 0.97274 copy 0.00411 0.01816 4.41375 difference 0.00402 0.02307 5.73572 discard 0.00405 0.00742 1.83181 discard (no changes) 0.00404 0.00643 1.59021 __ge__ 0.00404 0.00399 0.98916 __ge__ (not greater than or equals to) 0.00401 0.00402 1.00261 __gt__ 0.00406 0.00702 1.72886 __gt__ (not greater than) 0.00401 0.01828 4.56011 __iand__ 0.00405 0.00957 2.36288 __init__ 0.00406 0.0168 4.13624 intersection 0.004 0.02132 5.32751 intersection_update 0.00404 0.00888 2.19624 __ior__ 0.00415 0.00768 1.8495 isdisjoint 0.00402 0.00403 1.00131 isdisjoint (not disjoint) 0.00405 0.00404 0.99818 issubset 0.0042 0.04191 9.97296 issubset (not subset) 0.00404 0.02031 5.03264 issuperset 0.00407 0.0127 3.1163 issuperset (not superset) 0.00404 0.00401 0.99296 __ixor__ 0.00398 0.02498 6.27025 __le__ 0.00409 0.00471 1.15133 __le__ (not less than or equals to) 0.00409 0.00405 0.9898 __len__ 0.00405 0.00403 0.99572 __lt__ 0.00404 0.00482 1.19426 __lt__ (not less than) 0.00412 0.00401 0.97124 __contains__ (unsuccessful search) 0.00407 0.00417 1.02468 __or__ 0.00428 0.01786 4.1761 pop 0.00414 0.00714 1.72259 remove 0.00411 0.00692 1.68226 __sub__ 0.00416 0.01708 4.10563 symmetric_difference 0.00403 0.04298 10.66595 symmetric_difference_update 0.00411 0.02609 6.34314 union 0.00414 0.01798 4.33961 update 0.00402 0.00747 1.85616 __xor__ 0.00401 0.04193 10.44894 approximate memory usage subject builtin sqlitecollections ratio add (existing item) 0.0 0.0 1.0 add (new item) 0.0 0.0 1.0 __and__ 0.0 0.0 1.0 clear 0.0 0.0 1.0 __contains__ 0.0 0.0 1.0 copy 0.0 0.0 1.0 difference 0.0 0.0 1.0 discard 0.0 0.0 1.0 discard (no changes) 0.0 0.0 1.0 __ge__ 0.0 0.0 1.0 __ge__ (not greater than or equals to) 0.0 0.0 1.0 __gt__ 0.0 0.0 1.0 __gt__ (not greater than) 0.0 0.0 1.0 __iand__ 0.0 0.0 1.0 __init__ 0.0 0.0 1.0 intersection 0.0 0.0 1.0 intersection_update 0.0 0.0 1.0 __ior__ 0.0 0.0 1.0 isdisjoint 0.0 0.0 1.0 isdisjoint (not disjoint) 0.0 0.0 1.0 issubset 0.0 0.0 1.0 issubset (not subset) 0.0 0.0 1.0 issuperset 0.0 0.0 1.0 issuperset (not superset) 0.0 0.0 1.0 __ixor__ 0.0 0.0 1.0 __le__ 0.0 0.0 1.0 __le__ (not less than or equals to) 0.0 0.0 1.0 __len__ 0.0 0.0 1.0 __lt__ 0.0 0.0 1.0 __lt__ (not less than) 0.0 0.0 1.0 __contains__ (unsuccessful search) 0.0 0.0 1.0 __or__ 0.0 0.0 1.0 pop 0.0 0.0 1.0 remove 0.0 0.0 1.0 __sub__ 0.0 0.0 1.0 symmetric_difference 0.0 0.0 1.0 symmetric_difference_update 0.0 0.0 1.0 union 0.0 0.0 1.0 update 0.0 0.0 1.0 __xor__ 0.0 0.0 1.0 dict list set timing subject builtin sqlitecollections ratio clear 0.00366 0.00696 1.90198 __contains__ 0.00372 0.00372 0.99926 copy 0.00365 0.00981 2.6884 __delitem__ 0.00366 0.00724 1.97696 get 0.00368 0.00376 1.02329 get (unsuccessful search) 0.00358 0.0038 1.06308 __getitem__ 0.00362 0.00373 1.03081 __init__ 0.00384 0.03879 10.1017 __ior__ 0.00371 0.00723 1.94887 __ior__ (many) 0.00473 0.55386 117.14035 items 0.00416 0.01049 2.52041 __iter__ 0.00371 0.00758 2.04567 keys 0.00368 0.00757 2.05772 __len__ 0.00371 0.00376 1.01306 __contains__ (unsuccessful search) 0.00363 0.00374 1.0296 __or__ 0.00367 0.01141 3.10775 __or__ (many) 0.00481 0.57197 118.9352 pop 0.00372 0.0071 1.91083 pop (unsuccessful search) 0.00371 0.00552 1.48622 popitem 0.00409 0.00775 1.89453 reversed 0.00364 0.00746 2.04708 setdefault 0.00371 0.00564 1.52102 setdefault (unsuccessful search) 0.00369 0.0062 1.68089 __setitem__ (add new item) 0.00373 0.00753 2.02026 __setitem__ (replace) 0.00387 0.00775 2.00333 update 0.00392 0.00747 1.9038 update (many) 0.00456 0.55294 121.17922 values 0.00364 0.00717 1.96875 approximate memory usage subject builtin sqlitecollections ratio clear 0.0 0.0 1.0 __contains__ 0.0 0.0 1.0 copy 0.0 0.0 1.0 __delitem__ 0.0 0.0 1.0 get 0.0 0.0 1.0 get (unsuccessful search) 0.0 0.0 1.0 __getitem__ 0.0 0.0 1.0 __init__ 0.0 0.0 1.0 __ior__ 0.0 0.0 1.0 __ior__ (many) 0.17969 0.0 0.0 items 0.0 0.17188 inf __iter__ 0.0 0.0 1.0 keys 0.0 0.0 1.0 __len__ 0.0 0.0 1.0 __contains__ (unsuccessful search) 0.0 0.0 1.0 __or__ 0.0 0.0 1.0 __or__ (many) 0.0 0.0 1.0 pop 0.0 0.0 1.0 pop (unsuccessful search) 0.0 0.0 1.0 popitem 0.0 0.0 1.0 reversed 0.0 0.0 1.0 setdefault 0.0 0.0 1.0 setdefault (unsuccessful search) 0.0 0.0 1.0 __setitem__ (add new item) 0.0 0.0 1.0 __setitem__ (replace) 0.0 0.0 1.0 update 0.0 0.0 1.0 update (many) 0.0 0.0 1.0 values 0.0 0.0 1.0 timing subject builtin sqlitecollections ratio __add__ 0.00366 0.01061 2.89675 append 0.00366 0.00675 1.84577 clear 0.00358 0.00664 1.85365 __contains__ 0.00368 0.00358 0.97364 copy 0.00356 0.00979 2.74528 count 0.00358 0.00374 1.04546 __init__ 0.00367 0.02239 6.10697 __delitem__ 0.00369 0.0811 21.98256 __delitem__ (slice) 0.00363 0.154 42.37529 __delitem__ (slice with skip) 0.0036 0.15403 42.82038 extend 0.00362 0.00715 1.97612 __getitem__ 0.00377 0.00383 1.017 __getitem__ (slice) 0.00378 0.08893 23.51411 __getitem__ (slice with skip) 0.00365 0.01318 3.60711 __iadd__ 0.00365 0.00709 1.94363 __imult__ 0.00362 0.23175 64.09677 index 0.00361 0.0039 1.07963 index (unsuccessful search) 0.00355 0.0043 1.20937 insert 0.00376 0.15378 40.94784 __len__ 0.00367 0.00371 1.0122 __mult__ 0.00354 0.23653 66.73601 __contains__ (unsuccessful search) 0.00369 0.00372 1.00822 pop 0.00367 0.0803 21.90362 remove 0.00356 0.11441 32.10751 __setitem__ 0.00362 0.00706 1.95269 __setitem__ (slice) 0.0036 14.26356 3959.34428 __setitem__ (slice with skip) 0.00363 0.01539 4.24023 sort 0.00382 0.07961 20.83295 approximate memory usage subject builtin sqlitecollections ratio __add__ 0.0 0.0 1.0 append 0.0 0.0 1.0 clear 0.0 0.0 1.0 __contains__ 0.0 0.0 1.0 copy 0.0 0.0 1.0 count 0.0 0.0 1.0 __init__ 0.0 0.0 1.0 __delitem__ 0.0 0.00391 inf __delitem__ (slice) 0.0 0.0 1.0 __delitem__ (slice with skip) 0.0 0.0 1.0 extend 0.0 0.0 1.0 __getitem__ 0.0 0.0 1.0 __getitem__ (slice) 0.0 0.0 1.0 __getitem__ (slice with skip) 0.0 0.0 1.0 __iadd__ 0.0 0.0 1.0 __imult__ 0.0 0.0 1.0 index 0.0 0.0 1.0 index (unsuccessful search) 0.0 0.0 1.0 insert 0.0 0.0 1.0 __len__ 0.0 0.0 1.0 __mult__ 0.0 0.0 1.0 __contains__ (unsuccessful search) 0.0 0.0 1.0 pop 0.0 0.0 1.0 remove 0.0 0.0 1.0 __setitem__ 0.0 0.0 1.0 __setitem__ (slice) 0.0 0.0 1.0 __setitem__ (slice with skip) 0.0 0.0 1.0 sort 0.0 0.70703 inf timing subject builtin sqlitecollections ratio add (existing item) 0.00351 0.00534 1.52457 add (new item) 0.00352 0.00696 1.97678 __and__ 0.00359 0.03242 9.04061 clear 0.00358 0.00626 1.74584 __contains__ 0.0035 0.00352 1.00505 copy 0.00354 0.01688 4.76433 difference 0.0035 0.04902 13.98575 discard 0.00355 0.00684 1.92815 discard (no changes) 0.00353 0.00523 1.48188 __ge__ 0.00353 0.00359 1.01509 __ge__ (not greater than or equals to) 0.00349 0.00356 1.02252 __gt__ 0.00352 0.00712 2.02296 __gt__ (not greater than) 0.00359 0.01797 5.00015 __iand__ 0.00355 0.00963 2.7139 __init__ 0.00359 0.01745 4.85602 intersection 0.00354 0.02187 6.17954 intersection_update 0.00366 0.00888 2.42921 __ior__ 0.00359 0.00747 2.08206 isdisjoint 0.00356 0.00352 0.98946 isdisjoint (not disjoint) 0.00354 0.00352 0.99363 issubset 0.00351 0.04055 11.55768 issubset (not subset) 0.00356 0.02259 6.35041 issuperset 0.00356 0.01192 3.34575 issuperset (not superset) 0.00352 0.00361 1.02629 __ixor__ 0.00356 0.02451 6.88942 __le__ 0.00353 0.00427 1.20908 __le__ (not less than or equals to) 0.00353 0.00361 1.02385 __len__ 0.00355 0.0036 1.01292 __lt__ 0.00356 0.00445 1.25066 __lt__ (not less than) 0.00355 0.00357 1.00606 __contains__ (unsuccessful search) 0.00367 0.00357 0.97286 __or__ 0.00356 0.0181 5.07929 pop 0.00363 0.00661 1.81864 remove 0.00361 0.00691 1.91474 __sub__ 0.00358 0.01877 5.23576 symmetric_difference 0.0036 0.04165 11.56066 symmetric_difference_update 0.00358 0.02444 6.83409 union 0.00363 0.01847 5.08578 update 0.00353 0.00714 2.02045 __xor__ 0.00365 0.04094 11.21145 approximate memory usage subject builtin sqlitecollections ratio add (existing item) 0.0 0.0 1.0 add (new item) 0.0 0.0 1.0 __and__ 0.0 0.0 1.0 clear 0.0 0.0 1.0 __contains__ 0.0 0.0 1.0 copy 0.0 0.0 1.0 difference 0.0 0.0 1.0 discard 0.0 0.0 1.0 discard (no changes) 0.0 0.0 1.0 __ge__ 0.0 0.0 1.0 __ge__ (not greater than or equals to) 0.0 0.0 1.0 __gt__ 0.0 0.0 1.0 __gt__ (not greater than) 0.0 0.0 1.0 __iand__ 0.0 0.0 1.0 __init__ 0.0 0.0 1.0 intersection 0.0 0.0 1.0 intersection_update 0.0 0.0 1.0 __ior__ 0.0 0.0 1.0 isdisjoint 0.0 0.0 1.0 isdisjoint (not disjoint) 0.0 0.0 1.0 issubset 0.0 0.0 1.0 issubset (not subset) 0.0 0.0 1.0 issuperset 0.0 0.0 1.0 issuperset (not superset) 0.0 0.0 1.0 __ixor__ 0.0 0.0 1.0 __le__ 0.0 0.0 1.0 __le__ (not less than or equals to) 0.0 0.0 1.0 __len__ 0.0 0.0 1.0 __lt__ 0.0 0.0 1.0 __lt__ (not less than) 0.0 0.0 1.0 __contains__ (unsuccessful search) 0.0 0.0 1.0 __or__ 0.0 0.0 1.0 pop 0.0 0.0 1.0 remove 0.0 0.0 1.0 __sub__ 0.0 0.0 1.0 symmetric_difference 0.0 0.0 1.0 symmetric_difference_update 0.0 0.0 1.0 union 0.0 0.0 1.0 update 0.0 0.0 1.0 __xor__ 0.0 0.0 1.0","title":"Benchmark"},{"location":"development/","text":"Development Tests, type checking and linting locally To run tests, type checking and linting locally, you'll need to have python 3.6 , 3.7 , 3.8 , 3.9 and 3.10 installed. We use tox to run tests and type checking on all the supported python versions. You can set up the development environment with the following commands: git clone git@github.com:osoken/sqlitecollections.git cd sqlitecollections python -m venv .venv source ./.venv/bin/activate pip install -e .[dev] Then, run tests is as easy as: tox After a while, you'll see the following message at the bottom of the long logs from pytest and others. __________________ summary __________________ lint: commands succeeded py36: commands succeeded py37: commands succeeded py38: commands succeeded py39: commands succeeded py310: commands succeeded congratulations :) Building documents We use mkdocs to build the documentation. To set up the environment for building the document, run the following commands: git clone git@github.com:osoken/sqlitecollections.git cd sqlitecollections python -m venv .venv source ./.venv/bin/activate pip install -e .[docs] Then, building the documentation can be done by the following command: mkdocs build The output will be located in site directory in your current directory. During development, you can also run mkdoc 's builtin development server with hot-reloading enabled with the following command: mkdocs serve In that case, you can check the result on http://127.0.0.1:8000 . Compatibility policy We aim to implement containers that are as compatible as possible with the built-in containers, but we have a few implementations that intentionally behave differently. Normal behavior will be compatible, but in case of errors it may be different. The constructor arguments are not compatible, as they require arguments specific to this package's container, such as sqlite3 DB file paths and serialization methods. copy method in each container behaves similarly to deep copy, since it copies the table containing serialized elements. Dict 's item order is guaranteed to be insertion order not only for python 3.7 and upper but for all versions. Dict.fromkeys class method is not provided. Any member in the container cannot be mutated directly. If you want to mutate any member, mutate it via temporary variable then write it back. import sqlitecollections as sc x = sc . Dict ({ \"a\" : []}) # create {\"a\": []} x [ \"a\" ] . append ( \"b\" ) # try to mutate the empty list print ( x [ \"a\" ]) # not [\"b\"] but [] temp = x [ \"a\" ] # temporarily substitute the list to a variable temp . append ( \"b\" ) # mutate the temporary variable x [ \"a\" ] = temp # then, write it back print ( x [ \"a\" ]) # now, we get [\"b\"]","title":"Development"},{"location":"development/#development","text":"","title":"Development"},{"location":"development/#tests-type-checking-and-linting-locally","text":"To run tests, type checking and linting locally, you'll need to have python 3.6 , 3.7 , 3.8 , 3.9 and 3.10 installed. We use tox to run tests and type checking on all the supported python versions. You can set up the development environment with the following commands: git clone git@github.com:osoken/sqlitecollections.git cd sqlitecollections python -m venv .venv source ./.venv/bin/activate pip install -e .[dev] Then, run tests is as easy as: tox After a while, you'll see the following message at the bottom of the long logs from pytest and others. __________________ summary __________________ lint: commands succeeded py36: commands succeeded py37: commands succeeded py38: commands succeeded py39: commands succeeded py310: commands succeeded congratulations :)","title":"Tests, type checking and linting locally"},{"location":"development/#building-documents","text":"We use mkdocs to build the documentation. To set up the environment for building the document, run the following commands: git clone git@github.com:osoken/sqlitecollections.git cd sqlitecollections python -m venv .venv source ./.venv/bin/activate pip install -e .[docs] Then, building the documentation can be done by the following command: mkdocs build The output will be located in site directory in your current directory. During development, you can also run mkdoc 's builtin development server with hot-reloading enabled with the following command: mkdocs serve In that case, you can check the result on http://127.0.0.1:8000 .","title":"Building documents"},{"location":"development/#compatibility-policy","text":"We aim to implement containers that are as compatible as possible with the built-in containers, but we have a few implementations that intentionally behave differently. Normal behavior will be compatible, but in case of errors it may be different. The constructor arguments are not compatible, as they require arguments specific to this package's container, such as sqlite3 DB file paths and serialization methods. copy method in each container behaves similarly to deep copy, since it copies the table containing serialized elements. Dict 's item order is guaranteed to be insertion order not only for python 3.7 and upper but for all versions. Dict.fromkeys class method is not provided. Any member in the container cannot be mutated directly. If you want to mutate any member, mutate it via temporary variable then write it back. import sqlitecollections as sc x = sc . Dict ({ \"a\" : []}) # create {\"a\": []} x [ \"a\" ] . append ( \"b\" ) # try to mutate the empty list print ( x [ \"a\" ]) # not [\"b\"] but [] temp = x [ \"a\" ] # temporarily substitute the list to a variable temp . append ( \"b\" ) # mutate the temporary variable x [ \"a\" ] = temp # then, write it back print ( x [ \"a\" ]) # now, we get [\"b\"]","title":"Compatibility policy"},{"location":"install/","text":"Install pip install sqlitecollections","title":"Install"},{"location":"install/#install","text":"pip install sqlitecollections","title":"Install"},{"location":"benchmark_results/py310/dict/","text":"timing | subject | `builtin` | `sqlitecollections` | ratio | | :------ | --------: | ------------------: | ----: | | `clear` | 0.00366 | 0.00696 | 1.90198 | | `__contains__` | 0.00372 | 0.00372 | 0.99926 | | `copy` | 0.00365 | 0.00981 | 2.6884 | | `__delitem__` | 0.00366 | 0.00724 | 1.97696 | | `get` | 0.00368 | 0.00376 | 1.02329 | | `get (unsuccessful search)` | 0.00358 | 0.0038 | 1.06308 | | `__getitem__` | 0.00362 | 0.00373 | 1.03081 | | `__init__` | 0.00384 | 0.03879 | 10.1017 | | `__ior__` | 0.00371 | 0.00723 | 1.94887 | | `__ior__` (many) | 0.00473 | 0.55386 | 117.14035 | | `items` | 0.00416 | 0.01049 | 2.52041 | | `__iter__` | 0.00371 | 0.00758 | 2.04567 | | `keys` | 0.00368 | 0.00757 | 2.05772 | | `__len__` | 0.00371 | 0.00376 | 1.01306 | | `__contains__` (unsuccessful search) | 0.00363 | 0.00374 | 1.0296 | | `__or__` | 0.00367 | 0.01141 | 3.10775 | | `__or__` (many) | 0.00481 | 0.57197 | 118.9352 | | `pop` | 0.00372 | 0.0071 | 1.91083 | | `pop (unsuccessful search)` | 0.00371 | 0.00552 | 1.48622 | | `popitem` | 0.00409 | 0.00775 | 1.89453 | | `reversed` | 0.00364 | 0.00746 | 2.04708 | | `setdefault` | 0.00371 | 0.00564 | 1.52102 | | `setdefault (unsuccessful search)` | 0.00369 | 0.0062 | 1.68089 | | `__setitem__` (add new item) | 0.00373 | 0.00753 | 2.02026 | | `__setitem__` (replace) | 0.00387 | 0.00775 | 2.00333 | | `update` | 0.00392 | 0.00747 | 1.9038 | | `update` (many) | 0.00456 | 0.55294 | 121.17922 | | `values` | 0.00364 | 0.00717 | 1.96875 | approximate memory usage | subject | `builtin` | `sqlitecollections` | ratio | | :------ | --------: | ------------------: | ----: | | `clear` | 0.0 | 0.0 | 1.0 | | `__contains__` | 0.0 | 0.0 | 1.0 | | `copy` | 0.0 | 0.0 | 1.0 | | `__delitem__` | 0.0 | 0.0 | 1.0 | | `get` | 0.0 | 0.0 | 1.0 | | `get (unsuccessful search)` | 0.0 | 0.0 | 1.0 | | `__getitem__` | 0.0 | 0.0 | 1.0 | | `__init__` | 0.0 | 0.0 | 1.0 | | `__ior__` | 0.0 | 0.0 | 1.0 | | `__ior__` (many) | 0.17969 | 0.0 | 0.0 | | `items` | 0.0 | 0.17188 | inf | | `__iter__` | 0.0 | 0.0 | 1.0 | | `keys` | 0.0 | 0.0 | 1.0 | | `__len__` | 0.0 | 0.0 | 1.0 | | `__contains__` (unsuccessful search) | 0.0 | 0.0 | 1.0 | | `__or__` | 0.0 | 0.0 | 1.0 | | `__or__` (many) | 0.0 | 0.0 | 1.0 | | `pop` | 0.0 | 0.0 | 1.0 | | `pop (unsuccessful search)` | 0.0 | 0.0 | 1.0 | | `popitem` | 0.0 | 0.0 | 1.0 | | `reversed` | 0.0 | 0.0 | 1.0 | | `setdefault` | 0.0 | 0.0 | 1.0 | | `setdefault (unsuccessful search)` | 0.0 | 0.0 | 1.0 | | `__setitem__` (add new item) | 0.0 | 0.0 | 1.0 | | `__setitem__` (replace) | 0.0 | 0.0 | 1.0 | | `update` | 0.0 | 0.0 | 1.0 | | `update` (many) | 0.0 | 0.0 | 1.0 | | `values` | 0.0 | 0.0 | 1.0 |","title":"Dict"},{"location":"benchmark_results/py310/list/","text":"timing | subject | `builtin` | `sqlitecollections` | ratio | | :------ | --------: | ------------------: | ----: | | `__add__` | 0.00366 | 0.01061 | 2.89675 | | `append` | 0.00366 | 0.00675 | 1.84577 | | `clear` | 0.00358 | 0.00664 | 1.85365 | | `__contains__` | 0.00368 | 0.00358 | 0.97364 | | `copy` | 0.00356 | 0.00979 | 2.74528 | | `count` | 0.00358 | 0.00374 | 1.04546 | | `__init__` | 0.00367 | 0.02239 | 6.10697 | | `__delitem__` | 0.00369 | 0.0811 | 21.98256 | | `__delitem__` (slice) | 0.00363 | 0.154 | 42.37529 | | `__delitem__` (slice with skip) | 0.0036 | 0.15403 | 42.82038 | | `extend` | 0.00362 | 0.00715 | 1.97612 | | `__getitem__` | 0.00377 | 0.00383 | 1.017 | | `__getitem__` (slice) | 0.00378 | 0.08893 | 23.51411 | | `__getitem__` (slice with skip) | 0.00365 | 0.01318 | 3.60711 | | `__iadd__` | 0.00365 | 0.00709 | 1.94363 | | `__imult__` | 0.00362 | 0.23175 | 64.09677 | | `index` | 0.00361 | 0.0039 | 1.07963 | | `index` (unsuccessful search) | 0.00355 | 0.0043 | 1.20937 | | `insert` | 0.00376 | 0.15378 | 40.94784 | | `__len__` | 0.00367 | 0.00371 | 1.0122 | | `__mult__` | 0.00354 | 0.23653 | 66.73601 | | `__contains__` (unsuccessful search) | 0.00369 | 0.00372 | 1.00822 | | `pop` | 0.00367 | 0.0803 | 21.90362 | | `remove` | 0.00356 | 0.11441 | 32.10751 | | `__setitem__` | 0.00362 | 0.00706 | 1.95269 | | `__setitem__` (slice) | 0.0036 | 14.26356 | 3959.34428 | | `__setitem__` (slice with skip) | 0.00363 | 0.01539 | 4.24023 | | `sort` | 0.00382 | 0.07961 | 20.83295 | approximate memory usage | subject | `builtin` | `sqlitecollections` | ratio | | :------ | --------: | ------------------: | ----: | | `__add__` | 0.0 | 0.0 | 1.0 | | `append` | 0.0 | 0.0 | 1.0 | | `clear` | 0.0 | 0.0 | 1.0 | | `__contains__` | 0.0 | 0.0 | 1.0 | | `copy` | 0.0 | 0.0 | 1.0 | | `count` | 0.0 | 0.0 | 1.0 | | `__init__` | 0.0 | 0.0 | 1.0 | | `__delitem__` | 0.0 | 0.00391 | inf | | `__delitem__` (slice) | 0.0 | 0.0 | 1.0 | | `__delitem__` (slice with skip) | 0.0 | 0.0 | 1.0 | | `extend` | 0.0 | 0.0 | 1.0 | | `__getitem__` | 0.0 | 0.0 | 1.0 | | `__getitem__` (slice) | 0.0 | 0.0 | 1.0 | | `__getitem__` (slice with skip) | 0.0 | 0.0 | 1.0 | | `__iadd__` | 0.0 | 0.0 | 1.0 | | `__imult__` | 0.0 | 0.0 | 1.0 | | `index` | 0.0 | 0.0 | 1.0 | | `index` (unsuccessful search) | 0.0 | 0.0 | 1.0 | | `insert` | 0.0 | 0.0 | 1.0 | | `__len__` | 0.0 | 0.0 | 1.0 | | `__mult__` | 0.0 | 0.0 | 1.0 | | `__contains__` (unsuccessful search) | 0.0 | 0.0 | 1.0 | | `pop` | 0.0 | 0.0 | 1.0 | | `remove` | 0.0 | 0.0 | 1.0 | | `__setitem__` | 0.0 | 0.0 | 1.0 | | `__setitem__` (slice) | 0.0 | 0.0 | 1.0 | | `__setitem__` (slice with skip) | 0.0 | 0.0 | 1.0 | | `sort` | 0.0 | 0.70703 | inf |","title":"List"},{"location":"benchmark_results/py310/set/","text":"timing | subject | `builtin` | `sqlitecollections` | ratio | | :------ | --------: | ------------------: | ----: | | `add (existing item)` | 0.00351 | 0.00534 | 1.52457 | | `add (new item)` | 0.00352 | 0.00696 | 1.97678 | | `__and__` | 0.00359 | 0.03242 | 9.04061 | | `clear` | 0.00358 | 0.00626 | 1.74584 | | `__contains__` | 0.0035 | 0.00352 | 1.00505 | | `copy` | 0.00354 | 0.01688 | 4.76433 | | `difference` | 0.0035 | 0.04902 | 13.98575 | | `discard` | 0.00355 | 0.00684 | 1.92815 | | `discard (no changes)` | 0.00353 | 0.00523 | 1.48188 | | `__ge__` | 0.00353 | 0.00359 | 1.01509 | | `__ge__` (not greater than or equals to) | 0.00349 | 0.00356 | 1.02252 | | `__gt__` | 0.00352 | 0.00712 | 2.02296 | | `__gt__` (not greater than) | 0.00359 | 0.01797 | 5.00015 | | `__iand__` | 0.00355 | 0.00963 | 2.7139 | | `__init__` | 0.00359 | 0.01745 | 4.85602 | | `intersection` | 0.00354 | 0.02187 | 6.17954 | | `intersection_update` | 0.00366 | 0.00888 | 2.42921 | | `__ior__` | 0.00359 | 0.00747 | 2.08206 | | `isdisjoint` | 0.00356 | 0.00352 | 0.98946 | | `isdisjoint` (not disjoint) | 0.00354 | 0.00352 | 0.99363 | | `issubset` | 0.00351 | 0.04055 | 11.55768 | | `issubset` (not subset) | 0.00356 | 0.02259 | 6.35041 | | `issuperset` | 0.00356 | 0.01192 | 3.34575 | | `issuperset` (not superset) | 0.00352 | 0.00361 | 1.02629 | | `__ixor__` | 0.00356 | 0.02451 | 6.88942 | | `__le__` | 0.00353 | 0.00427 | 1.20908 | | `__le__` (not less than or equals to) | 0.00353 | 0.00361 | 1.02385 | | `__len__` | 0.00355 | 0.0036 | 1.01292 | | `__lt__` | 0.00356 | 0.00445 | 1.25066 | | `__lt__` (not less than) | 0.00355 | 0.00357 | 1.00606 | | `__contains__` (unsuccessful search) | 0.00367 | 0.00357 | 0.97286 | | `__or__` | 0.00356 | 0.0181 | 5.07929 | | `pop` | 0.00363 | 0.00661 | 1.81864 | | `remove` | 0.00361 | 0.00691 | 1.91474 | | `__sub__` | 0.00358 | 0.01877 | 5.23576 | | `symmetric_difference` | 0.0036 | 0.04165 | 11.56066 | | `symmetric_difference_update` | 0.00358 | 0.02444 | 6.83409 | | `union` | 0.00363 | 0.01847 | 5.08578 | | `update` | 0.00353 | 0.00714 | 2.02045 | | `__xor__` | 0.00365 | 0.04094 | 11.21145 | approximate memory usage | subject | `builtin` | `sqlitecollections` | ratio | | :------ | --------: | ------------------: | ----: | | `add (existing item)` | 0.0 | 0.0 | 1.0 | | `add (new item)` | 0.0 | 0.0 | 1.0 | | `__and__` | 0.0 | 0.0 | 1.0 | | `clear` | 0.0 | 0.0 | 1.0 | | `__contains__` | 0.0 | 0.0 | 1.0 | | `copy` | 0.0 | 0.0 | 1.0 | | `difference` | 0.0 | 0.0 | 1.0 | | `discard` | 0.0 | 0.0 | 1.0 | | `discard (no changes)` | 0.0 | 0.0 | 1.0 | | `__ge__` | 0.0 | 0.0 | 1.0 | | `__ge__` (not greater than or equals to) | 0.0 | 0.0 | 1.0 | | `__gt__` | 0.0 | 0.0 | 1.0 | | `__gt__` (not greater than) | 0.0 | 0.0 | 1.0 | | `__iand__` | 0.0 | 0.0 | 1.0 | | `__init__` | 0.0 | 0.0 | 1.0 | | `intersection` | 0.0 | 0.0 | 1.0 | | `intersection_update` | 0.0 | 0.0 | 1.0 | | `__ior__` | 0.0 | 0.0 | 1.0 | | `isdisjoint` | 0.0 | 0.0 | 1.0 | | `isdisjoint` (not disjoint) | 0.0 | 0.0 | 1.0 | | `issubset` | 0.0 | 0.0 | 1.0 | | `issubset` (not subset) | 0.0 | 0.0 | 1.0 | | `issuperset` | 0.0 | 0.0 | 1.0 | | `issuperset` (not superset) | 0.0 | 0.0 | 1.0 | | `__ixor__` | 0.0 | 0.0 | 1.0 | | `__le__` | 0.0 | 0.0 | 1.0 | | `__le__` (not less than or equals to) | 0.0 | 0.0 | 1.0 | | `__len__` | 0.0 | 0.0 | 1.0 | | `__lt__` | 0.0 | 0.0 | 1.0 | | `__lt__` (not less than) | 0.0 | 0.0 | 1.0 | | `__contains__` (unsuccessful search) | 0.0 | 0.0 | 1.0 | | `__or__` | 0.0 | 0.0 | 1.0 | | `pop` | 0.0 | 0.0 | 1.0 | | `remove` | 0.0 | 0.0 | 1.0 | | `__sub__` | 0.0 | 0.0 | 1.0 | | `symmetric_difference` | 0.0 | 0.0 | 1.0 | | `symmetric_difference_update` | 0.0 | 0.0 | 1.0 | | `union` | 0.0 | 0.0 | 1.0 | | `update` | 0.0 | 0.0 | 1.0 | | `__xor__` | 0.0 | 0.0 | 1.0 |","title":"Set"},{"location":"benchmark_results/py36/dict/","text":"timing | subject | `builtin` | `sqlitecollections` | ratio | | :------ | --------: | ------------------: | ----: | | `clear` | 0.00376 | 0.00611 | 1.62228 | | `__contains__` | 0.00377 | 0.0038 | 1.00576 | | `copy` | 0.00375 | 0.00838 | 2.23715 | | `__delitem__` | 0.00376 | 0.00612 | 1.62609 | | `get` | 0.00367 | 0.00389 | 1.06032 | | `get (unsuccessful search)` | 0.00364 | 0.00373 | 1.02479 | | `__getitem__` | 0.00367 | 0.00381 | 1.03661 | | `__init__` | 0.0037 | 0.04359 | 11.79452 | | `items` | 0.004 | 0.01153 | 2.88463 | | `__iter__` | 0.00374 | 0.00807 | 2.1595 | | `keys` | 0.00397 | 0.00822 | 2.06945 | | `__len__` | 0.00385 | 0.00368 | 0.95737 | | `__contains__` (unsuccessful search) | 0.0037 | 0.0038 | 1.02788 | | `pop` | 0.00375 | 0.00635 | 1.69294 | | `pop (unsuccessful search)` | 0.00388 | 0.0053 | 1.36541 | | `popitem` | 0.0038 | 0.00681 | 1.79244 | | `setdefault` | 0.00377 | 0.0051 | 1.3543 | | `setdefault (unsuccessful search)` | 0.00374 | 0.00544 | 1.45494 | | `__setitem__` (add new item) | 0.00369 | 0.00622 | 1.68542 | | `__setitem__` (replace) | 0.00372 | 0.00622 | 1.66931 | | `update` | 0.00374 | 0.00631 | 1.68602 | | `update` (many) | 0.00516 | 0.56484 | 109.41628 | | `values` | 0.00371 | 0.00802 | 2.16006 | approximate memory usage | subject | `builtin` | `sqlitecollections` | ratio | | :------ | --------: | ------------------: | ----: | | `clear` | 0.0 | 0.0 | 1.0 | | `__contains__` | 0.0 | 0.0 | 1.0 | | `copy` | 0.0 | 0.0 | 1.0 | | `__delitem__` | 0.0 | 0.0 | 1.0 | | `get` | 0.0 | 0.0 | 1.0 | | `get (unsuccessful search)` | 0.0 | 0.0 | 1.0 | | `__getitem__` | 0.0 | 0.0 | 1.0 | | `__init__` | 0.0 | 0.0 | 1.0 | | `items` | 0.125 | 0.23047 | 1.84375 | | `__iter__` | 0.0 | 0.0 | 1.0 | | `keys` | 0.0 | 0.06641 | inf | | `__len__` | 0.0 | 0.0 | 1.0 | | `__contains__` (unsuccessful search) | 0.0 | 0.0 | 1.0 | | `pop` | 0.0 | 0.0 | 1.0 | | `pop (unsuccessful search)` | 0.0 | 0.0 | 1.0 | | `popitem` | 0.0 | 0.0 | 1.0 | | `setdefault` | 0.0 | 0.0 | 1.0 | | `setdefault (unsuccessful search)` | 0.0 | 0.0 | 1.0 | | `__setitem__` (add new item) | 0.0 | 0.0 | 1.0 | | `__setitem__` (replace) | 0.0 | 0.0 | 1.0 | | `update` | 0.0 | 0.0 | 1.0 | | `update` (many) | 0.17188 | 0.0 | 0.0 | | `values` | 0.0 | 0.0 | 1.0 |","title":"Dict"},{"location":"benchmark_results/py36/list/","text":"timing | subject | `builtin` | `sqlitecollections` | ratio | | :------ | --------: | ------------------: | ----: | | `__add__` | 0.00376 | 0.00879 | 2.33558 | | `append` | 0.00366 | 0.00592 | 1.61745 | | `clear` | 0.00362 | 0.00582 | 1.60838 | | `__contains__` | 0.00374 | 0.00369 | 0.98433 | | `copy` | 0.00363 | 0.00805 | 2.21488 | | `count` | 0.00372 | 0.00364 | 0.97691 | | `__init__` | 0.00368 | 0.02 | 5.43041 | | `__delitem__` | 0.00365 | 0.07984 | 21.89816 | | `__delitem__` (slice) | 0.00366 | 0.15454 | 42.25218 | | `__delitem__` (slice with skip) | 0.00364 | 0.1549 | 42.59581 | | `extend` | 0.00371 | 0.006 | 1.61447 | | `__getitem__` | 0.0036 | 0.0036 | 1.00039 | | `__getitem__` (slice) | 0.00359 | 0.08705 | 24.2193 | | `__getitem__` (slice with skip) | 0.0037 | 0.01097 | 2.96727 | | `__iadd__` | 0.00376 | 0.00591 | 1.57476 | | `__imult__` | 0.00363 | 0.23012 | 63.37705 | | `index` | 0.00361 | 0.00387 | 1.07133 | | `index` (unsuccessful search) | 0.00366 | 0.00393 | 1.07418 | | `insert` | 0.00372 | 0.15154 | 40.72737 | | `__len__` | 0.00368 | 0.00375 | 1.01669 | | `__mult__` | 0.00368 | 0.23616 | 64.12442 | | `__contains__` (unsuccessful search) | 0.0037 | 0.00371 | 1.00327 | | `pop` | 0.00369 | 0.08035 | 21.78628 | | `remove` | 0.00364 | 0.11295 | 30.99403 | | `__setitem__` | 0.00373 | 0.00605 | 1.62142 | | `__setitem__` (slice) | 0.0036 | 13.55872 | 3761.76203 | | `__setitem__` (slice with skip) | 0.00367 | 0.0147 | 4.00239 | | `sort` | 0.00377 | 0.08146 | 21.6042 | approximate memory usage | subject | `builtin` | `sqlitecollections` | ratio | | :------ | --------: | ------------------: | ----: | | `__add__` | 0.0 | 0.0 | 1.0 | | `append` | 0.0 | 0.0 | 1.0 | | `clear` | 0.0 | 0.0 | 1.0 | | `__contains__` | 0.0 | 0.0 | 1.0 | | `copy` | 0.0 | 0.0 | 1.0 | | `count` | 0.0 | 0.0 | 1.0 | | `__init__` | 0.0 | 0.0 | 1.0 | | `__delitem__` | 0.0 | 0.0 | 1.0 | | `__delitem__` (slice) | 0.0 | 0.0 | 1.0 | | `__delitem__` (slice with skip) | 0.0 | 0.0 | 1.0 | | `extend` | 0.0 | 0.0 | 1.0 | | `__getitem__` | 0.0 | 0.0 | 1.0 | | `__getitem__` (slice) | 0.0 | 0.0 | 1.0 | | `__getitem__` (slice with skip) | 0.0 | 0.0 | 1.0 | | `__iadd__` | 0.0 | 0.0 | 1.0 | | `__imult__` | 0.0 | 0.0 | 1.0 | | `index` | 0.0 | 0.00391 | inf | | `index` (unsuccessful search) | 0.0 | 0.0 | 1.0 | | `insert` | 0.0 | 0.0 | 1.0 | | `__len__` | 0.0 | 0.0 | 1.0 | | `__mult__` | 0.0 | 0.0 | 1.0 | | `__contains__` (unsuccessful search) | 0.0 | 0.0 | 1.0 | | `pop` | 0.0 | 0.0 | 1.0 | | `remove` | 0.0 | 0.0 | 1.0 | | `__setitem__` | 0.0 | 0.0 | 1.0 | | `__setitem__` (slice) | 0.0 | 0.0 | 1.0 | | `__setitem__` (slice with skip) | 0.00391 | 0.0 | 0.0 | | `sort` | 0.0 | 1.25 | inf |","title":"List"},{"location":"benchmark_results/py36/set/","text":"timing | subject | `builtin` | `sqlitecollections` | ratio | | :------ | --------: | ------------------: | ----: | | `add (existing item)` | 0.00353 | 0.0049 | 1.38843 | | `add (new item)` | 0.00357 | 0.00567 | 1.58692 | | `__and__` | 0.00364 | 0.01949 | 5.34993 | | `clear` | 0.0036 | 0.00573 | 1.59016 | | `__contains__` | 0.00359 | 0.00359 | 0.99897 | | `copy` | 0.00374 | 0.01557 | 4.15784 | | `difference` | 0.00361 | 0.01536 | 4.25514 | | `discard` | 0.00363 | 0.02212 | 6.09656 | | `discard (no changes)` | 0.00359 | 0.00509 | 1.41702 | | `__ge__` | 0.00358 | 0.00362 | 1.01081 | | `__ge__` (not greater than or equals to) | 0.00355 | 0.00365 | 1.0293 | | `__gt__` | 0.00362 | 0.01024 | 2.8317 | | `__gt__` (not greater than) | 0.00359 | 0.01887 | 5.25622 | | `__iand__` | 0.00363 | 0.00753 | 2.07179 | | `__init__` | 0.00357 | 0.01544 | 4.32808 | | `intersection` | 0.00369 | 0.0196 | 5.313 | | `intersection_update` | 0.00363 | 0.00759 | 2.09246 | | `__ior__` | 0.00363 | 0.00669 | 1.84646 | | `isdisjoint` | 0.00359 | 0.00361 | 1.00475 | | `isdisjoint` (not disjoint) | 0.00359 | 0.00372 | 1.03371 | | `issubset` | 0.00361 | 0.04132 | 11.43991 | | `issubset` (not subset) | 0.00364 | 0.01993 | 5.46815 | | `issuperset` | 0.00359 | 0.0133 | 3.70098 | | `issuperset` (not superset) | 0.00358 | 0.00375 | 1.04633 | | `__ixor__` | 0.00364 | 0.0258 | 7.0851 | | `__le__` | 0.00357 | 0.00442 | 1.23722 | | `__le__` (not less than or equals to) | 0.00362 | 0.00359 | 0.99128 | | `__len__` | 0.00358 | 0.00363 | 1.01312 | | `__lt__` | 0.00365 | 0.00451 | 1.23434 | | `__lt__` (not less than) | 0.00362 | 0.00361 | 0.99867 | | `__contains__` (unsuccessful search) | 0.00366 | 0.00368 | 1.00491 | | `__or__` | 0.00358 | 0.01727 | 4.81895 | | `pop` | 0.00389 | 0.00569 | 1.4618 | | `remove` | 0.00359 | 0.00563 | 1.56969 | | `__sub__` | 0.00362 | 0.01575 | 4.35502 | | `symmetric_difference` | 0.00366 | 0.04199 | 11.48666 | | `symmetric_difference_update` | 0.00361 | 0.02545 | 7.05348 | | `union` | 0.00361 | 0.01718 | 4.75606 | | `update` | 0.0037 | 0.00665 | 1.7972 | | `__xor__` | 0.0037 | 0.042 | 11.34405 | approximate memory usage | subject | `builtin` | `sqlitecollections` | ratio | | :------ | --------: | ------------------: | ----: | | `add (existing item)` | 0.0 | 0.0 | 1.0 | | `add (new item)` | 0.0 | 0.0 | 1.0 | | `__and__` | 0.0 | 0.01172 | inf | | `clear` | 0.0 | 0.0 | 1.0 | | `__contains__` | 0.0 | 0.0 | 1.0 | | `copy` | 0.0 | 0.0 | 1.0 | | `difference` | 0.0 | 0.0 | 1.0 | | `discard` | 0.0 | 0.0 | 1.0 | | `discard (no changes)` | 0.0 | 0.0 | 1.0 | | `__ge__` | 0.0 | 0.0 | 1.0 | | `__ge__` (not greater than or equals to) | 0.0 | 0.0 | 1.0 | | `__gt__` | 0.0 | 0.0 | 1.0 | | `__gt__` (not greater than) | 0.0 | 0.0 | 1.0 | | `__iand__` | 0.0 | 0.0 | 1.0 | | `__init__` | 0.0 | 0.05078 | inf | | `intersection` | 0.0 | 0.01172 | inf | | `intersection_update` | 0.0 | 0.0 | 1.0 | | `__ior__` | 0.0 | 0.0 | 1.0 | | `isdisjoint` | 0.0 | 0.0 | 1.0 | | `isdisjoint` (not disjoint) | 0.0 | 0.0 | 1.0 | | `issubset` | 0.0 | 0.0 | 1.0 | | `issubset` (not subset) | 0.0 | 0.0 | 1.0 | | `issuperset` | 0.0 | 0.0 | 1.0 | | `issuperset` (not superset) | 0.0 | 0.0 | 1.0 | | `__ixor__` | 0.0 | 0.0 | 1.0 | | `__le__` | 0.0 | 0.0 | 1.0 | | `__le__` (not less than or equals to) | 0.0 | 0.0 | 1.0 | | `__len__` | 0.0 | 0.0 | 1.0 | | `__lt__` | 0.0 | 0.0 | 1.0 | | `__lt__` (not less than) | 0.0 | 0.0 | 1.0 | | `__contains__` (unsuccessful search) | 0.0 | 0.0 | 1.0 | | `__or__` | 0.0 | 0.0 | 1.0 | | `pop` | 0.0 | 0.0 | 1.0 | | `remove` | 0.0 | 0.0 | 1.0 | | `__sub__` | 0.0 | 0.0 | 1.0 | | `symmetric_difference` | 0.0 | 0.0 | 1.0 | | `symmetric_difference_update` | 0.0 | 0.0 | 1.0 | | `union` | 0.0 | 0.0 | 1.0 | | `update` | 0.0 | 0.0 | 1.0 | | `__xor__` | 0.0 | 0.00391 | inf |","title":"Set"},{"location":"benchmark_results/py37/dict/","text":"timing | subject | `builtin` | `sqlitecollections` | ratio | | :------ | --------: | ------------------: | ----: | | `clear` | 0.00547 | 0.00996 | 1.8204 | | `__contains__` | 0.00555 | 0.0063 | 1.13496 | | `copy` | 0.00576 | 0.01516 | 2.62976 | | `__delitem__` | 0.0056 | 0.00914 | 1.63181 | | `get` | 0.00597 | 0.00592 | 0.99125 | | `get (unsuccessful search)` | 0.00526 | 0.00574 | 1.08949 | | `__getitem__` | 0.00562 | 0.00554 | 0.98497 | | `__init__` | 0.00539 | 0.0623 | 11.55173 | | `items` | 0.00596 | 0.01624 | 2.72608 | | `__iter__` | 0.00523 | 0.01101 | 2.10553 | | `keys` | 0.00537 | 0.01163 | 2.16581 | | `__len__` | 0.00551 | 0.00536 | 0.97258 | | `__contains__` (unsuccessful search) | 0.00536 | 0.00707 | 1.31778 | | `pop` | 0.00538 | 0.01075 | 1.99715 | | `pop (unsuccessful search)` | 0.00574 | 0.0082 | 1.42903 | | `popitem` | 0.00576 | 0.01089 | 1.89046 | | `setdefault` | 0.0055 | 0.01028 | 1.86922 | | `setdefault (unsuccessful search)` | 0.00536 | 0.00864 | 1.61181 | | `__setitem__` (add new item) | 0.00533 | 0.00986 | 1.8507 | | `__setitem__` (replace) | 0.00538 | 0.0098 | 1.81996 | | `update` | 0.00561 | 0.01011 | 1.80369 | | `update` (many) | 0.00667 | 0.75888 | 113.75602 | | `values` | 0.00591 | 0.01108 | 1.87395 | approximate memory usage | subject | `builtin` | `sqlitecollections` | ratio | | :------ | --------: | ------------------: | ----: | | `clear` | 0.0 | 0.0 | 1.0 | | `__contains__` | 0.0 | 0.0 | 1.0 | | `copy` | 0.0 | 0.0 | 1.0 | | `__delitem__` | 0.0 | 0.0 | 1.0 | | `get` | 0.0 | 0.0 | 1.0 | | `get (unsuccessful search)` | 0.0 | 0.0 | 1.0 | | `__getitem__` | 0.0 | 0.0 | 1.0 | | `__init__` | 0.0 | 0.0 | 1.0 | | `items` | 0.05078 | 0.32812 | 6.46154 | | `__iter__` | 0.0 | 0.0 | 1.0 | | `keys` | 0.0 | 0.0 | 1.0 | | `__len__` | 0.0 | 0.0 | 1.0 | | `__contains__` (unsuccessful search) | 0.0 | 0.0 | 1.0 | | `pop` | 0.0 | 0.0 | 1.0 | | `pop (unsuccessful search)` | 0.0 | 0.0 | 1.0 | | `popitem` | 0.0 | 0.0 | 1.0 | | `setdefault` | 0.0 | 0.0 | 1.0 | | `setdefault (unsuccessful search)` | 0.0 | 0.0 | 1.0 | | `__setitem__` (add new item) | 0.0 | 0.0 | 1.0 | | `__setitem__` (replace) | 0.0 | 0.0 | 1.0 | | `update` | 0.0 | 0.0 | 1.0 | | `update` (many) | 0.0 | 0.0 | 1.0 | | `values` | 0.0 | 0.0 | 1.0 |","title":"Dict"},{"location":"benchmark_results/py37/list/","text":"timing | subject | `builtin` | `sqlitecollections` | ratio | | :------ | --------: | ------------------: | ----: | | `__add__` | 0.00593 | 0.01461 | 2.46477 | | `append` | 0.00523 | 0.00983 | 1.88025 | | `clear` | 0.00521 | 0.01132 | 2.17281 | | `__contains__` | 0.00516 | 0.00513 | 0.99467 | | `copy` | 0.00525 | 0.01456 | 2.77256 | | `count` | 0.00519 | 0.00519 | 0.99853 | | `__init__` | 0.00516 | 0.03015 | 5.8387 | | `__delitem__` | 0.00556 | 0.11333 | 20.40212 | | `__delitem__` (slice) | 0.00522 | 0.20171 | 38.63059 | | `__delitem__` (slice with skip) | 0.00556 | 0.20509 | 36.91014 | | `extend` | 0.00526 | 0.00954 | 1.81245 | | `__getitem__` | 0.00579 | 0.00602 | 1.03988 | | `__getitem__` (slice) | 0.00559 | 0.11828 | 21.15741 | | `__getitem__` (slice with skip) | 0.00511 | 0.01846 | 3.61479 | | `__iadd__` | 0.00533 | 0.0092 | 1.72429 | | `__imult__` | 0.00528 | 0.30083 | 57.00587 | | `index` | 0.00562 | 0.00593 | 1.05541 | | `index` (unsuccessful search) | 0.00557 | 0.00655 | 1.17598 | | `insert` | 0.00549 | 0.19788 | 36.0275 | | `__len__` | 0.00557 | 0.00562 | 1.00954 | | `__mult__` | 0.00537 | 0.31401 | 58.42584 | | `__contains__` (unsuccessful search) | 0.00522 | 0.00649 | 1.24318 | | `pop` | 0.00525 | 0.10625 | 20.21863 | | `remove` | 0.00528 | 0.15541 | 29.42491 | | `__setitem__` | 0.00561 | 0.00989 | 1.76237 | | `__setitem__` (slice) | 0.00523 | 18.37516 | 3513.58827 | | `__setitem__` (slice with skip) | 0.00527 | 0.02206 | 4.18336 | | `sort` | 0.00536 | 0.12037 | 22.45183 | approximate memory usage | subject | `builtin` | `sqlitecollections` | ratio | | :------ | --------: | ------------------: | ----: | | `__add__` | 0.0 | 0.0 | 1.0 | | `append` | 0.0 | 0.0 | 1.0 | | `clear` | 0.0 | 0.0 | 1.0 | | `__contains__` | 0.0 | 0.0 | 1.0 | | `copy` | 0.0 | 0.0 | 1.0 | | `count` | 0.0 | 0.0 | 1.0 | | `__init__` | 0.0 | 0.0 | 1.0 | | `__delitem__` | 0.0 | 0.0 | 1.0 | | `__delitem__` (slice) | 0.0 | 0.0 | 1.0 | | `__delitem__` (slice with skip) | 0.0 | 0.0 | 1.0 | | `extend` | 0.0 | 0.0 | 1.0 | | `__getitem__` | 0.0 | 0.0 | 1.0 | | `__getitem__` (slice) | 0.0 | 0.0 | 1.0 | | `__getitem__` (slice with skip) | 0.0 | 0.0 | 1.0 | | `__iadd__` | 0.0 | 0.0 | 1.0 | | `__imult__` | 0.0 | 0.0 | 1.0 | | `index` | 0.0 | 0.0 | 1.0 | | `index` (unsuccessful search) | 0.0 | 0.0 | 1.0 | | `insert` | 0.0 | 0.0 | 1.0 | | `__len__` | 0.0 | 0.0 | 1.0 | | `__mult__` | 0.0 | 0.0 | 1.0 | | `__contains__` (unsuccessful search) | 0.0 | 0.0 | 1.0 | | `pop` | 0.0 | 0.0 | 1.0 | | `remove` | 0.0 | 0.0 | 1.0 | | `__setitem__` | 0.0 | 0.0 | 1.0 | | `__setitem__` (slice) | 0.0 | 0.0 | 1.0 | | `__setitem__` (slice with skip) | 0.0 | 0.0 | 1.0 | | `sort` | 0.0 | 0.98828 | inf |","title":"List"},{"location":"benchmark_results/py37/set/","text":"timing | subject | `builtin` | `sqlitecollections` | ratio | | :------ | --------: | ------------------: | ----: | | `add (existing item)` | 0.0051 | 0.01031 | 2.02158 | | `add (new item)` | 0.0055 | 0.01014 | 1.84251 | | `__and__` | 0.00664 | 0.03375 | 5.08346 | | `clear` | 0.00541 | 0.00919 | 1.69807 | | `__contains__` | 0.00553 | 0.00571 | 1.03139 | | `copy` | 0.00529 | 0.02529 | 4.77677 | | `difference` | 0.00508 | 0.02459 | 4.84436 | | `discard` | 0.00516 | 0.01117 | 2.1634 | | `discard (no changes)` | 0.00524 | 0.00808 | 1.54284 | | `__ge__` | 0.00554 | 0.00504 | 0.90939 | | `__ge__` (not greater than or equals to) | 0.00497 | 0.00543 | 1.09248 | | `__gt__` | 0.00542 | 0.01047 | 1.93273 | | `__gt__` (not greater than) | 0.00534 | 0.0257 | 4.81642 | | `__iand__` | 0.00583 | 0.01408 | 2.41534 | | `__init__` | 0.00516 | 0.37055 | 71.8696 | | `intersection` | 0.00559 | 0.03321 | 5.94102 | | `intersection_update` | 0.00598 | 0.01326 | 2.21796 | | `__ior__` | 0.00514 | 0.01129 | 2.19445 | | `isdisjoint` | 0.00514 | 0.00591 | 1.15003 | | `isdisjoint` (not disjoint) | 0.00531 | 0.00534 | 1.00496 | | `issubset` | 0.00532 | 0.05957 | 11.19365 | | `issubset` (not subset) | 0.00518 | 0.0297 | 5.73527 | | `issuperset` | 0.00519 | 0.01664 | 3.2047 | | `issuperset` (not superset) | 0.00516 | 0.00563 | 1.09123 | | `__ixor__` | 0.0053 | 0.04049 | 7.63607 | | `__le__` | 0.00533 | 0.00705 | 1.32265 | | `__le__` (not less than or equals to) | 0.00532 | 0.00525 | 0.98717 | | `__len__` | 0.00513 | 0.00516 | 1.00633 | | `__lt__` | 0.00534 | 0.0066 | 1.23568 | | `__lt__` (not less than) | 0.00534 | 0.00536 | 1.00252 | | `__contains__` (unsuccessful search) | 0.00587 | 0.00534 | 0.90912 | | `__or__` | 0.00564 | 0.02894 | 5.13095 | | `pop` | 0.00534 | 0.01074 | 2.01132 | | `remove` | 0.00554 | 0.01014 | 1.82986 | | `__sub__` | 0.00529 | 0.02881 | 5.44689 | | `symmetric_difference` | 0.00525 | 0.06266 | 11.9392 | | `symmetric_difference_update` | 0.0053 | 0.03464 | 6.53607 | | `union` | 0.00554 | 0.0306 | 5.52759 | | `update` | 0.00556 | 0.01069 | 1.92311 | | `__xor__` | 0.00524 | 0.06631 | 12.65237 | approximate memory usage | subject | `builtin` | `sqlitecollections` | ratio | | :------ | --------: | ------------------: | ----: | | `add (existing item)` | 0.0 | 0.0 | 1.0 | | `add (new item)` | 0.0 | 0.0 | 1.0 | | `__and__` | 0.0 | 0.01953 | inf | | `clear` | 0.0 | 0.0 | 1.0 | | `__contains__` | 0.0 | 0.0 | 1.0 | | `copy` | 0.0 | 0.0 | 1.0 | | `difference` | 0.0 | 0.0 | 1.0 | | `discard` | 0.0 | 0.0 | 1.0 | | `discard (no changes)` | 0.0 | 0.0 | 1.0 | | `__ge__` | 0.0 | 0.0 | 1.0 | | `__ge__` (not greater than or equals to) | 0.0 | 0.0 | 1.0 | | `__gt__` | 0.0 | 0.0 | 1.0 | | `__gt__` (not greater than) | 0.0 | 0.0 | 1.0 | | `__iand__` | 0.0 | 0.0 | 1.0 | | `__init__` | 0.0 | 0.03906 | inf | | `intersection` | 0.0 | 0.0 | 1.0 | | `intersection_update` | 0.0 | 0.0 | 1.0 | | `__ior__` | 0.0 | 0.0 | 1.0 | | `isdisjoint` | 0.0 | 0.0 | 1.0 | | `isdisjoint` (not disjoint) | 0.0 | 0.0 | 1.0 | | `issubset` | 0.0 | 0.0 | 1.0 | | `issubset` (not subset) | 0.0 | 0.0 | 1.0 | | `issuperset` | 0.0 | 0.0 | 1.0 | | `issuperset` (not superset) | 0.0 | 0.0 | 1.0 | | `__ixor__` | 0.0 | 0.0 | 1.0 | | `__le__` | 0.0 | 0.0 | 1.0 | | `__le__` (not less than or equals to) | 0.0 | 0.0 | 1.0 | | `__len__` | 0.0 | 0.0 | 1.0 | | `__lt__` | 0.0 | 0.0 | 1.0 | | `__lt__` (not less than) | 0.0 | 0.0 | 1.0 | | `__contains__` (unsuccessful search) | 0.0 | 0.0 | 1.0 | | `__or__` | 0.0 | 0.0 | 1.0 | | `pop` | 0.0 | 0.0 | 1.0 | | `remove` | 0.0 | 0.0 | 1.0 | | `__sub__` | 0.0 | 0.0 | 1.0 | | `symmetric_difference` | 0.0 | 0.0 | 1.0 | | `symmetric_difference_update` | 0.0 | 0.0 | 1.0 | | `union` | 0.0 | 0.0 | 1.0 | | `update` | 0.0 | 0.0 | 1.0 | | `__xor__` | 0.0 | 0.0 | 1.0 |","title":"Set"},{"location":"benchmark_results/py38/dict/","text":"timing | subject | `builtin` | `sqlitecollections` | ratio | | :------ | --------: | ------------------: | ----: | | `clear` | 0.00513 | 0.00904 | 1.75961 | | `__contains__` | 0.00523 | 0.00561 | 1.07246 | | `copy` | 0.00503 | 0.01256 | 2.49564 | | `__delitem__` | 0.00539 | 0.0093 | 1.72552 | | `get` | 0.00505 | 0.00518 | 1.02574 | | `get (unsuccessful search)` | 0.00497 | 0.00513 | 1.03195 | | `__getitem__` | 0.00548 | 0.00551 | 1.00557 | | `__init__` | 0.00513 | 0.05159 | 10.06 | | `items` | 0.00574 | 0.01352 | 2.3541 | | `__iter__` | 0.00509 | 0.00984 | 1.93386 | | `keys` | 0.00485 | 0.00946 | 1.9494 | | `__len__` | 0.00498 | 0.00547 | 1.10002 | | `__contains__` (unsuccessful search) | 0.00511 | 0.00554 | 1.08443 | | `pop` | 0.00576 | 0.00915 | 1.58942 | | `pop (unsuccessful search)` | 0.00501 | 0.00773 | 1.54297 | | `popitem` | 0.00501 | 0.00986 | 1.96524 | | `reversed` | 0.00507 | 0.00947 | 1.86715 | | `setdefault` | 0.00541 | 0.00748 | 1.38183 | | `setdefault (unsuccessful search)` | 0.00513 | 0.00794 | 1.54996 | | `__setitem__` (add new item) | 0.00522 | 0.0096 | 1.83973 | | `__setitem__` (replace) | 0.00522 | 0.00924 | 1.77146 | | `update` | 0.00511 | 0.00921 | 1.80105 | | `update` (many) | 0.00686 | 0.67012 | 97.64172 | | `values` | 0.00501 | 0.00932 | 1.85956 | approximate memory usage | subject | `builtin` | `sqlitecollections` | ratio | | :------ | --------: | ------------------: | ----: | | `clear` | 0.0 | 0.0 | 1.0 | | `__contains__` | 0.0 | 0.0 | 1.0 | | `copy` | 0.0 | 0.0 | 1.0 | | `__delitem__` | 0.0 | 0.0 | 1.0 | | `get` | 0.0 | 0.0 | 1.0 | | `get (unsuccessful search)` | 0.0 | 0.0 | 1.0 | | `__getitem__` | 0.0 | 0.0 | 1.0 | | `__init__` | 0.0 | 0.0 | 1.0 | | `items` | 0.05859 | 0.28125 | 4.8 | | `__iter__` | 0.0 | 0.0 | 1.0 | | `keys` | 0.0 | 0.0 | 1.0 | | `__len__` | 0.0 | 0.0 | 1.0 | | `__contains__` (unsuccessful search) | 0.0 | 0.0 | 1.0 | | `pop` | 0.0 | 0.0 | 1.0 | | `pop (unsuccessful search)` | 0.0 | 0.0 | 1.0 | | `popitem` | 0.0 | 0.0 | 1.0 | | `reversed` | 0.0 | 0.0 | 1.0 | | `setdefault` | 0.0 | 0.0 | 1.0 | | `setdefault (unsuccessful search)` | 0.0 | 0.0 | 1.0 | | `__setitem__` (add new item) | 0.0 | 0.0 | 1.0 | | `__setitem__` (replace) | 0.0 | 0.0 | 1.0 | | `update` | 0.0 | 0.0 | 1.0 | | `update` (many) | 0.0 | 0.0 | 1.0 | | `values` | 0.0 | 0.0 | 1.0 |","title":"Dict"},{"location":"benchmark_results/py38/list/","text":"timing | subject | `builtin` | `sqlitecollections` | ratio | | :------ | --------: | ------------------: | ----: | | `__add__` | 0.00503 | 0.01612 | 3.20649 | | `append` | 0.00574 | 0.00999 | 1.7398 | | `clear` | 0.0048 | 0.00888 | 1.85122 | | `__contains__` | 0.00522 | 0.00483 | 0.92679 | | `copy` | 0.00485 | 0.01138 | 2.34641 | | `count` | 0.00483 | 0.00534 | 1.10576 | | `__init__` | 0.00499 | 0.02562 | 5.13028 | | `__delitem__` | 0.00501 | 0.09892 | 19.75522 | | `__delitem__` (slice) | 0.00504 | 0.18452 | 36.60712 | | `__delitem__` (slice with skip) | 0.00497 | 0.19363 | 38.99872 | | `extend` | 0.00487 | 0.00896 | 1.84071 | | `__getitem__` | 0.00493 | 0.00682 | 1.38351 | | `__getitem__` (slice) | 0.00514 | 0.11119 | 21.64244 | | `__getitem__` (slice with skip) | 0.00527 | 0.01719 | 3.26447 | | `__iadd__` | 0.00511 | 0.00897 | 1.7531 | | `__imult__` | 0.00514 | 0.28483 | 55.36146 | | `index` | 0.00566 | 0.0061 | 1.07731 | | `index` (unsuccessful search) | 0.00501 | 0.00598 | 1.19277 | | `insert` | 0.00506 | 0.18438 | 36.44724 | | `__len__` | 0.00525 | 0.00548 | 1.04481 | | `__mult__` | 0.00526 | 0.28478 | 54.08886 | | `__contains__` (unsuccessful search) | 0.00522 | 0.00517 | 0.99151 | | `pop` | 0.00505 | 0.10121 | 20.05969 | | `remove` | 0.00491 | 0.13772 | 28.07563 | | `__setitem__` | 0.00487 | 0.00952 | 1.95522 | | `__setitem__` (slice) | 0.00521 | 17.47582 | 3355.67729 | | `__setitem__` (slice with skip) | 0.00497 | 0.0206 | 4.14014 | | `sort` | 0.00518 | 0.09492 | 18.32359 | approximate memory usage | subject | `builtin` | `sqlitecollections` | ratio | | :------ | --------: | ------------------: | ----: | | `__add__` | 0.0 | 0.0 | 1.0 | | `append` | 0.0 | 0.0 | 1.0 | | `clear` | 0.0 | 0.0 | 1.0 | | `__contains__` | 0.0 | 0.0 | 1.0 | | `copy` | 0.0 | 0.0 | 1.0 | | `count` | 0.0 | 0.0 | 1.0 | | `__init__` | 0.0 | 0.0 | 1.0 | | `__delitem__` | 0.0 | 0.0 | 1.0 | | `__delitem__` (slice) | 0.0 | 0.0 | 1.0 | | `__delitem__` (slice with skip) | 0.0 | 0.0 | 1.0 | | `extend` | 0.0 | 0.0 | 1.0 | | `__getitem__` | 0.0 | 0.0 | 1.0 | | `__getitem__` (slice) | 0.0 | 0.0 | 1.0 | | `__getitem__` (slice with skip) | 0.0 | 0.0 | 1.0 | | `__iadd__` | 0.0 | 0.0 | 1.0 | | `__imult__` | 0.0 | 0.0 | 1.0 | | `index` | 0.0 | 0.0 | 1.0 | | `index` (unsuccessful search) | 0.0 | 0.0 | 1.0 | | `insert` | 0.0 | 0.0 | 1.0 | | `__len__` | 0.0 | 0.0 | 1.0 | | `__mult__` | 0.0 | 0.0 | 1.0 | | `__contains__` (unsuccessful search) | 0.0 | 0.0 | 1.0 | | `pop` | 0.0 | 0.0 | 1.0 | | `remove` | 0.0 | 0.0 | 1.0 | | `__setitem__` | 0.0 | 0.0 | 1.0 | | `__setitem__` (slice) | 0.0 | 0.0 | 1.0 | | `__setitem__` (slice with skip) | 0.0 | 0.0 | 1.0 | | `sort` | 0.0 | 0.99219 | inf |","title":"List"},{"location":"benchmark_results/py38/set/","text":"timing | subject | `builtin` | `sqlitecollections` | ratio | | :------ | --------: | ------------------: | ----: | | `add (existing item)` | 0.00525 | 0.0071 | 1.35225 | | `add (new item)` | 0.00505 | 0.00922 | 1.82425 | | `__and__` | 0.00521 | 0.06448 | 12.3787 | | `clear` | 0.00522 | 0.00906 | 1.73662 | | `__contains__` | 0.00523 | 0.00493 | 0.94267 | | `copy` | 0.00573 | 0.02343 | 4.0912 | | `difference` | 0.00501 | 0.02367 | 4.72793 | | `discard` | 0.00525 | 0.00914 | 1.73892 | | `discard (no changes)` | 0.00533 | 0.01064 | 1.99849 | | `__ge__` | 0.00536 | 0.00527 | 0.98369 | | `__ge__` (not greater than or equals to) | 0.00506 | 0.00524 | 1.03514 | | `__gt__` | 0.00476 | 0.00987 | 2.07225 | | `__gt__` (not greater than) | 0.0059 | 0.02317 | 3.92895 | | `__iand__` | 0.00475 | 0.01196 | 2.51684 | | `__init__` | 0.005 | 0.02462 | 4.92679 | | `intersection` | 0.00536 | 0.40194 | 74.94939 | | `intersection_update` | 0.00542 | 0.01474 | 2.72089 | | `__ior__` | 0.00587 | 0.0119 | 2.02786 | | `isdisjoint` | 0.0056 | 0.00567 | 1.01357 | | `isdisjoint` (not disjoint) | 0.00545 | 0.00532 | 0.97598 | | `issubset` | 0.00552 | 0.05785 | 10.48628 | | `issubset` (not subset) | 0.00534 | 0.03077 | 5.76388 | | `issuperset` | 0.00547 | 0.01772 | 3.23953 | | `issuperset` (not superset) | 0.00569 | 0.00543 | 0.95433 | | `__ixor__` | 0.00526 | 0.03142 | 5.97168 | | `__le__` | 0.00514 | 0.00548 | 1.06582 | | `__le__` (not less than or equals to) | 0.00547 | 0.00482 | 0.88085 | | `__len__` | 0.00489 | 0.0058 | 1.18506 | | `__lt__` | 0.00481 | 0.006 | 1.2489 | | `__lt__` (not less than) | 0.00543 | 0.00546 | 1.0058 | | `__contains__` (unsuccessful search) | 0.00482 | 0.0047 | 0.97525 | | `__or__` | 0.00499 | 0.02395 | 4.79444 | | `pop` | 0.00484 | 0.00841 | 1.73844 | | `remove` | 0.00551 | 0.00942 | 1.70994 | | `__sub__` | 0.00485 | 0.02231 | 4.59806 | | `symmetric_difference` | 0.00482 | 0.05445 | 11.29154 | | `symmetric_difference_update` | 0.0048 | 0.0315 | 6.55846 | | `union` | 0.0051 | 0.02322 | 4.55413 | | `update` | 0.00485 | 0.00994 | 2.05143 | | `__xor__` | 0.00515 | 0.05742 | 11.15474 | approximate memory usage | subject | `builtin` | `sqlitecollections` | ratio | | :------ | --------: | ------------------: | ----: | | `add (existing item)` | 0.0 | 0.0 | 1.0 | | `add (new item)` | 0.0 | 0.0 | 1.0 | | `__and__` | 0.0 | 0.00391 | inf | | `clear` | 0.0 | 0.0 | 1.0 | | `__contains__` | 0.0 | 0.0 | 1.0 | | `copy` | 0.0 | 0.0 | 1.0 | | `difference` | 0.0 | 0.0 | 1.0 | | `discard` | 0.0 | 0.0 | 1.0 | | `discard (no changes)` | 0.0 | 0.0 | 1.0 | | `__ge__` | 0.0 | 0.0 | 1.0 | | `__ge__` (not greater than or equals to) | 0.0 | 0.0 | 1.0 | | `__gt__` | 0.0 | 0.0 | 1.0 | | `__gt__` (not greater than) | 0.0 | 0.0 | 1.0 | | `__iand__` | 0.0 | 0.0 | 1.0 | | `__init__` | 0.0 | 0.05078 | inf | | `intersection` | 0.0 | 0.0 | 1.0 | | `intersection_update` | 0.0 | 0.0 | 1.0 | | `__ior__` | 0.0 | 0.0 | 1.0 | | `isdisjoint` | 0.0 | 0.0 | 1.0 | | `isdisjoint` (not disjoint) | 0.0 | 0.0 | 1.0 | | `issubset` | 0.0 | 0.0 | 1.0 | | `issubset` (not subset) | 0.0 | 0.0 | 1.0 | | `issuperset` | 0.0 | 0.0 | 1.0 | | `issuperset` (not superset) | 0.0 | 0.0 | 1.0 | | `__ixor__` | 0.0 | 0.0 | 1.0 | | `__le__` | 0.0 | 0.0 | 1.0 | | `__le__` (not less than or equals to) | 0.0 | 0.0 | 1.0 | | `__len__` | 0.0 | 0.0 | 1.0 | | `__lt__` | 0.0 | 0.0 | 1.0 | | `__lt__` (not less than) | 0.0 | 0.0 | 1.0 | | `__contains__` (unsuccessful search) | 0.0 | 0.0 | 1.0 | | `__or__` | 0.0 | 0.0 | 1.0 | | `pop` | 0.0 | 0.0 | 1.0 | | `remove` | 0.0 | 0.0 | 1.0 | | `__sub__` | 0.0 | 0.0 | 1.0 | | `symmetric_difference` | 0.0 | 0.0 | 1.0 | | `symmetric_difference_update` | 0.0 | 0.0 | 1.0 | | `union` | 0.0 | 0.0 | 1.0 | | `update` | 0.0 | 0.0 | 1.0 | | `__xor__` | 0.0 | 0.0 | 1.0 |","title":"Set"},{"location":"benchmark_results/py39/dict/","text":"timing | subject | `builtin` | `sqlitecollections` | ratio | | :------ | --------: | ------------------: | ----: | | `clear` | 0.0042 | 0.0075 | 1.78543 | | `__contains__` | 0.0042 | 0.00442 | 1.05334 | | `copy` | 0.00421 | 0.00976 | 2.3155 | | `__delitem__` | 0.0042 | 0.00727 | 1.73157 | | `get` | 0.00415 | 0.00435 | 1.04854 | | `get (unsuccessful search)` | 0.00424 | 0.00436 | 1.02772 | | `__getitem__` | 0.00413 | 0.00456 | 1.10321 | | `__init__` | 0.00459 | 0.04006 | 8.72151 | | `__ior__` | 0.00444 | 0.00836 | 1.88375 | | `__ior__` (many) | 0.0056 | 0.58957 | 105.24688 | | `items` | 0.00478 | 0.0112 | 2.34056 | | `__iter__` | 0.00421 | 0.00822 | 1.95331 | | `keys` | 0.00436 | 0.00839 | 1.92298 | | `__len__` | 0.00427 | 0.0043 | 1.00784 | | `__contains__` (unsuccessful search) | 0.00445 | 0.00453 | 1.01941 | | `__or__` | 0.00488 | 0.01217 | 2.49437 | | `__or__` (many) | 0.00586 | 0.59935 | 102.26175 | | `pop` | 0.00443 | 0.00768 | 1.7346 | | `pop (unsuccessful search)` | 0.00442 | 0.00617 | 1.39616 | | `popitem` | 0.00444 | 0.00796 | 1.79123 | | `reversed` | 0.00422 | 0.00795 | 1.8844 | | `setdefault` | 0.00425 | 0.00606 | 1.42412 | | `setdefault (unsuccessful search)` | 0.00421 | 0.00632 | 1.50267 | | `__setitem__` (add new item) | 0.00425 | 0.00795 | 1.87319 | | `__setitem__` (replace) | 0.0042 | 0.00753 | 1.79521 | | `update` | 0.00422 | 0.00861 | 2.03897 | | `update` (many) | 0.00519 | 0.58853 | 113.29944 | | `values` | 0.00417 | 0.00768 | 1.84082 | approximate memory usage | subject | `builtin` | `sqlitecollections` | ratio | | :------ | --------: | ------------------: | ----: | | `clear` | 0.0 | 0.0 | 1.0 | | `__contains__` | 0.0 | 0.0 | 1.0 | | `copy` | 0.0 | 0.0 | 1.0 | | `__delitem__` | 0.0 | 0.0 | 1.0 | | `get` | 0.0 | 0.0 | 1.0 | | `get (unsuccessful search)` | 0.0 | 0.0 | 1.0 | | `__getitem__` | 0.0 | 0.0 | 1.0 | | `__init__` | 0.0 | 0.0 | 1.0 | | `__ior__` | 0.0 | 0.0 | 1.0 | | `__ior__` (many) | 0.18359 | 0.0 | 0.0 | | `items` | 0.0 | 0.21094 | inf | | `__iter__` | 0.0 | 0.0 | 1.0 | | `keys` | 0.0 | 0.0 | 1.0 | | `__len__` | 0.0 | 0.0 | 1.0 | | `__contains__` (unsuccessful search) | 0.0 | 0.0 | 1.0 | | `__or__` | 0.0 | 0.0 | 1.0 | | `__or__` (many) | 0.0 | 0.0 | 1.0 | | `pop` | 0.0 | 0.0 | 1.0 | | `pop (unsuccessful search)` | 0.0 | 0.0 | 1.0 | | `popitem` | 0.0 | 0.0 | 1.0 | | `reversed` | 0.0 | 0.0 | 1.0 | | `setdefault` | 0.0 | 0.0 | 1.0 | | `setdefault (unsuccessful search)` | 0.0 | 0.0 | 1.0 | | `__setitem__` (add new item) | 0.0 | 0.0 | 1.0 | | `__setitem__` (replace) | 0.0 | 0.0 | 1.0 | | `update` | 0.0 | 0.0 | 1.0 | | `update` (many) | 0.0 | 0.0 | 1.0 | | `values` | 0.0 | 0.0 | 1.0 |","title":"Dict"},{"location":"benchmark_results/py39/list/","text":"timing | subject | `builtin` | `sqlitecollections` | ratio | | :------ | --------: | ------------------: | ----: | | `__add__` | 0.00426 | 0.01134 | 2.65971 | | `append` | 0.00423 | 0.00729 | 1.72299 | | `clear` | 0.00417 | 0.00731 | 1.75377 | | `__contains__` | 0.00411 | 0.00407 | 0.99019 | | `copy` | 0.00402 | 0.00913 | 2.272 | | `count` | 0.00406 | 0.00429 | 1.05456 | | `__init__` | 0.00405 | 0.02045 | 5.0505 | | `__delitem__` | 0.00421 | 0.08415 | 19.98835 | | `__delitem__` (slice) | 0.0041 | 0.16185 | 39.46883 | | `__delitem__` (slice with skip) | 0.00411 | 0.16208 | 39.44146 | | `extend` | 0.00408 | 0.00707 | 1.73158 | | `__getitem__` | 0.00404 | 0.00412 | 1.02014 | | `__getitem__` (slice) | 0.00404 | 0.09126 | 22.59225 | | `__getitem__` (slice with skip) | 0.00401 | 0.01248 | 3.11278 | | `__iadd__` | 0.00409 | 0.00715 | 1.74763 | | `__imult__` | 0.00407 | 0.23777 | 58.46718 | | `index` | 0.00417 | 0.0044 | 1.05425 | | `index` (unsuccessful search) | 0.0041 | 0.00442 | 1.0791 | | `insert` | 0.00414 | 0.15831 | 38.2786 | | `__len__` | 0.00413 | 0.00423 | 1.02231 | | `__mult__` | 0.00421 | 0.24188 | 57.50141 | | `__contains__` (unsuccessful search) | 0.00416 | 0.00424 | 1.02009 | | `pop` | 0.00425 | 0.08529 | 20.07041 | | `remove` | 0.00414 | 0.11963 | 28.9019 | | `__setitem__` | 0.0042 | 0.00714 | 1.70131 | | `__setitem__` (slice) | 0.00418 | 14.09446 | 3373.86638 | | `__setitem__` (slice with skip) | 0.00406 | 0.01639 | 4.03572 | | `sort` | 0.00409 | 0.08976 | 21.95547 | approximate memory usage | subject | `builtin` | `sqlitecollections` | ratio | | :------ | --------: | ------------------: | ----: | | `__add__` | 0.0 | 0.0 | 1.0 | | `append` | 0.0 | 0.0 | 1.0 | | `clear` | 0.0 | 0.0 | 1.0 | | `__contains__` | 0.0 | 0.0 | 1.0 | | `copy` | 0.0 | 0.0 | 1.0 | | `count` | 0.0 | 0.0 | 1.0 | | `__init__` | 0.0 | 0.0 | 1.0 | | `__delitem__` | 0.0 | 0.00391 | inf | | `__delitem__` (slice) | 0.0 | 0.0 | 1.0 | | `__delitem__` (slice with skip) | 0.0 | 0.0 | 1.0 | | `extend` | 0.0 | 0.0 | 1.0 | | `__getitem__` | 0.0 | 0.0 | 1.0 | | `__getitem__` (slice) | 0.0 | 0.0 | 1.0 | | `__getitem__` (slice with skip) | 0.0 | 0.0 | 1.0 | | `__iadd__` | 0.0 | 0.0 | 1.0 | | `__imult__` | 0.0 | 0.0 | 1.0 | | `index` | 0.0 | 0.0 | 1.0 | | `index` (unsuccessful search) | 0.0 | 0.0 | 1.0 | | `insert` | 0.0 | 0.0 | 1.0 | | `__len__` | 0.0 | 0.0 | 1.0 | | `__mult__` | 0.0 | 0.0 | 1.0 | | `__contains__` (unsuccessful search) | 0.0 | 0.0 | 1.0 | | `pop` | 0.0 | 0.0 | 1.0 | | `remove` | 0.0 | 0.0 | 1.0 | | `__setitem__` | 0.0 | 0.0 | 1.0 | | `__setitem__` (slice) | 0.0 | 0.0 | 1.0 | | `__setitem__` (slice with skip) | 0.0 | 0.0 | 1.0 | | `sort` | 0.0 | 0.64453 | inf |","title":"List"},{"location":"benchmark_results/py39/set/","text":"timing | subject | `builtin` | `sqlitecollections` | ratio | | :------ | --------: | ------------------: | ----: | | `add (existing item)` | 0.00416 | 0.00554 | 1.33163 | | `add (new item)` | 0.00407 | 0.00683 | 1.67872 | | `__and__` | 0.00403 | 0.03556 | 8.82331 | | `clear` | 0.00401 | 0.00667 | 1.66354 | | `__contains__` | 0.00421 | 0.00409 | 0.97274 | | `copy` | 0.00411 | 0.01816 | 4.41375 | | `difference` | 0.00402 | 0.02307 | 5.73572 | | `discard` | 0.00405 | 0.00742 | 1.83181 | | `discard (no changes)` | 0.00404 | 0.00643 | 1.59021 | | `__ge__` | 0.00404 | 0.00399 | 0.98916 | | `__ge__` (not greater than or equals to) | 0.00401 | 0.00402 | 1.00261 | | `__gt__` | 0.00406 | 0.00702 | 1.72886 | | `__gt__` (not greater than) | 0.00401 | 0.01828 | 4.56011 | | `__iand__` | 0.00405 | 0.00957 | 2.36288 | | `__init__` | 0.00406 | 0.0168 | 4.13624 | | `intersection` | 0.004 | 0.02132 | 5.32751 | | `intersection_update` | 0.00404 | 0.00888 | 2.19624 | | `__ior__` | 0.00415 | 0.00768 | 1.8495 | | `isdisjoint` | 0.00402 | 0.00403 | 1.00131 | | `isdisjoint` (not disjoint) | 0.00405 | 0.00404 | 0.99818 | | `issubset` | 0.0042 | 0.04191 | 9.97296 | | `issubset` (not subset) | 0.00404 | 0.02031 | 5.03264 | | `issuperset` | 0.00407 | 0.0127 | 3.1163 | | `issuperset` (not superset) | 0.00404 | 0.00401 | 0.99296 | | `__ixor__` | 0.00398 | 0.02498 | 6.27025 | | `__le__` | 0.00409 | 0.00471 | 1.15133 | | `__le__` (not less than or equals to) | 0.00409 | 0.00405 | 0.9898 | | `__len__` | 0.00405 | 0.00403 | 0.99572 | | `__lt__` | 0.00404 | 0.00482 | 1.19426 | | `__lt__` (not less than) | 0.00412 | 0.00401 | 0.97124 | | `__contains__` (unsuccessful search) | 0.00407 | 0.00417 | 1.02468 | | `__or__` | 0.00428 | 0.01786 | 4.1761 | | `pop` | 0.00414 | 0.00714 | 1.72259 | | `remove` | 0.00411 | 0.00692 | 1.68226 | | `__sub__` | 0.00416 | 0.01708 | 4.10563 | | `symmetric_difference` | 0.00403 | 0.04298 | 10.66595 | | `symmetric_difference_update` | 0.00411 | 0.02609 | 6.34314 | | `union` | 0.00414 | 0.01798 | 4.33961 | | `update` | 0.00402 | 0.00747 | 1.85616 | | `__xor__` | 0.00401 | 0.04193 | 10.44894 | approximate memory usage | subject | `builtin` | `sqlitecollections` | ratio | | :------ | --------: | ------------------: | ----: | | `add (existing item)` | 0.0 | 0.0 | 1.0 | | `add (new item)` | 0.0 | 0.0 | 1.0 | | `__and__` | 0.0 | 0.0 | 1.0 | | `clear` | 0.0 | 0.0 | 1.0 | | `__contains__` | 0.0 | 0.0 | 1.0 | | `copy` | 0.0 | 0.0 | 1.0 | | `difference` | 0.0 | 0.0 | 1.0 | | `discard` | 0.0 | 0.0 | 1.0 | | `discard (no changes)` | 0.0 | 0.0 | 1.0 | | `__ge__` | 0.0 | 0.0 | 1.0 | | `__ge__` (not greater than or equals to) | 0.0 | 0.0 | 1.0 | | `__gt__` | 0.0 | 0.0 | 1.0 | | `__gt__` (not greater than) | 0.0 | 0.0 | 1.0 | | `__iand__` | 0.0 | 0.0 | 1.0 | | `__init__` | 0.0 | 0.0 | 1.0 | | `intersection` | 0.0 | 0.0 | 1.0 | | `intersection_update` | 0.0 | 0.0 | 1.0 | | `__ior__` | 0.0 | 0.0 | 1.0 | | `isdisjoint` | 0.0 | 0.0 | 1.0 | | `isdisjoint` (not disjoint) | 0.0 | 0.0 | 1.0 | | `issubset` | 0.0 | 0.0 | 1.0 | | `issubset` (not subset) | 0.0 | 0.0 | 1.0 | | `issuperset` | 0.0 | 0.0 | 1.0 | | `issuperset` (not superset) | 0.0 | 0.0 | 1.0 | | `__ixor__` | 0.0 | 0.0 | 1.0 | | `__le__` | 0.0 | 0.0 | 1.0 | | `__le__` (not less than or equals to) | 0.0 | 0.0 | 1.0 | | `__len__` | 0.0 | 0.0 | 1.0 | | `__lt__` | 0.0 | 0.0 | 1.0 | | `__lt__` (not less than) | 0.0 | 0.0 | 1.0 | | `__contains__` (unsuccessful search) | 0.0 | 0.0 | 1.0 | | `__or__` | 0.0 | 0.0 | 1.0 | | `pop` | 0.0 | 0.0 | 1.0 | | `remove` | 0.0 | 0.0 | 1.0 | | `__sub__` | 0.0 | 0.0 | 1.0 | | `symmetric_difference` | 0.0 | 0.0 | 1.0 | | `symmetric_difference_update` | 0.0 | 0.0 | 1.0 | | `union` | 0.0 | 0.0 | 1.0 | | `update` | 0.0 | 0.0 | 1.0 | | `__xor__` | 0.0 | 0.0 | 1.0 |","title":"Set"},{"location":"usage/common/","text":"Common Features","title":"common features"},{"location":"usage/common/#common-features","text":"","title":"Common Features"},{"location":"usage/dict/","text":"Dict Dict is a container compatible with the built-in dict , which serializes keys and values and stores them in a sqlite3 database. It preserves insertion order for all supported python versions. Dict[KT, VT](...) Constructor. Type Parameters: KT : key type VT : value type Arguments: data : Mapping[KT, VT] or Iterable[Tuple[KT, VT]] , optional, positional-only argument, defualt= None ; Initial data. If None or no argument is given, persistent data is used as is if available, otherwise persistent data in the corresponding table is cleared and given data is stored instead. connection : str or sqlite3.Connection , optional, default= None ; If None , temporary file is automatically created. If connection is a str , it will be used as the sqlite3 database file name. You can pass a sqlite3.Connection directly. table_name : str , optional, default= None ; Table name of this container. If None , an auto-generated unique name will be used. Available characters are letters, numbers, and underscores ( _ ). key_serializer : Callable[[KT], bytes] , optional, default= None ; Function to serialize key. If None , pickle.dumps is used. key_deserializer : Callable[[bytes], KT] , optional, default= None ; Function to deserialize key. If None , pickle.loads is used. value_serializer : Callable[[VT], bytes] , optional, default= None ; Function to serialize value. If None , key_serializer is used. value_deserializer : Callable[[bytes], VT] , optional, default= None ; Function to deserialize value. If None , key_deserializer is used. persist : bool , optional, default= True ; If True , table won't be deleted even when the object is deleted. If False , the table is deleted when this object is deleted. len(d) Return the number of items in d: Dict[KT, VT] Return value: int : The number of items in d d[key] Get item of d with key key . Raises a KeyError if key is not in the map. Arguments: key : KT ; Key to retrieve corresponding value Return value: VT : Item of d with key key d[key] = value Set d[key] to value . Arguments: key : KT ; Key to be set value : VT ; Value to be set Return value: None del d[key] Delete d[key] . Arguments: key : KT ; Key to be deleted Return value: None key in d Return whether if key is in d Arguments: key : KT ; Key to be checked Return value: bool : True if key is in d and False otherwise. key not in d Return whether if key is not in d Arguments: key : KT ; Key to be checked Return value: bool : True if key is not in d and False otherwise. iter(d) Return an iterator over the keys of d Return value: Iterator[KT] : an iterator over the keys of d clear() Remove all items from the dictionary Return value: None copy() Return a copy of the dictionary. The actual behavior is to create a table with a unique table name and copy the keys and the values to the new table. Therefore, unlike the built-in dict copy, the behavior is similar to deep copy. Be aware that the copied dictionary is volatile. Return value: Dict[KT, VT] : A volatile copy of the dictionary. get(key[, default]) Return the value for key if key is in the dictionary, else default . If default is not given, it defaults to None , so that this method never raises a KeyError . Arguments: key : KT ; Key to retrieve corresponding value if exists. default : VT , optional, default= None ; Default value in case that key is not in the dictionary Return value: VT : Item of the dictionary with key key if key is in the dictionary, default otherwise. items() Return a new view of the dictionary\u2019s items (key-value pairs). Return value: ItemsView : View object of the dictionary's items keys() Return a new view of the dictionary's keys. Return value: KeysView[KT] : View object of the dictionary's keys. pop(key[, default]) If key is in the dictionary, remove it and return its value, else return default . If default is not given and key is not in the dictionary, a KeyError is raised. Arguments: key : KT ; Key to retrieve corresponding value if exists. default : VT , optional, default= None ; Default value in case that key is not in the dictionary Return value: VT : Item of the dictionary with key key if key is in the dictionary, default otherwise. popitem() Remove and return a key-value pair from the dictionary. Pairs are returned in LIFO order. If the dictionary is empty, raises a KeyError . Return value: Tuple[KT, VT] : Key-value pair that were last inserted into the dictionary reversed(d) Return a reverse iterator over the keys of the dictionary. (provided only python version 3.8 and above) Return value: Iterator[KT] : Reverse iterator over the keys of the dictionary setdefault(key[, default]) If key is in the dictionary, return its value. If not, insert key with a value of default and return default . Arguments: key : KT ; Key to retrieve or set the value default : VT , optional, default= None ; Value to be set if key is not in the dictionary Return value: VT : Item of the dictionary with key key if key is in the dictionary, default otherwise. update([other, **kwargs]) Update the dictionary with the key-value pairs from other , overwriting existing keys. Arguments: other : Mapping[KT, VT] or Iterable[Tuple[KT, VT]] , optional; Key-value pairs to be added kwargs : VT , optional; values to be added Return value: None values() Return a new view of the dictionary's values. Return value: ValuesView : View object of the dictionary's values d | other Create a new dictionary with the merged keys and values of d and other , which must both be dictionaries. The values of other take priority when d and other share keys. The return value is volatile by default. (provided only python version 3.9 and above) Arguments: other : Mapping[KT, VT] or Iterable[Tuple[KT, VT]] ; Key-value pairs to be merged Return value: Dict[KT, VT] : A new volatile dictionary object. d |= other Update the dictionary d with keys and values from other . (provided only python version 3.9 and above) Arguments: other : Mapping[KT, VT] or Iterable[Tuple[KT, VT]] ; Key-value pairs to be merged Return value: Dict[KT, VT] : The dictionary object.","title":"Dict"},{"location":"usage/dict/#dict","text":"Dict is a container compatible with the built-in dict , which serializes keys and values and stores them in a sqlite3 database. It preserves insertion order for all supported python versions.","title":"Dict"},{"location":"usage/dict/#dictkt-vt","text":"Constructor.","title":"Dict[KT, VT](...)"},{"location":"usage/dict/#type-parameters","text":"KT : key type VT : value type","title":"Type Parameters:"},{"location":"usage/dict/#arguments","text":"data : Mapping[KT, VT] or Iterable[Tuple[KT, VT]] , optional, positional-only argument, defualt= None ; Initial data. If None or no argument is given, persistent data is used as is if available, otherwise persistent data in the corresponding table is cleared and given data is stored instead. connection : str or sqlite3.Connection , optional, default= None ; If None , temporary file is automatically created. If connection is a str , it will be used as the sqlite3 database file name. You can pass a sqlite3.Connection directly. table_name : str , optional, default= None ; Table name of this container. If None , an auto-generated unique name will be used. Available characters are letters, numbers, and underscores ( _ ). key_serializer : Callable[[KT], bytes] , optional, default= None ; Function to serialize key. If None , pickle.dumps is used. key_deserializer : Callable[[bytes], KT] , optional, default= None ; Function to deserialize key. If None , pickle.loads is used. value_serializer : Callable[[VT], bytes] , optional, default= None ; Function to serialize value. If None , key_serializer is used. value_deserializer : Callable[[bytes], VT] , optional, default= None ; Function to deserialize value. If None , key_deserializer is used. persist : bool , optional, default= True ; If True , table won't be deleted even when the object is deleted. If False , the table is deleted when this object is deleted.","title":"Arguments:"},{"location":"usage/dict/#lend","text":"Return the number of items in d: Dict[KT, VT]","title":"len(d)"},{"location":"usage/dict/#return-value","text":"int : The number of items in d","title":"Return value:"},{"location":"usage/dict/#dkey","text":"Get item of d with key key . Raises a KeyError if key is not in the map.","title":"d[key]"},{"location":"usage/dict/#arguments_1","text":"key : KT ; Key to retrieve corresponding value","title":"Arguments:"},{"location":"usage/dict/#return-value_1","text":"VT : Item of d with key key","title":"Return value:"},{"location":"usage/dict/#dkey-value","text":"Set d[key] to value .","title":"d[key] = value"},{"location":"usage/dict/#arguments_2","text":"key : KT ; Key to be set value : VT ; Value to be set","title":"Arguments:"},{"location":"usage/dict/#return-value_2","text":"None","title":"Return value:"},{"location":"usage/dict/#del-dkey","text":"Delete d[key] .","title":"del d[key]"},{"location":"usage/dict/#arguments_3","text":"key : KT ; Key to be deleted","title":"Arguments:"},{"location":"usage/dict/#return-value_3","text":"None","title":"Return value:"},{"location":"usage/dict/#key-in-d","text":"Return whether if key is in d","title":"key in d"},{"location":"usage/dict/#arguments_4","text":"key : KT ; Key to be checked","title":"Arguments:"},{"location":"usage/dict/#return-value_4","text":"bool : True if key is in d and False otherwise.","title":"Return value:"},{"location":"usage/dict/#key-not-in-d","text":"Return whether if key is not in d","title":"key not in d"},{"location":"usage/dict/#arguments_5","text":"key : KT ; Key to be checked","title":"Arguments:"},{"location":"usage/dict/#return-value_5","text":"bool : True if key is not in d and False otherwise.","title":"Return value:"},{"location":"usage/dict/#iterd","text":"Return an iterator over the keys of d","title":"iter(d)"},{"location":"usage/dict/#return-value_6","text":"Iterator[KT] : an iterator over the keys of d","title":"Return value:"},{"location":"usage/dict/#clear","text":"Remove all items from the dictionary","title":"clear()"},{"location":"usage/dict/#return-value_7","text":"None","title":"Return value:"},{"location":"usage/dict/#copy","text":"Return a copy of the dictionary. The actual behavior is to create a table with a unique table name and copy the keys and the values to the new table. Therefore, unlike the built-in dict copy, the behavior is similar to deep copy. Be aware that the copied dictionary is volatile.","title":"copy()"},{"location":"usage/dict/#return-value_8","text":"Dict[KT, VT] : A volatile copy of the dictionary.","title":"Return value:"},{"location":"usage/dict/#getkey-default","text":"Return the value for key if key is in the dictionary, else default . If default is not given, it defaults to None , so that this method never raises a KeyError .","title":"get(key[, default])"},{"location":"usage/dict/#arguments_6","text":"key : KT ; Key to retrieve corresponding value if exists. default : VT , optional, default= None ; Default value in case that key is not in the dictionary","title":"Arguments:"},{"location":"usage/dict/#return-value_9","text":"VT : Item of the dictionary with key key if key is in the dictionary, default otherwise.","title":"Return value:"},{"location":"usage/dict/#items","text":"Return a new view of the dictionary\u2019s items (key-value pairs).","title":"items()"},{"location":"usage/dict/#return-value_10","text":"ItemsView : View object of the dictionary's items","title":"Return value:"},{"location":"usage/dict/#keys","text":"Return a new view of the dictionary's keys.","title":"keys()"},{"location":"usage/dict/#return-value_11","text":"KeysView[KT] : View object of the dictionary's keys.","title":"Return value:"},{"location":"usage/dict/#popkey-default","text":"If key is in the dictionary, remove it and return its value, else return default . If default is not given and key is not in the dictionary, a KeyError is raised.","title":"pop(key[, default])"},{"location":"usage/dict/#arguments_7","text":"key : KT ; Key to retrieve corresponding value if exists. default : VT , optional, default= None ; Default value in case that key is not in the dictionary","title":"Arguments:"},{"location":"usage/dict/#return-value_12","text":"VT : Item of the dictionary with key key if key is in the dictionary, default otherwise.","title":"Return value:"},{"location":"usage/dict/#popitem","text":"Remove and return a key-value pair from the dictionary. Pairs are returned in LIFO order. If the dictionary is empty, raises a KeyError .","title":"popitem()"},{"location":"usage/dict/#return-value_13","text":"Tuple[KT, VT] : Key-value pair that were last inserted into the dictionary","title":"Return value:"},{"location":"usage/dict/#reversedd","text":"Return a reverse iterator over the keys of the dictionary. (provided only python version 3.8 and above)","title":"reversed(d)"},{"location":"usage/dict/#return-value_14","text":"Iterator[KT] : Reverse iterator over the keys of the dictionary","title":"Return value:"},{"location":"usage/dict/#setdefaultkey-default","text":"If key is in the dictionary, return its value. If not, insert key with a value of default and return default .","title":"setdefault(key[, default])"},{"location":"usage/dict/#arguments_8","text":"key : KT ; Key to retrieve or set the value default : VT , optional, default= None ; Value to be set if key is not in the dictionary","title":"Arguments:"},{"location":"usage/dict/#return-value_15","text":"VT : Item of the dictionary with key key if key is in the dictionary, default otherwise.","title":"Return value:"},{"location":"usage/dict/#updateother-kwargs","text":"Update the dictionary with the key-value pairs from other , overwriting existing keys.","title":"update([other, **kwargs])"},{"location":"usage/dict/#arguments_9","text":"other : Mapping[KT, VT] or Iterable[Tuple[KT, VT]] , optional; Key-value pairs to be added kwargs : VT , optional; values to be added","title":"Arguments:"},{"location":"usage/dict/#return-value_16","text":"None","title":"Return value:"},{"location":"usage/dict/#values","text":"Return a new view of the dictionary's values.","title":"values()"},{"location":"usage/dict/#return-value_17","text":"ValuesView : View object of the dictionary's values","title":"Return value:"},{"location":"usage/dict/#d-other","text":"Create a new dictionary with the merged keys and values of d and other , which must both be dictionaries. The values of other take priority when d and other share keys. The return value is volatile by default. (provided only python version 3.9 and above)","title":"d | other"},{"location":"usage/dict/#arguments_10","text":"other : Mapping[KT, VT] or Iterable[Tuple[KT, VT]] ; Key-value pairs to be merged","title":"Arguments:"},{"location":"usage/dict/#return-value_18","text":"Dict[KT, VT] : A new volatile dictionary object.","title":"Return value:"},{"location":"usage/dict/#d-other_1","text":"Update the dictionary d with keys and values from other . (provided only python version 3.9 and above)","title":"d |= other"},{"location":"usage/dict/#arguments_11","text":"other : Mapping[KT, VT] or Iterable[Tuple[KT, VT]] ; Key-value pairs to be merged","title":"Arguments:"},{"location":"usage/dict/#return-value_19","text":"Dict[KT, VT] : The dictionary object.","title":"Return value:"},{"location":"usage/factory/","text":"factory module factory module contains a factory for each container: ListFactory for List , SetFactory for Set and DictFactory for Dict . They replace constructors of each container that require extra arguments such as connection , serializer , deserializer etc., and allow users to construct a container without specifying those extra arguments. Example Basic usage The results of the following two examples are almost the same (except for the auto-generated table names). Without factory: import sqlite3 import sqlitecollections as sc conn = sqlite3.connect(\"path/to/file.db\") def encode(x: str) -> bytes: return x.encode(\"utf-8\") def decode(x: bytes) -> str: return x.decode(\"utf-8\") l1 = sc.List[str]([\"Alice\", \"Bob\", \"Carol\"], connection=conn, serializer=encode, deserializer=decode) l2 = sc.List[str]([\"Dave\"], connection=conn, serializer=encode, deserializer=decode) l3 = sc.List[str]([\"Erin\"], connection=conn, serializer=encode, deserializer=decode) With factory: import sqlite3 import sqlitecollections as sc conn = sqlite3.connect(\"path/to/file.db\") def encode(x: str) -> bytes: return x.encode(\"utf-8\") def decode(x: bytes) -> str: return x.decode(\"utf-8\") list_ = sc.ListFactory[str](connection=conn, serializer=encode, deserializer=decode) l1 = list_([\"Alice\", \"Bob\", \"Carol\"]) l2 = list_([\"Dave\"]) l3 = list_([\"Erin\"]) Specifying a table name If you want to specify table names of containers from a factory, you can do that as follows: import sqlite3 import sqlitecollections as sc conn = sqlite3.connect(\"path/to/file.db\") def encode(x: str) -> bytes: return x.encode(\"utf-8\") def decode(x: bytes) -> str: return x.decode(\"utf-8\") list_ = sc.ListFactory[str](connection=conn, serializer=encode, deserializer=decode) l1 = list_[\"first_table_name\"]([\"Alice\", \"Bob\", \"Carol\"]) assert l1.table_name == \"first_table_name\" ListFactory ListFactory[T](...) Constructor of ListFactory which constructs List . Type Parameters: T : value type of the List Arguments: connection : str or sqlite3.Connection , optional, default= None ; If None , temporary file is automatically created. If connection is a str , it will be used as the sqlite3 database file name. You can pass a sqlite3.Connection directly. table_name : str , optional, default= None ; Table name of containers from this factory. This argument is assumed not to be specified directly by users. If None , an auto-generated unique name will be used. serializer : Callable[[T], bytes] , optional, default= None ; Function to serialize value. If None , pickle.dumps is used. deserializer : Callable[[bytes], T] , optional, default= None ; Function to deserialize value. If None , pickle.loads is used. list_(data) Construct List[T] with connection, serializer and deserializer preset from ListFactory[T] list_ . Arguments: data : Iterable[T] , optional, defualt= None ; Initial data. Return value: List[T] : connection, serializer and deserializer are the same as those of the factory list_ . create(data) Construct List[T] with connection, serializer and deserializer preset from the factory. Arguments: data : Iterable[T] , optional, defualt= None ; Initial data. Return value: List[T] : connection, serializer and deserializer are the same as those of the factory. f[t] Return a copy of this factory f that creates container with table name t . Arguments: t : str ; the table name Return value: ListFactory[T] : connection, serializer and deserializer are the same as those of this factory and the table name of the List[T] from this return value will be set to t . === DictFactory DictFactory[KT, VT](...) Constructor of DictFactory which constructs Dict . Type Parameters: KT : key type of the Dict VT : value type of the Dict Arguments: connection : str or sqlite3.Connection , optional, default= None ; If None , temporary file is automatically created. If connection is a str , it will be used as the sqlite3 database file name. You can pass a sqlite3.Connection directly. table_name : str , optional, default= None ; Table name of containers from this factory. This argument is assumed not to be specified directly by users. If None , an auto-generated unique name will be used. key_serializer : Callable[[KT], bytes] , optional, default= None ; Function to serialize key. If None , pickle.dumps is used. key_deserializer : Callable[[bytes], KT] , optional, default= None ; Function to deserialize key. If None , pickle.loads is used. value_serializer : Callable[[VT], bytes] , optional, default= None ; Function to serialize value. If None , key_serializer is used. value_deserializer : Callable[[bytes], VT] , optional, default= None ; Function to deserialize value. If None , key_deserializer is used. dict_(data, **kwargs) Construct Dict[KT, VT] with connection, key*serializer, etc., preset from DictFactory[KT, VT] dict* . Arguments: data : Mapping[KT, VT] or Iterable[Tuple[KT, VT]] , optional, defualt= None ; Initial data. **kwargs : VT , optional; Appended to initial data. Return value: Dict[KT, VT] : connection, key*serializers, etc., are the same as those of the factory dict* . create(data, **kwargs) Construct Dict[KT, VT] with connection, key_serializer, etc., preset from the factory. Arguments: data : Mapping[KT, VT] or Iterable[Tuple[KT, VT]] , optional, defualt= None ; Initial data. **kwargs : VT , optional; Appended to initial data. Return value: Dict[KT, VT] : connection, key_serializers, etc., are the same as those of the factory. f[t] Return a copy of this factory f that creates container with table name t . Arguments: t : str ; the table name Return value: DictFactory[KT, VT] : connection, key_serializer, key_deserializer, value_serializer and value_deserializer are the same as those of this factory and the table name of the Dict[KT, VT] from this return value will be set to t . === SetFactory SetFactory[T](...) Constructor of SetFactory which constructs Set . Type Parameters: T : value type of the Set Arguments: connection : str or sqlite3.Connection , optional, default= None ; If None , temporary file is automatically created. If connection is a str , it will be used as the sqlite3 database file name. You can pass a sqlite3.Connection directly. table_name : str , optional, default= None ; Table name of containers from this factory. This argument is assumed not to be specified directly by users. If None , an auto-generated unique name will be used. serializer : Callable[[T], bytes] , optional, default= None ; Function to serialize value. If None , pickle.dumps is used. deserializer : Callable[[bytes], T] , optional, default= None ; Function to deserialize value. If None , pickle.loads is used. set_(data) Construct Set[T] with connection, serializer and deserializer preset from SetFactory[T] set_ . Arguments: data : Iterable[T] , optional, defualt= None ; Initial data. Return value: Set[T] : connection, serializer and deserializer are the same as those of the factory set_ . create(data) Construct Set[T] with connection, serializer and deserializer preset from the factory. Arguments: data : Iterable[T] , optional, defualt= None ; Initial data. Return value: Set[T] : connection, serializer and deserializer are the same as those of the factory. f[t] Return a copy of this factory f that creates container with table name t . Arguments: t : str ; the table name Return value: SetFactory[T] : connection, serializer and deserializer are the same as those of this factory and the table name of the Set[T] from this return value will be set to t . ===","title":"factory"},{"location":"usage/factory/#factory-module","text":"factory module contains a factory for each container: ListFactory for List , SetFactory for Set and DictFactory for Dict . They replace constructors of each container that require extra arguments such as connection , serializer , deserializer etc., and allow users to construct a container without specifying those extra arguments.","title":"factory module"},{"location":"usage/factory/#example","text":"","title":"Example"},{"location":"usage/factory/#basic-usage","text":"The results of the following two examples are almost the same (except for the auto-generated table names). Without factory: import sqlite3 import sqlitecollections as sc conn = sqlite3.connect(\"path/to/file.db\") def encode(x: str) -> bytes: return x.encode(\"utf-8\") def decode(x: bytes) -> str: return x.decode(\"utf-8\") l1 = sc.List[str]([\"Alice\", \"Bob\", \"Carol\"], connection=conn, serializer=encode, deserializer=decode) l2 = sc.List[str]([\"Dave\"], connection=conn, serializer=encode, deserializer=decode) l3 = sc.List[str]([\"Erin\"], connection=conn, serializer=encode, deserializer=decode) With factory: import sqlite3 import sqlitecollections as sc conn = sqlite3.connect(\"path/to/file.db\") def encode(x: str) -> bytes: return x.encode(\"utf-8\") def decode(x: bytes) -> str: return x.decode(\"utf-8\") list_ = sc.ListFactory[str](connection=conn, serializer=encode, deserializer=decode) l1 = list_([\"Alice\", \"Bob\", \"Carol\"]) l2 = list_([\"Dave\"]) l3 = list_([\"Erin\"])","title":"Basic usage"},{"location":"usage/factory/#specifying-a-table-name","text":"If you want to specify table names of containers from a factory, you can do that as follows: import sqlite3 import sqlitecollections as sc conn = sqlite3.connect(\"path/to/file.db\") def encode(x: str) -> bytes: return x.encode(\"utf-8\") def decode(x: bytes) -> str: return x.decode(\"utf-8\") list_ = sc.ListFactory[str](connection=conn, serializer=encode, deserializer=decode) l1 = list_[\"first_table_name\"]([\"Alice\", \"Bob\", \"Carol\"]) assert l1.table_name == \"first_table_name\"","title":"Specifying a table name"},{"location":"usage/factory/#listfactory","text":"","title":"ListFactory"},{"location":"usage/factory/#listfactoryt","text":"Constructor of ListFactory which constructs List .","title":"ListFactory[T](...)"},{"location":"usage/factory/#type-parameters","text":"T : value type of the List","title":"Type Parameters:"},{"location":"usage/factory/#arguments","text":"connection : str or sqlite3.Connection , optional, default= None ; If None , temporary file is automatically created. If connection is a str , it will be used as the sqlite3 database file name. You can pass a sqlite3.Connection directly. table_name : str , optional, default= None ; Table name of containers from this factory. This argument is assumed not to be specified directly by users. If None , an auto-generated unique name will be used. serializer : Callable[[T], bytes] , optional, default= None ; Function to serialize value. If None , pickle.dumps is used. deserializer : Callable[[bytes], T] , optional, default= None ; Function to deserialize value. If None , pickle.loads is used.","title":"Arguments:"},{"location":"usage/factory/#list_data","text":"Construct List[T] with connection, serializer and deserializer preset from ListFactory[T] list_ .","title":"list_(data)"},{"location":"usage/factory/#arguments_1","text":"data : Iterable[T] , optional, defualt= None ; Initial data.","title":"Arguments:"},{"location":"usage/factory/#return-value","text":"List[T] : connection, serializer and deserializer are the same as those of the factory list_ .","title":"Return value:"},{"location":"usage/factory/#createdata","text":"Construct List[T] with connection, serializer and deserializer preset from the factory.","title":"create(data)"},{"location":"usage/factory/#arguments_2","text":"data : Iterable[T] , optional, defualt= None ; Initial data.","title":"Arguments:"},{"location":"usage/factory/#return-value_1","text":"List[T] : connection, serializer and deserializer are the same as those of the factory.","title":"Return value:"},{"location":"usage/factory/#ft","text":"Return a copy of this factory f that creates container with table name t .","title":"f[t]"},{"location":"usage/factory/#arguments_3","text":"t : str ; the table name","title":"Arguments:"},{"location":"usage/factory/#return-value_2","text":"ListFactory[T] : connection, serializer and deserializer are the same as those of this factory and the table name of the List[T] from this return value will be set to t . ===","title":"Return value:"},{"location":"usage/factory/#dictfactory","text":"","title":"DictFactory"},{"location":"usage/factory/#dictfactorykt-vt","text":"Constructor of DictFactory which constructs Dict .","title":"DictFactory[KT, VT](...)"},{"location":"usage/factory/#type-parameters_1","text":"KT : key type of the Dict VT : value type of the Dict","title":"Type Parameters:"},{"location":"usage/factory/#arguments_4","text":"connection : str or sqlite3.Connection , optional, default= None ; If None , temporary file is automatically created. If connection is a str , it will be used as the sqlite3 database file name. You can pass a sqlite3.Connection directly. table_name : str , optional, default= None ; Table name of containers from this factory. This argument is assumed not to be specified directly by users. If None , an auto-generated unique name will be used. key_serializer : Callable[[KT], bytes] , optional, default= None ; Function to serialize key. If None , pickle.dumps is used. key_deserializer : Callable[[bytes], KT] , optional, default= None ; Function to deserialize key. If None , pickle.loads is used. value_serializer : Callable[[VT], bytes] , optional, default= None ; Function to serialize value. If None , key_serializer is used. value_deserializer : Callable[[bytes], VT] , optional, default= None ; Function to deserialize value. If None , key_deserializer is used.","title":"Arguments:"},{"location":"usage/factory/#dict_data-kwargs","text":"Construct Dict[KT, VT] with connection, key*serializer, etc., preset from DictFactory[KT, VT] dict* .","title":"dict_(data, **kwargs)"},{"location":"usage/factory/#arguments_5","text":"data : Mapping[KT, VT] or Iterable[Tuple[KT, VT]] , optional, defualt= None ; Initial data. **kwargs : VT , optional; Appended to initial data.","title":"Arguments:"},{"location":"usage/factory/#return-value_3","text":"Dict[KT, VT] : connection, key*serializers, etc., are the same as those of the factory dict* .","title":"Return value:"},{"location":"usage/factory/#createdata-kwargs","text":"Construct Dict[KT, VT] with connection, key_serializer, etc., preset from the factory.","title":"create(data, **kwargs)"},{"location":"usage/factory/#arguments_6","text":"data : Mapping[KT, VT] or Iterable[Tuple[KT, VT]] , optional, defualt= None ; Initial data. **kwargs : VT , optional; Appended to initial data.","title":"Arguments:"},{"location":"usage/factory/#return-value_4","text":"Dict[KT, VT] : connection, key_serializers, etc., are the same as those of the factory.","title":"Return value:"},{"location":"usage/factory/#ft_1","text":"Return a copy of this factory f that creates container with table name t .","title":"f[t]"},{"location":"usage/factory/#arguments_7","text":"t : str ; the table name","title":"Arguments:"},{"location":"usage/factory/#return-value_5","text":"DictFactory[KT, VT] : connection, key_serializer, key_deserializer, value_serializer and value_deserializer are the same as those of this factory and the table name of the Dict[KT, VT] from this return value will be set to t . ===","title":"Return value:"},{"location":"usage/factory/#setfactory","text":"","title":"SetFactory"},{"location":"usage/factory/#setfactoryt","text":"Constructor of SetFactory which constructs Set .","title":"SetFactory[T](...)"},{"location":"usage/factory/#type-parameters_2","text":"T : value type of the Set","title":"Type Parameters:"},{"location":"usage/factory/#arguments_8","text":"connection : str or sqlite3.Connection , optional, default= None ; If None , temporary file is automatically created. If connection is a str , it will be used as the sqlite3 database file name. You can pass a sqlite3.Connection directly. table_name : str , optional, default= None ; Table name of containers from this factory. This argument is assumed not to be specified directly by users. If None , an auto-generated unique name will be used. serializer : Callable[[T], bytes] , optional, default= None ; Function to serialize value. If None , pickle.dumps is used. deserializer : Callable[[bytes], T] , optional, default= None ; Function to deserialize value. If None , pickle.loads is used.","title":"Arguments:"},{"location":"usage/factory/#set_data","text":"Construct Set[T] with connection, serializer and deserializer preset from SetFactory[T] set_ .","title":"set_(data)"},{"location":"usage/factory/#arguments_9","text":"data : Iterable[T] , optional, defualt= None ; Initial data.","title":"Arguments:"},{"location":"usage/factory/#return-value_6","text":"Set[T] : connection, serializer and deserializer are the same as those of the factory set_ .","title":"Return value:"},{"location":"usage/factory/#createdata_1","text":"Construct Set[T] with connection, serializer and deserializer preset from the factory.","title":"create(data)"},{"location":"usage/factory/#arguments_10","text":"data : Iterable[T] , optional, defualt= None ; Initial data.","title":"Arguments:"},{"location":"usage/factory/#return-value_7","text":"Set[T] : connection, serializer and deserializer are the same as those of the factory.","title":"Return value:"},{"location":"usage/factory/#ft_2","text":"Return a copy of this factory f that creates container with table name t .","title":"f[t]"},{"location":"usage/factory/#arguments_11","text":"t : str ; the table name","title":"Arguments:"},{"location":"usage/factory/#return-value_8","text":"SetFactory[T] : connection, serializer and deserializer are the same as those of this factory and the table name of the Set[T] from this return value will be set to t . ===","title":"Return value:"},{"location":"usage/list/","text":"List List is a container compatible with the built-in list , which serializes values and stores them in a sqlite3 database. List[T](...) Constructor. Type Parameters: T : value type Arguments: data : Iterable[T] , optional, positional-only argument, defualt= None ; Initial data. If None or no argument is given, persistent data is used as is if available, otherwise persistent data in the corresponding table is cleared and given data is stored instead. connection : str or sqlite3.Connection , optional, default= None ; If None , temporary file is automatically created. If connection is a str , it will be used as the sqlite3 database file name. You can pass a sqlite3.Connection directly. table_name : str , optional, default= None ; Table name of this container. If None , an auto-generated unique name will be used. Available characters are letters, numbers, and underscores ( _ ). serializer : Callable[[T], bytes] , optional, default= None ; Function to serialize value. If None , pickle.dumps is used. deserializer : Callable[[bytes], T] , optional, default= None ; Function to deserialize value. If None , pickle.loads is used. persist : bool , optional, default= True ; If True , table won't be deleted even when the object is deleted. If False , the table is deleted when this object is deleted. x in s True if an item of s is equal to x , else False Arguments: x : object ; an object to be checked Return value: bool : True if x is in s and False otherwise. x not in s False if an item of s is equal to x , else True Arguments: x : object ; an object to be checked Return value: bool : False if x is in s and True otherwise. s + t The concatenation of s and t Arguments: t : Iterable[T] ; An iterable to be concatenated. Return value: List[T] : The concatenation of s and t . s * n or n * s equivalent to adding s to itself n times. Arguments: n : int ; Number of times to repeat. Return value: List[T] : a list of n times s was repeated. s[i] i -th item of s , origin 0 . Arguments: i : int ; Item index. If it is negative, it is equivalent to len(s) + i . Return value: T : i -th item of s , origin 0 . s[i:j] Slice of s from i to j . Arguments: i : int or None ; Item index where the slice starts from. If None , it is treated as 0 . j : int or None ; Item index where the slice stops at. If None , it is treated as len(s) . Return value: List[T] : Slice of s from i to j . s[i:j:k] Slice of s from i to j with step k Arguments: i : int or None ; Item index where the slice starts from. If None , it is treated as 0 . j : int or None ; Item index where the slice stops at. If None , it is treated as len(s) . k : int or None ; Step of the slice. If None , it is treated as 1 . Return value: List[T] : Slice of s from i to j with step k . len(s) Return the number of items in s: List[T] Return value: int : The number of items in s index(x[, i[, j]]]) Return index of the first occurrence of x in the list (at or after index i and before index j ). Raise ValueError if x is not in the list. Arguments: x : T ; Value to retrieve corresponding index if exists. i : int , optional, default= None ; First index to look up the value. If it is None , start from the first element of the list. j : int , optional, default= None ; Index before the last one to look for a value. If None , search to the end. Return value: int : Index of the first occurrence of x in the list. count(x) Return total number of occurrences of x in the list. Arguments: x : T ; Value that counts the number of occurrences. Return value: int : The number of occurrences of x in the list. s[i] = x Replace item i of s by x . Arguments: i : int ; Item index to be set. If it is negative, it is equivalent to len(s) + i x : T ; Value to be set. Return value: None . del s[i] Remove item i of s . Arguments: i : int ; Item index to be removed. If it is negative, it is equivalent to len(s) + i . Return value: None . s[i:j] = t Replace slice of s from i to j by the contents of the iterable t . Arguments: i : int or None ; Item index where the slice starts from. If None , it is treated as 0 . j : int or None ; Item index where the slice stops at. If None , it is treated as len(s) . t : Iterable[T] ; Iterable to be inserted. Return value: None . del s[i:j] Remove slice of s from i to j . Arguments: i : int or None ; Item index where the slice starts from. If None , it is treated as 0 . j : int or None ; Item index where the slice stops at. If None , it is treated as len(s) . Return value: None . s[i:j:k] = t Replace the elements of s[i:j:k] by those ofthe iterable t . The length must be the same. Otherwise, ValueError will be raised. Arguments: i : int or None ; Item index where the slice starts from. If None , it is treated as 0 . j : int or None ; Item index where the slice stops at. If None , it is treated as len(s) . k : int or None ; Step of the slice. If None , it is treated as 1 . t : Iterable[T] ; Iterable to be substituted. The length must be the same as that of the slice. Return value: None . del s[i:j:k] Remove the elements of s[i:j:k] from the list. Arguments: i : int or None ; Item index where the slice starts from. If None , it is treated as 0 . j : int or None ; Item index where the slice stops at. If None , it is treated as len(s) . k : int or None ; Step of the slice. If None , it is treated as 1 . Return value: None . append(x) Append x to the end of the sequence. Arguments: x : T ; Item to be appended. Return value; None . clear() Remove all items from the list. Return value: None . copy() Return a copy of the list. The actual behavior is to create a table with a unique table name and copy the items to the new table. Therefore, unlike the built-in list copy, the behavior is similar to deep copy. Be aware that the copied list is volatile. Return value: List[T] : A volatile copy of the list. extend(t) Concatenate the list and t . Arguments: t : Iterable[T] ; An iterable to be concatenated. Return value: None . s += t Concatenate s and t . Arguments: t : Iterable[T] ; An iterable to be concatenated. Return value: None . s *= n Update s with its contents repeated n times. Arguments: n : int ; Number of times to repeat. Return value: None . insert(i, x) Insert x into the list at the index i . Arguments: i : int ; Index to be inserted. x : T ; Item to be inserted. Return value: None . pop(i) Retrieve the item at i and also remove it from s. Arguments: i : int or None , optional, default= None ; Index to be retrieved and removed. If it is None , it is treated as the last index of the list. Return value: T : i -th item of s , origin 0 . remove(x) Remove the first item of s whose value is equal to x . Arguments: x : T ; Item to be removed. Return value: None . reverse() Reverse the items of the list in place. Return value: None . sort(reverse, key) Sort the items of the list in place. The value of reverse can be either True or False , resulting in descending or ascending order, respectively. key specifies a function of one argument that is used to extract a comparison key from each list element. Arguments: reverse : bool , optional, default= False ; By default, the order is ascending, but if this value is True , the order will be descending. key : Callable[[T], Any] , optional, default= None ; Function to extract a comparison key from each list element. Return value: None .","title":"List"},{"location":"usage/list/#list","text":"List is a container compatible with the built-in list , which serializes values and stores them in a sqlite3 database.","title":"List"},{"location":"usage/list/#listt","text":"Constructor.","title":"List[T](...)"},{"location":"usage/list/#type-parameters","text":"T : value type","title":"Type Parameters:"},{"location":"usage/list/#arguments","text":"data : Iterable[T] , optional, positional-only argument, defualt= None ; Initial data. If None or no argument is given, persistent data is used as is if available, otherwise persistent data in the corresponding table is cleared and given data is stored instead. connection : str or sqlite3.Connection , optional, default= None ; If None , temporary file is automatically created. If connection is a str , it will be used as the sqlite3 database file name. You can pass a sqlite3.Connection directly. table_name : str , optional, default= None ; Table name of this container. If None , an auto-generated unique name will be used. Available characters are letters, numbers, and underscores ( _ ). serializer : Callable[[T], bytes] , optional, default= None ; Function to serialize value. If None , pickle.dumps is used. deserializer : Callable[[bytes], T] , optional, default= None ; Function to deserialize value. If None , pickle.loads is used. persist : bool , optional, default= True ; If True , table won't be deleted even when the object is deleted. If False , the table is deleted when this object is deleted.","title":"Arguments:"},{"location":"usage/list/#x-in-s","text":"True if an item of s is equal to x , else False","title":"x in s"},{"location":"usage/list/#arguments_1","text":"x : object ; an object to be checked","title":"Arguments:"},{"location":"usage/list/#return-value","text":"bool : True if x is in s and False otherwise.","title":"Return value:"},{"location":"usage/list/#x-not-in-s","text":"False if an item of s is equal to x , else True","title":"x not in s"},{"location":"usage/list/#arguments_2","text":"x : object ; an object to be checked","title":"Arguments:"},{"location":"usage/list/#return-value_1","text":"bool : False if x is in s and True otherwise.","title":"Return value:"},{"location":"usage/list/#s-t","text":"The concatenation of s and t","title":"s + t"},{"location":"usage/list/#arguments_3","text":"t : Iterable[T] ; An iterable to be concatenated.","title":"Arguments:"},{"location":"usage/list/#return-value_2","text":"List[T] : The concatenation of s and t .","title":"Return value:"},{"location":"usage/list/#s-n-or-n-s","text":"equivalent to adding s to itself n times.","title":"s * n or n * s"},{"location":"usage/list/#arguments_4","text":"n : int ; Number of times to repeat.","title":"Arguments:"},{"location":"usage/list/#return-value_3","text":"List[T] : a list of n times s was repeated.","title":"Return value:"},{"location":"usage/list/#si","text":"i -th item of s , origin 0 .","title":"s[i]"},{"location":"usage/list/#arguments_5","text":"i : int ; Item index. If it is negative, it is equivalent to len(s) + i .","title":"Arguments:"},{"location":"usage/list/#return-value_4","text":"T : i -th item of s , origin 0 .","title":"Return value:"},{"location":"usage/list/#sij","text":"Slice of s from i to j .","title":"s[i:j]"},{"location":"usage/list/#arguments_6","text":"i : int or None ; Item index where the slice starts from. If None , it is treated as 0 . j : int or None ; Item index where the slice stops at. If None , it is treated as len(s) .","title":"Arguments:"},{"location":"usage/list/#return-value_5","text":"List[T] : Slice of s from i to j .","title":"Return value:"},{"location":"usage/list/#sijk","text":"Slice of s from i to j with step k","title":"s[i:j:k]"},{"location":"usage/list/#arguments_7","text":"i : int or None ; Item index where the slice starts from. If None , it is treated as 0 . j : int or None ; Item index where the slice stops at. If None , it is treated as len(s) . k : int or None ; Step of the slice. If None , it is treated as 1 .","title":"Arguments:"},{"location":"usage/list/#return-value_6","text":"List[T] : Slice of s from i to j with step k .","title":"Return value:"},{"location":"usage/list/#lens","text":"Return the number of items in s: List[T]","title":"len(s)"},{"location":"usage/list/#return-value_7","text":"int : The number of items in s","title":"Return value:"},{"location":"usage/list/#indexx-i-j","text":"Return index of the first occurrence of x in the list (at or after index i and before index j ). Raise ValueError if x is not in the list.","title":"index(x[, i[, j]]])"},{"location":"usage/list/#arguments_8","text":"x : T ; Value to retrieve corresponding index if exists. i : int , optional, default= None ; First index to look up the value. If it is None , start from the first element of the list. j : int , optional, default= None ; Index before the last one to look for a value. If None , search to the end.","title":"Arguments:"},{"location":"usage/list/#return-value_8","text":"int : Index of the first occurrence of x in the list.","title":"Return value:"},{"location":"usage/list/#countx","text":"Return total number of occurrences of x in the list.","title":"count(x)"},{"location":"usage/list/#arguments_9","text":"x : T ; Value that counts the number of occurrences.","title":"Arguments:"},{"location":"usage/list/#return-value_9","text":"int : The number of occurrences of x in the list.","title":"Return value:"},{"location":"usage/list/#si-x","text":"Replace item i of s by x .","title":"s[i] = x"},{"location":"usage/list/#arguments_10","text":"i : int ; Item index to be set. If it is negative, it is equivalent to len(s) + i x : T ; Value to be set.","title":"Arguments:"},{"location":"usage/list/#return-value_10","text":"None .","title":"Return value:"},{"location":"usage/list/#del-si","text":"Remove item i of s .","title":"del s[i]"},{"location":"usage/list/#arguments_11","text":"i : int ; Item index to be removed. If it is negative, it is equivalent to len(s) + i .","title":"Arguments:"},{"location":"usage/list/#return-value_11","text":"None .","title":"Return value:"},{"location":"usage/list/#sij-t","text":"Replace slice of s from i to j by the contents of the iterable t .","title":"s[i:j] = t"},{"location":"usage/list/#arguments_12","text":"i : int or None ; Item index where the slice starts from. If None , it is treated as 0 . j : int or None ; Item index where the slice stops at. If None , it is treated as len(s) . t : Iterable[T] ; Iterable to be inserted.","title":"Arguments:"},{"location":"usage/list/#return-value_12","text":"None .","title":"Return value:"},{"location":"usage/list/#del-sij","text":"Remove slice of s from i to j .","title":"del s[i:j]"},{"location":"usage/list/#arguments_13","text":"i : int or None ; Item index where the slice starts from. If None , it is treated as 0 . j : int or None ; Item index where the slice stops at. If None , it is treated as len(s) .","title":"Arguments:"},{"location":"usage/list/#return-value_13","text":"None .","title":"Return value:"},{"location":"usage/list/#sijk-t","text":"Replace the elements of s[i:j:k] by those ofthe iterable t . The length must be the same. Otherwise, ValueError will be raised.","title":"s[i:j:k] = t"},{"location":"usage/list/#arguments_14","text":"i : int or None ; Item index where the slice starts from. If None , it is treated as 0 . j : int or None ; Item index where the slice stops at. If None , it is treated as len(s) . k : int or None ; Step of the slice. If None , it is treated as 1 . t : Iterable[T] ; Iterable to be substituted. The length must be the same as that of the slice.","title":"Arguments:"},{"location":"usage/list/#return-value_14","text":"None .","title":"Return value:"},{"location":"usage/list/#del-sijk","text":"Remove the elements of s[i:j:k] from the list.","title":"del s[i:j:k]"},{"location":"usage/list/#arguments_15","text":"i : int or None ; Item index where the slice starts from. If None , it is treated as 0 . j : int or None ; Item index where the slice stops at. If None , it is treated as len(s) . k : int or None ; Step of the slice. If None , it is treated as 1 .","title":"Arguments:"},{"location":"usage/list/#return-value_15","text":"None .","title":"Return value:"},{"location":"usage/list/#appendx","text":"Append x to the end of the sequence.","title":"append(x)"},{"location":"usage/list/#arguments_16","text":"x : T ; Item to be appended.","title":"Arguments:"},{"location":"usage/list/#return-value_16","text":"None .","title":"Return value;"},{"location":"usage/list/#clear","text":"Remove all items from the list.","title":"clear()"},{"location":"usage/list/#return-value_17","text":"None .","title":"Return value:"},{"location":"usage/list/#copy","text":"Return a copy of the list. The actual behavior is to create a table with a unique table name and copy the items to the new table. Therefore, unlike the built-in list copy, the behavior is similar to deep copy. Be aware that the copied list is volatile.","title":"copy()"},{"location":"usage/list/#return-value_18","text":"List[T] : A volatile copy of the list.","title":"Return value:"},{"location":"usage/list/#extendt","text":"Concatenate the list and t .","title":"extend(t)"},{"location":"usage/list/#arguments_17","text":"t : Iterable[T] ; An iterable to be concatenated.","title":"Arguments:"},{"location":"usage/list/#return-value_19","text":"None .","title":"Return value:"},{"location":"usage/list/#s-t_1","text":"Concatenate s and t .","title":"s += t"},{"location":"usage/list/#arguments_18","text":"t : Iterable[T] ; An iterable to be concatenated.","title":"Arguments:"},{"location":"usage/list/#return-value_20","text":"None .","title":"Return value:"},{"location":"usage/list/#s-n","text":"Update s with its contents repeated n times.","title":"s *= n"},{"location":"usage/list/#arguments_19","text":"n : int ; Number of times to repeat.","title":"Arguments:"},{"location":"usage/list/#return-value_21","text":"None .","title":"Return value:"},{"location":"usage/list/#inserti-x","text":"Insert x into the list at the index i .","title":"insert(i, x)"},{"location":"usage/list/#arguments_20","text":"i : int ; Index to be inserted. x : T ; Item to be inserted.","title":"Arguments:"},{"location":"usage/list/#return-value_22","text":"None .","title":"Return value:"},{"location":"usage/list/#popi","text":"Retrieve the item at i and also remove it from s.","title":"pop(i)"},{"location":"usage/list/#arguments_21","text":"i : int or None , optional, default= None ; Index to be retrieved and removed. If it is None , it is treated as the last index of the list.","title":"Arguments:"},{"location":"usage/list/#return-value_23","text":"T : i -th item of s , origin 0 .","title":"Return value:"},{"location":"usage/list/#removex","text":"Remove the first item of s whose value is equal to x .","title":"remove(x)"},{"location":"usage/list/#arguments_22","text":"x : T ; Item to be removed.","title":"Arguments:"},{"location":"usage/list/#return-value_24","text":"None .","title":"Return value:"},{"location":"usage/list/#reverse","text":"Reverse the items of the list in place.","title":"reverse()"},{"location":"usage/list/#return-value_25","text":"None .","title":"Return value:"},{"location":"usage/list/#sortreverse-key","text":"Sort the items of the list in place. The value of reverse can be either True or False , resulting in descending or ascending order, respectively. key specifies a function of one argument that is used to extract a comparison key from each list element.","title":"sort(reverse, key)"},{"location":"usage/list/#arguments_23","text":"reverse : bool , optional, default= False ; By default, the order is ascending, but if this value is True , the order will be descending. key : Callable[[T], Any] , optional, default= None ; Function to extract a comparison key from each list element.","title":"Arguments:"},{"location":"usage/list/#return-value_26","text":"None .","title":"Return value:"},{"location":"usage/metadata/","text":"Metadata MetadataItem MetadataItem(...) Constructor for MetadataItem. Instances of this class are not supposed to be created directly by the user. Arguments: table_name : str ; table name. container_type : str ; container type name. schema_version : str ; schema version. table_name Read-only property for the table name. Return value: str : The table name. container_type Read-only property for the container type. Return value: str : The container type. schema_version Read-only property for the schema version Return value: str : The schema version. MetadataReader MetadataReader(...) Constructor for MetadataReader class which can iterate over all records in the given connection. Arguments: connection : str or sqlite3.Connection ; Connection to sqlite3 to get metadata. If connection is a str , it will be used as the sqlite3 database file name. You can pass a sqlite3.Connection directly. len(metadata_reader) Return the number of records in the metadata table read by metadata_reader . It coincides the number of collections in the sqlite3 database connected by metadata_reader._connection . Return value: int : The number of items in the metadata table. obj in metadata_reader Return whether if obj is in metadata_reader Arguments: obj : object ; object to be checked the membership. Return value: bool : Boolean value whether if metadata_item is in the metadata table. iter(metadata_reader) Return an iterator over the MetadataItem 's in metadata_reader It coincides the records of metadata table in the sqlite3 database connected by metadata_reader._connection . Return value: Iterator[MetadataItem] : an iterator over the MetadataItem 's in metadata_reader","title":"metadata"},{"location":"usage/metadata/#metadata","text":"","title":"Metadata"},{"location":"usage/metadata/#metadataitem","text":"","title":"MetadataItem"},{"location":"usage/metadata/#metadataitem_1","text":"Constructor for MetadataItem. Instances of this class are not supposed to be created directly by the user.","title":"MetadataItem(...)"},{"location":"usage/metadata/#arguments","text":"table_name : str ; table name. container_type : str ; container type name. schema_version : str ; schema version.","title":"Arguments:"},{"location":"usage/metadata/#table_name","text":"Read-only property for the table name.","title":"table_name"},{"location":"usage/metadata/#return-value","text":"str : The table name.","title":"Return value:"},{"location":"usage/metadata/#container_type","text":"Read-only property for the container type.","title":"container_type"},{"location":"usage/metadata/#return-value_1","text":"str : The container type.","title":"Return value:"},{"location":"usage/metadata/#schema_version","text":"Read-only property for the schema version","title":"schema_version"},{"location":"usage/metadata/#return-value_2","text":"str : The schema version.","title":"Return value:"},{"location":"usage/metadata/#metadatareader","text":"","title":"MetadataReader"},{"location":"usage/metadata/#metadatareader_1","text":"Constructor for MetadataReader class which can iterate over all records in the given connection.","title":"MetadataReader(...)"},{"location":"usage/metadata/#arguments_1","text":"connection : str or sqlite3.Connection ; Connection to sqlite3 to get metadata. If connection is a str , it will be used as the sqlite3 database file name. You can pass a sqlite3.Connection directly.","title":"Arguments:"},{"location":"usage/metadata/#lenmetadata_reader","text":"Return the number of records in the metadata table read by metadata_reader . It coincides the number of collections in the sqlite3 database connected by metadata_reader._connection .","title":"len(metadata_reader)"},{"location":"usage/metadata/#return-value_3","text":"int : The number of items in the metadata table.","title":"Return value:"},{"location":"usage/metadata/#obj-in-metadata_reader","text":"Return whether if obj is in metadata_reader","title":"obj in metadata_reader"},{"location":"usage/metadata/#arguments_2","text":"obj : object ; object to be checked the membership.","title":"Arguments:"},{"location":"usage/metadata/#return-value_4","text":"bool : Boolean value whether if metadata_item is in the metadata table.","title":"Return value:"},{"location":"usage/metadata/#itermetadata_reader","text":"Return an iterator over the MetadataItem 's in metadata_reader It coincides the records of metadata table in the sqlite3 database connected by metadata_reader._connection .","title":"iter(metadata_reader)"},{"location":"usage/metadata/#return-value_5","text":"Iterator[MetadataItem] : an iterator over the MetadataItem 's in metadata_reader","title":"Return value:"},{"location":"usage/set/","text":"Set Set is a container compatible with the built-in set , which serializes values and stores them in a sqlite3 database. Set[T](...) Constructor. Type Parameters: T : value type Arguments: data : Iterable[T] , optional, positional-only argument, defualt= None ; Initial data. If None or no argument is given, persistent data is used as is if available, otherwise persistent data in the corresponding table is cleared and given data is stored instead. connection : str or sqlite3.Connection , optional, default= None ; If None , temporary file is automatically created. If connection is a str , it will be used as the sqlite3 database file name. You can pass a sqlite3.Connection directly. table_name : str , optional, default= None ; Table name of this container. If None , an auto-generated unique name will be used. Available characters are letters, numbers, and underscores ( _ ). serializer : Callable[[T], bytes] , optional, default= None ; Function to serialize value. If None , pickle.dumps is used. deserializer : Callable[[bytes], T] , optional, default= None ; Function to deserialize value. If None , pickle.loads is used. persist : bool , optional, default= True ; If True , table won't be deleted even when the object is deleted. If False , the table is deleted when this object is deleted. len(s) Return the number of items in s: Set[T] Return value: int : The number of items in s x in s True if x is in s , else False Arguments: x : object ; an object to be checked Return value: bool : True if x is in s and False otherwise. x not in s False if x is in s , else True Arguments: x : object ; an object to be checked Return value: bool : False if x is in s and True otherwise. isdisjoint(other) Return True if the set has no elements in common with other . Arguments: other : Iterable[T] ; Iterable to check if disjoint. Return value: bool : True if the set is disjoint with other , False otherwise. issubset(other) Return True if every element in the set is in other . Arguments: other : Iterable[T] ; Iterable to check if this one contains the set. Return value: bool : True if the set is subset of other , False otherwise. s <= other Return True if every element in the set is in other . Argument: other : Iterable[T] ; Iterable to check if this one contains all the elements in the set. Return value: bool : True if the set is subset of other , False otherwise. s < other Return True if every element in the set is in other and s is not equal to other . Arguments: other : Iterable[T] ; Iterable to check if it contains all elements of the set and is not equal to the set. Return value: bool : True if the set is a proper subset of other , False otherwise. issuperset(other) Return True if every element in other is in the set. Arguments: other : Iterable[T] ; Iterable to check if the elements are contained. Return value: bool : True if the set is superset of other , False otherwise. s >= other Return True if every element in other is in the set. Argument: other : Iterable[T] ; Iterable to check if the elements are contained. Return value: bool : True if the set is superset of other , False otherwise. s > other Return True if every element in other is in the set and s is not equal to other . Arguments: other : Iterable[T] ; Iterable to check if it all elements are in the set and is not equal to the set. Return value: bool : True if the set is a proper superset of other , False otherwise. union(*others) Return a new set with elements from the set and all others . Arguments: others : Iterable[T] ; Iterables to take the union. Return value: Set[T] : A new set with elements from the set and all others . s | other Return a new set with elements from s and other . Arguments: other : Iterable[T] ; Iterable to take the union. Return value: Set[T] : A new set with elements from s and other . intersection(*others) Return a new set with elements common to the set and all others . Arguments: others : Iterable[T] ; Iterables to take the intersection. Return value: Set[T] : A new set with elements common to the set and all others . s & other Return a new set with elements common to s and other . Arguments: other : Iterable[T] ; Iterable to take the intersection. Return value: Set[T] : A new set with elements common to s and other . difference(*others) Return a new set with elements in the set that are not in the others . Arguments: others : Iterable[T] ; Iterables to take the difference. Return value: Set[T] : A new set with elements in the set that are not in the others . s - other Return a new set with elements in the set that are not in the other . Arguments: other : Iterable[T] ; Iterable to take the difference. Return value: Set[T] : A new set with elements in the set that are not in the other . symmetric_difference(other) Return a new set with elements in either the set or other but not both. Arguments: other : Iterable[T] ; Iterable to take the symmetric difference. Return value: Set[T] : A new set with elements in either the set or other but not both. s ^ other Return a new set with elements in either the set or other but not both. Arguments: other : Iterable[T] ; Iterable to take the symmetric difference. Return value: Set[T] : A new set with elements in either the set or other but not both. copy() Return a copy of the set. The actual behavior is to create a table with a unique table name and copy the elements to the new table. Therefore, unlike the built-in set copy, the behavior is similar to deep copy. Be aware that the copied set is volatile. Return value: Set[T] : A volatile copy of the set. update(*others) Update the set by adding elements from all others . Arguments: others : Iterable[T] ; Iterables to take the union. Return value: None . s |= other Update the set by adding elements from other . Arguments: other : Iterable[T] ; Iterable to take the union. Return value: None . intersection_update(*others) Update the set by keeping only elements found in the set and all others . Arguments: others : Iterable[T] ; Iterables to take the intersection. Return value: None . s &= other Update the set by keeping only elements found in the set and other . Arguments: other : Iterable[T] ; Iterable to take the intersection. Return value: None . symmetric_difference_update(other) Update the set by keeping only elements found in either the set or other but not both. Arguments: other : Iterable[T] ; Iterable to take the symmetric difference. Return value: None . s ^= other Update the set by keeping only elements found in either the set or other but not both. Arguments: other : Iterable[T] ; Iterable to take the symmetric difference. Return value: None . add(elem) Add an element elem to the set. Arguments: elem : T ; An element to be added. Return value: None . remove(elem) Remove an element elem from the set. Raises KeyError if elem is not contained in the set. Arguemnts: elem : T ; An element to be removed. Return value: None . discard(elem) Remove an element elem from the set if it is present. Arguments: elem : T ; An element to be removed. Return value: None . pop() Remove and return an arbitrary element from the set. Raises KeyError if the set is empty. Return value: T : An element in the set. clear() Remove all elements from the set. Return value: None .","title":"Set"},{"location":"usage/set/#set","text":"Set is a container compatible with the built-in set , which serializes values and stores them in a sqlite3 database.","title":"Set"},{"location":"usage/set/#sett","text":"Constructor.","title":"Set[T](...)"},{"location":"usage/set/#type-parameters","text":"T : value type","title":"Type Parameters:"},{"location":"usage/set/#arguments","text":"data : Iterable[T] , optional, positional-only argument, defualt= None ; Initial data. If None or no argument is given, persistent data is used as is if available, otherwise persistent data in the corresponding table is cleared and given data is stored instead. connection : str or sqlite3.Connection , optional, default= None ; If None , temporary file is automatically created. If connection is a str , it will be used as the sqlite3 database file name. You can pass a sqlite3.Connection directly. table_name : str , optional, default= None ; Table name of this container. If None , an auto-generated unique name will be used. Available characters are letters, numbers, and underscores ( _ ). serializer : Callable[[T], bytes] , optional, default= None ; Function to serialize value. If None , pickle.dumps is used. deserializer : Callable[[bytes], T] , optional, default= None ; Function to deserialize value. If None , pickle.loads is used. persist : bool , optional, default= True ; If True , table won't be deleted even when the object is deleted. If False , the table is deleted when this object is deleted.","title":"Arguments:"},{"location":"usage/set/#lens","text":"Return the number of items in s: Set[T]","title":"len(s)"},{"location":"usage/set/#return-value","text":"int : The number of items in s","title":"Return value:"},{"location":"usage/set/#x-in-s","text":"True if x is in s , else False","title":"x in s"},{"location":"usage/set/#arguments_1","text":"x : object ; an object to be checked","title":"Arguments:"},{"location":"usage/set/#return-value_1","text":"bool : True if x is in s and False otherwise.","title":"Return value:"},{"location":"usage/set/#x-not-in-s","text":"False if x is in s , else True","title":"x not in s"},{"location":"usage/set/#arguments_2","text":"x : object ; an object to be checked","title":"Arguments:"},{"location":"usage/set/#return-value_2","text":"bool : False if x is in s and True otherwise.","title":"Return value:"},{"location":"usage/set/#isdisjointother","text":"Return True if the set has no elements in common with other .","title":"isdisjoint(other)"},{"location":"usage/set/#arguments_3","text":"other : Iterable[T] ; Iterable to check if disjoint.","title":"Arguments:"},{"location":"usage/set/#return-value_3","text":"bool : True if the set is disjoint with other , False otherwise.","title":"Return value:"},{"location":"usage/set/#issubsetother","text":"Return True if every element in the set is in other .","title":"issubset(other)"},{"location":"usage/set/#arguments_4","text":"other : Iterable[T] ; Iterable to check if this one contains the set.","title":"Arguments:"},{"location":"usage/set/#return-value_4","text":"bool : True if the set is subset of other , False otherwise.","title":"Return value:"},{"location":"usage/set/#s-other","text":"Return True if every element in the set is in other .","title":"s &lt;= other"},{"location":"usage/set/#argument","text":"other : Iterable[T] ; Iterable to check if this one contains all the elements in the set.","title":"Argument:"},{"location":"usage/set/#return-value_5","text":"bool : True if the set is subset of other , False otherwise.","title":"Return value:"},{"location":"usage/set/#s-other_1","text":"Return True if every element in the set is in other and s is not equal to other .","title":"s &lt; other"},{"location":"usage/set/#arguments_5","text":"other : Iterable[T] ; Iterable to check if it contains all elements of the set and is not equal to the set.","title":"Arguments:"},{"location":"usage/set/#return-value_6","text":"bool : True if the set is a proper subset of other , False otherwise.","title":"Return value:"},{"location":"usage/set/#issupersetother","text":"Return True if every element in other is in the set.","title":"issuperset(other)"},{"location":"usage/set/#arguments_6","text":"other : Iterable[T] ; Iterable to check if the elements are contained.","title":"Arguments:"},{"location":"usage/set/#return-value_7","text":"bool : True if the set is superset of other , False otherwise.","title":"Return value:"},{"location":"usage/set/#s-other_2","text":"Return True if every element in other is in the set.","title":"s &gt;= other"},{"location":"usage/set/#argument_1","text":"other : Iterable[T] ; Iterable to check if the elements are contained.","title":"Argument:"},{"location":"usage/set/#return-value_8","text":"bool : True if the set is superset of other , False otherwise.","title":"Return value:"},{"location":"usage/set/#s-other_3","text":"Return True if every element in other is in the set and s is not equal to other .","title":"s &gt; other"},{"location":"usage/set/#arguments_7","text":"other : Iterable[T] ; Iterable to check if it all elements are in the set and is not equal to the set.","title":"Arguments:"},{"location":"usage/set/#return-value_9","text":"bool : True if the set is a proper superset of other , False otherwise.","title":"Return value:"},{"location":"usage/set/#unionothers","text":"Return a new set with elements from the set and all others .","title":"union(*others)"},{"location":"usage/set/#arguments_8","text":"others : Iterable[T] ; Iterables to take the union.","title":"Arguments:"},{"location":"usage/set/#return-value_10","text":"Set[T] : A new set with elements from the set and all others .","title":"Return value:"},{"location":"usage/set/#s-other_4","text":"Return a new set with elements from s and other .","title":"s | other"},{"location":"usage/set/#arguments_9","text":"other : Iterable[T] ; Iterable to take the union.","title":"Arguments:"},{"location":"usage/set/#return-value_11","text":"Set[T] : A new set with elements from s and other .","title":"Return value:"},{"location":"usage/set/#intersectionothers","text":"Return a new set with elements common to the set and all others .","title":"intersection(*others)"},{"location":"usage/set/#arguments_10","text":"others : Iterable[T] ; Iterables to take the intersection.","title":"Arguments:"},{"location":"usage/set/#return-value_12","text":"Set[T] : A new set with elements common to the set and all others .","title":"Return value:"},{"location":"usage/set/#s-other_5","text":"Return a new set with elements common to s and other .","title":"s &amp; other"},{"location":"usage/set/#arguments_11","text":"other : Iterable[T] ; Iterable to take the intersection.","title":"Arguments:"},{"location":"usage/set/#return-value_13","text":"Set[T] : A new set with elements common to s and other .","title":"Return value:"},{"location":"usage/set/#differenceothers","text":"Return a new set with elements in the set that are not in the others .","title":"difference(*others)"},{"location":"usage/set/#arguments_12","text":"others : Iterable[T] ; Iterables to take the difference.","title":"Arguments:"},{"location":"usage/set/#return-value_14","text":"Set[T] : A new set with elements in the set that are not in the others .","title":"Return value:"},{"location":"usage/set/#s-other_6","text":"Return a new set with elements in the set that are not in the other .","title":"s - other"},{"location":"usage/set/#arguments_13","text":"other : Iterable[T] ; Iterable to take the difference.","title":"Arguments:"},{"location":"usage/set/#return-value_15","text":"Set[T] : A new set with elements in the set that are not in the other .","title":"Return value:"},{"location":"usage/set/#symmetric_differenceother","text":"Return a new set with elements in either the set or other but not both.","title":"symmetric_difference(other)"},{"location":"usage/set/#arguments_14","text":"other : Iterable[T] ; Iterable to take the symmetric difference.","title":"Arguments:"},{"location":"usage/set/#return-value_16","text":"Set[T] : A new set with elements in either the set or other but not both.","title":"Return value:"},{"location":"usage/set/#s-other_7","text":"Return a new set with elements in either the set or other but not both.","title":"s ^ other"},{"location":"usage/set/#arguments_15","text":"other : Iterable[T] ; Iterable to take the symmetric difference.","title":"Arguments:"},{"location":"usage/set/#return-value_17","text":"Set[T] : A new set with elements in either the set or other but not both.","title":"Return value:"},{"location":"usage/set/#copy","text":"Return a copy of the set. The actual behavior is to create a table with a unique table name and copy the elements to the new table. Therefore, unlike the built-in set copy, the behavior is similar to deep copy. Be aware that the copied set is volatile.","title":"copy()"},{"location":"usage/set/#return-value_18","text":"Set[T] : A volatile copy of the set.","title":"Return value:"},{"location":"usage/set/#updateothers","text":"Update the set by adding elements from all others .","title":"update(*others)"},{"location":"usage/set/#arguments_16","text":"others : Iterable[T] ; Iterables to take the union.","title":"Arguments:"},{"location":"usage/set/#return-value_19","text":"None .","title":"Return value:"},{"location":"usage/set/#s-other_8","text":"Update the set by adding elements from other .","title":"s |= other"},{"location":"usage/set/#arguments_17","text":"other : Iterable[T] ; Iterable to take the union.","title":"Arguments:"},{"location":"usage/set/#return-value_20","text":"None .","title":"Return value:"},{"location":"usage/set/#intersection_updateothers","text":"Update the set by keeping only elements found in the set and all others .","title":"intersection_update(*others)"},{"location":"usage/set/#arguments_18","text":"others : Iterable[T] ; Iterables to take the intersection.","title":"Arguments:"},{"location":"usage/set/#return-value_21","text":"None .","title":"Return value:"},{"location":"usage/set/#s-other_9","text":"Update the set by keeping only elements found in the set and other .","title":"s &amp;= other"},{"location":"usage/set/#arguments_19","text":"other : Iterable[T] ; Iterable to take the intersection.","title":"Arguments:"},{"location":"usage/set/#return-value_22","text":"None .","title":"Return value:"},{"location":"usage/set/#symmetric_difference_updateother","text":"Update the set by keeping only elements found in either the set or other but not both.","title":"symmetric_difference_update(other)"},{"location":"usage/set/#arguments_20","text":"other : Iterable[T] ; Iterable to take the symmetric difference.","title":"Arguments:"},{"location":"usage/set/#return-value_23","text":"None .","title":"Return value:"},{"location":"usage/set/#s-other_10","text":"Update the set by keeping only elements found in either the set or other but not both.","title":"s ^= other"},{"location":"usage/set/#arguments_21","text":"other : Iterable[T] ; Iterable to take the symmetric difference.","title":"Arguments:"},{"location":"usage/set/#return-value_24","text":"None .","title":"Return value:"},{"location":"usage/set/#addelem","text":"Add an element elem to the set.","title":"add(elem)"},{"location":"usage/set/#arguments_22","text":"elem : T ; An element to be added.","title":"Arguments:"},{"location":"usage/set/#return-value_25","text":"None .","title":"Return value:"},{"location":"usage/set/#removeelem","text":"Remove an element elem from the set. Raises KeyError if elem is not contained in the set.","title":"remove(elem)"},{"location":"usage/set/#arguemnts","text":"elem : T ; An element to be removed.","title":"Arguemnts:"},{"location":"usage/set/#return-value_26","text":"None .","title":"Return value:"},{"location":"usage/set/#discardelem","text":"Remove an element elem from the set if it is present.","title":"discard(elem)"},{"location":"usage/set/#arguments_23","text":"elem : T ; An element to be removed.","title":"Arguments:"},{"location":"usage/set/#return-value_27","text":"None .","title":"Return value:"},{"location":"usage/set/#pop","text":"Remove and return an arbitrary element from the set. Raises KeyError if the set is empty.","title":"pop()"},{"location":"usage/set/#return-value_28","text":"T : An element in the set.","title":"Return value:"},{"location":"usage/set/#clear","text":"Remove all elements from the set.","title":"clear()"},{"location":"usage/set/#return-value_29","text":"None .","title":"Return value:"},{"location":"usage/dictview/itemsview/","text":"ItemsView ItemsView is a view object which is returned by dict.items() . It provides a dynamic view on the dictionary's (key, value) tuples, which means when dictionay changes, the view reflects these changes. len(itemsview) Return the number of items in the dictionary d: Dict[KT, VT] where itemsview=d.items() . Return value: int : The number of items in d iter(itemsview) Return an iterator over the (key, value) tuples in the dictionary. The order of the items is guaranteed to be inserted order. Return value: Iterable[Tuple[_KT_co, _VT_co]] : The iterator over the keys in the dictionary. item in itemsview Return whether if item is in the dictionary. Arguments: item : object ; An object to be checked Return value: bool : True if item is in the dictionary and False otherwise. reversed(itemsview) Return a reverse iterator over the (key, value) tuples of the dictionary. (provided only python version 3.8 and above) Return value: Iterator[Tuple[_KT_co, _VT_co]] : The reverse iterator over the (key, value) tuples in the dictonary. itemsview & other Return a set with elements common to itemsview and other . Arguments: other : Iterable[Any] ; Iterable to take the intersection. Return value: Set[Tuple[_KT_co, _VT_co]] : A set with elements common to itemsview and other . other & itemsview Return a set with elements common to itemsview and other . Arguments: other : Iterable[_T] ; Iterable to take the intersection. Return value: Set[_T] : A set with elements common to itemsview and other . itemsview | other Return a new set with elements from itemsview and other . Arguments: other : Iterable[_T] ; Iterable to take the union. Return value: Set[Union[Tuple[_KT_co, _VT_co], _T]] : A new set with elements from itemsview and other . other | itemsview Return a new set with elements from itemsview and other . Arguments: other : Iterable[_T] ; Iterable to take the union. Return value: Set[Union[Tuple[_KT_co, _VT_co], _T]] : A new set with elements from itemsview and other . itemsview - other Return a new set with elements in the itemsview that are not in the other . Arguments: other : Iterable[Any] ; Iterable to take the difference. Return value: Set[Tuple[_KT_co, _VT_co]] : A new set with elements in the set that are not in the other . other - itemsview Return a new set with elements in the other that are not in the itemsview . Arguments: other : Iterable[_T] ; Iterable to take the difference. Return value: Set[_T] : A new set with elements in the other that are not in the itemsview . itemsview ^ other Return a new set with elements in either the itemsview or other but not both. Arguments: other : Iterable[_T] ; Iterable to take the symmetric difference. Return value Set[Union[Tuple[_KT_co, _VT_co], _T]] : A new set with elements in either the itemsview or other but not both. other ^ itemsview Return a new set with elements in either the itemsview or other but not both. Arguments: other : Iterable[_T] ; Iterable to take the symmetric difference. Return value Set[Union[Tuple[_KT_co, _VT_co], _T]] : A new set with elements in either the itemsview or other but not both. itemsview.mapping Return a MappingProxyType that wraps the original dictionary to which the view refers. (provided only python version 3.10 and above) Return value MappingProxyType : A read-only proxy of the original dictionary.","title":"ItemsView"},{"location":"usage/dictview/itemsview/#itemsview","text":"ItemsView is a view object which is returned by dict.items() . It provides a dynamic view on the dictionary's (key, value) tuples, which means when dictionay changes, the view reflects these changes.","title":"ItemsView"},{"location":"usage/dictview/itemsview/#lenitemsview","text":"Return the number of items in the dictionary d: Dict[KT, VT] where itemsview=d.items() .","title":"len(itemsview)"},{"location":"usage/dictview/itemsview/#return-value","text":"int : The number of items in d","title":"Return value:"},{"location":"usage/dictview/itemsview/#iteritemsview","text":"Return an iterator over the (key, value) tuples in the dictionary. The order of the items is guaranteed to be inserted order.","title":"iter(itemsview)"},{"location":"usage/dictview/itemsview/#return-value_1","text":"Iterable[Tuple[_KT_co, _VT_co]] : The iterator over the keys in the dictionary.","title":"Return value:"},{"location":"usage/dictview/itemsview/#item-in-itemsview","text":"Return whether if item is in the dictionary.","title":"item in itemsview"},{"location":"usage/dictview/itemsview/#arguments","text":"item : object ; An object to be checked","title":"Arguments:"},{"location":"usage/dictview/itemsview/#return-value_2","text":"bool : True if item is in the dictionary and False otherwise.","title":"Return value:"},{"location":"usage/dictview/itemsview/#reverseditemsview","text":"Return a reverse iterator over the (key, value) tuples of the dictionary. (provided only python version 3.8 and above)","title":"reversed(itemsview)"},{"location":"usage/dictview/itemsview/#return-value_3","text":"Iterator[Tuple[_KT_co, _VT_co]] : The reverse iterator over the (key, value) tuples in the dictonary.","title":"Return value:"},{"location":"usage/dictview/itemsview/#itemsview-other","text":"Return a set with elements common to itemsview and other .","title":"itemsview &amp; other"},{"location":"usage/dictview/itemsview/#arguments_1","text":"other : Iterable[Any] ; Iterable to take the intersection.","title":"Arguments:"},{"location":"usage/dictview/itemsview/#return-value_4","text":"Set[Tuple[_KT_co, _VT_co]] : A set with elements common to itemsview and other .","title":"Return value:"},{"location":"usage/dictview/itemsview/#other-itemsview","text":"Return a set with elements common to itemsview and other .","title":"other &amp; itemsview"},{"location":"usage/dictview/itemsview/#arguments_2","text":"other : Iterable[_T] ; Iterable to take the intersection.","title":"Arguments:"},{"location":"usage/dictview/itemsview/#return-value_5","text":"Set[_T] : A set with elements common to itemsview and other .","title":"Return value:"},{"location":"usage/dictview/itemsview/#itemsview-other_1","text":"Return a new set with elements from itemsview and other .","title":"itemsview | other"},{"location":"usage/dictview/itemsview/#arguments_3","text":"other : Iterable[_T] ; Iterable to take the union.","title":"Arguments:"},{"location":"usage/dictview/itemsview/#return-value_6","text":"Set[Union[Tuple[_KT_co, _VT_co], _T]] : A new set with elements from itemsview and other .","title":"Return value:"},{"location":"usage/dictview/itemsview/#other-itemsview_1","text":"Return a new set with elements from itemsview and other .","title":"other | itemsview"},{"location":"usage/dictview/itemsview/#arguments_4","text":"other : Iterable[_T] ; Iterable to take the union.","title":"Arguments:"},{"location":"usage/dictview/itemsview/#return-value_7","text":"Set[Union[Tuple[_KT_co, _VT_co], _T]] : A new set with elements from itemsview and other .","title":"Return value:"},{"location":"usage/dictview/itemsview/#itemsview-other_2","text":"Return a new set with elements in the itemsview that are not in the other .","title":"itemsview - other"},{"location":"usage/dictview/itemsview/#arguments_5","text":"other : Iterable[Any] ; Iterable to take the difference.","title":"Arguments:"},{"location":"usage/dictview/itemsview/#return-value_8","text":"Set[Tuple[_KT_co, _VT_co]] : A new set with elements in the set that are not in the other .","title":"Return value:"},{"location":"usage/dictview/itemsview/#other-itemsview_2","text":"Return a new set with elements in the other that are not in the itemsview .","title":"other - itemsview"},{"location":"usage/dictview/itemsview/#arguments_6","text":"other : Iterable[_T] ; Iterable to take the difference.","title":"Arguments:"},{"location":"usage/dictview/itemsview/#return-value_9","text":"Set[_T] : A new set with elements in the other that are not in the itemsview .","title":"Return value:"},{"location":"usage/dictview/itemsview/#itemsview-other_3","text":"Return a new set with elements in either the itemsview or other but not both.","title":"itemsview ^ other"},{"location":"usage/dictview/itemsview/#arguments_7","text":"other : Iterable[_T] ; Iterable to take the symmetric difference.","title":"Arguments:"},{"location":"usage/dictview/itemsview/#return-value_10","text":"Set[Union[Tuple[_KT_co, _VT_co], _T]] : A new set with elements in either the itemsview or other but not both.","title":"Return value"},{"location":"usage/dictview/itemsview/#other-itemsview_3","text":"Return a new set with elements in either the itemsview or other but not both.","title":"other ^ itemsview"},{"location":"usage/dictview/itemsview/#arguments_8","text":"other : Iterable[_T] ; Iterable to take the symmetric difference.","title":"Arguments:"},{"location":"usage/dictview/itemsview/#return-value_11","text":"Set[Union[Tuple[_KT_co, _VT_co], _T]] : A new set with elements in either the itemsview or other but not both.","title":"Return value"},{"location":"usage/dictview/itemsview/#itemsviewmapping","text":"Return a MappingProxyType that wraps the original dictionary to which the view refers. (provided only python version 3.10 and above)","title":"itemsview.mapping"},{"location":"usage/dictview/itemsview/#return-value_12","text":"MappingProxyType : A read-only proxy of the original dictionary.","title":"Return value"},{"location":"usage/dictview/keysview/","text":"KeysView KeysView is a view object which is returned by dict.keys() . It provides a dynamic view on the dictionary's keys, which means when dictionay changes, the view reflects these changes. len(keysview) Return the number of items in the dictionary d: Dict[KT, VT] where keysview=d.keys() . Return value: int : The number of items in d iter(keysview) Return an iterator over the keys in the dictionary. The order of the keys is guaranteed to be inserted order. Return value: Iterator[_KT_co] : The iterator over the keys in the dictonary. key in keysview Return whether if key is in the dictionary. Arguments: key : object ; An object to be checked Return value: bool : True if key is in the dictionary and False otherwise. reversed(keysview) Return a reverse iterator over the keys of the dictionary. (provided only python version 3.8 and above) Return value: Iterator[_KT_co] : The reverse iterator over the keys in the dictonary. keysview & other Return a set with elements common to keysview and other . Arguments: other : Iterable[Any] ; Iterable to take the intersection. Return value: Set[_KT_co] : A set with elements common to keysview and other . other & keysview Return a set with elements common to keysview and other . Arguments: other : Iterable[_T] ; Iterable to take the intersection. Return value: Set[_T] : A set with elements common to keysview and other . keysview | other Return a new set with elements from keysview and other . Arguments: other : Iterable[_T] ; Iterable to take the union. Return value: Set[Union[_KT_co, _T]] : A new set with elements from keysview and other . other | keysview Return a new set with elements from keysview and other . Arguments: other : Iterable[_T] ; Iterable to take the union. Return value: Set[Union[_KT_co, _T]] : A new set with elements from keysview and other . keysview - other Return a new set with elements in the keysview that are not in the other . Arguments: other : Iterable[Any] ; Iterable to take the difference. Return value: Set[_KT_co] : A new set with elements in the set that are not in the other . other - keysview Return a new set with elements in the other that are not in the keysview . Arguments: other : Iterable[_T] ; Iterable to be taken the difference. Return value: Set[_T] : A new set with elements in other that are not in the keysview . keysview ^ other Return a new set with elements in either the keysview or other but not both. Arguments: other : Iterable[_T] ; Iterable to take the symmetric difference. Return value Set[Union[_KT_co, _T]] : A new set with elements in either the keysview or other but not both. other ^ keysview Return a new set with elements in either the keysview or other but not both. Arguments: other : Iterable[_T] ; Iterable to take the symmetric difference. Return value Set[Union[_KT_co, _T]] : A new set with elements in either the keysview or other but not both. keysview.mapping Return a MappingProxyType that wraps the original dictionary to which the view refers. (provided only python version 3.10 and above) Return value MappingProxyType : A read-only proxy of the original dictionary.","title":"KeysView"},{"location":"usage/dictview/keysview/#keysview","text":"KeysView is a view object which is returned by dict.keys() . It provides a dynamic view on the dictionary's keys, which means when dictionay changes, the view reflects these changes.","title":"KeysView"},{"location":"usage/dictview/keysview/#lenkeysview","text":"Return the number of items in the dictionary d: Dict[KT, VT] where keysview=d.keys() .","title":"len(keysview)"},{"location":"usage/dictview/keysview/#return-value","text":"int : The number of items in d","title":"Return value:"},{"location":"usage/dictview/keysview/#iterkeysview","text":"Return an iterator over the keys in the dictionary. The order of the keys is guaranteed to be inserted order.","title":"iter(keysview)"},{"location":"usage/dictview/keysview/#return-value_1","text":"Iterator[_KT_co] : The iterator over the keys in the dictonary.","title":"Return value:"},{"location":"usage/dictview/keysview/#key-in-keysview","text":"Return whether if key is in the dictionary.","title":"key in keysview"},{"location":"usage/dictview/keysview/#arguments","text":"key : object ; An object to be checked","title":"Arguments:"},{"location":"usage/dictview/keysview/#return-value_2","text":"bool : True if key is in the dictionary and False otherwise.","title":"Return value:"},{"location":"usage/dictview/keysview/#reversedkeysview","text":"Return a reverse iterator over the keys of the dictionary. (provided only python version 3.8 and above)","title":"reversed(keysview)"},{"location":"usage/dictview/keysview/#return-value_3","text":"Iterator[_KT_co] : The reverse iterator over the keys in the dictonary.","title":"Return value:"},{"location":"usage/dictview/keysview/#keysview-other","text":"Return a set with elements common to keysview and other .","title":"keysview &amp; other"},{"location":"usage/dictview/keysview/#arguments_1","text":"other : Iterable[Any] ; Iterable to take the intersection.","title":"Arguments:"},{"location":"usage/dictview/keysview/#return-value_4","text":"Set[_KT_co] : A set with elements common to keysview and other .","title":"Return value:"},{"location":"usage/dictview/keysview/#other-keysview","text":"Return a set with elements common to keysview and other .","title":"other &amp; keysview"},{"location":"usage/dictview/keysview/#arguments_2","text":"other : Iterable[_T] ; Iterable to take the intersection.","title":"Arguments:"},{"location":"usage/dictview/keysview/#return-value_5","text":"Set[_T] : A set with elements common to keysview and other .","title":"Return value:"},{"location":"usage/dictview/keysview/#keysview-other_1","text":"Return a new set with elements from keysview and other .","title":"keysview | other"},{"location":"usage/dictview/keysview/#arguments_3","text":"other : Iterable[_T] ; Iterable to take the union.","title":"Arguments:"},{"location":"usage/dictview/keysview/#return-value_6","text":"Set[Union[_KT_co, _T]] : A new set with elements from keysview and other .","title":"Return value:"},{"location":"usage/dictview/keysview/#other-keysview_1","text":"Return a new set with elements from keysview and other .","title":"other | keysview"},{"location":"usage/dictview/keysview/#arguments_4","text":"other : Iterable[_T] ; Iterable to take the union.","title":"Arguments:"},{"location":"usage/dictview/keysview/#return-value_7","text":"Set[Union[_KT_co, _T]] : A new set with elements from keysview and other .","title":"Return value:"},{"location":"usage/dictview/keysview/#keysview-other_2","text":"Return a new set with elements in the keysview that are not in the other .","title":"keysview - other"},{"location":"usage/dictview/keysview/#arguments_5","text":"other : Iterable[Any] ; Iterable to take the difference.","title":"Arguments:"},{"location":"usage/dictview/keysview/#return-value_8","text":"Set[_KT_co] : A new set with elements in the set that are not in the other .","title":"Return value:"},{"location":"usage/dictview/keysview/#other-keysview_2","text":"Return a new set with elements in the other that are not in the keysview .","title":"other - keysview"},{"location":"usage/dictview/keysview/#arguments_6","text":"other : Iterable[_T] ; Iterable to be taken the difference.","title":"Arguments:"},{"location":"usage/dictview/keysview/#return-value_9","text":"Set[_T] : A new set with elements in other that are not in the keysview .","title":"Return value:"},{"location":"usage/dictview/keysview/#keysview-other_3","text":"Return a new set with elements in either the keysview or other but not both.","title":"keysview ^ other"},{"location":"usage/dictview/keysview/#arguments_7","text":"other : Iterable[_T] ; Iterable to take the symmetric difference.","title":"Arguments:"},{"location":"usage/dictview/keysview/#return-value_10","text":"Set[Union[_KT_co, _T]] : A new set with elements in either the keysview or other but not both.","title":"Return value"},{"location":"usage/dictview/keysview/#other-keysview_3","text":"Return a new set with elements in either the keysview or other but not both.","title":"other ^ keysview"},{"location":"usage/dictview/keysview/#arguments_8","text":"other : Iterable[_T] ; Iterable to take the symmetric difference.","title":"Arguments:"},{"location":"usage/dictview/keysview/#return-value_11","text":"Set[Union[_KT_co, _T]] : A new set with elements in either the keysview or other but not both.","title":"Return value"},{"location":"usage/dictview/keysview/#keysviewmapping","text":"Return a MappingProxyType that wraps the original dictionary to which the view refers. (provided only python version 3.10 and above)","title":"keysview.mapping"},{"location":"usage/dictview/keysview/#return-value_12","text":"MappingProxyType : A read-only proxy of the original dictionary.","title":"Return value"},{"location":"usage/dictview/valuesview/","text":"ValuesView ValuesView is a view object which is returned by dict.views() . It provides a dynamic view on the dictionary's values, which means when dictionay changes, the view reflects these changes. len(valuesview) Return the number of items in the dictionay d: Dict[KT, VT] where valuesview=d.values() . Return value: int : The number of items in d iter(valuesview) Return an iterator over the values in the dictionary. The order of the values is guaranteed to be inserted order. Return value: Iterator[_VT_co] : The iterator over the values in the dictionary. value in valuesview Return whether if value is in the dictionary. Arguments: value : object ; An object to be checked Return value: bool : True if value is in the dictionary and False otherwise. reversed(valuesview) Return a reverse iterator over the values of the dictionary. (provided only python version 3.8 and above) Return value: Iterator[_VT_co] : The reverse iterator over the values in the dictonary. valuesview.mapping Return a MappingProxyType that wraps the original dictionary to which the view refers. (provided only python version 3.10 and above) Return value MappingProxyType : A read-only proxy of the original dictionary.","title":"ValuesView"},{"location":"usage/dictview/valuesview/#valuesview","text":"ValuesView is a view object which is returned by dict.views() . It provides a dynamic view on the dictionary's values, which means when dictionay changes, the view reflects these changes.","title":"ValuesView"},{"location":"usage/dictview/valuesview/#lenvaluesview","text":"Return the number of items in the dictionay d: Dict[KT, VT] where valuesview=d.values() .","title":"len(valuesview)"},{"location":"usage/dictview/valuesview/#return-value","text":"int : The number of items in d","title":"Return value:"},{"location":"usage/dictview/valuesview/#itervaluesview","text":"Return an iterator over the values in the dictionary. The order of the values is guaranteed to be inserted order.","title":"iter(valuesview)"},{"location":"usage/dictview/valuesview/#return-value_1","text":"Iterator[_VT_co] : The iterator over the values in the dictionary.","title":"Return value:"},{"location":"usage/dictview/valuesview/#value-in-valuesview","text":"Return whether if value is in the dictionary.","title":"value in valuesview"},{"location":"usage/dictview/valuesview/#arguments","text":"value : object ; An object to be checked","title":"Arguments:"},{"location":"usage/dictview/valuesview/#return-value_2","text":"bool : True if value is in the dictionary and False otherwise.","title":"Return value:"},{"location":"usage/dictview/valuesview/#reversedvaluesview","text":"Return a reverse iterator over the values of the dictionary. (provided only python version 3.8 and above)","title":"reversed(valuesview)"},{"location":"usage/dictview/valuesview/#return-value_3","text":"Iterator[_VT_co] : The reverse iterator over the values in the dictonary.","title":"Return value:"},{"location":"usage/dictview/valuesview/#valuesviewmapping","text":"Return a MappingProxyType that wraps the original dictionary to which the view refers. (provided only python version 3.10 and above)","title":"valuesview.mapping"},{"location":"usage/dictview/valuesview/#return-value_4","text":"MappingProxyType : A read-only proxy of the original dictionary.","title":"Return value"}]}