{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Overview Documentation for version: 1.2.0 sqlitecollections is a sort of containers that are backended by sqlite3 DB and are compatible with corresponding built-in collections. Since containers consume disk space instead of RAM, they can handle large amounts of data even in environments with limited RAM. Migrating from existing code using the built-in container is as simple as importing the library and changing the constructor. The elements of the container are automatically serialized and stored in the sqlite3 database, and are automatically read from the sqlite3 database and deserialized when accessed. Current version supports List (mutable sequence), Dict (mutable mapping) and Set (mutable set) and almost all methods are compatible with list, dict and set respectively. Installation pip install sqlitecollections Example import sqlitecollections as sc l = sc . List [ str ]([ \"Alice\" , \"Bob\" , \"Carol\" ]) print ( l [ 2 ]) #> Carol print ( len ( l )) #> 3 l . append ( \"Dave\" ) print ( l . index ( \"Bob\" )) #> 1 print ( l . index ( \"Dave\" )) #> 3 d = sc . Dict [ str , str ]({ \"a\" : \"Alice\" , \"b\" : \"Bob\" }) print ( d [ \"a\" ]) #> Alice d [ \"c\" ] = \"Carol\" print ( list ( d . keys ())) #> ['a', 'b', 'c'] print ( list ( d . values ())) #> ['Alice', 'Bob', 'Carol'] s = sc . Set [ str ]([ \"Alice\" , \"Bob\" , \"Carol\" , \"Dave\" ]) print ( \"Ellen\" in s ) #> False print ( \"Alice\" in s ) #> True print ( list ( s . intersection ([ \"Alice\" , \"Carol\" ]))) #> ['Alice', 'Carol'] In the above example, a temporary file is created every time a container is created, and the elements are written to the sqlite3 database created on the file, thus consuming very little RAM. If you want to reuse the container you created, you can create it by specifying the file path and table name of the sqlite3 database. import sqlitecollections as sc l = sc . List [ str ]([ \"Alice\" , \"Bob\" , \"Carol\" ], connection = \"path/to/file.db\" , table_name = \"list_example\" ) l . append ( \"Dave\" ) exit () When you load it, you can restore the previous state by specifying the same file path and table name. import sqlitecollections as sc l = sc . List [ str ]( connection = \"path/to/file.db\" , table_name = \"list_example\" ) print ( len ( l )) #> 4 print ( list ( l )) #> ['Alice', 'Bob', 'Carol', 'Dave'] Pros and cons for built-in containers Pros Save memory usage. Once the database is built, loading time is almost zero, even for huge data. Cons Each operation has the overhead of serialize/deserialize. Some operations are incompatible and unavailable. For example, directly rewriting the mutable elements of a container.","title":"Overview"},{"location":"#overview","text":"Documentation for version: 1.2.0 sqlitecollections is a sort of containers that are backended by sqlite3 DB and are compatible with corresponding built-in collections. Since containers consume disk space instead of RAM, they can handle large amounts of data even in environments with limited RAM. Migrating from existing code using the built-in container is as simple as importing the library and changing the constructor. The elements of the container are automatically serialized and stored in the sqlite3 database, and are automatically read from the sqlite3 database and deserialized when accessed. Current version supports List (mutable sequence), Dict (mutable mapping) and Set (mutable set) and almost all methods are compatible with list, dict and set respectively.","title":"Overview"},{"location":"#installation","text":"pip install sqlitecollections","title":"Installation"},{"location":"#example","text":"import sqlitecollections as sc l = sc . List [ str ]([ \"Alice\" , \"Bob\" , \"Carol\" ]) print ( l [ 2 ]) #> Carol print ( len ( l )) #> 3 l . append ( \"Dave\" ) print ( l . index ( \"Bob\" )) #> 1 print ( l . index ( \"Dave\" )) #> 3 d = sc . Dict [ str , str ]({ \"a\" : \"Alice\" , \"b\" : \"Bob\" }) print ( d [ \"a\" ]) #> Alice d [ \"c\" ] = \"Carol\" print ( list ( d . keys ())) #> ['a', 'b', 'c'] print ( list ( d . values ())) #> ['Alice', 'Bob', 'Carol'] s = sc . Set [ str ]([ \"Alice\" , \"Bob\" , \"Carol\" , \"Dave\" ]) print ( \"Ellen\" in s ) #> False print ( \"Alice\" in s ) #> True print ( list ( s . intersection ([ \"Alice\" , \"Carol\" ]))) #> ['Alice', 'Carol'] In the above example, a temporary file is created every time a container is created, and the elements are written to the sqlite3 database created on the file, thus consuming very little RAM. If you want to reuse the container you created, you can create it by specifying the file path and table name of the sqlite3 database. import sqlitecollections as sc l = sc . List [ str ]([ \"Alice\" , \"Bob\" , \"Carol\" ], connection = \"path/to/file.db\" , table_name = \"list_example\" ) l . append ( \"Dave\" ) exit () When you load it, you can restore the previous state by specifying the same file path and table name. import sqlitecollections as sc l = sc . List [ str ]( connection = \"path/to/file.db\" , table_name = \"list_example\" ) print ( len ( l )) #> 4 print ( list ( l )) #> ['Alice', 'Bob', 'Carol', 'Dave']","title":"Example"},{"location":"#pros-and-cons-for-built-in-containers","text":"","title":"Pros and cons for built-in containers"},{"location":"#pros","text":"Save memory usage. Once the database is built, loading time is almost zero, even for huge data.","title":"Pros"},{"location":"#cons","text":"Each operation has the overhead of serialize/deserialize. Some operations are incompatible and unavailable. For example, directly rewriting the mutable elements of a container.","title":"Cons"},{"location":"benchmark/","text":"py36 py37 py38 py39 py310 dict list set timing subject builtin sqlitecollections ratio class clear 0.00442 0.00717 1.62254 BenchmarkClear __contains__ 0.00479 0.00501 1.04659 BenchmarkContains copy 0.00485 0.00971 2.00243 BenchmarkCopy __delitem__ 0.00476 0.00765 1.60691 BenchmarkDelitem get 0.00465 0.00527 1.13234 BenchmarkGet get (unsuccessful search) 0.00477 0.00474 0.99315 BenchmarkGetDefault __getitem__ 0.00497 0.00497 1.00012 BenchmarkGetitem __init__ 0.00487 0.04589 9.41422 BenchmarkInit items 0.00538 0.01282 2.38425 BenchmarkItems __iter__ 0.00477 0.0091 1.9071 BenchmarkIter keys 0.00458 0.0091 1.98523 BenchmarkKeys __len__ 0.00466 0.00491 1.05487 BenchmarkLen __contains__ (unsuccessful search) 0.00459 0.00478 1.04121 BenchmarkNotContains pop 0.00506 0.00761 1.50305 BenchmarkPop pop (unsuccessful search) 0.00487 0.00634 1.30239 BenchmarkPopDefault popitem 0.00488 0.00985 2.01769 BenchmarkPopitem setdefault 0.00481 0.00677 1.40689 BenchmarkSetdefault setdefault (unsuccessful search) 0.00477 0.0065 1.36221 BenchmarkSetdefaultAddItem __setitem__ (add new item) 0.00477 0.00786 1.64774 BenchmarkSetitemAddNewItem __setitem__ (replace) 0.00515 0.00789 1.53367 BenchmarkSetitemReplace update 0.00531 0.05023 9.46186 BenchmarkUpdate update (many) 0.00574 0.56793 98.9392 BenchmarkUpdateMany values 0.00522 0.00966 1.84974 BenchmarkValues approximate memory usage subject builtin sqlitecollections ratio class clear 0.0625 0.01172 0.1875 BenchmarkClear __contains__ 0.0 0.0 1.0 BenchmarkContains copy 0.0625 0.0 0.0 BenchmarkCopy __delitem__ 0.0 0.0 1.0 BenchmarkDelitem get 0.0 0.0 1.0 BenchmarkGet get (unsuccessful search) 0.0 0.0 1.0 BenchmarkGetDefault __getitem__ 0.0 0.0 1.0 BenchmarkGetitem __init__ 0.01172 0.00781 0.66667 BenchmarkInit items 0.23047 0.40234 1.74576 BenchmarkItems __iter__ 0.0 0.0 1.0 BenchmarkIter keys 0.0 0.0 1.0 BenchmarkKeys __len__ 0.0 0.0 1.0 BenchmarkLen __contains__ (unsuccessful search) 0.0 0.0 1.0 BenchmarkNotContains pop 0.0 0.0 1.0 BenchmarkPop pop (unsuccessful search) 0.0 0.0 1.0 BenchmarkPopDefault popitem 0.0 0.0 1.0 BenchmarkPopitem setdefault 0.0 0.0 1.0 BenchmarkSetdefault setdefault (unsuccessful search) 0.0 0.0 1.0 BenchmarkSetdefaultAddItem __setitem__ (add new item) 0.0 0.0 1.0 BenchmarkSetitemAddNewItem __setitem__ (replace) 0.0 0.0 1.0 BenchmarkSetitemReplace update 0.0 0.0 1.0 BenchmarkUpdate update (many) 0.0 0.0 1.0 BenchmarkUpdateMany values 0.04297 0.0 0.0 BenchmarkValues timing subject builtin sqlitecollections ratio class __add__ 0.00542 0.01182 2.18157 BenchmarkAdd append 0.00477 0.00746 1.56327 BenchmarkAppend clear 0.00492 0.00767 1.55787 BenchmarkClear __contains__ 0.00486 0.00492 1.01324 BenchmarkContains copy 0.00476 0.00982 2.06211 BenchmarkCopy count 0.00499 0.00475 0.9506 BenchmarkCount __init__ 0.00463 0.02193 4.7387 BenchmarkCreateWithInitialData __delitem__ 0.00492 0.08003 16.25857 BenchmarkDelitem __delitem__ (slice) 0.00493 0.15378 31.16191 BenchmarkDelitemSlice __delitem__ (slice with skip) 0.00501 0.155 30.9335 BenchmarkDelitemSliceSkip extend 0.0052 0.00799 1.53684 BenchmarkExtend __getitem__ 0.00529 0.00524 0.99104 BenchmarkGetitem __getitem__ (slice) 0.00516 0.08894 17.22722 BenchmarkGetitemSlice __getitem__ (slice with skip) 0.00516 0.01285 2.49133 BenchmarkGetitemSliceSkip __iadd__ 0.00515 0.00816 1.5853 BenchmarkIadd __imult__ 0.00516 0.22885 44.36508 BenchmarkImult index 0.00519 0.00548 1.05614 BenchmarkIndex index (unsuccessful search) 0.00518 0.00528 1.01908 BenchmarkIndexUnsuccessfulSearch insert 0.00504 0.15447 30.6439 BenchmarkInsert __len__ 0.00516 0.00618 1.19717 BenchmarkLen __mult__ 0.00488 0.2349 48.16714 BenchmarkMult __contains__ (unsuccessful search) 0.00488 0.00508 1.03997 BenchmarkNotContains pop 0.00498 0.08287 16.64891 BenchmarkPop remove 0.00475 0.11501 24.21909 BenchmarkRemove __setitem__ 0.00507 0.00797 1.57379 BenchmarkSetitem __setitem__ (slice) 0.00487 0.15642 32.13095 BenchmarkSetitemSlice __setitem__ (slice with skip) 0.00506 0.01649 3.26045 BenchmarkSetitemSliceSkip sort (balanced) 0.005 0.33717 67.43393 BenchmarkSortBalanced sort (fastest) 0.00503 0.33433 66.52603 BenchmarkSortFastest sort (memory_saving) 0.00489 3.41814 699.59874 BenchmarkSortMemorySaving approximate memory usage subject builtin sqlitecollections ratio class __add__ 0.0 0.0 1.0 BenchmarkAdd append 0.0 0.0 1.0 BenchmarkAppend clear 0.0 0.0 1.0 BenchmarkClear __contains__ 0.0 0.0 1.0 BenchmarkContains copy 0.0 0.0 1.0 BenchmarkCopy count 0.0 0.0 1.0 BenchmarkCount __init__ 0.0 0.0 1.0 BenchmarkCreateWithInitialData __delitem__ 0.0 0.0 1.0 BenchmarkDelitem __delitem__ (slice) 0.0 0.00391 inf BenchmarkDelitemSlice __delitem__ (slice with skip) 0.0 0.0 1.0 BenchmarkDelitemSliceSkip extend 0.0 0.0 1.0 BenchmarkExtend __getitem__ 0.0 0.0 1.0 BenchmarkGetitem __getitem__ (slice) 0.0 0.00391 inf BenchmarkGetitemSlice __getitem__ (slice with skip) 0.0 0.0 1.0 BenchmarkGetitemSliceSkip __iadd__ 0.0 0.0 1.0 BenchmarkIadd __imult__ 0.0 0.0 1.0 BenchmarkImult index 0.0 0.00391 inf BenchmarkIndex index (unsuccessful search) 0.0 0.0 1.0 BenchmarkIndexUnsuccessfulSearch insert 0.0 0.0 1.0 BenchmarkInsert __len__ 0.0 0.0 1.0 BenchmarkLen __mult__ 0.0 0.0 1.0 BenchmarkMult __contains__ (unsuccessful search) 0.0 0.00391 inf BenchmarkNotContains pop 0.0 0.01172 inf BenchmarkPop remove 0.0 0.0 1.0 BenchmarkRemove __setitem__ 0.0 0.0 1.0 BenchmarkSetitem __setitem__ (slice) 0.0 0.00391 inf BenchmarkSetitemSlice __setitem__ (slice with skip) 0.0 0.0 1.0 BenchmarkSetitemSliceSkip sort (balanced) 0.0 0.13672 inf BenchmarkSortBalanced sort (fastest) 0.0 0.10547 inf BenchmarkSortFastest sort (memory_saving) 0.0 0.0 1.0 BenchmarkSortMemorySaving timing subject builtin sqlitecollections ratio class add (existing item) 0.00565 0.00721 1.27502 BenchmarkAddExistingItem add (new item) 0.00543 0.00886 1.63306 BenchmarkAddNewItem __and__ 0.00542 0.01395 2.57384 BenchmarkAnd clear 0.00542 0.00978 1.80468 BenchmarkClear __contains__ 0.00506 0.00521 1.02882 BenchmarkContains copy 0.00508 0.00964 1.89669 BenchmarkCopy difference 0.00518 0.01183 2.28248 BenchmarkDifference discard 0.0053 0.00784 1.47849 BenchmarkDiscard discard (no changes) 0.00534 0.00673 1.26005 BenchmarkDiscardNoChanges __ge__ 0.0049 0.00499 1.01963 BenchmarkGe __ge__ (not greater than or equals to) 0.00488 0.00503 1.0303 BenchmarkGeNot __gt__ 0.00483 0.0077 1.59247 BenchmarkGt __gt__ (not greater than) 0.0048 0.03401 7.08647 BenchmarkGtNot __iand__ 0.00477 0.009 1.88484 BenchmarkIand __init__ 0.00473 0.01853 3.91849 BenchmarkInit intersection 0.00528 0.01214 2.30146 BenchmarkIntersection intersection_update 0.0047 0.00932 1.9841 BenchmarkIntersectionUpdate __ior__ 0.00513 0.01055 2.05532 BenchmarkIor isdisjoint 0.00505 0.00522 1.03549 BenchmarkIsdisjoint isdisjoint (not disjoint) 0.0049 0.00499 1.01901 BenchmarkIsdisjointNot issubset 0.00503 0.03389 6.74462 BenchmarkIssubset issubset (not subset) 0.00495 0.01236 2.49425 BenchmarkIssubsetNot issuperset 0.00499 0.02617 5.24638 BenchmarkIssuperset issuperset (not superset) 0.00484 0.00519 1.0734 BenchmarkIssupersetNot __ixor__ 0.0054 0.04284 7.93658 BenchmarkIxor __le__ 0.00507 0.00564 1.1114 BenchmarkLe __le__ (not less than or equals to) 0.00492 0.00506 1.0284 BenchmarkLeNot __len__ 0.00493 0.00493 0.9989 BenchmarkLen __lt__ 0.0049 0.00585 1.19358 BenchmarkLt __lt__ (not less than) 0.00495 0.00491 0.99156 BenchmarkLtNot __contains__ (unsuccessful search) 0.00482 0.00515 1.06928 BenchmarkNotContains __or__ 0.00522 0.01247 2.3867 BenchmarkOr pop 0.00501 0.00802 1.60051 BenchmarkPop remove 0.00526 0.00897 1.70649 BenchmarkRemove __sub__ 0.00503 0.00998 1.98327 BenchmarkSub symmetric_difference 0.00501 0.0457 9.11761 BenchmarkSymmetricDifference symmetric_difference_update 0.0048 0.04321 9.00947 BenchmarkSymmetricDifferenceUpdate union 0.005 0.01309 2.61962 BenchmarkUnion update 0.00494 0.00961 1.94606 BenchmarkUpdate __xor__ 0.00496 0.04639 9.34296 BenchmarkXor approximate memory usage subject builtin sqlitecollections ratio class add (existing item) 0.0 0.0 1.0 BenchmarkAddExistingItem add (new item) 0.0 0.0 1.0 BenchmarkAddNewItem __and__ 0.0 0.0 1.0 BenchmarkAnd clear 0.0 0.0 1.0 BenchmarkClear __contains__ 0.0 0.0 1.0 BenchmarkContains copy 0.0 0.0 1.0 BenchmarkCopy difference 0.0 0.0 1.0 BenchmarkDifference discard 0.0 0.0 1.0 BenchmarkDiscard discard (no changes) 0.0 0.0 1.0 BenchmarkDiscardNoChanges __ge__ 0.0 0.0 1.0 BenchmarkGe __ge__ (not greater than or equals to) 0.0 0.0 1.0 BenchmarkGeNot __gt__ 0.0 0.0 1.0 BenchmarkGt __gt__ (not greater than) 0.0 0.0 1.0 BenchmarkGtNot __iand__ 0.0 0.0 1.0 BenchmarkIand __init__ 0.0 0.0 1.0 BenchmarkInit intersection 0.0 0.0 1.0 BenchmarkIntersection intersection_update 0.0 0.0 1.0 BenchmarkIntersectionUpdate __ior__ 0.0 0.0 1.0 BenchmarkIor isdisjoint 0.0 0.0 1.0 BenchmarkIsdisjoint isdisjoint (not disjoint) 0.0 0.0 1.0 BenchmarkIsdisjointNot issubset 0.0 0.0 1.0 BenchmarkIssubset issubset (not subset) 0.0 0.0 1.0 BenchmarkIssubsetNot issuperset 0.0 0.0 1.0 BenchmarkIssuperset issuperset (not superset) 0.0 0.0 1.0 BenchmarkIssupersetNot __ixor__ 0.0 0.0 1.0 BenchmarkIxor __le__ 0.0 0.0 1.0 BenchmarkLe __le__ (not less than or equals to) 0.0 0.0 1.0 BenchmarkLeNot __len__ 0.0 0.0 1.0 BenchmarkLen __lt__ 0.0 0.0 1.0 BenchmarkLt __lt__ (not less than) 0.0 0.0 1.0 BenchmarkLtNot __contains__ (unsuccessful search) 0.0 0.0 1.0 BenchmarkNotContains __or__ 0.0 0.0 1.0 BenchmarkOr pop 0.0 0.0 1.0 BenchmarkPop remove 0.0 0.0 1.0 BenchmarkRemove __sub__ 0.0 0.0 1.0 BenchmarkSub symmetric_difference 0.0 0.0 1.0 BenchmarkSymmetricDifference symmetric_difference_update 0.0 0.0 1.0 BenchmarkSymmetricDifferenceUpdate union 0.0 0.0 1.0 BenchmarkUnion update 0.0 0.0 1.0 BenchmarkUpdate __xor__ 0.0 0.0 1.0 BenchmarkXor dict list set timing subject builtin sqlitecollections ratio class clear 0.00415 0.00598 1.44073 BenchmarkClear __contains__ 0.00401 0.00417 1.03971 BenchmarkContains copy 0.00404 0.0081 2.00357 BenchmarkCopy __delitem__ 0.00408 0.00625 1.52987 BenchmarkDelitem get 0.00407 0.00408 1.0029 BenchmarkGet get (unsuccessful search) 0.00411 0.00411 1.0011 BenchmarkGetDefault __getitem__ 0.00398 0.00414 1.03966 BenchmarkGetitem __init__ 0.00415 0.04236 10.20978 BenchmarkInit items 0.00443 0.01245 2.80834 BenchmarkItems __iter__ 0.00423 0.00846 2.00154 BenchmarkIter keys 0.00404 0.00837 2.0694 BenchmarkKeys __len__ 0.00396 0.00408 1.02966 BenchmarkLen __contains__ (unsuccessful search) 0.00397 0.00418 1.05403 BenchmarkNotContains pop 0.00419 0.0067 1.60009 BenchmarkPop pop (unsuccessful search) 0.00413 0.00555 1.34593 BenchmarkPopDefault popitem 0.00405 0.00687 1.69731 BenchmarkPopitem setdefault 0.00415 0.00558 1.34466 BenchmarkSetdefault setdefault (unsuccessful search) 0.0041 0.006 1.46098 BenchmarkSetdefaultAddItem __setitem__ (add new item) 0.00408 0.00673 1.65015 BenchmarkSetitemAddNewItem __setitem__ (replace) 0.00424 0.00661 1.55939 BenchmarkSetitemReplace update 0.00427 0.00669 1.56924 BenchmarkUpdate update (many) 0.00512 0.55734 108.82583 BenchmarkUpdateMany values 0.004 0.00827 2.06529 BenchmarkValues approximate memory usage subject builtin sqlitecollections ratio class clear 0.0 0.0 1.0 BenchmarkClear __contains__ 0.0 0.0 1.0 BenchmarkContains copy 0.05859 0.0 0.0 BenchmarkCopy __delitem__ 0.0 0.0 1.0 BenchmarkDelitem get 0.0 0.0 1.0 BenchmarkGet get (unsuccessful search) 0.0 0.0 1.0 BenchmarkGetDefault __getitem__ 0.0 0.0 1.0 BenchmarkGetitem __init__ 0.04297 0.01562 0.36364 BenchmarkInit items 0.125 0.125 1.0 BenchmarkItems __iter__ 0.0 0.0 1.0 BenchmarkIter keys 0.0 0.0 1.0 BenchmarkKeys __len__ 0.0 0.0 1.0 BenchmarkLen __contains__ (unsuccessful search) 0.0 0.0 1.0 BenchmarkNotContains pop 0.0 0.0 1.0 BenchmarkPop pop (unsuccessful search) 0.0 0.0 1.0 BenchmarkPopDefault popitem 0.0 0.0 1.0 BenchmarkPopitem setdefault 0.0 0.0 1.0 BenchmarkSetdefault setdefault (unsuccessful search) 0.0 0.0 1.0 BenchmarkSetdefaultAddItem __setitem__ (add new item) 0.0 0.0 1.0 BenchmarkSetitemAddNewItem __setitem__ (replace) 0.0 0.0 1.0 BenchmarkSetitemReplace update 0.0 0.0 1.0 BenchmarkUpdate update (many) 0.0 0.0 1.0 BenchmarkUpdateMany values 0.0 0.0 1.0 BenchmarkValues timing subject builtin sqlitecollections ratio class __add__ 0.00396 0.00977 2.46423 BenchmarkAdd append 0.0041 0.00636 1.55241 BenchmarkAppend clear 0.00427 0.00604 1.41642 BenchmarkClear __contains__ 0.00421 0.00404 0.96075 BenchmarkContains copy 0.00406 0.00805 1.97932 BenchmarkCopy count 0.00392 0.00415 1.05765 BenchmarkCount __init__ 0.00425 0.02028 4.7769 BenchmarkCreateWithInitialData __delitem__ 0.00438 0.07893 18.02007 BenchmarkDelitem __delitem__ (slice) 0.00396 0.14983 37.80197 BenchmarkDelitemSlice __delitem__ (slice with skip) 0.00446 0.15679 35.18173 BenchmarkDelitemSliceSkip extend 0.0043 0.00637 1.48125 BenchmarkExtend __getitem__ 0.00398 0.00434 1.08972 BenchmarkGetitem __getitem__ (slice) 0.00444 0.08771 19.76696 BenchmarkGetitemSlice __getitem__ (slice with skip) 0.00408 0.01061 2.59831 BenchmarkGetitemSliceSkip __iadd__ 0.00415 0.00666 1.60435 BenchmarkIadd __imult__ 0.00397 0.22874 57.64312 BenchmarkImult index 0.00395 0.0044 1.11211 BenchmarkIndex index (unsuccessful search) 0.00434 0.00441 1.01584 BenchmarkIndexUnsuccessfulSearch insert 0.00399 0.14872 37.3002 BenchmarkInsert __len__ 0.00404 0.00438 1.08417 BenchmarkLen __mult__ 0.00407 0.2316 56.94368 BenchmarkMult __contains__ (unsuccessful search) 0.00412 0.00428 1.03998 BenchmarkNotContains pop 0.00414 0.07814 18.86222 BenchmarkPop remove 0.00423 0.11157 26.39131 BenchmarkRemove __setitem__ 0.00426 0.00664 1.55711 BenchmarkSetitem __setitem__ (slice) 0.00413 0.15595 37.77537 BenchmarkSetitemSlice __setitem__ (slice with skip) 0.00412 0.01493 3.62826 BenchmarkSetitemSliceSkip sort (balanced) 0.00426 0.33009 77.40911 BenchmarkSortBalanced sort (fastest) 0.00437 0.34152 78.21553 BenchmarkSortFastest sort (memory_saving) 0.00435 3.42019 786.67012 BenchmarkSortMemorySaving approximate memory usage subject builtin sqlitecollections ratio class __add__ 0.0 0.0 1.0 BenchmarkAdd append 0.0 0.0 1.0 BenchmarkAppend clear 0.0 0.0 1.0 BenchmarkClear __contains__ 0.0 0.0 1.0 BenchmarkContains copy 0.0 0.0 1.0 BenchmarkCopy count 0.0 0.0 1.0 BenchmarkCount __init__ 0.0 0.0 1.0 BenchmarkCreateWithInitialData __delitem__ 0.0 0.0 1.0 BenchmarkDelitem __delitem__ (slice) 0.0 0.0 1.0 BenchmarkDelitemSlice __delitem__ (slice with skip) 0.0 0.0 1.0 BenchmarkDelitemSliceSkip extend 0.0 0.0 1.0 BenchmarkExtend __getitem__ 0.0 0.0 1.0 BenchmarkGetitem __getitem__ (slice) 0.0 0.0 1.0 BenchmarkGetitemSlice __getitem__ (slice with skip) 0.0 0.0 1.0 BenchmarkGetitemSliceSkip __iadd__ 0.0 0.0 1.0 BenchmarkIadd __imult__ 0.0 0.0 1.0 BenchmarkImult index 0.0 0.0 1.0 BenchmarkIndex index (unsuccessful search) 0.0 0.0 1.0 BenchmarkIndexUnsuccessfulSearch insert 0.0 0.0 1.0 BenchmarkInsert __len__ 0.0 0.0 1.0 BenchmarkLen __mult__ 0.0 0.0 1.0 BenchmarkMult __contains__ (unsuccessful search) 0.0 0.0 1.0 BenchmarkNotContains pop 0.0 0.0 1.0 BenchmarkPop remove 0.0 0.0 1.0 BenchmarkRemove __setitem__ 0.0 0.0 1.0 BenchmarkSetitem __setitem__ (slice) 0.0 0.0 1.0 BenchmarkSetitemSlice __setitem__ (slice with skip) 0.0 0.0 1.0 BenchmarkSetitemSliceSkip sort (balanced) 0.0 0.0 1.0 BenchmarkSortBalanced sort (fastest) 0.0 0.05078 inf BenchmarkSortFastest sort (memory_saving) 0.0 0.0 1.0 BenchmarkSortMemorySaving timing subject builtin sqlitecollections ratio class add (existing item) 0.00416 0.00561 1.34692 BenchmarkAddExistingItem add (new item) 0.00466 0.0364 7.8132 BenchmarkAddNewItem __and__ 0.00413 0.00952 2.30419 BenchmarkAnd clear 0.00409 0.00596 1.45433 BenchmarkClear __contains__ 0.00421 0.00415 0.98574 BenchmarkContains copy 0.00407 0.00804 1.97488 BenchmarkCopy difference 0.00414 0.00766 1.84854 BenchmarkDifference discard 0.00395 0.00595 1.50459 BenchmarkDiscard discard (no changes) 0.00411 0.00546 1.32834 BenchmarkDiscardNoChanges __ge__ 0.00411 0.00439 1.06659 BenchmarkGe __ge__ (not greater than or equals to) 0.00387 0.00533 1.37613 BenchmarkGeNot __gt__ 0.00412 0.00634 1.5405 BenchmarkGt __gt__ (not greater than) 0.00416 0.03191 7.67408 BenchmarkGtNot __iand__ 0.00415 0.00745 1.79369 BenchmarkIand __init__ 0.00391 0.0155 3.96175 BenchmarkInit intersection 0.00395 0.00976 2.47357 BenchmarkIntersection intersection_update 0.00402 0.00762 1.89524 BenchmarkIntersectionUpdate __ior__ 0.00403 0.00814 2.02124 BenchmarkIor isdisjoint 0.00408 0.00415 1.0158 BenchmarkIsdisjoint isdisjoint (not disjoint) 0.00378 0.00431 1.13826 BenchmarkIsdisjointNot issubset 0.00408 0.02909 7.13826 BenchmarkIssubset issubset (not subset) 0.00411 0.00974 2.37151 BenchmarkIssubsetNot issuperset 0.00401 0.02484 6.19022 BenchmarkIssuperset issuperset (not superset) 0.00419 0.00508 1.21046 BenchmarkIssupersetNot __ixor__ 0.00417 0.0401 9.62379 BenchmarkIxor __le__ 0.00425 0.00516 1.21292 BenchmarkLe __le__ (not less than or equals to) 0.00445 0.00434 0.97659 BenchmarkLeNot __len__ 0.00423 0.00407 0.96171 BenchmarkLen __lt__ 0.00416 0.00514 1.23591 BenchmarkLt __lt__ (not less than) 0.00412 0.00402 0.97548 BenchmarkLtNot __contains__ (unsuccessful search) 0.00401 0.00428 1.0688 BenchmarkNotContains __or__ 0.00397 0.01086 2.73381 BenchmarkOr pop 0.00412 0.00604 1.46509 BenchmarkPop remove 0.00426 0.00648 1.52226 BenchmarkRemove __sub__ 0.00415 0.00776 1.87035 BenchmarkSub symmetric_difference 0.00416 0.04207 10.10969 BenchmarkSymmetricDifference symmetric_difference_update 0.00419 0.04009 9.57565 BenchmarkSymmetricDifferenceUpdate union 0.00407 0.01213 2.97754 BenchmarkUnion update 0.004 0.00733 1.83367 BenchmarkUpdate __xor__ 0.00394 0.04243 10.76807 BenchmarkXor approximate memory usage subject builtin sqlitecollections ratio class add (existing item) 0.0 0.0 1.0 BenchmarkAddExistingItem add (new item) 0.0 0.0 1.0 BenchmarkAddNewItem __and__ 0.0 0.0 1.0 BenchmarkAnd clear 0.0 0.0 1.0 BenchmarkClear __contains__ 0.0 0.0 1.0 BenchmarkContains copy 0.0 0.0 1.0 BenchmarkCopy difference 0.0 0.0 1.0 BenchmarkDifference discard 0.0 0.0 1.0 BenchmarkDiscard discard (no changes) 0.0 0.0 1.0 BenchmarkDiscardNoChanges __ge__ 0.0 0.0 1.0 BenchmarkGe __ge__ (not greater than or equals to) 0.0 0.0 1.0 BenchmarkGeNot __gt__ 0.0 0.0 1.0 BenchmarkGt __gt__ (not greater than) 0.0 0.0 1.0 BenchmarkGtNot __iand__ 0.0 0.0 1.0 BenchmarkIand __init__ 0.0 0.0 1.0 BenchmarkInit intersection 0.0 0.0 1.0 BenchmarkIntersection intersection_update 0.0 0.0 1.0 BenchmarkIntersectionUpdate __ior__ 0.0 0.0 1.0 BenchmarkIor isdisjoint 0.0 0.0 1.0 BenchmarkIsdisjoint isdisjoint (not disjoint) 0.0 0.0 1.0 BenchmarkIsdisjointNot issubset 0.0 0.0 1.0 BenchmarkIssubset issubset (not subset) 0.0 0.0 1.0 BenchmarkIssubsetNot issuperset 0.0 0.0 1.0 BenchmarkIssuperset issuperset (not superset) 0.0 0.0 1.0 BenchmarkIssupersetNot __ixor__ 0.0 0.0 1.0 BenchmarkIxor __le__ 0.0 0.0 1.0 BenchmarkLe __le__ (not less than or equals to) 0.0 0.0 1.0 BenchmarkLeNot __len__ 0.0 0.0 1.0 BenchmarkLen __lt__ 0.0 0.0 1.0 BenchmarkLt __lt__ (not less than) 0.0 0.0 1.0 BenchmarkLtNot __contains__ (unsuccessful search) 0.0 0.0 1.0 BenchmarkNotContains __or__ 0.0 0.0 1.0 BenchmarkOr pop 0.0 0.0 1.0 BenchmarkPop remove 0.0 0.0 1.0 BenchmarkRemove __sub__ 0.0 0.0 1.0 BenchmarkSub symmetric_difference 0.0 0.0 1.0 BenchmarkSymmetricDifference symmetric_difference_update 0.0 0.0 1.0 BenchmarkSymmetricDifferenceUpdate union 0.0 0.0 1.0 BenchmarkUnion update 0.0 0.0 1.0 BenchmarkUpdate __xor__ 0.0 0.0 1.0 BenchmarkXor dict list set timing subject builtin sqlitecollections ratio class clear 0.0037 0.00585 1.58086 BenchmarkClear __contains__ 0.0038 0.00383 1.00863 BenchmarkContains copy 0.00365 0.00807 2.21306 BenchmarkCopy __delitem__ 0.00451 0.00598 1.32557 BenchmarkDelitem get 0.00391 0.00399 1.02031 BenchmarkGet get (unsuccessful search) 0.00379 0.00391 1.02992 BenchmarkGetDefault __getitem__ 0.00373 0.00383 1.02791 BenchmarkGetitem __init__ 0.00374 0.03666 9.80975 BenchmarkInit items 0.00413 0.01065 2.57666 BenchmarkItems __iter__ 0.0039 0.00758 1.94134 BenchmarkIter keys 0.0039 0.00771 1.97696 BenchmarkKeys __len__ 0.00373 0.00391 1.04818 BenchmarkLen __contains__ (unsuccessful search) 0.0038 0.00397 1.04479 BenchmarkNotContains pop 0.00378 0.00631 1.66769 BenchmarkPop pop (unsuccessful search) 0.00373 0.00533 1.42665 BenchmarkPopDefault popitem 0.00372 0.00704 1.89144 BenchmarkPopitem reversed 0.00389 0.00721 1.85253 BenchmarkReversed setdefault 0.00372 0.00514 1.38128 BenchmarkSetdefault setdefault (unsuccessful search) 0.00374 0.00558 1.49191 BenchmarkSetdefaultAddItem __setitem__ (add new item) 0.00367 0.00644 1.75164 BenchmarkSetitemAddNewItem __setitem__ (replace) 0.00377 0.00817 2.16613 BenchmarkSetitemReplace update 0.00381 0.00654 1.71851 BenchmarkUpdate update (many) 0.00466 0.55765 119.71271 BenchmarkUpdateMany values 0.00389 0.00728 1.8729 BenchmarkValues approximate memory usage subject builtin sqlitecollections ratio class clear 0.0 0.0 1.0 BenchmarkClear __contains__ 0.0 0.00391 inf BenchmarkContains copy 0.05078 0.0 0.0 BenchmarkCopy __delitem__ 0.0 0.0 1.0 BenchmarkDelitem get 0.0 0.0 1.0 BenchmarkGet get (unsuccessful search) 0.0 0.0 1.0 BenchmarkGetDefault __getitem__ 0.0 0.0 1.0 BenchmarkGetitem __init__ 0.01172 0.01172 1.0 BenchmarkInit items 0.125 0.125 1.0 BenchmarkItems __iter__ 0.0 0.0 1.0 BenchmarkIter keys 0.0 0.0 1.0 BenchmarkKeys __len__ 0.0 0.0 1.0 BenchmarkLen __contains__ (unsuccessful search) 0.0 0.0 1.0 BenchmarkNotContains pop 0.0 0.0 1.0 BenchmarkPop pop (unsuccessful search) 0.0 0.0 1.0 BenchmarkPopDefault popitem 0.0 0.0 1.0 BenchmarkPopitem reversed 0.0 0.0 1.0 BenchmarkReversed setdefault 0.0 0.0 1.0 BenchmarkSetdefault setdefault (unsuccessful search) 0.0 0.0 1.0 BenchmarkSetdefaultAddItem __setitem__ (add new item) 0.0 0.0 1.0 BenchmarkSetitemAddNewItem __setitem__ (replace) 0.0 0.0 1.0 BenchmarkSetitemReplace update 0.0 0.0 1.0 BenchmarkUpdate update (many) 0.0 0.0 1.0 BenchmarkUpdateMany values 0.00391 0.0 0.0 BenchmarkValues timing subject builtin sqlitecollections ratio class __add__ 0.00381 0.00901 2.36823 BenchmarkAdd append 0.0038 0.00611 1.60772 BenchmarkAppend clear 0.00404 0.00615 1.52299 BenchmarkClear __contains__ 0.00367 0.00388 1.05675 BenchmarkContains copy 0.00372 0.0081 2.17909 BenchmarkCopy count 0.00384 0.00409 1.06489 BenchmarkCount __init__ 0.00381 0.01898 4.97857 BenchmarkCreateWithInitialData __delitem__ 0.00408 0.07815 19.17761 BenchmarkDelitem __delitem__ (slice) 0.00391 0.14994 38.31443 BenchmarkDelitemSlice __delitem__ (slice with skip) 0.00411 0.1544 37.60432 BenchmarkDelitemSliceSkip extend 0.00372 0.00633 1.70245 BenchmarkExtend __getitem__ 0.00435 0.00403 0.92785 BenchmarkGetitem __getitem__ (slice) 0.00398 0.08685 21.80415 BenchmarkGetitemSlice __getitem__ (slice with skip) 0.00358 0.01063 2.96463 BenchmarkGetitemSliceSkip __iadd__ 0.00404 0.00629 1.55741 BenchmarkIadd __imult__ 0.00401 0.22614 56.40096 BenchmarkImult index 0.00391 0.00408 1.04382 BenchmarkIndex index (unsuccessful search) 0.00391 0.00469 1.19852 BenchmarkIndexUnsuccessfulSearch insert 0.00411 0.1509 36.73644 BenchmarkInsert __len__ 0.00365 0.00383 1.04934 BenchmarkLen __mult__ 0.00381 0.22907 60.1707 BenchmarkMult __contains__ (unsuccessful search) 0.00389 0.00427 1.09647 BenchmarkNotContains pop 0.00438 0.07882 18.00053 BenchmarkPop remove 0.00403 0.11301 28.07294 BenchmarkRemove __setitem__ 0.00415 0.00662 1.59717 BenchmarkSetitem __setitem__ (slice) 0.00421 0.15494 36.79212 BenchmarkSetitemSlice __setitem__ (slice with skip) 0.00393 0.01512 3.8508 BenchmarkSetitemSliceSkip sort (balanced) 0.00445 0.32887 73.90602 BenchmarkSortBalanced sort (fastest) 0.00413 0.33383 80.88639 BenchmarkSortFastest sort (memory_saving) 0.00429 3.38302 788.53558 BenchmarkSortMemorySaving approximate memory usage subject builtin sqlitecollections ratio class __add__ 0.0 0.0 1.0 BenchmarkAdd append 0.0 0.0 1.0 BenchmarkAppend clear 0.0 0.0 1.0 BenchmarkClear __contains__ 0.0 0.0 1.0 BenchmarkContains copy 0.0 0.0 1.0 BenchmarkCopy count 0.0 0.0 1.0 BenchmarkCount __init__ 0.0 0.0 1.0 BenchmarkCreateWithInitialData __delitem__ 0.0 0.0 1.0 BenchmarkDelitem __delitem__ (slice) 0.0 0.0 1.0 BenchmarkDelitemSlice __delitem__ (slice with skip) 0.0 0.0 1.0 BenchmarkDelitemSliceSkip extend 0.0 0.0 1.0 BenchmarkExtend __getitem__ 0.0 0.0 1.0 BenchmarkGetitem __getitem__ (slice) 0.0 0.0 1.0 BenchmarkGetitemSlice __getitem__ (slice with skip) 0.0 0.0 1.0 BenchmarkGetitemSliceSkip __iadd__ 0.0 0.0 1.0 BenchmarkIadd __imult__ 0.0 0.0 1.0 BenchmarkImult index 0.0 0.0 1.0 BenchmarkIndex index (unsuccessful search) 0.0 0.0 1.0 BenchmarkIndexUnsuccessfulSearch insert 0.0 0.0 1.0 BenchmarkInsert __len__ 0.0 0.0 1.0 BenchmarkLen __mult__ 0.0 0.0 1.0 BenchmarkMult __contains__ (unsuccessful search) 0.0 0.0 1.0 BenchmarkNotContains pop 0.0 0.0 1.0 BenchmarkPop remove 0.0 0.0 1.0 BenchmarkRemove __setitem__ 0.0 0.0 1.0 BenchmarkSetitem __setitem__ (slice) 0.0 0.0 1.0 BenchmarkSetitemSlice __setitem__ (slice with skip) 0.0 0.0 1.0 BenchmarkSetitemSliceSkip sort (balanced) 0.0 0.0 1.0 BenchmarkSortBalanced sort (fastest) 0.0 0.0 1.0 BenchmarkSortFastest sort (memory_saving) 0.0 0.0 1.0 BenchmarkSortMemorySaving timing subject builtin sqlitecollections ratio class add (existing item) 0.00376 0.00507 1.34855 BenchmarkAddExistingItem add (new item) 0.00373 0.0058 1.55606 BenchmarkAddNewItem __and__ 0.00376 0.00966 2.56913 BenchmarkAnd clear 0.00371 0.00571 1.5382 BenchmarkClear __contains__ 0.0036 0.00376 1.04392 BenchmarkContains copy 0.00366 0.00736 2.01158 BenchmarkCopy difference 0.00363 0.00756 2.08052 BenchmarkDifference discard 0.00373 0.00574 1.53767 BenchmarkDiscard discard (no changes) 0.0037 0.00514 1.38855 BenchmarkDiscardNoChanges __ge__ 0.00382 0.00394 1.02955 BenchmarkGe __ge__ (not greater than or equals to) 0.00372 0.00419 1.12589 BenchmarkGeNot __gt__ 0.00373 0.00618 1.65744 BenchmarkGt __gt__ (not greater than) 0.00358 0.03015 8.41908 BenchmarkGtNot __iand__ 0.00372 0.00745 2.00612 BenchmarkIand __init__ 0.00375 0.01483 3.95326 BenchmarkInit intersection 0.00375 0.01006 2.68198 BenchmarkIntersection intersection_update 0.00369 0.00759 2.05433 BenchmarkIntersectionUpdate __ior__ 0.00366 0.0075 2.05144 BenchmarkIor isdisjoint 0.00373 0.00389 1.04183 BenchmarkIsdisjoint isdisjoint (not disjoint) 0.00375 0.00384 1.02239 BenchmarkIsdisjointNot issubset 0.00377 0.02827 7.49357 BenchmarkIssubset issubset (not subset) 0.00378 0.00991 2.62417 BenchmarkIssubsetNot issuperset 0.00366 0.02288 6.25206 BenchmarkIssuperset issuperset (not superset) 0.00369 0.00404 1.09555 BenchmarkIssupersetNot __ixor__ 0.00355 0.03684 10.38041 BenchmarkIxor __le__ 0.0037 0.00446 1.20608 BenchmarkLe __le__ (not less than or equals to) 0.0036 0.00387 1.07371 BenchmarkLeNot __len__ 0.00374 0.00386 1.03335 BenchmarkLen __lt__ 0.00383 0.00484 1.26268 BenchmarkLt __lt__ (not less than) 0.00397 0.00374 0.94188 BenchmarkLtNot __contains__ (unsuccessful search) 0.00377 0.00373 0.98769 BenchmarkNotContains __or__ 0.00379 0.00998 2.63508 BenchmarkOr pop 0.00384 0.00592 1.54263 BenchmarkPop remove 0.00368 0.00614 1.67089 BenchmarkRemove __sub__ 0.00363 0.00754 2.07641 BenchmarkSub symmetric_difference 0.00371 0.03908 10.51876 BenchmarkSymmetricDifference symmetric_difference_update 0.00362 0.03674 10.14439 BenchmarkSymmetricDifferenceUpdate union 0.0036 0.00983 2.73095 BenchmarkUnion update 0.00368 0.00723 1.96558 BenchmarkUpdate __xor__ 0.00393 0.03986 10.1471 BenchmarkXor approximate memory usage subject builtin sqlitecollections ratio class add (existing item) 0.0 0.0 1.0 BenchmarkAddExistingItem add (new item) 0.0 0.0 1.0 BenchmarkAddNewItem __and__ 0.0 0.0 1.0 BenchmarkAnd clear 0.0 0.0 1.0 BenchmarkClear __contains__ 0.0 0.0 1.0 BenchmarkContains copy 0.0 0.0 1.0 BenchmarkCopy difference 0.0 0.0 1.0 BenchmarkDifference discard 0.0 0.0 1.0 BenchmarkDiscard discard (no changes) 0.0 0.0 1.0 BenchmarkDiscardNoChanges __ge__ 0.0 0.0 1.0 BenchmarkGe __ge__ (not greater than or equals to) 0.0 0.0 1.0 BenchmarkGeNot __gt__ 0.0 0.0 1.0 BenchmarkGt __gt__ (not greater than) 0.0 0.0 1.0 BenchmarkGtNot __iand__ 0.0 0.0 1.0 BenchmarkIand __init__ 0.0 0.0 1.0 BenchmarkInit intersection 0.0 0.0 1.0 BenchmarkIntersection intersection_update 0.0 0.0 1.0 BenchmarkIntersectionUpdate __ior__ 0.0 0.0 1.0 BenchmarkIor isdisjoint 0.0 0.0 1.0 BenchmarkIsdisjoint isdisjoint (not disjoint) 0.0 0.0 1.0 BenchmarkIsdisjointNot issubset 0.0 0.0 1.0 BenchmarkIssubset issubset (not subset) 0.0 0.0 1.0 BenchmarkIssubsetNot issuperset 0.0 0.0 1.0 BenchmarkIssuperset issuperset (not superset) 0.0 0.0 1.0 BenchmarkIssupersetNot __ixor__ 0.0 0.0 1.0 BenchmarkIxor __le__ 0.0 0.0 1.0 BenchmarkLe __le__ (not less than or equals to) 0.0 0.0 1.0 BenchmarkLeNot __len__ 0.0 0.0 1.0 BenchmarkLen __lt__ 0.0 0.0 1.0 BenchmarkLt __lt__ (not less than) 0.0 0.0 1.0 BenchmarkLtNot __contains__ (unsuccessful search) 0.0 0.0 1.0 BenchmarkNotContains __or__ 0.0 0.0 1.0 BenchmarkOr pop 0.0 0.0 1.0 BenchmarkPop remove 0.0 0.0 1.0 BenchmarkRemove __sub__ 0.0 0.0 1.0 BenchmarkSub symmetric_difference 0.0 0.0 1.0 BenchmarkSymmetricDifference symmetric_difference_update 0.0 0.0 1.0 BenchmarkSymmetricDifferenceUpdate union 0.0 0.0 1.0 BenchmarkUnion update 0.0 0.0 1.0 BenchmarkUpdate __xor__ 0.0 0.0 1.0 BenchmarkXor dict list set timing subject builtin sqlitecollections ratio class clear 0.00529 0.00813 1.53562 BenchmarkClear __contains__ 0.00531 0.00519 0.9763 BenchmarkContains copy 0.0054 0.01147 2.12417 BenchmarkCopy __delitem__ 0.00539 0.00901 1.67102 BenchmarkDelitem get 0.00534 0.00544 1.01798 BenchmarkGet get (unsuccessful search) 0.00546 0.0061 1.11627 BenchmarkGetDefault __getitem__ 0.00542 0.00546 1.00565 BenchmarkGetitem __init__ 0.00566 0.04314 7.62605 BenchmarkInit __ior__ 0.00537 0.00929 1.72847 BenchmarkIor __ior__ (many) 0.00672 0.59071 87.86536 BenchmarkIorMany items 0.00588 0.01271 2.16055 BenchmarkItems __iter__ 0.00567 0.00903 1.59149 BenchmarkIter keys 0.00528 0.00904 1.71253 BenchmarkKeys __len__ 0.00533 0.0051 0.95666 BenchmarkLen __contains__ (unsuccessful search) 0.00537 0.00513 0.95458 BenchmarkNotContains __or__ 0.00529 0.04052 7.66303 BenchmarkOr __or__ (many) 0.00651 0.69573 106.83618 BenchmarkOrMany pop 0.00532 0.00808 1.52008 BenchmarkPop pop (unsuccessful search) 0.00537 0.0068 1.26569 BenchmarkPopDefault popitem 0.00555 0.00867 1.56145 BenchmarkPopitem reversed 0.00526 0.00901 1.71182 BenchmarkReversed setdefault 0.00539 0.00695 1.28893 BenchmarkSetdefault setdefault (unsuccessful search) 0.00541 0.00722 1.33343 BenchmarkSetdefaultAddItem __setitem__ (add new item) 0.00543 0.00818 1.50767 BenchmarkSetitemAddNewItem __setitem__ (replace) 0.00552 0.0082 1.48469 BenchmarkSetitemReplace update 0.00601 0.0086 1.43107 BenchmarkUpdate update (many) 0.00658 0.58181 88.43353 BenchmarkUpdateMany values 0.00532 0.00852 1.60012 BenchmarkValues approximate memory usage subject builtin sqlitecollections ratio class clear 0.0 0.0 1.0 BenchmarkClear __contains__ 0.0 0.0 1.0 BenchmarkContains copy 0.0 0.0 1.0 BenchmarkCopy __delitem__ 0.0 0.0 1.0 BenchmarkDelitem get 0.0 0.0 1.0 BenchmarkGet get (unsuccessful search) 0.0 0.0 1.0 BenchmarkGetDefault __getitem__ 0.0 0.0 1.0 BenchmarkGetitem __init__ 0.0 0.0 1.0 BenchmarkInit __ior__ 0.0 0.0 1.0 BenchmarkIor __ior__ (many) 0.12891 0.0 0.0 BenchmarkIorMany items 0.0 0.16406 inf BenchmarkItems __iter__ 0.0 0.0 1.0 BenchmarkIter keys 0.0 0.0 1.0 BenchmarkKeys __len__ 0.0 0.0 1.0 BenchmarkLen __contains__ (unsuccessful search) 0.0 0.0 1.0 BenchmarkNotContains __or__ 0.0 0.0 1.0 BenchmarkOr __or__ (many) 0.0 0.0 1.0 BenchmarkOrMany pop 0.0 0.0 1.0 BenchmarkPop pop (unsuccessful search) 0.0 0.0 1.0 BenchmarkPopDefault popitem 0.0 0.0 1.0 BenchmarkPopitem reversed 0.0 0.0 1.0 BenchmarkReversed setdefault 0.0 0.0 1.0 BenchmarkSetdefault setdefault (unsuccessful search) 0.0 0.0 1.0 BenchmarkSetdefaultAddItem __setitem__ (add new item) 0.0 0.0 1.0 BenchmarkSetitemAddNewItem __setitem__ (replace) 0.0 0.0 1.0 BenchmarkSetitemReplace update 0.0 0.0 1.0 BenchmarkUpdate update (many) 0.0 0.0 1.0 BenchmarkUpdateMany values 0.0 0.0 1.0 BenchmarkValues timing subject builtin sqlitecollections ratio class __add__ 0.00545 0.01293 2.37167 BenchmarkAdd append 0.00537 0.0083 1.54517 BenchmarkAppend clear 0.00552 0.00863 1.56424 BenchmarkClear __contains__ 0.00547 0.00532 0.972 BenchmarkContains copy 0.00548 0.01071 1.95257 BenchmarkCopy count 0.00553 0.00531 0.96043 BenchmarkCount __init__ 0.00558 0.02198 3.93622 BenchmarkCreateWithInitialData __delitem__ 0.00545 0.08419 15.44657 BenchmarkDelitem __delitem__ (slice) 0.00555 0.16119 29.05676 BenchmarkDelitemSlice __delitem__ (slice with skip) 0.00542 0.16181 29.87835 BenchmarkDelitemSliceSkip extend 0.00558 0.00809 1.4518 BenchmarkExtend __getitem__ 0.00565 0.00536 0.94928 BenchmarkGetitem __getitem__ (slice) 0.00546 0.0928 16.98143 BenchmarkGetitemSlice __getitem__ (slice with skip) 0.00554 0.01369 2.47056 BenchmarkGetitemSliceSkip __iadd__ 0.00548 0.00807 1.47361 BenchmarkIadd __imult__ 0.00545 0.24048 44.1031 BenchmarkImult index 0.00556 0.00544 0.97863 BenchmarkIndex index (unsuccessful search) 0.00551 0.00569 1.03166 BenchmarkIndexUnsuccessfulSearch insert 0.00562 0.15866 28.23257 BenchmarkInsert __len__ 0.00552 0.00523 0.94775 BenchmarkLen __mult__ 0.00545 0.24582 45.10767 BenchmarkMult __contains__ (unsuccessful search) 0.00552 0.00529 0.95764 BenchmarkNotContains pop 0.00601 0.08457 14.07374 BenchmarkPop remove 0.00581 0.12075 20.76642 BenchmarkRemove __setitem__ 0.0056 0.0082 1.46575 BenchmarkSetitem __setitem__ (slice) 0.00557 0.16401 29.42012 BenchmarkSetitemSlice __setitem__ (slice with skip) 0.00548 0.01726 3.14904 BenchmarkSetitemSliceSkip sort (balanced) 0.00568 0.34154 60.13294 BenchmarkSortBalanced sort (fastest) 0.00578 0.34473 59.64903 BenchmarkSortFastest sort (memory_saving) 0.0058 3.50546 604.88314 BenchmarkSortMemorySaving approximate memory usage subject builtin sqlitecollections ratio class __add__ 0.0 0.0 1.0 BenchmarkAdd append 0.0 0.0 1.0 BenchmarkAppend clear 0.0 0.0 1.0 BenchmarkClear __contains__ 0.0 0.0 1.0 BenchmarkContains copy 0.0 0.0 1.0 BenchmarkCopy count 0.0 0.0 1.0 BenchmarkCount __init__ 0.0 0.0 1.0 BenchmarkCreateWithInitialData __delitem__ 0.0 0.0 1.0 BenchmarkDelitem __delitem__ (slice) 0.0 0.0 1.0 BenchmarkDelitemSlice __delitem__ (slice with skip) 0.0 0.0 1.0 BenchmarkDelitemSliceSkip extend 0.0 0.0 1.0 BenchmarkExtend __getitem__ 0.0 0.0 1.0 BenchmarkGetitem __getitem__ (slice) 0.0 0.0 1.0 BenchmarkGetitemSlice __getitem__ (slice with skip) 0.0 0.0 1.0 BenchmarkGetitemSliceSkip __iadd__ 0.0 0.0 1.0 BenchmarkIadd __imult__ 0.0 0.0 1.0 BenchmarkImult index 0.0 0.0 1.0 BenchmarkIndex index (unsuccessful search) 0.0 0.0 1.0 BenchmarkIndexUnsuccessfulSearch insert 0.0 0.0 1.0 BenchmarkInsert __len__ 0.0 0.0 1.0 BenchmarkLen __mult__ 0.0 0.0 1.0 BenchmarkMult __contains__ (unsuccessful search) 0.0 0.0 1.0 BenchmarkNotContains pop 0.0 0.0 1.0 BenchmarkPop remove 0.0 0.0 1.0 BenchmarkRemove __setitem__ 0.0 0.0 1.0 BenchmarkSetitem __setitem__ (slice) 0.0 0.0 1.0 BenchmarkSetitemSlice __setitem__ (slice with skip) 0.0 0.0 1.0 BenchmarkSetitemSliceSkip sort (balanced) 0.0 0.12891 inf BenchmarkSortBalanced sort (fastest) 0.0 0.12109 inf BenchmarkSortFastest sort (memory_saving) 0.0 0.0 1.0 BenchmarkSortMemorySaving timing subject builtin sqlitecollections ratio class add (existing item) 0.0053 0.00668 1.2608 BenchmarkAddExistingItem add (new item) 0.00556 0.00792 1.4239 BenchmarkAddNewItem __and__ 0.00537 0.01195 2.22521 BenchmarkAnd clear 0.00543 0.00757 1.39588 BenchmarkClear __contains__ 0.00525 0.00537 1.02177 BenchmarkContains copy 0.00529 0.00972 1.83632 BenchmarkCopy difference 0.00543 0.01005 1.85214 BenchmarkDifference discard 0.00541 0.0078 1.43975 BenchmarkDiscard discard (no changes) 0.00538 0.00657 1.22064 BenchmarkDiscardNoChanges __ge__ 0.00535 0.00508 0.94997 BenchmarkGe __ge__ (not greater than or equals to) 0.00544 0.00554 1.01861 BenchmarkGeNot __gt__ 0.00531 0.00779 1.46788 BenchmarkGt __gt__ (not greater than) 0.0054 0.0319 5.90323 BenchmarkGtNot __iand__ 0.00543 0.00979 1.80195 BenchmarkIand __init__ 0.0058 0.01756 3.02826 BenchmarkInit intersection 0.00537 0.01273 2.37048 BenchmarkIntersection intersection_update 0.00533 0.00967 1.81509 BenchmarkIntersectionUpdate __ior__ 0.00547 0.00954 1.74278 BenchmarkIor isdisjoint 0.00529 0.00511 0.96613 BenchmarkIsdisjoint isdisjoint (not disjoint) 0.00538 0.00511 0.95021 BenchmarkIsdisjointNot issubset 0.00541 0.03294 6.08942 BenchmarkIssubset issubset (not subset) 0.00537 0.01326 2.46789 BenchmarkIssubsetNot issuperset 0.00539 0.02508 4.65437 BenchmarkIssuperset issuperset (not superset) 0.00553 0.00566 1.02371 BenchmarkIssupersetNot __ixor__ 0.00525 0.04095 7.79625 BenchmarkIxor __le__ 0.00536 0.00586 1.09294 BenchmarkLe __le__ (not less than or equals to) 0.0052 0.00513 0.98587 BenchmarkLeNot __len__ 0.00539 0.00516 0.95815 BenchmarkLen __lt__ 0.00541 0.00584 1.07921 BenchmarkLt __lt__ (not less than) 0.0054 0.00508 0.94051 BenchmarkLtNot __contains__ (unsuccessful search) 0.00542 0.00522 0.96205 BenchmarkNotContains __or__ 0.00529 0.01248 2.35962 BenchmarkOr pop 0.00531 0.00775 1.4573 BenchmarkPop remove 0.00546 0.00772 1.41402 BenchmarkRemove __sub__ 0.00533 0.00986 1.852 BenchmarkSub symmetric_difference 0.00546 0.04303 7.87561 BenchmarkSymmetricDifference symmetric_difference_update 0.00539 0.03991 7.40785 BenchmarkSymmetricDifferenceUpdate union 0.00543 0.01259 2.31941 BenchmarkUnion update 0.00529 0.00986 1.86365 BenchmarkUpdate __xor__ 0.00531 0.04263 8.02322 BenchmarkXor approximate memory usage subject builtin sqlitecollections ratio class add (existing item) 0.0 0.0 1.0 BenchmarkAddExistingItem add (new item) 0.0 0.0 1.0 BenchmarkAddNewItem __and__ 0.0 0.0 1.0 BenchmarkAnd clear 0.0 0.0 1.0 BenchmarkClear __contains__ 0.0 0.0 1.0 BenchmarkContains copy 0.0 0.0 1.0 BenchmarkCopy difference 0.0 0.0 1.0 BenchmarkDifference discard 0.0 0.0 1.0 BenchmarkDiscard discard (no changes) 0.0 0.0 1.0 BenchmarkDiscardNoChanges __ge__ 0.0 0.0 1.0 BenchmarkGe __ge__ (not greater than or equals to) 0.0 0.0 1.0 BenchmarkGeNot __gt__ 0.0 0.0 1.0 BenchmarkGt __gt__ (not greater than) 0.0 0.0 1.0 BenchmarkGtNot __iand__ 0.0 0.0 1.0 BenchmarkIand __init__ 0.0 0.0 1.0 BenchmarkInit intersection 0.0 0.0 1.0 BenchmarkIntersection intersection_update 0.0 0.0 1.0 BenchmarkIntersectionUpdate __ior__ 0.0 0.0 1.0 BenchmarkIor isdisjoint 0.0 0.0 1.0 BenchmarkIsdisjoint isdisjoint (not disjoint) 0.0 0.0 1.0 BenchmarkIsdisjointNot issubset 0.0 0.0 1.0 BenchmarkIssubset issubset (not subset) 0.0 0.0 1.0 BenchmarkIssubsetNot issuperset 0.0 0.0 1.0 BenchmarkIssuperset issuperset (not superset) 0.0 0.0 1.0 BenchmarkIssupersetNot __ixor__ 0.0 0.0 1.0 BenchmarkIxor __le__ 0.0 0.0 1.0 BenchmarkLe __le__ (not less than or equals to) 0.0 0.0 1.0 BenchmarkLeNot __len__ 0.0 0.0 1.0 BenchmarkLen __lt__ 0.0 0.0 1.0 BenchmarkLt __lt__ (not less than) 0.0 0.0 1.0 BenchmarkLtNot __contains__ (unsuccessful search) 0.0 0.0 1.0 BenchmarkNotContains __or__ 0.0 0.0 1.0 BenchmarkOr pop 0.0 0.0 1.0 BenchmarkPop remove 0.0 0.0 1.0 BenchmarkRemove __sub__ 0.0 0.0 1.0 BenchmarkSub symmetric_difference 0.0 0.0 1.0 BenchmarkSymmetricDifference symmetric_difference_update 0.0 0.0 1.0 BenchmarkSymmetricDifferenceUpdate union 0.0 0.0 1.0 BenchmarkUnion update 0.0 0.0 1.0 BenchmarkUpdate __xor__ 0.0 0.0 1.0 BenchmarkXor dict list set timing subject builtin sqlitecollections ratio class clear 0.0047 0.00949 2.02053 BenchmarkClear __contains__ 0.0054 0.00576 1.06717 BenchmarkContains copy 0.00485 0.01136 2.33965 BenchmarkCopy __delitem__ 0.00513 0.00907 1.76574 BenchmarkDelitem get 0.00533 0.00512 0.95992 BenchmarkGet get (unsuccessful search) 0.00607 0.00528 0.87013 BenchmarkGetDefault __getitem__ 0.00557 0.00554 0.99489 BenchmarkGetitem __init__ 0.00587 0.04642 7.90266 BenchmarkInit __ior__ 0.00486 0.00915 1.88289 BenchmarkIor __ior__ (many) 0.0062 0.6246 100.7338 BenchmarkIorMany items 0.00613 0.01261 2.05772 BenchmarkItems __iter__ 0.00535 0.00944 1.76511 BenchmarkIter keys 0.00544 0.00931 1.71015 BenchmarkKeys __len__ 0.00516 0.00529 1.02568 BenchmarkLen __contains__ (unsuccessful search) 0.00572 0.00509 0.88928 BenchmarkNotContains __or__ 0.00496 0.014 2.82034 BenchmarkOr __or__ (many) 0.00647 0.90824 140.34007 BenchmarkOrMany pop 0.00534 0.00872 1.63264 BenchmarkPop pop (unsuccessful search) 0.00603 0.00684 1.13383 BenchmarkPopDefault popitem 0.00534 0.00969 1.8153 BenchmarkPopitem reversed 0.00558 0.00912 1.63358 BenchmarkReversed setdefault 0.00543 0.00816 1.50301 BenchmarkSetdefault setdefault (unsuccessful search) 0.00567 0.00778 1.37307 BenchmarkSetdefaultAddItem __setitem__ (add new item) 0.00545 0.00931 1.70694 BenchmarkSetitemAddNewItem __setitem__ (replace) 0.00549 0.00947 1.72406 BenchmarkSetitemReplace update 0.00608 0.00969 1.59427 BenchmarkUpdate update (many) 0.00695 0.66331 95.4668 BenchmarkUpdateMany values 0.00548 0.00998 1.81996 BenchmarkValues approximate memory usage subject builtin sqlitecollections ratio class clear 0.0 0.0 1.0 BenchmarkClear __contains__ 0.0 0.0 1.0 BenchmarkContains copy 0.0 0.0 1.0 BenchmarkCopy __delitem__ 0.0 0.0 1.0 BenchmarkDelitem get 0.0 0.0 1.0 BenchmarkGet get (unsuccessful search) 0.0 0.0 1.0 BenchmarkGetDefault __getitem__ 0.0 0.0 1.0 BenchmarkGetitem __init__ 0.0 0.0 1.0 BenchmarkInit __ior__ 0.0 0.0 1.0 BenchmarkIor __ior__ (many) 0.16406 0.0 0.0 BenchmarkIorMany items 0.0 0.33203 inf BenchmarkItems __iter__ 0.0 0.0 1.0 BenchmarkIter keys 0.0 0.0 1.0 BenchmarkKeys __len__ 0.0 0.0 1.0 BenchmarkLen __contains__ (unsuccessful search) 0.0 0.0 1.0 BenchmarkNotContains __or__ 0.0 0.0 1.0 BenchmarkOr __or__ (many) 0.00391 0.0 0.0 BenchmarkOrMany pop 0.0 0.0 1.0 BenchmarkPop pop (unsuccessful search) 0.0 0.0 1.0 BenchmarkPopDefault popitem 0.0 0.0 1.0 BenchmarkPopitem reversed 0.0 0.0 1.0 BenchmarkReversed setdefault 0.0 0.0 1.0 BenchmarkSetdefault setdefault (unsuccessful search) 0.0 0.0 1.0 BenchmarkSetdefaultAddItem __setitem__ (add new item) 0.0 0.0 1.0 BenchmarkSetitemAddNewItem __setitem__ (replace) 0.0 0.0 1.0 BenchmarkSetitemReplace update 0.0 0.0 1.0 BenchmarkUpdate update (many) 0.0 0.0 1.0 BenchmarkUpdateMany values 0.0 0.0 1.0 BenchmarkValues timing subject builtin sqlitecollections ratio class __add__ 0.00593 0.01383 2.33236 BenchmarkAdd append 0.00631 0.00903 1.43232 BenchmarkAppend clear 0.00487 0.00942 1.93532 BenchmarkClear __contains__ 0.00556 0.00509 0.91577 BenchmarkContains copy 0.0053 0.01148 2.16413 BenchmarkCopy count 0.00569 0.00503 0.88506 BenchmarkCount __init__ 0.00594 0.025 4.20781 BenchmarkCreateWithInitialData __delitem__ 0.00576 0.09114 15.83362 BenchmarkDelitem __delitem__ (slice) 0.0058 0.1783 30.72743 BenchmarkDelitemSlice __delitem__ (slice with skip) 0.00581 0.16842 28.9878 BenchmarkDelitemSliceSkip extend 0.00581 0.00862 1.48416 BenchmarkExtend __getitem__ 0.00614 0.00552 0.89974 BenchmarkGetitem __getitem__ (slice) 0.00529 0.10006 18.91948 BenchmarkGetitemSlice __getitem__ (slice with skip) 0.00624 0.01665 2.67022 BenchmarkGetitemSliceSkip __iadd__ 0.00569 0.0106 1.86169 BenchmarkIadd __imult__ 0.0057 0.2627 46.07897 BenchmarkImult index 0.00569 0.00556 0.97728 BenchmarkIndex index (unsuccessful search) 0.00603 0.00567 0.93918 BenchmarkIndexUnsuccessfulSearch insert 0.00562 0.17125 30.48209 BenchmarkInsert __len__ 0.00549 0.00527 0.95914 BenchmarkLen __mult__ 0.00579 0.26058 44.99921 BenchmarkMult __contains__ (unsuccessful search) 0.00553 0.00493 0.89127 BenchmarkNotContains pop 0.00603 0.09293 15.41279 BenchmarkPop remove 0.00575 0.12539 21.80539 BenchmarkRemove __setitem__ 0.00602 0.00906 1.50605 BenchmarkSetitem __setitem__ (slice) 0.00629 0.18089 28.77504 BenchmarkSetitemSlice __setitem__ (slice with skip) 0.00612 0.01847 3.01619 BenchmarkSetitemSliceSkip sort (balanced) 0.00598 0.36843 61.60757 BenchmarkSortBalanced sort (fastest) 0.0071 0.37395 52.64624 BenchmarkSortFastest sort (memory_saving) 0.00548 3.86456 705.58432 BenchmarkSortMemorySaving approximate memory usage subject builtin sqlitecollections ratio class __add__ 0.0 0.0 1.0 BenchmarkAdd append 0.0 0.0 1.0 BenchmarkAppend clear 0.0 0.0 1.0 BenchmarkClear __contains__ 0.0 0.00391 inf BenchmarkContains copy 0.0 0.0 1.0 BenchmarkCopy count 0.0 0.0 1.0 BenchmarkCount __init__ 0.0 0.0 1.0 BenchmarkCreateWithInitialData __delitem__ 0.0 0.0 1.0 BenchmarkDelitem __delitem__ (slice) 0.0 0.0 1.0 BenchmarkDelitemSlice __delitem__ (slice with skip) 0.0 0.0 1.0 BenchmarkDelitemSliceSkip extend 0.0 0.0 1.0 BenchmarkExtend __getitem__ 0.0 0.0 1.0 BenchmarkGetitem __getitem__ (slice) 0.0 0.00391 inf BenchmarkGetitemSlice __getitem__ (slice with skip) 0.0 0.0 1.0 BenchmarkGetitemSliceSkip __iadd__ 0.0 0.0 1.0 BenchmarkIadd __imult__ 0.0 0.0 1.0 BenchmarkImult index 0.0 0.0 1.0 BenchmarkIndex index (unsuccessful search) 0.0 0.0 1.0 BenchmarkIndexUnsuccessfulSearch insert 0.0 0.0 1.0 BenchmarkInsert __len__ 0.0 0.0 1.0 BenchmarkLen __mult__ 0.0 0.0 1.0 BenchmarkMult __contains__ (unsuccessful search) 0.0 0.0 1.0 BenchmarkNotContains pop 0.0 0.00391 inf BenchmarkPop remove 0.0 0.0 1.0 BenchmarkRemove __setitem__ 0.0 0.0 1.0 BenchmarkSetitem __setitem__ (slice) 0.0 0.00391 inf BenchmarkSetitemSlice __setitem__ (slice with skip) 0.0 0.0 1.0 BenchmarkSetitemSliceSkip sort (balanced) 0.0 0.09766 inf BenchmarkSortBalanced sort (fastest) 0.0 0.14062 inf BenchmarkSortFastest sort (memory_saving) 0.0 0.00391 inf BenchmarkSortMemorySaving timing subject builtin sqlitecollections ratio class add (existing item) 0.00548 0.00724 1.3215 BenchmarkAddExistingItem add (new item) 0.00588 0.00862 1.46683 BenchmarkAddNewItem __and__ 0.00538 0.01605 2.98142 BenchmarkAnd clear 0.00573 0.00851 1.48506 BenchmarkClear __contains__ 0.00583 0.00532 0.91115 BenchmarkContains copy 0.00576 0.01072 1.86041 BenchmarkCopy difference 0.00637 0.01169 1.83423 BenchmarkDifference discard 0.00554 0.00827 1.49316 BenchmarkDiscard discard (no changes) 0.00521 0.00663 1.27236 BenchmarkDiscardNoChanges __ge__ 0.00565 0.00477 0.84345 BenchmarkGe __ge__ (not greater than or equals to) 0.00528 0.00546 1.03407 BenchmarkGeNot __gt__ 0.00656 0.00906 1.38212 BenchmarkGt __gt__ (not greater than) 0.00582 0.034 5.84516 BenchmarkGtNot __iand__ 0.00666 0.01121 1.68391 BenchmarkIand __init__ 0.00562 0.02155 3.83389 BenchmarkInit intersection 0.00569 0.01598 2.8095 BenchmarkIntersection intersection_update 0.00561 0.01127 2.00756 BenchmarkIntersectionUpdate __ior__ 0.00593 0.01149 1.93976 BenchmarkIor isdisjoint 0.00604 0.00572 0.94745 BenchmarkIsdisjoint isdisjoint (not disjoint) 0.0063 0.00589 0.93409 BenchmarkIsdisjointNot issubset 0.00626 0.03622 5.78731 BenchmarkIssubset issubset (not subset) 0.00613 0.0152 2.48029 BenchmarkIssubsetNot issuperset 0.00559 0.0264 4.72106 BenchmarkIssuperset issuperset (not superset) 0.00571 0.00541 0.94716 BenchmarkIssupersetNot __ixor__ 0.00603 0.04631 7.67727 BenchmarkIxor __le__ 0.00585 0.00585 0.99886 BenchmarkLe __le__ (not less than or equals to) 0.00566 0.00525 0.92674 BenchmarkLeNot __len__ 0.00603 0.00521 0.86406 BenchmarkLen __lt__ 0.00565 0.00629 1.11248 BenchmarkLt __lt__ (not less than) 0.00606 0.00549 0.90516 BenchmarkLtNot __contains__ (unsuccessful search) 0.00587 0.00521 0.88865 BenchmarkNotContains __or__ 0.00626 0.01615 2.58175 BenchmarkOr pop 0.00623 0.00886 1.42078 BenchmarkPop remove 0.00633 0.0091 1.43653 BenchmarkRemove __sub__ 0.00645 0.01107 1.7169 BenchmarkSub symmetric_difference 0.00577 0.04925 8.52978 BenchmarkSymmetricDifference symmetric_difference_update 0.00591 0.04447 7.51822 BenchmarkSymmetricDifferenceUpdate union 0.00614 0.01482 2.41431 BenchmarkUnion update 0.00671 0.01051 1.56719 BenchmarkUpdate __xor__ 0.00523 0.04762 9.11422 BenchmarkXor approximate memory usage subject builtin sqlitecollections ratio class add (existing item) 0.0 0.0 1.0 BenchmarkAddExistingItem add (new item) 0.0 0.0 1.0 BenchmarkAddNewItem __and__ 0.0 0.0 1.0 BenchmarkAnd clear 0.0 0.0 1.0 BenchmarkClear __contains__ 0.0 0.0 1.0 BenchmarkContains copy 0.0 0.0 1.0 BenchmarkCopy difference 0.0 0.0 1.0 BenchmarkDifference discard 0.0 0.0 1.0 BenchmarkDiscard discard (no changes) 0.0 0.0 1.0 BenchmarkDiscardNoChanges __ge__ 0.0 0.0 1.0 BenchmarkGe __ge__ (not greater than or equals to) 0.0 0.0 1.0 BenchmarkGeNot __gt__ 0.0 0.0 1.0 BenchmarkGt __gt__ (not greater than) 0.0 0.0 1.0 BenchmarkGtNot __iand__ 0.0 0.0 1.0 BenchmarkIand __init__ 0.0 0.0 1.0 BenchmarkInit intersection 0.0 0.0 1.0 BenchmarkIntersection intersection_update 0.0 0.0 1.0 BenchmarkIntersectionUpdate __ior__ 0.0 0.0 1.0 BenchmarkIor isdisjoint 0.0 0.0 1.0 BenchmarkIsdisjoint isdisjoint (not disjoint) 0.0 0.0 1.0 BenchmarkIsdisjointNot issubset 0.0 0.0 1.0 BenchmarkIssubset issubset (not subset) 0.0 0.0 1.0 BenchmarkIssubsetNot issuperset 0.0 0.0 1.0 BenchmarkIssuperset issuperset (not superset) 0.0 0.0 1.0 BenchmarkIssupersetNot __ixor__ 0.0 0.00391 inf BenchmarkIxor __le__ 0.0 0.0 1.0 BenchmarkLe __le__ (not less than or equals to) 0.0 0.0 1.0 BenchmarkLeNot __len__ 0.0 0.0 1.0 BenchmarkLen __lt__ 0.0 0.0 1.0 BenchmarkLt __lt__ (not less than) 0.0 0.0 1.0 BenchmarkLtNot __contains__ (unsuccessful search) 0.0 0.0 1.0 BenchmarkNotContains __or__ 0.0 0.0 1.0 BenchmarkOr pop 0.0 0.0 1.0 BenchmarkPop remove 0.0 0.0 1.0 BenchmarkRemove __sub__ 0.0 0.0 1.0 BenchmarkSub symmetric_difference 0.0 0.0 1.0 BenchmarkSymmetricDifference symmetric_difference_update 0.0 0.0 1.0 BenchmarkSymmetricDifferenceUpdate union 0.0 0.0 1.0 BenchmarkUnion update 0.0 0.0 1.0 BenchmarkUpdate __xor__ 0.0 0.0 1.0 BenchmarkXor","title":"Benchmark"},{"location":"development/","text":"Development Tests, type checking and linting locally To run tests, type checking and linting locally, you'll need to have python 3.6 , 3.7 , 3.8 , 3.9 , 3.10 and 3.11 installed. We use tox to run tests and type checking on all the supported python versions. You can set up the development environment with the following commands: git clone git@github.com:osoken/sqlitecollections.git cd sqlitecollections python -m venv .venv source ./.venv/bin/activate pip install -e .[dev] Then, just type the following command to run the test: tox After a while, you'll see the following message at the bottom of the long logs from pytest and others. __________________ summary __________________ lint: commands succeeded py36: commands succeeded py37: commands succeeded py38: commands succeeded py39: commands succeeded py310: commands succeeded py311: commands succeeded congratulations :) Building documents We use mkdocs to build the documentation. To set up the environment for building the document, run the following commands: git clone git@github.com:osoken/sqlitecollections.git cd sqlitecollections python -m venv .venv source ./.venv/bin/activate pip install -e .[docs] Then, building the documentation can be done by the following command: mkdocs build The output will be located in site directory in your current directory. During development, you can also run mkdoc 's builtin development server with hot-reloading enabled with the following command: mkdocs serve In that case, you can check the result on http://127.0.0.1:8000 . Benchmarks We have our own benchmark package. Setup the benchmark package To setup, run the following commands: pip install docs/scbenchmarker Run all benchmarks and render the results Benchmarking is done in two steps: Step 1: Run all benchmarks python -m scbenchmarker --prefix=[prefix] benchmarking Step 2: Render the results to markdown: python -m scbenchmarker --prefix=[prefix] render Results are stored in docs/benchmark_results/[prefix]/ . You can check the results on http://127.0.0.1:8000/benchmark/ . Verbose mode python -m scbenchmarker --verbose --prefix=[prefix] benchmarking An example output is as follows: benchmark_dict.py::BenchmarkSetitemAddNewItem: {'subject': '`__setitem__` (add new item)', 'one': {'name': '`dict`', 'timing': 0.0026721060276031494, 'memory': 0.00390625}, 'another': {'name': '`sqlitecollections.Dict`', 'timing': 0.006042510271072388, 'memory': 0.00390625}, 'ratio': {'timing': 2.2613287828598834, 'memory': 1.0}} Run individual benchmarks You can also run individual benchmarks. python -m scbenchmarker --prefix=[prefix] benchmarking [benchmark script]::[benchmark name] This command runs only a single benchmark. Together with the verbose mode, this is convenient for improving a single method and checking benchmarks frequently. Compatibility policy We aim to implement containers that are as compatible as possible with the built-in containers, but we have a few implementations that intentionally behave differently. Normal behavior will be compatible, but in case of errors it may be different. The constructor arguments are not compatible, as they require arguments specific to this package's container, such as sqlite3 DB file paths and serialization methods. copy method in each container behaves similarly to deep copy, since it copies the table containing serialized elements. Dict 's item order is guaranteed to be insertion order not only for python 3.7 and upper but for all versions. Dict.fromkeys class method is not provided. Any member in the container cannot be mutated directly. If you want to mutate any member, mutate it via temporary variable then write it back. import sqlitecollections as sc x = sc . Dict ({ \"a\" : []}) # create {\"a\": []} x [ \"a\" ] . append ( \"b\" ) # try to mutate the empty list print ( x [ \"a\" ]) # not [\"b\"] but [] temp = x [ \"a\" ] # temporarily substitute the list to a variable temp . append ( \"b\" ) # mutate the temporary variable x [ \"a\" ] = temp # then, write it back print ( x [ \"a\" ]) # now, we get [\"b\"]","title":"Development"},{"location":"development/#development","text":"","title":"Development"},{"location":"development/#tests-type-checking-and-linting-locally","text":"To run tests, type checking and linting locally, you'll need to have python 3.6 , 3.7 , 3.8 , 3.9 , 3.10 and 3.11 installed. We use tox to run tests and type checking on all the supported python versions. You can set up the development environment with the following commands: git clone git@github.com:osoken/sqlitecollections.git cd sqlitecollections python -m venv .venv source ./.venv/bin/activate pip install -e .[dev] Then, just type the following command to run the test: tox After a while, you'll see the following message at the bottom of the long logs from pytest and others. __________________ summary __________________ lint: commands succeeded py36: commands succeeded py37: commands succeeded py38: commands succeeded py39: commands succeeded py310: commands succeeded py311: commands succeeded congratulations :)","title":"Tests, type checking and linting locally"},{"location":"development/#building-documents","text":"We use mkdocs to build the documentation. To set up the environment for building the document, run the following commands: git clone git@github.com:osoken/sqlitecollections.git cd sqlitecollections python -m venv .venv source ./.venv/bin/activate pip install -e .[docs] Then, building the documentation can be done by the following command: mkdocs build The output will be located in site directory in your current directory. During development, you can also run mkdoc 's builtin development server with hot-reloading enabled with the following command: mkdocs serve In that case, you can check the result on http://127.0.0.1:8000 .","title":"Building documents"},{"location":"development/#benchmarks","text":"We have our own benchmark package.","title":"Benchmarks"},{"location":"development/#setup-the-benchmark-package","text":"To setup, run the following commands: pip install docs/scbenchmarker","title":"Setup the benchmark package"},{"location":"development/#run-all-benchmarks-and-render-the-results","text":"Benchmarking is done in two steps: Step 1: Run all benchmarks python -m scbenchmarker --prefix=[prefix] benchmarking Step 2: Render the results to markdown: python -m scbenchmarker --prefix=[prefix] render Results are stored in docs/benchmark_results/[prefix]/ . You can check the results on http://127.0.0.1:8000/benchmark/ .","title":"Run all benchmarks and render the results"},{"location":"development/#verbose-mode","text":"python -m scbenchmarker --verbose --prefix=[prefix] benchmarking An example output is as follows: benchmark_dict.py::BenchmarkSetitemAddNewItem: {'subject': '`__setitem__` (add new item)', 'one': {'name': '`dict`', 'timing': 0.0026721060276031494, 'memory': 0.00390625}, 'another': {'name': '`sqlitecollections.Dict`', 'timing': 0.006042510271072388, 'memory': 0.00390625}, 'ratio': {'timing': 2.2613287828598834, 'memory': 1.0}}","title":"Verbose mode"},{"location":"development/#run-individual-benchmarks","text":"You can also run individual benchmarks. python -m scbenchmarker --prefix=[prefix] benchmarking [benchmark script]::[benchmark name] This command runs only a single benchmark. Together with the verbose mode, this is convenient for improving a single method and checking benchmarks frequently.","title":"Run individual benchmarks"},{"location":"development/#compatibility-policy","text":"We aim to implement containers that are as compatible as possible with the built-in containers, but we have a few implementations that intentionally behave differently. Normal behavior will be compatible, but in case of errors it may be different. The constructor arguments are not compatible, as they require arguments specific to this package's container, such as sqlite3 DB file paths and serialization methods. copy method in each container behaves similarly to deep copy, since it copies the table containing serialized elements. Dict 's item order is guaranteed to be insertion order not only for python 3.7 and upper but for all versions. Dict.fromkeys class method is not provided. Any member in the container cannot be mutated directly. If you want to mutate any member, mutate it via temporary variable then write it back. import sqlitecollections as sc x = sc . Dict ({ \"a\" : []}) # create {\"a\": []} x [ \"a\" ] . append ( \"b\" ) # try to mutate the empty list print ( x [ \"a\" ]) # not [\"b\"] but [] temp = x [ \"a\" ] # temporarily substitute the list to a variable temp . append ( \"b\" ) # mutate the temporary variable x [ \"a\" ] = temp # then, write it back print ( x [ \"a\" ]) # now, we get [\"b\"]","title":"Compatibility policy"},{"location":"install/","text":"Install pip install sqlitecollections","title":"Install"},{"location":"install/#install","text":"pip install sqlitecollections","title":"Install"},{"location":"benchmark_results/py310/dict/","text":"timing | subject | `builtin` | `sqlitecollections` | ratio | class | | :------ | --------: | ------------------: | ----: | :---- | | `clear` | 0.0047 | 0.00949 | 2.02053 | `BenchmarkClear` | | `__contains__` | 0.0054 | 0.00576 | 1.06717 | `BenchmarkContains` | | `copy` | 0.00485 | 0.01136 | 2.33965 | `BenchmarkCopy` | | `__delitem__` | 0.00513 | 0.00907 | 1.76574 | `BenchmarkDelitem` | | `get` | 0.00533 | 0.00512 | 0.95992 | `BenchmarkGet` | | `get (unsuccessful search)` | 0.00607 | 0.00528 | 0.87013 | `BenchmarkGetDefault` | | `__getitem__` | 0.00557 | 0.00554 | 0.99489 | `BenchmarkGetitem` | | `__init__` | 0.00587 | 0.04642 | 7.90266 | `BenchmarkInit` | | `__ior__` | 0.00486 | 0.00915 | 1.88289 | `BenchmarkIor` | | `__ior__` (many) | 0.0062 | 0.6246 | 100.7338 | `BenchmarkIorMany` | | `items` | 0.00613 | 0.01261 | 2.05772 | `BenchmarkItems` | | `__iter__` | 0.00535 | 0.00944 | 1.76511 | `BenchmarkIter` | | `keys` | 0.00544 | 0.00931 | 1.71015 | `BenchmarkKeys` | | `__len__` | 0.00516 | 0.00529 | 1.02568 | `BenchmarkLen` | | `__contains__` (unsuccessful search) | 0.00572 | 0.00509 | 0.88928 | `BenchmarkNotContains` | | `__or__` | 0.00496 | 0.014 | 2.82034 | `BenchmarkOr` | | `__or__` (many) | 0.00647 | 0.90824 | 140.34007 | `BenchmarkOrMany` | | `pop` | 0.00534 | 0.00872 | 1.63264 | `BenchmarkPop` | | `pop (unsuccessful search)` | 0.00603 | 0.00684 | 1.13383 | `BenchmarkPopDefault` | | `popitem` | 0.00534 | 0.00969 | 1.8153 | `BenchmarkPopitem` | | `reversed` | 0.00558 | 0.00912 | 1.63358 | `BenchmarkReversed` | | `setdefault` | 0.00543 | 0.00816 | 1.50301 | `BenchmarkSetdefault` | | `setdefault (unsuccessful search)` | 0.00567 | 0.00778 | 1.37307 | `BenchmarkSetdefaultAddItem` | | `__setitem__` (add new item) | 0.00545 | 0.00931 | 1.70694 | `BenchmarkSetitemAddNewItem` | | `__setitem__` (replace) | 0.00549 | 0.00947 | 1.72406 | `BenchmarkSetitemReplace` | | `update` | 0.00608 | 0.00969 | 1.59427 | `BenchmarkUpdate` | | `update` (many) | 0.00695 | 0.66331 | 95.4668 | `BenchmarkUpdateMany` | | `values` | 0.00548 | 0.00998 | 1.81996 | `BenchmarkValues` | approximate memory usage | subject | `builtin` | `sqlitecollections` | ratio | class | | :------ | --------: | ------------------: | ----: | :---- | | `clear` | 0.0 | 0.0 | 1.0 | `BenchmarkClear` | | `__contains__` | 0.0 | 0.0 | 1.0 | `BenchmarkContains` | | `copy` | 0.0 | 0.0 | 1.0 | `BenchmarkCopy` | | `__delitem__` | 0.0 | 0.0 | 1.0 | `BenchmarkDelitem` | | `get` | 0.0 | 0.0 | 1.0 | `BenchmarkGet` | | `get (unsuccessful search)` | 0.0 | 0.0 | 1.0 | `BenchmarkGetDefault` | | `__getitem__` | 0.0 | 0.0 | 1.0 | `BenchmarkGetitem` | | `__init__` | 0.0 | 0.0 | 1.0 | `BenchmarkInit` | | `__ior__` | 0.0 | 0.0 | 1.0 | `BenchmarkIor` | | `__ior__` (many) | 0.16406 | 0.0 | 0.0 | `BenchmarkIorMany` | | `items` | 0.0 | 0.33203 | inf | `BenchmarkItems` | | `__iter__` | 0.0 | 0.0 | 1.0 | `BenchmarkIter` | | `keys` | 0.0 | 0.0 | 1.0 | `BenchmarkKeys` | | `__len__` | 0.0 | 0.0 | 1.0 | `BenchmarkLen` | | `__contains__` (unsuccessful search) | 0.0 | 0.0 | 1.0 | `BenchmarkNotContains` | | `__or__` | 0.0 | 0.0 | 1.0 | `BenchmarkOr` | | `__or__` (many) | 0.00391 | 0.0 | 0.0 | `BenchmarkOrMany` | | `pop` | 0.0 | 0.0 | 1.0 | `BenchmarkPop` | | `pop (unsuccessful search)` | 0.0 | 0.0 | 1.0 | `BenchmarkPopDefault` | | `popitem` | 0.0 | 0.0 | 1.0 | `BenchmarkPopitem` | | `reversed` | 0.0 | 0.0 | 1.0 | `BenchmarkReversed` | | `setdefault` | 0.0 | 0.0 | 1.0 | `BenchmarkSetdefault` | | `setdefault (unsuccessful search)` | 0.0 | 0.0 | 1.0 | `BenchmarkSetdefaultAddItem` | | `__setitem__` (add new item) | 0.0 | 0.0 | 1.0 | `BenchmarkSetitemAddNewItem` | | `__setitem__` (replace) | 0.0 | 0.0 | 1.0 | `BenchmarkSetitemReplace` | | `update` | 0.0 | 0.0 | 1.0 | `BenchmarkUpdate` | | `update` (many) | 0.0 | 0.0 | 1.0 | `BenchmarkUpdateMany` | | `values` | 0.0 | 0.0 | 1.0 | `BenchmarkValues` |","title":"Dict"},{"location":"benchmark_results/py310/list/","text":"timing | subject | `builtin` | `sqlitecollections` | ratio | class | | :------ | --------: | ------------------: | ----: | :---- | | `__add__` | 0.00593 | 0.01383 | 2.33236 | `BenchmarkAdd` | | `append` | 0.00631 | 0.00903 | 1.43232 | `BenchmarkAppend` | | `clear` | 0.00487 | 0.00942 | 1.93532 | `BenchmarkClear` | | `__contains__` | 0.00556 | 0.00509 | 0.91577 | `BenchmarkContains` | | `copy` | 0.0053 | 0.01148 | 2.16413 | `BenchmarkCopy` | | `count` | 0.00569 | 0.00503 | 0.88506 | `BenchmarkCount` | | `__init__` | 0.00594 | 0.025 | 4.20781 | `BenchmarkCreateWithInitialData` | | `__delitem__` | 0.00576 | 0.09114 | 15.83362 | `BenchmarkDelitem` | | `__delitem__` (slice) | 0.0058 | 0.1783 | 30.72743 | `BenchmarkDelitemSlice` | | `__delitem__` (slice with skip) | 0.00581 | 0.16842 | 28.9878 | `BenchmarkDelitemSliceSkip` | | `extend` | 0.00581 | 0.00862 | 1.48416 | `BenchmarkExtend` | | `__getitem__` | 0.00614 | 0.00552 | 0.89974 | `BenchmarkGetitem` | | `__getitem__` (slice) | 0.00529 | 0.10006 | 18.91948 | `BenchmarkGetitemSlice` | | `__getitem__` (slice with skip) | 0.00624 | 0.01665 | 2.67022 | `BenchmarkGetitemSliceSkip` | | `__iadd__` | 0.00569 | 0.0106 | 1.86169 | `BenchmarkIadd` | | `__imult__` | 0.0057 | 0.2627 | 46.07897 | `BenchmarkImult` | | `index` | 0.00569 | 0.00556 | 0.97728 | `BenchmarkIndex` | | `index` (unsuccessful search) | 0.00603 | 0.00567 | 0.93918 | `BenchmarkIndexUnsuccessfulSearch` | | `insert` | 0.00562 | 0.17125 | 30.48209 | `BenchmarkInsert` | | `__len__` | 0.00549 | 0.00527 | 0.95914 | `BenchmarkLen` | | `__mult__` | 0.00579 | 0.26058 | 44.99921 | `BenchmarkMult` | | `__contains__` (unsuccessful search) | 0.00553 | 0.00493 | 0.89127 | `BenchmarkNotContains` | | `pop` | 0.00603 | 0.09293 | 15.41279 | `BenchmarkPop` | | `remove` | 0.00575 | 0.12539 | 21.80539 | `BenchmarkRemove` | | `__setitem__` | 0.00602 | 0.00906 | 1.50605 | `BenchmarkSetitem` | | `__setitem__` (slice) | 0.00629 | 0.18089 | 28.77504 | `BenchmarkSetitemSlice` | | `__setitem__` (slice with skip) | 0.00612 | 0.01847 | 3.01619 | `BenchmarkSetitemSliceSkip` | | `sort` (balanced) | 0.00598 | 0.36843 | 61.60757 | `BenchmarkSortBalanced` | | `sort` (fastest) | 0.0071 | 0.37395 | 52.64624 | `BenchmarkSortFastest` | | `sort` (memory_saving) | 0.00548 | 3.86456 | 705.58432 | `BenchmarkSortMemorySaving` | approximate memory usage | subject | `builtin` | `sqlitecollections` | ratio | class | | :------ | --------: | ------------------: | ----: | :---- | | `__add__` | 0.0 | 0.0 | 1.0 | `BenchmarkAdd` | | `append` | 0.0 | 0.0 | 1.0 | `BenchmarkAppend` | | `clear` | 0.0 | 0.0 | 1.0 | `BenchmarkClear` | | `__contains__` | 0.0 | 0.00391 | inf | `BenchmarkContains` | | `copy` | 0.0 | 0.0 | 1.0 | `BenchmarkCopy` | | `count` | 0.0 | 0.0 | 1.0 | `BenchmarkCount` | | `__init__` | 0.0 | 0.0 | 1.0 | `BenchmarkCreateWithInitialData` | | `__delitem__` | 0.0 | 0.0 | 1.0 | `BenchmarkDelitem` | | `__delitem__` (slice) | 0.0 | 0.0 | 1.0 | `BenchmarkDelitemSlice` | | `__delitem__` (slice with skip) | 0.0 | 0.0 | 1.0 | `BenchmarkDelitemSliceSkip` | | `extend` | 0.0 | 0.0 | 1.0 | `BenchmarkExtend` | | `__getitem__` | 0.0 | 0.0 | 1.0 | `BenchmarkGetitem` | | `__getitem__` (slice) | 0.0 | 0.00391 | inf | `BenchmarkGetitemSlice` | | `__getitem__` (slice with skip) | 0.0 | 0.0 | 1.0 | `BenchmarkGetitemSliceSkip` | | `__iadd__` | 0.0 | 0.0 | 1.0 | `BenchmarkIadd` | | `__imult__` | 0.0 | 0.0 | 1.0 | `BenchmarkImult` | | `index` | 0.0 | 0.0 | 1.0 | `BenchmarkIndex` | | `index` (unsuccessful search) | 0.0 | 0.0 | 1.0 | `BenchmarkIndexUnsuccessfulSearch` | | `insert` | 0.0 | 0.0 | 1.0 | `BenchmarkInsert` | | `__len__` | 0.0 | 0.0 | 1.0 | `BenchmarkLen` | | `__mult__` | 0.0 | 0.0 | 1.0 | `BenchmarkMult` | | `__contains__` (unsuccessful search) | 0.0 | 0.0 | 1.0 | `BenchmarkNotContains` | | `pop` | 0.0 | 0.00391 | inf | `BenchmarkPop` | | `remove` | 0.0 | 0.0 | 1.0 | `BenchmarkRemove` | | `__setitem__` | 0.0 | 0.0 | 1.0 | `BenchmarkSetitem` | | `__setitem__` (slice) | 0.0 | 0.00391 | inf | `BenchmarkSetitemSlice` | | `__setitem__` (slice with skip) | 0.0 | 0.0 | 1.0 | `BenchmarkSetitemSliceSkip` | | `sort` (balanced) | 0.0 | 0.09766 | inf | `BenchmarkSortBalanced` | | `sort` (fastest) | 0.0 | 0.14062 | inf | `BenchmarkSortFastest` | | `sort` (memory_saving) | 0.0 | 0.00391 | inf | `BenchmarkSortMemorySaving` |","title":"List"},{"location":"benchmark_results/py310/set/","text":"timing | subject | `builtin` | `sqlitecollections` | ratio | class | | :------ | --------: | ------------------: | ----: | :---- | | `add (existing item)` | 0.00548 | 0.00724 | 1.3215 | `BenchmarkAddExistingItem` | | `add (new item)` | 0.00588 | 0.00862 | 1.46683 | `BenchmarkAddNewItem` | | `__and__` | 0.00538 | 0.01605 | 2.98142 | `BenchmarkAnd` | | `clear` | 0.00573 | 0.00851 | 1.48506 | `BenchmarkClear` | | `__contains__` | 0.00583 | 0.00532 | 0.91115 | `BenchmarkContains` | | `copy` | 0.00576 | 0.01072 | 1.86041 | `BenchmarkCopy` | | `difference` | 0.00637 | 0.01169 | 1.83423 | `BenchmarkDifference` | | `discard` | 0.00554 | 0.00827 | 1.49316 | `BenchmarkDiscard` | | `discard (no changes)` | 0.00521 | 0.00663 | 1.27236 | `BenchmarkDiscardNoChanges` | | `__ge__` | 0.00565 | 0.00477 | 0.84345 | `BenchmarkGe` | | `__ge__` (not greater than or equals to) | 0.00528 | 0.00546 | 1.03407 | `BenchmarkGeNot` | | `__gt__` | 0.00656 | 0.00906 | 1.38212 | `BenchmarkGt` | | `__gt__` (not greater than) | 0.00582 | 0.034 | 5.84516 | `BenchmarkGtNot` | | `__iand__` | 0.00666 | 0.01121 | 1.68391 | `BenchmarkIand` | | `__init__` | 0.00562 | 0.02155 | 3.83389 | `BenchmarkInit` | | `intersection` | 0.00569 | 0.01598 | 2.8095 | `BenchmarkIntersection` | | `intersection_update` | 0.00561 | 0.01127 | 2.00756 | `BenchmarkIntersectionUpdate` | | `__ior__` | 0.00593 | 0.01149 | 1.93976 | `BenchmarkIor` | | `isdisjoint` | 0.00604 | 0.00572 | 0.94745 | `BenchmarkIsdisjoint` | | `isdisjoint` (not disjoint) | 0.0063 | 0.00589 | 0.93409 | `BenchmarkIsdisjointNot` | | `issubset` | 0.00626 | 0.03622 | 5.78731 | `BenchmarkIssubset` | | `issubset` (not subset) | 0.00613 | 0.0152 | 2.48029 | `BenchmarkIssubsetNot` | | `issuperset` | 0.00559 | 0.0264 | 4.72106 | `BenchmarkIssuperset` | | `issuperset` (not superset) | 0.00571 | 0.00541 | 0.94716 | `BenchmarkIssupersetNot` | | `__ixor__` | 0.00603 | 0.04631 | 7.67727 | `BenchmarkIxor` | | `__le__` | 0.00585 | 0.00585 | 0.99886 | `BenchmarkLe` | | `__le__` (not less than or equals to) | 0.00566 | 0.00525 | 0.92674 | `BenchmarkLeNot` | | `__len__` | 0.00603 | 0.00521 | 0.86406 | `BenchmarkLen` | | `__lt__` | 0.00565 | 0.00629 | 1.11248 | `BenchmarkLt` | | `__lt__` (not less than) | 0.00606 | 0.00549 | 0.90516 | `BenchmarkLtNot` | | `__contains__` (unsuccessful search) | 0.00587 | 0.00521 | 0.88865 | `BenchmarkNotContains` | | `__or__` | 0.00626 | 0.01615 | 2.58175 | `BenchmarkOr` | | `pop` | 0.00623 | 0.00886 | 1.42078 | `BenchmarkPop` | | `remove` | 0.00633 | 0.0091 | 1.43653 | `BenchmarkRemove` | | `__sub__` | 0.00645 | 0.01107 | 1.7169 | `BenchmarkSub` | | `symmetric_difference` | 0.00577 | 0.04925 | 8.52978 | `BenchmarkSymmetricDifference` | | `symmetric_difference_update` | 0.00591 | 0.04447 | 7.51822 | `BenchmarkSymmetricDifferenceUpdate` | | `union` | 0.00614 | 0.01482 | 2.41431 | `BenchmarkUnion` | | `update` | 0.00671 | 0.01051 | 1.56719 | `BenchmarkUpdate` | | `__xor__` | 0.00523 | 0.04762 | 9.11422 | `BenchmarkXor` | approximate memory usage | subject | `builtin` | `sqlitecollections` | ratio | class | | :------ | --------: | ------------------: | ----: | :---- | | `add (existing item)` | 0.0 | 0.0 | 1.0 | `BenchmarkAddExistingItem` | | `add (new item)` | 0.0 | 0.0 | 1.0 | `BenchmarkAddNewItem` | | `__and__` | 0.0 | 0.0 | 1.0 | `BenchmarkAnd` | | `clear` | 0.0 | 0.0 | 1.0 | `BenchmarkClear` | | `__contains__` | 0.0 | 0.0 | 1.0 | `BenchmarkContains` | | `copy` | 0.0 | 0.0 | 1.0 | `BenchmarkCopy` | | `difference` | 0.0 | 0.0 | 1.0 | `BenchmarkDifference` | | `discard` | 0.0 | 0.0 | 1.0 | `BenchmarkDiscard` | | `discard (no changes)` | 0.0 | 0.0 | 1.0 | `BenchmarkDiscardNoChanges` | | `__ge__` | 0.0 | 0.0 | 1.0 | `BenchmarkGe` | | `__ge__` (not greater than or equals to) | 0.0 | 0.0 | 1.0 | `BenchmarkGeNot` | | `__gt__` | 0.0 | 0.0 | 1.0 | `BenchmarkGt` | | `__gt__` (not greater than) | 0.0 | 0.0 | 1.0 | `BenchmarkGtNot` | | `__iand__` | 0.0 | 0.0 | 1.0 | `BenchmarkIand` | | `__init__` | 0.0 | 0.0 | 1.0 | `BenchmarkInit` | | `intersection` | 0.0 | 0.0 | 1.0 | `BenchmarkIntersection` | | `intersection_update` | 0.0 | 0.0 | 1.0 | `BenchmarkIntersectionUpdate` | | `__ior__` | 0.0 | 0.0 | 1.0 | `BenchmarkIor` | | `isdisjoint` | 0.0 | 0.0 | 1.0 | `BenchmarkIsdisjoint` | | `isdisjoint` (not disjoint) | 0.0 | 0.0 | 1.0 | `BenchmarkIsdisjointNot` | | `issubset` | 0.0 | 0.0 | 1.0 | `BenchmarkIssubset` | | `issubset` (not subset) | 0.0 | 0.0 | 1.0 | `BenchmarkIssubsetNot` | | `issuperset` | 0.0 | 0.0 | 1.0 | `BenchmarkIssuperset` | | `issuperset` (not superset) | 0.0 | 0.0 | 1.0 | `BenchmarkIssupersetNot` | | `__ixor__` | 0.0 | 0.00391 | inf | `BenchmarkIxor` | | `__le__` | 0.0 | 0.0 | 1.0 | `BenchmarkLe` | | `__le__` (not less than or equals to) | 0.0 | 0.0 | 1.0 | `BenchmarkLeNot` | | `__len__` | 0.0 | 0.0 | 1.0 | `BenchmarkLen` | | `__lt__` | 0.0 | 0.0 | 1.0 | `BenchmarkLt` | | `__lt__` (not less than) | 0.0 | 0.0 | 1.0 | `BenchmarkLtNot` | | `__contains__` (unsuccessful search) | 0.0 | 0.0 | 1.0 | `BenchmarkNotContains` | | `__or__` | 0.0 | 0.0 | 1.0 | `BenchmarkOr` | | `pop` | 0.0 | 0.0 | 1.0 | `BenchmarkPop` | | `remove` | 0.0 | 0.0 | 1.0 | `BenchmarkRemove` | | `__sub__` | 0.0 | 0.0 | 1.0 | `BenchmarkSub` | | `symmetric_difference` | 0.0 | 0.0 | 1.0 | `BenchmarkSymmetricDifference` | | `symmetric_difference_update` | 0.0 | 0.0 | 1.0 | `BenchmarkSymmetricDifferenceUpdate` | | `union` | 0.0 | 0.0 | 1.0 | `BenchmarkUnion` | | `update` | 0.0 | 0.0 | 1.0 | `BenchmarkUpdate` | | `__xor__` | 0.0 | 0.0 | 1.0 | `BenchmarkXor` |","title":"Set"},{"location":"benchmark_results/py36/dict/","text":"timing | subject | `builtin` | `sqlitecollections` | ratio | class | | :------ | --------: | ------------------: | ----: | :---- | | `clear` | 0.00442 | 0.00717 | 1.62254 | `BenchmarkClear` | | `__contains__` | 0.00479 | 0.00501 | 1.04659 | `BenchmarkContains` | | `copy` | 0.00485 | 0.00971 | 2.00243 | `BenchmarkCopy` | | `__delitem__` | 0.00476 | 0.00765 | 1.60691 | `BenchmarkDelitem` | | `get` | 0.00465 | 0.00527 | 1.13234 | `BenchmarkGet` | | `get (unsuccessful search)` | 0.00477 | 0.00474 | 0.99315 | `BenchmarkGetDefault` | | `__getitem__` | 0.00497 | 0.00497 | 1.00012 | `BenchmarkGetitem` | | `__init__` | 0.00487 | 0.04589 | 9.41422 | `BenchmarkInit` | | `items` | 0.00538 | 0.01282 | 2.38425 | `BenchmarkItems` | | `__iter__` | 0.00477 | 0.0091 | 1.9071 | `BenchmarkIter` | | `keys` | 0.00458 | 0.0091 | 1.98523 | `BenchmarkKeys` | | `__len__` | 0.00466 | 0.00491 | 1.05487 | `BenchmarkLen` | | `__contains__` (unsuccessful search) | 0.00459 | 0.00478 | 1.04121 | `BenchmarkNotContains` | | `pop` | 0.00506 | 0.00761 | 1.50305 | `BenchmarkPop` | | `pop (unsuccessful search)` | 0.00487 | 0.00634 | 1.30239 | `BenchmarkPopDefault` | | `popitem` | 0.00488 | 0.00985 | 2.01769 | `BenchmarkPopitem` | | `setdefault` | 0.00481 | 0.00677 | 1.40689 | `BenchmarkSetdefault` | | `setdefault (unsuccessful search)` | 0.00477 | 0.0065 | 1.36221 | `BenchmarkSetdefaultAddItem` | | `__setitem__` (add new item) | 0.00477 | 0.00786 | 1.64774 | `BenchmarkSetitemAddNewItem` | | `__setitem__` (replace) | 0.00515 | 0.00789 | 1.53367 | `BenchmarkSetitemReplace` | | `update` | 0.00531 | 0.05023 | 9.46186 | `BenchmarkUpdate` | | `update` (many) | 0.00574 | 0.56793 | 98.9392 | `BenchmarkUpdateMany` | | `values` | 0.00522 | 0.00966 | 1.84974 | `BenchmarkValues` | approximate memory usage | subject | `builtin` | `sqlitecollections` | ratio | class | | :------ | --------: | ------------------: | ----: | :---- | | `clear` | 0.0625 | 0.01172 | 0.1875 | `BenchmarkClear` | | `__contains__` | 0.0 | 0.0 | 1.0 | `BenchmarkContains` | | `copy` | 0.0625 | 0.0 | 0.0 | `BenchmarkCopy` | | `__delitem__` | 0.0 | 0.0 | 1.0 | `BenchmarkDelitem` | | `get` | 0.0 | 0.0 | 1.0 | `BenchmarkGet` | | `get (unsuccessful search)` | 0.0 | 0.0 | 1.0 | `BenchmarkGetDefault` | | `__getitem__` | 0.0 | 0.0 | 1.0 | `BenchmarkGetitem` | | `__init__` | 0.01172 | 0.00781 | 0.66667 | `BenchmarkInit` | | `items` | 0.23047 | 0.40234 | 1.74576 | `BenchmarkItems` | | `__iter__` | 0.0 | 0.0 | 1.0 | `BenchmarkIter` | | `keys` | 0.0 | 0.0 | 1.0 | `BenchmarkKeys` | | `__len__` | 0.0 | 0.0 | 1.0 | `BenchmarkLen` | | `__contains__` (unsuccessful search) | 0.0 | 0.0 | 1.0 | `BenchmarkNotContains` | | `pop` | 0.0 | 0.0 | 1.0 | `BenchmarkPop` | | `pop (unsuccessful search)` | 0.0 | 0.0 | 1.0 | `BenchmarkPopDefault` | | `popitem` | 0.0 | 0.0 | 1.0 | `BenchmarkPopitem` | | `setdefault` | 0.0 | 0.0 | 1.0 | `BenchmarkSetdefault` | | `setdefault (unsuccessful search)` | 0.0 | 0.0 | 1.0 | `BenchmarkSetdefaultAddItem` | | `__setitem__` (add new item) | 0.0 | 0.0 | 1.0 | `BenchmarkSetitemAddNewItem` | | `__setitem__` (replace) | 0.0 | 0.0 | 1.0 | `BenchmarkSetitemReplace` | | `update` | 0.0 | 0.0 | 1.0 | `BenchmarkUpdate` | | `update` (many) | 0.0 | 0.0 | 1.0 | `BenchmarkUpdateMany` | | `values` | 0.04297 | 0.0 | 0.0 | `BenchmarkValues` |","title":"Dict"},{"location":"benchmark_results/py36/list/","text":"timing | subject | `builtin` | `sqlitecollections` | ratio | class | | :------ | --------: | ------------------: | ----: | :---- | | `__add__` | 0.00542 | 0.01182 | 2.18157 | `BenchmarkAdd` | | `append` | 0.00477 | 0.00746 | 1.56327 | `BenchmarkAppend` | | `clear` | 0.00492 | 0.00767 | 1.55787 | `BenchmarkClear` | | `__contains__` | 0.00486 | 0.00492 | 1.01324 | `BenchmarkContains` | | `copy` | 0.00476 | 0.00982 | 2.06211 | `BenchmarkCopy` | | `count` | 0.00499 | 0.00475 | 0.9506 | `BenchmarkCount` | | `__init__` | 0.00463 | 0.02193 | 4.7387 | `BenchmarkCreateWithInitialData` | | `__delitem__` | 0.00492 | 0.08003 | 16.25857 | `BenchmarkDelitem` | | `__delitem__` (slice) | 0.00493 | 0.15378 | 31.16191 | `BenchmarkDelitemSlice` | | `__delitem__` (slice with skip) | 0.00501 | 0.155 | 30.9335 | `BenchmarkDelitemSliceSkip` | | `extend` | 0.0052 | 0.00799 | 1.53684 | `BenchmarkExtend` | | `__getitem__` | 0.00529 | 0.00524 | 0.99104 | `BenchmarkGetitem` | | `__getitem__` (slice) | 0.00516 | 0.08894 | 17.22722 | `BenchmarkGetitemSlice` | | `__getitem__` (slice with skip) | 0.00516 | 0.01285 | 2.49133 | `BenchmarkGetitemSliceSkip` | | `__iadd__` | 0.00515 | 0.00816 | 1.5853 | `BenchmarkIadd` | | `__imult__` | 0.00516 | 0.22885 | 44.36508 | `BenchmarkImult` | | `index` | 0.00519 | 0.00548 | 1.05614 | `BenchmarkIndex` | | `index` (unsuccessful search) | 0.00518 | 0.00528 | 1.01908 | `BenchmarkIndexUnsuccessfulSearch` | | `insert` | 0.00504 | 0.15447 | 30.6439 | `BenchmarkInsert` | | `__len__` | 0.00516 | 0.00618 | 1.19717 | `BenchmarkLen` | | `__mult__` | 0.00488 | 0.2349 | 48.16714 | `BenchmarkMult` | | `__contains__` (unsuccessful search) | 0.00488 | 0.00508 | 1.03997 | `BenchmarkNotContains` | | `pop` | 0.00498 | 0.08287 | 16.64891 | `BenchmarkPop` | | `remove` | 0.00475 | 0.11501 | 24.21909 | `BenchmarkRemove` | | `__setitem__` | 0.00507 | 0.00797 | 1.57379 | `BenchmarkSetitem` | | `__setitem__` (slice) | 0.00487 | 0.15642 | 32.13095 | `BenchmarkSetitemSlice` | | `__setitem__` (slice with skip) | 0.00506 | 0.01649 | 3.26045 | `BenchmarkSetitemSliceSkip` | | `sort` (balanced) | 0.005 | 0.33717 | 67.43393 | `BenchmarkSortBalanced` | | `sort` (fastest) | 0.00503 | 0.33433 | 66.52603 | `BenchmarkSortFastest` | | `sort` (memory_saving) | 0.00489 | 3.41814 | 699.59874 | `BenchmarkSortMemorySaving` | approximate memory usage | subject | `builtin` | `sqlitecollections` | ratio | class | | :------ | --------: | ------------------: | ----: | :---- | | `__add__` | 0.0 | 0.0 | 1.0 | `BenchmarkAdd` | | `append` | 0.0 | 0.0 | 1.0 | `BenchmarkAppend` | | `clear` | 0.0 | 0.0 | 1.0 | `BenchmarkClear` | | `__contains__` | 0.0 | 0.0 | 1.0 | `BenchmarkContains` | | `copy` | 0.0 | 0.0 | 1.0 | `BenchmarkCopy` | | `count` | 0.0 | 0.0 | 1.0 | `BenchmarkCount` | | `__init__` | 0.0 | 0.0 | 1.0 | `BenchmarkCreateWithInitialData` | | `__delitem__` | 0.0 | 0.0 | 1.0 | `BenchmarkDelitem` | | `__delitem__` (slice) | 0.0 | 0.00391 | inf | `BenchmarkDelitemSlice` | | `__delitem__` (slice with skip) | 0.0 | 0.0 | 1.0 | `BenchmarkDelitemSliceSkip` | | `extend` | 0.0 | 0.0 | 1.0 | `BenchmarkExtend` | | `__getitem__` | 0.0 | 0.0 | 1.0 | `BenchmarkGetitem` | | `__getitem__` (slice) | 0.0 | 0.00391 | inf | `BenchmarkGetitemSlice` | | `__getitem__` (slice with skip) | 0.0 | 0.0 | 1.0 | `BenchmarkGetitemSliceSkip` | | `__iadd__` | 0.0 | 0.0 | 1.0 | `BenchmarkIadd` | | `__imult__` | 0.0 | 0.0 | 1.0 | `BenchmarkImult` | | `index` | 0.0 | 0.00391 | inf | `BenchmarkIndex` | | `index` (unsuccessful search) | 0.0 | 0.0 | 1.0 | `BenchmarkIndexUnsuccessfulSearch` | | `insert` | 0.0 | 0.0 | 1.0 | `BenchmarkInsert` | | `__len__` | 0.0 | 0.0 | 1.0 | `BenchmarkLen` | | `__mult__` | 0.0 | 0.0 | 1.0 | `BenchmarkMult` | | `__contains__` (unsuccessful search) | 0.0 | 0.00391 | inf | `BenchmarkNotContains` | | `pop` | 0.0 | 0.01172 | inf | `BenchmarkPop` | | `remove` | 0.0 | 0.0 | 1.0 | `BenchmarkRemove` | | `__setitem__` | 0.0 | 0.0 | 1.0 | `BenchmarkSetitem` | | `__setitem__` (slice) | 0.0 | 0.00391 | inf | `BenchmarkSetitemSlice` | | `__setitem__` (slice with skip) | 0.0 | 0.0 | 1.0 | `BenchmarkSetitemSliceSkip` | | `sort` (balanced) | 0.0 | 0.13672 | inf | `BenchmarkSortBalanced` | | `sort` (fastest) | 0.0 | 0.10547 | inf | `BenchmarkSortFastest` | | `sort` (memory_saving) | 0.0 | 0.0 | 1.0 | `BenchmarkSortMemorySaving` |","title":"List"},{"location":"benchmark_results/py36/set/","text":"timing | subject | `builtin` | `sqlitecollections` | ratio | class | | :------ | --------: | ------------------: | ----: | :---- | | `add (existing item)` | 0.00565 | 0.00721 | 1.27502 | `BenchmarkAddExistingItem` | | `add (new item)` | 0.00543 | 0.00886 | 1.63306 | `BenchmarkAddNewItem` | | `__and__` | 0.00542 | 0.01395 | 2.57384 | `BenchmarkAnd` | | `clear` | 0.00542 | 0.00978 | 1.80468 | `BenchmarkClear` | | `__contains__` | 0.00506 | 0.00521 | 1.02882 | `BenchmarkContains` | | `copy` | 0.00508 | 0.00964 | 1.89669 | `BenchmarkCopy` | | `difference` | 0.00518 | 0.01183 | 2.28248 | `BenchmarkDifference` | | `discard` | 0.0053 | 0.00784 | 1.47849 | `BenchmarkDiscard` | | `discard (no changes)` | 0.00534 | 0.00673 | 1.26005 | `BenchmarkDiscardNoChanges` | | `__ge__` | 0.0049 | 0.00499 | 1.01963 | `BenchmarkGe` | | `__ge__` (not greater than or equals to) | 0.00488 | 0.00503 | 1.0303 | `BenchmarkGeNot` | | `__gt__` | 0.00483 | 0.0077 | 1.59247 | `BenchmarkGt` | | `__gt__` (not greater than) | 0.0048 | 0.03401 | 7.08647 | `BenchmarkGtNot` | | `__iand__` | 0.00477 | 0.009 | 1.88484 | `BenchmarkIand` | | `__init__` | 0.00473 | 0.01853 | 3.91849 | `BenchmarkInit` | | `intersection` | 0.00528 | 0.01214 | 2.30146 | `BenchmarkIntersection` | | `intersection_update` | 0.0047 | 0.00932 | 1.9841 | `BenchmarkIntersectionUpdate` | | `__ior__` | 0.00513 | 0.01055 | 2.05532 | `BenchmarkIor` | | `isdisjoint` | 0.00505 | 0.00522 | 1.03549 | `BenchmarkIsdisjoint` | | `isdisjoint` (not disjoint) | 0.0049 | 0.00499 | 1.01901 | `BenchmarkIsdisjointNot` | | `issubset` | 0.00503 | 0.03389 | 6.74462 | `BenchmarkIssubset` | | `issubset` (not subset) | 0.00495 | 0.01236 | 2.49425 | `BenchmarkIssubsetNot` | | `issuperset` | 0.00499 | 0.02617 | 5.24638 | `BenchmarkIssuperset` | | `issuperset` (not superset) | 0.00484 | 0.00519 | 1.0734 | `BenchmarkIssupersetNot` | | `__ixor__` | 0.0054 | 0.04284 | 7.93658 | `BenchmarkIxor` | | `__le__` | 0.00507 | 0.00564 | 1.1114 | `BenchmarkLe` | | `__le__` (not less than or equals to) | 0.00492 | 0.00506 | 1.0284 | `BenchmarkLeNot` | | `__len__` | 0.00493 | 0.00493 | 0.9989 | `BenchmarkLen` | | `__lt__` | 0.0049 | 0.00585 | 1.19358 | `BenchmarkLt` | | `__lt__` (not less than) | 0.00495 | 0.00491 | 0.99156 | `BenchmarkLtNot` | | `__contains__` (unsuccessful search) | 0.00482 | 0.00515 | 1.06928 | `BenchmarkNotContains` | | `__or__` | 0.00522 | 0.01247 | 2.3867 | `BenchmarkOr` | | `pop` | 0.00501 | 0.00802 | 1.60051 | `BenchmarkPop` | | `remove` | 0.00526 | 0.00897 | 1.70649 | `BenchmarkRemove` | | `__sub__` | 0.00503 | 0.00998 | 1.98327 | `BenchmarkSub` | | `symmetric_difference` | 0.00501 | 0.0457 | 9.11761 | `BenchmarkSymmetricDifference` | | `symmetric_difference_update` | 0.0048 | 0.04321 | 9.00947 | `BenchmarkSymmetricDifferenceUpdate` | | `union` | 0.005 | 0.01309 | 2.61962 | `BenchmarkUnion` | | `update` | 0.00494 | 0.00961 | 1.94606 | `BenchmarkUpdate` | | `__xor__` | 0.00496 | 0.04639 | 9.34296 | `BenchmarkXor` | approximate memory usage | subject | `builtin` | `sqlitecollections` | ratio | class | | :------ | --------: | ------------------: | ----: | :---- | | `add (existing item)` | 0.0 | 0.0 | 1.0 | `BenchmarkAddExistingItem` | | `add (new item)` | 0.0 | 0.0 | 1.0 | `BenchmarkAddNewItem` | | `__and__` | 0.0 | 0.0 | 1.0 | `BenchmarkAnd` | | `clear` | 0.0 | 0.0 | 1.0 | `BenchmarkClear` | | `__contains__` | 0.0 | 0.0 | 1.0 | `BenchmarkContains` | | `copy` | 0.0 | 0.0 | 1.0 | `BenchmarkCopy` | | `difference` | 0.0 | 0.0 | 1.0 | `BenchmarkDifference` | | `discard` | 0.0 | 0.0 | 1.0 | `BenchmarkDiscard` | | `discard (no changes)` | 0.0 | 0.0 | 1.0 | `BenchmarkDiscardNoChanges` | | `__ge__` | 0.0 | 0.0 | 1.0 | `BenchmarkGe` | | `__ge__` (not greater than or equals to) | 0.0 | 0.0 | 1.0 | `BenchmarkGeNot` | | `__gt__` | 0.0 | 0.0 | 1.0 | `BenchmarkGt` | | `__gt__` (not greater than) | 0.0 | 0.0 | 1.0 | `BenchmarkGtNot` | | `__iand__` | 0.0 | 0.0 | 1.0 | `BenchmarkIand` | | `__init__` | 0.0 | 0.0 | 1.0 | `BenchmarkInit` | | `intersection` | 0.0 | 0.0 | 1.0 | `BenchmarkIntersection` | | `intersection_update` | 0.0 | 0.0 | 1.0 | `BenchmarkIntersectionUpdate` | | `__ior__` | 0.0 | 0.0 | 1.0 | `BenchmarkIor` | | `isdisjoint` | 0.0 | 0.0 | 1.0 | `BenchmarkIsdisjoint` | | `isdisjoint` (not disjoint) | 0.0 | 0.0 | 1.0 | `BenchmarkIsdisjointNot` | | `issubset` | 0.0 | 0.0 | 1.0 | `BenchmarkIssubset` | | `issubset` (not subset) | 0.0 | 0.0 | 1.0 | `BenchmarkIssubsetNot` | | `issuperset` | 0.0 | 0.0 | 1.0 | `BenchmarkIssuperset` | | `issuperset` (not superset) | 0.0 | 0.0 | 1.0 | `BenchmarkIssupersetNot` | | `__ixor__` | 0.0 | 0.0 | 1.0 | `BenchmarkIxor` | | `__le__` | 0.0 | 0.0 | 1.0 | `BenchmarkLe` | | `__le__` (not less than or equals to) | 0.0 | 0.0 | 1.0 | `BenchmarkLeNot` | | `__len__` | 0.0 | 0.0 | 1.0 | `BenchmarkLen` | | `__lt__` | 0.0 | 0.0 | 1.0 | `BenchmarkLt` | | `__lt__` (not less than) | 0.0 | 0.0 | 1.0 | `BenchmarkLtNot` | | `__contains__` (unsuccessful search) | 0.0 | 0.0 | 1.0 | `BenchmarkNotContains` | | `__or__` | 0.0 | 0.0 | 1.0 | `BenchmarkOr` | | `pop` | 0.0 | 0.0 | 1.0 | `BenchmarkPop` | | `remove` | 0.0 | 0.0 | 1.0 | `BenchmarkRemove` | | `__sub__` | 0.0 | 0.0 | 1.0 | `BenchmarkSub` | | `symmetric_difference` | 0.0 | 0.0 | 1.0 | `BenchmarkSymmetricDifference` | | `symmetric_difference_update` | 0.0 | 0.0 | 1.0 | `BenchmarkSymmetricDifferenceUpdate` | | `union` | 0.0 | 0.0 | 1.0 | `BenchmarkUnion` | | `update` | 0.0 | 0.0 | 1.0 | `BenchmarkUpdate` | | `__xor__` | 0.0 | 0.0 | 1.0 | `BenchmarkXor` |","title":"Set"},{"location":"benchmark_results/py37/dict/","text":"timing | subject | `builtin` | `sqlitecollections` | ratio | class | | :------ | --------: | ------------------: | ----: | :---- | | `clear` | 0.00415 | 0.00598 | 1.44073 | `BenchmarkClear` | | `__contains__` | 0.00401 | 0.00417 | 1.03971 | `BenchmarkContains` | | `copy` | 0.00404 | 0.0081 | 2.00357 | `BenchmarkCopy` | | `__delitem__` | 0.00408 | 0.00625 | 1.52987 | `BenchmarkDelitem` | | `get` | 0.00407 | 0.00408 | 1.0029 | `BenchmarkGet` | | `get (unsuccessful search)` | 0.00411 | 0.00411 | 1.0011 | `BenchmarkGetDefault` | | `__getitem__` | 0.00398 | 0.00414 | 1.03966 | `BenchmarkGetitem` | | `__init__` | 0.00415 | 0.04236 | 10.20978 | `BenchmarkInit` | | `items` | 0.00443 | 0.01245 | 2.80834 | `BenchmarkItems` | | `__iter__` | 0.00423 | 0.00846 | 2.00154 | `BenchmarkIter` | | `keys` | 0.00404 | 0.00837 | 2.0694 | `BenchmarkKeys` | | `__len__` | 0.00396 | 0.00408 | 1.02966 | `BenchmarkLen` | | `__contains__` (unsuccessful search) | 0.00397 | 0.00418 | 1.05403 | `BenchmarkNotContains` | | `pop` | 0.00419 | 0.0067 | 1.60009 | `BenchmarkPop` | | `pop (unsuccessful search)` | 0.00413 | 0.00555 | 1.34593 | `BenchmarkPopDefault` | | `popitem` | 0.00405 | 0.00687 | 1.69731 | `BenchmarkPopitem` | | `setdefault` | 0.00415 | 0.00558 | 1.34466 | `BenchmarkSetdefault` | | `setdefault (unsuccessful search)` | 0.0041 | 0.006 | 1.46098 | `BenchmarkSetdefaultAddItem` | | `__setitem__` (add new item) | 0.00408 | 0.00673 | 1.65015 | `BenchmarkSetitemAddNewItem` | | `__setitem__` (replace) | 0.00424 | 0.00661 | 1.55939 | `BenchmarkSetitemReplace` | | `update` | 0.00427 | 0.00669 | 1.56924 | `BenchmarkUpdate` | | `update` (many) | 0.00512 | 0.55734 | 108.82583 | `BenchmarkUpdateMany` | | `values` | 0.004 | 0.00827 | 2.06529 | `BenchmarkValues` | approximate memory usage | subject | `builtin` | `sqlitecollections` | ratio | class | | :------ | --------: | ------------------: | ----: | :---- | | `clear` | 0.0 | 0.0 | 1.0 | `BenchmarkClear` | | `__contains__` | 0.0 | 0.0 | 1.0 | `BenchmarkContains` | | `copy` | 0.05859 | 0.0 | 0.0 | `BenchmarkCopy` | | `__delitem__` | 0.0 | 0.0 | 1.0 | `BenchmarkDelitem` | | `get` | 0.0 | 0.0 | 1.0 | `BenchmarkGet` | | `get (unsuccessful search)` | 0.0 | 0.0 | 1.0 | `BenchmarkGetDefault` | | `__getitem__` | 0.0 | 0.0 | 1.0 | `BenchmarkGetitem` | | `__init__` | 0.04297 | 0.01562 | 0.36364 | `BenchmarkInit` | | `items` | 0.125 | 0.125 | 1.0 | `BenchmarkItems` | | `__iter__` | 0.0 | 0.0 | 1.0 | `BenchmarkIter` | | `keys` | 0.0 | 0.0 | 1.0 | `BenchmarkKeys` | | `__len__` | 0.0 | 0.0 | 1.0 | `BenchmarkLen` | | `__contains__` (unsuccessful search) | 0.0 | 0.0 | 1.0 | `BenchmarkNotContains` | | `pop` | 0.0 | 0.0 | 1.0 | `BenchmarkPop` | | `pop (unsuccessful search)` | 0.0 | 0.0 | 1.0 | `BenchmarkPopDefault` | | `popitem` | 0.0 | 0.0 | 1.0 | `BenchmarkPopitem` | | `setdefault` | 0.0 | 0.0 | 1.0 | `BenchmarkSetdefault` | | `setdefault (unsuccessful search)` | 0.0 | 0.0 | 1.0 | `BenchmarkSetdefaultAddItem` | | `__setitem__` (add new item) | 0.0 | 0.0 | 1.0 | `BenchmarkSetitemAddNewItem` | | `__setitem__` (replace) | 0.0 | 0.0 | 1.0 | `BenchmarkSetitemReplace` | | `update` | 0.0 | 0.0 | 1.0 | `BenchmarkUpdate` | | `update` (many) | 0.0 | 0.0 | 1.0 | `BenchmarkUpdateMany` | | `values` | 0.0 | 0.0 | 1.0 | `BenchmarkValues` |","title":"Dict"},{"location":"benchmark_results/py37/list/","text":"timing | subject | `builtin` | `sqlitecollections` | ratio | class | | :------ | --------: | ------------------: | ----: | :---- | | `__add__` | 0.00396 | 0.00977 | 2.46423 | `BenchmarkAdd` | | `append` | 0.0041 | 0.00636 | 1.55241 | `BenchmarkAppend` | | `clear` | 0.00427 | 0.00604 | 1.41642 | `BenchmarkClear` | | `__contains__` | 0.00421 | 0.00404 | 0.96075 | `BenchmarkContains` | | `copy` | 0.00406 | 0.00805 | 1.97932 | `BenchmarkCopy` | | `count` | 0.00392 | 0.00415 | 1.05765 | `BenchmarkCount` | | `__init__` | 0.00425 | 0.02028 | 4.7769 | `BenchmarkCreateWithInitialData` | | `__delitem__` | 0.00438 | 0.07893 | 18.02007 | `BenchmarkDelitem` | | `__delitem__` (slice) | 0.00396 | 0.14983 | 37.80197 | `BenchmarkDelitemSlice` | | `__delitem__` (slice with skip) | 0.00446 | 0.15679 | 35.18173 | `BenchmarkDelitemSliceSkip` | | `extend` | 0.0043 | 0.00637 | 1.48125 | `BenchmarkExtend` | | `__getitem__` | 0.00398 | 0.00434 | 1.08972 | `BenchmarkGetitem` | | `__getitem__` (slice) | 0.00444 | 0.08771 | 19.76696 | `BenchmarkGetitemSlice` | | `__getitem__` (slice with skip) | 0.00408 | 0.01061 | 2.59831 | `BenchmarkGetitemSliceSkip` | | `__iadd__` | 0.00415 | 0.00666 | 1.60435 | `BenchmarkIadd` | | `__imult__` | 0.00397 | 0.22874 | 57.64312 | `BenchmarkImult` | | `index` | 0.00395 | 0.0044 | 1.11211 | `BenchmarkIndex` | | `index` (unsuccessful search) | 0.00434 | 0.00441 | 1.01584 | `BenchmarkIndexUnsuccessfulSearch` | | `insert` | 0.00399 | 0.14872 | 37.3002 | `BenchmarkInsert` | | `__len__` | 0.00404 | 0.00438 | 1.08417 | `BenchmarkLen` | | `__mult__` | 0.00407 | 0.2316 | 56.94368 | `BenchmarkMult` | | `__contains__` (unsuccessful search) | 0.00412 | 0.00428 | 1.03998 | `BenchmarkNotContains` | | `pop` | 0.00414 | 0.07814 | 18.86222 | `BenchmarkPop` | | `remove` | 0.00423 | 0.11157 | 26.39131 | `BenchmarkRemove` | | `__setitem__` | 0.00426 | 0.00664 | 1.55711 | `BenchmarkSetitem` | | `__setitem__` (slice) | 0.00413 | 0.15595 | 37.77537 | `BenchmarkSetitemSlice` | | `__setitem__` (slice with skip) | 0.00412 | 0.01493 | 3.62826 | `BenchmarkSetitemSliceSkip` | | `sort` (balanced) | 0.00426 | 0.33009 | 77.40911 | `BenchmarkSortBalanced` | | `sort` (fastest) | 0.00437 | 0.34152 | 78.21553 | `BenchmarkSortFastest` | | `sort` (memory_saving) | 0.00435 | 3.42019 | 786.67012 | `BenchmarkSortMemorySaving` | approximate memory usage | subject | `builtin` | `sqlitecollections` | ratio | class | | :------ | --------: | ------------------: | ----: | :---- | | `__add__` | 0.0 | 0.0 | 1.0 | `BenchmarkAdd` | | `append` | 0.0 | 0.0 | 1.0 | `BenchmarkAppend` | | `clear` | 0.0 | 0.0 | 1.0 | `BenchmarkClear` | | `__contains__` | 0.0 | 0.0 | 1.0 | `BenchmarkContains` | | `copy` | 0.0 | 0.0 | 1.0 | `BenchmarkCopy` | | `count` | 0.0 | 0.0 | 1.0 | `BenchmarkCount` | | `__init__` | 0.0 | 0.0 | 1.0 | `BenchmarkCreateWithInitialData` | | `__delitem__` | 0.0 | 0.0 | 1.0 | `BenchmarkDelitem` | | `__delitem__` (slice) | 0.0 | 0.0 | 1.0 | `BenchmarkDelitemSlice` | | `__delitem__` (slice with skip) | 0.0 | 0.0 | 1.0 | `BenchmarkDelitemSliceSkip` | | `extend` | 0.0 | 0.0 | 1.0 | `BenchmarkExtend` | | `__getitem__` | 0.0 | 0.0 | 1.0 | `BenchmarkGetitem` | | `__getitem__` (slice) | 0.0 | 0.0 | 1.0 | `BenchmarkGetitemSlice` | | `__getitem__` (slice with skip) | 0.0 | 0.0 | 1.0 | `BenchmarkGetitemSliceSkip` | | `__iadd__` | 0.0 | 0.0 | 1.0 | `BenchmarkIadd` | | `__imult__` | 0.0 | 0.0 | 1.0 | `BenchmarkImult` | | `index` | 0.0 | 0.0 | 1.0 | `BenchmarkIndex` | | `index` (unsuccessful search) | 0.0 | 0.0 | 1.0 | `BenchmarkIndexUnsuccessfulSearch` | | `insert` | 0.0 | 0.0 | 1.0 | `BenchmarkInsert` | | `__len__` | 0.0 | 0.0 | 1.0 | `BenchmarkLen` | | `__mult__` | 0.0 | 0.0 | 1.0 | `BenchmarkMult` | | `__contains__` (unsuccessful search) | 0.0 | 0.0 | 1.0 | `BenchmarkNotContains` | | `pop` | 0.0 | 0.0 | 1.0 | `BenchmarkPop` | | `remove` | 0.0 | 0.0 | 1.0 | `BenchmarkRemove` | | `__setitem__` | 0.0 | 0.0 | 1.0 | `BenchmarkSetitem` | | `__setitem__` (slice) | 0.0 | 0.0 | 1.0 | `BenchmarkSetitemSlice` | | `__setitem__` (slice with skip) | 0.0 | 0.0 | 1.0 | `BenchmarkSetitemSliceSkip` | | `sort` (balanced) | 0.0 | 0.0 | 1.0 | `BenchmarkSortBalanced` | | `sort` (fastest) | 0.0 | 0.05078 | inf | `BenchmarkSortFastest` | | `sort` (memory_saving) | 0.0 | 0.0 | 1.0 | `BenchmarkSortMemorySaving` |","title":"List"},{"location":"benchmark_results/py37/set/","text":"timing | subject | `builtin` | `sqlitecollections` | ratio | class | | :------ | --------: | ------------------: | ----: | :---- | | `add (existing item)` | 0.00416 | 0.00561 | 1.34692 | `BenchmarkAddExistingItem` | | `add (new item)` | 0.00466 | 0.0364 | 7.8132 | `BenchmarkAddNewItem` | | `__and__` | 0.00413 | 0.00952 | 2.30419 | `BenchmarkAnd` | | `clear` | 0.00409 | 0.00596 | 1.45433 | `BenchmarkClear` | | `__contains__` | 0.00421 | 0.00415 | 0.98574 | `BenchmarkContains` | | `copy` | 0.00407 | 0.00804 | 1.97488 | `BenchmarkCopy` | | `difference` | 0.00414 | 0.00766 | 1.84854 | `BenchmarkDifference` | | `discard` | 0.00395 | 0.00595 | 1.50459 | `BenchmarkDiscard` | | `discard (no changes)` | 0.00411 | 0.00546 | 1.32834 | `BenchmarkDiscardNoChanges` | | `__ge__` | 0.00411 | 0.00439 | 1.06659 | `BenchmarkGe` | | `__ge__` (not greater than or equals to) | 0.00387 | 0.00533 | 1.37613 | `BenchmarkGeNot` | | `__gt__` | 0.00412 | 0.00634 | 1.5405 | `BenchmarkGt` | | `__gt__` (not greater than) | 0.00416 | 0.03191 | 7.67408 | `BenchmarkGtNot` | | `__iand__` | 0.00415 | 0.00745 | 1.79369 | `BenchmarkIand` | | `__init__` | 0.00391 | 0.0155 | 3.96175 | `BenchmarkInit` | | `intersection` | 0.00395 | 0.00976 | 2.47357 | `BenchmarkIntersection` | | `intersection_update` | 0.00402 | 0.00762 | 1.89524 | `BenchmarkIntersectionUpdate` | | `__ior__` | 0.00403 | 0.00814 | 2.02124 | `BenchmarkIor` | | `isdisjoint` | 0.00408 | 0.00415 | 1.0158 | `BenchmarkIsdisjoint` | | `isdisjoint` (not disjoint) | 0.00378 | 0.00431 | 1.13826 | `BenchmarkIsdisjointNot` | | `issubset` | 0.00408 | 0.02909 | 7.13826 | `BenchmarkIssubset` | | `issubset` (not subset) | 0.00411 | 0.00974 | 2.37151 | `BenchmarkIssubsetNot` | | `issuperset` | 0.00401 | 0.02484 | 6.19022 | `BenchmarkIssuperset` | | `issuperset` (not superset) | 0.00419 | 0.00508 | 1.21046 | `BenchmarkIssupersetNot` | | `__ixor__` | 0.00417 | 0.0401 | 9.62379 | `BenchmarkIxor` | | `__le__` | 0.00425 | 0.00516 | 1.21292 | `BenchmarkLe` | | `__le__` (not less than or equals to) | 0.00445 | 0.00434 | 0.97659 | `BenchmarkLeNot` | | `__len__` | 0.00423 | 0.00407 | 0.96171 | `BenchmarkLen` | | `__lt__` | 0.00416 | 0.00514 | 1.23591 | `BenchmarkLt` | | `__lt__` (not less than) | 0.00412 | 0.00402 | 0.97548 | `BenchmarkLtNot` | | `__contains__` (unsuccessful search) | 0.00401 | 0.00428 | 1.0688 | `BenchmarkNotContains` | | `__or__` | 0.00397 | 0.01086 | 2.73381 | `BenchmarkOr` | | `pop` | 0.00412 | 0.00604 | 1.46509 | `BenchmarkPop` | | `remove` | 0.00426 | 0.00648 | 1.52226 | `BenchmarkRemove` | | `__sub__` | 0.00415 | 0.00776 | 1.87035 | `BenchmarkSub` | | `symmetric_difference` | 0.00416 | 0.04207 | 10.10969 | `BenchmarkSymmetricDifference` | | `symmetric_difference_update` | 0.00419 | 0.04009 | 9.57565 | `BenchmarkSymmetricDifferenceUpdate` | | `union` | 0.00407 | 0.01213 | 2.97754 | `BenchmarkUnion` | | `update` | 0.004 | 0.00733 | 1.83367 | `BenchmarkUpdate` | | `__xor__` | 0.00394 | 0.04243 | 10.76807 | `BenchmarkXor` | approximate memory usage | subject | `builtin` | `sqlitecollections` | ratio | class | | :------ | --------: | ------------------: | ----: | :---- | | `add (existing item)` | 0.0 | 0.0 | 1.0 | `BenchmarkAddExistingItem` | | `add (new item)` | 0.0 | 0.0 | 1.0 | `BenchmarkAddNewItem` | | `__and__` | 0.0 | 0.0 | 1.0 | `BenchmarkAnd` | | `clear` | 0.0 | 0.0 | 1.0 | `BenchmarkClear` | | `__contains__` | 0.0 | 0.0 | 1.0 | `BenchmarkContains` | | `copy` | 0.0 | 0.0 | 1.0 | `BenchmarkCopy` | | `difference` | 0.0 | 0.0 | 1.0 | `BenchmarkDifference` | | `discard` | 0.0 | 0.0 | 1.0 | `BenchmarkDiscard` | | `discard (no changes)` | 0.0 | 0.0 | 1.0 | `BenchmarkDiscardNoChanges` | | `__ge__` | 0.0 | 0.0 | 1.0 | `BenchmarkGe` | | `__ge__` (not greater than or equals to) | 0.0 | 0.0 | 1.0 | `BenchmarkGeNot` | | `__gt__` | 0.0 | 0.0 | 1.0 | `BenchmarkGt` | | `__gt__` (not greater than) | 0.0 | 0.0 | 1.0 | `BenchmarkGtNot` | | `__iand__` | 0.0 | 0.0 | 1.0 | `BenchmarkIand` | | `__init__` | 0.0 | 0.0 | 1.0 | `BenchmarkInit` | | `intersection` | 0.0 | 0.0 | 1.0 | `BenchmarkIntersection` | | `intersection_update` | 0.0 | 0.0 | 1.0 | `BenchmarkIntersectionUpdate` | | `__ior__` | 0.0 | 0.0 | 1.0 | `BenchmarkIor` | | `isdisjoint` | 0.0 | 0.0 | 1.0 | `BenchmarkIsdisjoint` | | `isdisjoint` (not disjoint) | 0.0 | 0.0 | 1.0 | `BenchmarkIsdisjointNot` | | `issubset` | 0.0 | 0.0 | 1.0 | `BenchmarkIssubset` | | `issubset` (not subset) | 0.0 | 0.0 | 1.0 | `BenchmarkIssubsetNot` | | `issuperset` | 0.0 | 0.0 | 1.0 | `BenchmarkIssuperset` | | `issuperset` (not superset) | 0.0 | 0.0 | 1.0 | `BenchmarkIssupersetNot` | | `__ixor__` | 0.0 | 0.0 | 1.0 | `BenchmarkIxor` | | `__le__` | 0.0 | 0.0 | 1.0 | `BenchmarkLe` | | `__le__` (not less than or equals to) | 0.0 | 0.0 | 1.0 | `BenchmarkLeNot` | | `__len__` | 0.0 | 0.0 | 1.0 | `BenchmarkLen` | | `__lt__` | 0.0 | 0.0 | 1.0 | `BenchmarkLt` | | `__lt__` (not less than) | 0.0 | 0.0 | 1.0 | `BenchmarkLtNot` | | `__contains__` (unsuccessful search) | 0.0 | 0.0 | 1.0 | `BenchmarkNotContains` | | `__or__` | 0.0 | 0.0 | 1.0 | `BenchmarkOr` | | `pop` | 0.0 | 0.0 | 1.0 | `BenchmarkPop` | | `remove` | 0.0 | 0.0 | 1.0 | `BenchmarkRemove` | | `__sub__` | 0.0 | 0.0 | 1.0 | `BenchmarkSub` | | `symmetric_difference` | 0.0 | 0.0 | 1.0 | `BenchmarkSymmetricDifference` | | `symmetric_difference_update` | 0.0 | 0.0 | 1.0 | `BenchmarkSymmetricDifferenceUpdate` | | `union` | 0.0 | 0.0 | 1.0 | `BenchmarkUnion` | | `update` | 0.0 | 0.0 | 1.0 | `BenchmarkUpdate` | | `__xor__` | 0.0 | 0.0 | 1.0 | `BenchmarkXor` |","title":"Set"},{"location":"benchmark_results/py38/dict/","text":"timing | subject | `builtin` | `sqlitecollections` | ratio | class | | :------ | --------: | ------------------: | ----: | :---- | | `clear` | 0.0037 | 0.00585 | 1.58086 | `BenchmarkClear` | | `__contains__` | 0.0038 | 0.00383 | 1.00863 | `BenchmarkContains` | | `copy` | 0.00365 | 0.00807 | 2.21306 | `BenchmarkCopy` | | `__delitem__` | 0.00451 | 0.00598 | 1.32557 | `BenchmarkDelitem` | | `get` | 0.00391 | 0.00399 | 1.02031 | `BenchmarkGet` | | `get (unsuccessful search)` | 0.00379 | 0.00391 | 1.02992 | `BenchmarkGetDefault` | | `__getitem__` | 0.00373 | 0.00383 | 1.02791 | `BenchmarkGetitem` | | `__init__` | 0.00374 | 0.03666 | 9.80975 | `BenchmarkInit` | | `items` | 0.00413 | 0.01065 | 2.57666 | `BenchmarkItems` | | `__iter__` | 0.0039 | 0.00758 | 1.94134 | `BenchmarkIter` | | `keys` | 0.0039 | 0.00771 | 1.97696 | `BenchmarkKeys` | | `__len__` | 0.00373 | 0.00391 | 1.04818 | `BenchmarkLen` | | `__contains__` (unsuccessful search) | 0.0038 | 0.00397 | 1.04479 | `BenchmarkNotContains` | | `pop` | 0.00378 | 0.00631 | 1.66769 | `BenchmarkPop` | | `pop (unsuccessful search)` | 0.00373 | 0.00533 | 1.42665 | `BenchmarkPopDefault` | | `popitem` | 0.00372 | 0.00704 | 1.89144 | `BenchmarkPopitem` | | `reversed` | 0.00389 | 0.00721 | 1.85253 | `BenchmarkReversed` | | `setdefault` | 0.00372 | 0.00514 | 1.38128 | `BenchmarkSetdefault` | | `setdefault (unsuccessful search)` | 0.00374 | 0.00558 | 1.49191 | `BenchmarkSetdefaultAddItem` | | `__setitem__` (add new item) | 0.00367 | 0.00644 | 1.75164 | `BenchmarkSetitemAddNewItem` | | `__setitem__` (replace) | 0.00377 | 0.00817 | 2.16613 | `BenchmarkSetitemReplace` | | `update` | 0.00381 | 0.00654 | 1.71851 | `BenchmarkUpdate` | | `update` (many) | 0.00466 | 0.55765 | 119.71271 | `BenchmarkUpdateMany` | | `values` | 0.00389 | 0.00728 | 1.8729 | `BenchmarkValues` | approximate memory usage | subject | `builtin` | `sqlitecollections` | ratio | class | | :------ | --------: | ------------------: | ----: | :---- | | `clear` | 0.0 | 0.0 | 1.0 | `BenchmarkClear` | | `__contains__` | 0.0 | 0.00391 | inf | `BenchmarkContains` | | `copy` | 0.05078 | 0.0 | 0.0 | `BenchmarkCopy` | | `__delitem__` | 0.0 | 0.0 | 1.0 | `BenchmarkDelitem` | | `get` | 0.0 | 0.0 | 1.0 | `BenchmarkGet` | | `get (unsuccessful search)` | 0.0 | 0.0 | 1.0 | `BenchmarkGetDefault` | | `__getitem__` | 0.0 | 0.0 | 1.0 | `BenchmarkGetitem` | | `__init__` | 0.01172 | 0.01172 | 1.0 | `BenchmarkInit` | | `items` | 0.125 | 0.125 | 1.0 | `BenchmarkItems` | | `__iter__` | 0.0 | 0.0 | 1.0 | `BenchmarkIter` | | `keys` | 0.0 | 0.0 | 1.0 | `BenchmarkKeys` | | `__len__` | 0.0 | 0.0 | 1.0 | `BenchmarkLen` | | `__contains__` (unsuccessful search) | 0.0 | 0.0 | 1.0 | `BenchmarkNotContains` | | `pop` | 0.0 | 0.0 | 1.0 | `BenchmarkPop` | | `pop (unsuccessful search)` | 0.0 | 0.0 | 1.0 | `BenchmarkPopDefault` | | `popitem` | 0.0 | 0.0 | 1.0 | `BenchmarkPopitem` | | `reversed` | 0.0 | 0.0 | 1.0 | `BenchmarkReversed` | | `setdefault` | 0.0 | 0.0 | 1.0 | `BenchmarkSetdefault` | | `setdefault (unsuccessful search)` | 0.0 | 0.0 | 1.0 | `BenchmarkSetdefaultAddItem` | | `__setitem__` (add new item) | 0.0 | 0.0 | 1.0 | `BenchmarkSetitemAddNewItem` | | `__setitem__` (replace) | 0.0 | 0.0 | 1.0 | `BenchmarkSetitemReplace` | | `update` | 0.0 | 0.0 | 1.0 | `BenchmarkUpdate` | | `update` (many) | 0.0 | 0.0 | 1.0 | `BenchmarkUpdateMany` | | `values` | 0.00391 | 0.0 | 0.0 | `BenchmarkValues` |","title":"Dict"},{"location":"benchmark_results/py38/list/","text":"timing | subject | `builtin` | `sqlitecollections` | ratio | class | | :------ | --------: | ------------------: | ----: | :---- | | `__add__` | 0.00381 | 0.00901 | 2.36823 | `BenchmarkAdd` | | `append` | 0.0038 | 0.00611 | 1.60772 | `BenchmarkAppend` | | `clear` | 0.00404 | 0.00615 | 1.52299 | `BenchmarkClear` | | `__contains__` | 0.00367 | 0.00388 | 1.05675 | `BenchmarkContains` | | `copy` | 0.00372 | 0.0081 | 2.17909 | `BenchmarkCopy` | | `count` | 0.00384 | 0.00409 | 1.06489 | `BenchmarkCount` | | `__init__` | 0.00381 | 0.01898 | 4.97857 | `BenchmarkCreateWithInitialData` | | `__delitem__` | 0.00408 | 0.07815 | 19.17761 | `BenchmarkDelitem` | | `__delitem__` (slice) | 0.00391 | 0.14994 | 38.31443 | `BenchmarkDelitemSlice` | | `__delitem__` (slice with skip) | 0.00411 | 0.1544 | 37.60432 | `BenchmarkDelitemSliceSkip` | | `extend` | 0.00372 | 0.00633 | 1.70245 | `BenchmarkExtend` | | `__getitem__` | 0.00435 | 0.00403 | 0.92785 | `BenchmarkGetitem` | | `__getitem__` (slice) | 0.00398 | 0.08685 | 21.80415 | `BenchmarkGetitemSlice` | | `__getitem__` (slice with skip) | 0.00358 | 0.01063 | 2.96463 | `BenchmarkGetitemSliceSkip` | | `__iadd__` | 0.00404 | 0.00629 | 1.55741 | `BenchmarkIadd` | | `__imult__` | 0.00401 | 0.22614 | 56.40096 | `BenchmarkImult` | | `index` | 0.00391 | 0.00408 | 1.04382 | `BenchmarkIndex` | | `index` (unsuccessful search) | 0.00391 | 0.00469 | 1.19852 | `BenchmarkIndexUnsuccessfulSearch` | | `insert` | 0.00411 | 0.1509 | 36.73644 | `BenchmarkInsert` | | `__len__` | 0.00365 | 0.00383 | 1.04934 | `BenchmarkLen` | | `__mult__` | 0.00381 | 0.22907 | 60.1707 | `BenchmarkMult` | | `__contains__` (unsuccessful search) | 0.00389 | 0.00427 | 1.09647 | `BenchmarkNotContains` | | `pop` | 0.00438 | 0.07882 | 18.00053 | `BenchmarkPop` | | `remove` | 0.00403 | 0.11301 | 28.07294 | `BenchmarkRemove` | | `__setitem__` | 0.00415 | 0.00662 | 1.59717 | `BenchmarkSetitem` | | `__setitem__` (slice) | 0.00421 | 0.15494 | 36.79212 | `BenchmarkSetitemSlice` | | `__setitem__` (slice with skip) | 0.00393 | 0.01512 | 3.8508 | `BenchmarkSetitemSliceSkip` | | `sort` (balanced) | 0.00445 | 0.32887 | 73.90602 | `BenchmarkSortBalanced` | | `sort` (fastest) | 0.00413 | 0.33383 | 80.88639 | `BenchmarkSortFastest` | | `sort` (memory_saving) | 0.00429 | 3.38302 | 788.53558 | `BenchmarkSortMemorySaving` | approximate memory usage | subject | `builtin` | `sqlitecollections` | ratio | class | | :------ | --------: | ------------------: | ----: | :---- | | `__add__` | 0.0 | 0.0 | 1.0 | `BenchmarkAdd` | | `append` | 0.0 | 0.0 | 1.0 | `BenchmarkAppend` | | `clear` | 0.0 | 0.0 | 1.0 | `BenchmarkClear` | | `__contains__` | 0.0 | 0.0 | 1.0 | `BenchmarkContains` | | `copy` | 0.0 | 0.0 | 1.0 | `BenchmarkCopy` | | `count` | 0.0 | 0.0 | 1.0 | `BenchmarkCount` | | `__init__` | 0.0 | 0.0 | 1.0 | `BenchmarkCreateWithInitialData` | | `__delitem__` | 0.0 | 0.0 | 1.0 | `BenchmarkDelitem` | | `__delitem__` (slice) | 0.0 | 0.0 | 1.0 | `BenchmarkDelitemSlice` | | `__delitem__` (slice with skip) | 0.0 | 0.0 | 1.0 | `BenchmarkDelitemSliceSkip` | | `extend` | 0.0 | 0.0 | 1.0 | `BenchmarkExtend` | | `__getitem__` | 0.0 | 0.0 | 1.0 | `BenchmarkGetitem` | | `__getitem__` (slice) | 0.0 | 0.0 | 1.0 | `BenchmarkGetitemSlice` | | `__getitem__` (slice with skip) | 0.0 | 0.0 | 1.0 | `BenchmarkGetitemSliceSkip` | | `__iadd__` | 0.0 | 0.0 | 1.0 | `BenchmarkIadd` | | `__imult__` | 0.0 | 0.0 | 1.0 | `BenchmarkImult` | | `index` | 0.0 | 0.0 | 1.0 | `BenchmarkIndex` | | `index` (unsuccessful search) | 0.0 | 0.0 | 1.0 | `BenchmarkIndexUnsuccessfulSearch` | | `insert` | 0.0 | 0.0 | 1.0 | `BenchmarkInsert` | | `__len__` | 0.0 | 0.0 | 1.0 | `BenchmarkLen` | | `__mult__` | 0.0 | 0.0 | 1.0 | `BenchmarkMult` | | `__contains__` (unsuccessful search) | 0.0 | 0.0 | 1.0 | `BenchmarkNotContains` | | `pop` | 0.0 | 0.0 | 1.0 | `BenchmarkPop` | | `remove` | 0.0 | 0.0 | 1.0 | `BenchmarkRemove` | | `__setitem__` | 0.0 | 0.0 | 1.0 | `BenchmarkSetitem` | | `__setitem__` (slice) | 0.0 | 0.0 | 1.0 | `BenchmarkSetitemSlice` | | `__setitem__` (slice with skip) | 0.0 | 0.0 | 1.0 | `BenchmarkSetitemSliceSkip` | | `sort` (balanced) | 0.0 | 0.0 | 1.0 | `BenchmarkSortBalanced` | | `sort` (fastest) | 0.0 | 0.0 | 1.0 | `BenchmarkSortFastest` | | `sort` (memory_saving) | 0.0 | 0.0 | 1.0 | `BenchmarkSortMemorySaving` |","title":"List"},{"location":"benchmark_results/py38/set/","text":"timing | subject | `builtin` | `sqlitecollections` | ratio | class | | :------ | --------: | ------------------: | ----: | :---- | | `add (existing item)` | 0.00376 | 0.00507 | 1.34855 | `BenchmarkAddExistingItem` | | `add (new item)` | 0.00373 | 0.0058 | 1.55606 | `BenchmarkAddNewItem` | | `__and__` | 0.00376 | 0.00966 | 2.56913 | `BenchmarkAnd` | | `clear` | 0.00371 | 0.00571 | 1.5382 | `BenchmarkClear` | | `__contains__` | 0.0036 | 0.00376 | 1.04392 | `BenchmarkContains` | | `copy` | 0.00366 | 0.00736 | 2.01158 | `BenchmarkCopy` | | `difference` | 0.00363 | 0.00756 | 2.08052 | `BenchmarkDifference` | | `discard` | 0.00373 | 0.00574 | 1.53767 | `BenchmarkDiscard` | | `discard (no changes)` | 0.0037 | 0.00514 | 1.38855 | `BenchmarkDiscardNoChanges` | | `__ge__` | 0.00382 | 0.00394 | 1.02955 | `BenchmarkGe` | | `__ge__` (not greater than or equals to) | 0.00372 | 0.00419 | 1.12589 | `BenchmarkGeNot` | | `__gt__` | 0.00373 | 0.00618 | 1.65744 | `BenchmarkGt` | | `__gt__` (not greater than) | 0.00358 | 0.03015 | 8.41908 | `BenchmarkGtNot` | | `__iand__` | 0.00372 | 0.00745 | 2.00612 | `BenchmarkIand` | | `__init__` | 0.00375 | 0.01483 | 3.95326 | `BenchmarkInit` | | `intersection` | 0.00375 | 0.01006 | 2.68198 | `BenchmarkIntersection` | | `intersection_update` | 0.00369 | 0.00759 | 2.05433 | `BenchmarkIntersectionUpdate` | | `__ior__` | 0.00366 | 0.0075 | 2.05144 | `BenchmarkIor` | | `isdisjoint` | 0.00373 | 0.00389 | 1.04183 | `BenchmarkIsdisjoint` | | `isdisjoint` (not disjoint) | 0.00375 | 0.00384 | 1.02239 | `BenchmarkIsdisjointNot` | | `issubset` | 0.00377 | 0.02827 | 7.49357 | `BenchmarkIssubset` | | `issubset` (not subset) | 0.00378 | 0.00991 | 2.62417 | `BenchmarkIssubsetNot` | | `issuperset` | 0.00366 | 0.02288 | 6.25206 | `BenchmarkIssuperset` | | `issuperset` (not superset) | 0.00369 | 0.00404 | 1.09555 | `BenchmarkIssupersetNot` | | `__ixor__` | 0.00355 | 0.03684 | 10.38041 | `BenchmarkIxor` | | `__le__` | 0.0037 | 0.00446 | 1.20608 | `BenchmarkLe` | | `__le__` (not less than or equals to) | 0.0036 | 0.00387 | 1.07371 | `BenchmarkLeNot` | | `__len__` | 0.00374 | 0.00386 | 1.03335 | `BenchmarkLen` | | `__lt__` | 0.00383 | 0.00484 | 1.26268 | `BenchmarkLt` | | `__lt__` (not less than) | 0.00397 | 0.00374 | 0.94188 | `BenchmarkLtNot` | | `__contains__` (unsuccessful search) | 0.00377 | 0.00373 | 0.98769 | `BenchmarkNotContains` | | `__or__` | 0.00379 | 0.00998 | 2.63508 | `BenchmarkOr` | | `pop` | 0.00384 | 0.00592 | 1.54263 | `BenchmarkPop` | | `remove` | 0.00368 | 0.00614 | 1.67089 | `BenchmarkRemove` | | `__sub__` | 0.00363 | 0.00754 | 2.07641 | `BenchmarkSub` | | `symmetric_difference` | 0.00371 | 0.03908 | 10.51876 | `BenchmarkSymmetricDifference` | | `symmetric_difference_update` | 0.00362 | 0.03674 | 10.14439 | `BenchmarkSymmetricDifferenceUpdate` | | `union` | 0.0036 | 0.00983 | 2.73095 | `BenchmarkUnion` | | `update` | 0.00368 | 0.00723 | 1.96558 | `BenchmarkUpdate` | | `__xor__` | 0.00393 | 0.03986 | 10.1471 | `BenchmarkXor` | approximate memory usage | subject | `builtin` | `sqlitecollections` | ratio | class | | :------ | --------: | ------------------: | ----: | :---- | | `add (existing item)` | 0.0 | 0.0 | 1.0 | `BenchmarkAddExistingItem` | | `add (new item)` | 0.0 | 0.0 | 1.0 | `BenchmarkAddNewItem` | | `__and__` | 0.0 | 0.0 | 1.0 | `BenchmarkAnd` | | `clear` | 0.0 | 0.0 | 1.0 | `BenchmarkClear` | | `__contains__` | 0.0 | 0.0 | 1.0 | `BenchmarkContains` | | `copy` | 0.0 | 0.0 | 1.0 | `BenchmarkCopy` | | `difference` | 0.0 | 0.0 | 1.0 | `BenchmarkDifference` | | `discard` | 0.0 | 0.0 | 1.0 | `BenchmarkDiscard` | | `discard (no changes)` | 0.0 | 0.0 | 1.0 | `BenchmarkDiscardNoChanges` | | `__ge__` | 0.0 | 0.0 | 1.0 | `BenchmarkGe` | | `__ge__` (not greater than or equals to) | 0.0 | 0.0 | 1.0 | `BenchmarkGeNot` | | `__gt__` | 0.0 | 0.0 | 1.0 | `BenchmarkGt` | | `__gt__` (not greater than) | 0.0 | 0.0 | 1.0 | `BenchmarkGtNot` | | `__iand__` | 0.0 | 0.0 | 1.0 | `BenchmarkIand` | | `__init__` | 0.0 | 0.0 | 1.0 | `BenchmarkInit` | | `intersection` | 0.0 | 0.0 | 1.0 | `BenchmarkIntersection` | | `intersection_update` | 0.0 | 0.0 | 1.0 | `BenchmarkIntersectionUpdate` | | `__ior__` | 0.0 | 0.0 | 1.0 | `BenchmarkIor` | | `isdisjoint` | 0.0 | 0.0 | 1.0 | `BenchmarkIsdisjoint` | | `isdisjoint` (not disjoint) | 0.0 | 0.0 | 1.0 | `BenchmarkIsdisjointNot` | | `issubset` | 0.0 | 0.0 | 1.0 | `BenchmarkIssubset` | | `issubset` (not subset) | 0.0 | 0.0 | 1.0 | `BenchmarkIssubsetNot` | | `issuperset` | 0.0 | 0.0 | 1.0 | `BenchmarkIssuperset` | | `issuperset` (not superset) | 0.0 | 0.0 | 1.0 | `BenchmarkIssupersetNot` | | `__ixor__` | 0.0 | 0.0 | 1.0 | `BenchmarkIxor` | | `__le__` | 0.0 | 0.0 | 1.0 | `BenchmarkLe` | | `__le__` (not less than or equals to) | 0.0 | 0.0 | 1.0 | `BenchmarkLeNot` | | `__len__` | 0.0 | 0.0 | 1.0 | `BenchmarkLen` | | `__lt__` | 0.0 | 0.0 | 1.0 | `BenchmarkLt` | | `__lt__` (not less than) | 0.0 | 0.0 | 1.0 | `BenchmarkLtNot` | | `__contains__` (unsuccessful search) | 0.0 | 0.0 | 1.0 | `BenchmarkNotContains` | | `__or__` | 0.0 | 0.0 | 1.0 | `BenchmarkOr` | | `pop` | 0.0 | 0.0 | 1.0 | `BenchmarkPop` | | `remove` | 0.0 | 0.0 | 1.0 | `BenchmarkRemove` | | `__sub__` | 0.0 | 0.0 | 1.0 | `BenchmarkSub` | | `symmetric_difference` | 0.0 | 0.0 | 1.0 | `BenchmarkSymmetricDifference` | | `symmetric_difference_update` | 0.0 | 0.0 | 1.0 | `BenchmarkSymmetricDifferenceUpdate` | | `union` | 0.0 | 0.0 | 1.0 | `BenchmarkUnion` | | `update` | 0.0 | 0.0 | 1.0 | `BenchmarkUpdate` | | `__xor__` | 0.0 | 0.0 | 1.0 | `BenchmarkXor` |","title":"Set"},{"location":"benchmark_results/py39/dict/","text":"timing | subject | `builtin` | `sqlitecollections` | ratio | class | | :------ | --------: | ------------------: | ----: | :---- | | `clear` | 0.00529 | 0.00813 | 1.53562 | `BenchmarkClear` | | `__contains__` | 0.00531 | 0.00519 | 0.9763 | `BenchmarkContains` | | `copy` | 0.0054 | 0.01147 | 2.12417 | `BenchmarkCopy` | | `__delitem__` | 0.00539 | 0.00901 | 1.67102 | `BenchmarkDelitem` | | `get` | 0.00534 | 0.00544 | 1.01798 | `BenchmarkGet` | | `get (unsuccessful search)` | 0.00546 | 0.0061 | 1.11627 | `BenchmarkGetDefault` | | `__getitem__` | 0.00542 | 0.00546 | 1.00565 | `BenchmarkGetitem` | | `__init__` | 0.00566 | 0.04314 | 7.62605 | `BenchmarkInit` | | `__ior__` | 0.00537 | 0.00929 | 1.72847 | `BenchmarkIor` | | `__ior__` (many) | 0.00672 | 0.59071 | 87.86536 | `BenchmarkIorMany` | | `items` | 0.00588 | 0.01271 | 2.16055 | `BenchmarkItems` | | `__iter__` | 0.00567 | 0.00903 | 1.59149 | `BenchmarkIter` | | `keys` | 0.00528 | 0.00904 | 1.71253 | `BenchmarkKeys` | | `__len__` | 0.00533 | 0.0051 | 0.95666 | `BenchmarkLen` | | `__contains__` (unsuccessful search) | 0.00537 | 0.00513 | 0.95458 | `BenchmarkNotContains` | | `__or__` | 0.00529 | 0.04052 | 7.66303 | `BenchmarkOr` | | `__or__` (many) | 0.00651 | 0.69573 | 106.83618 | `BenchmarkOrMany` | | `pop` | 0.00532 | 0.00808 | 1.52008 | `BenchmarkPop` | | `pop (unsuccessful search)` | 0.00537 | 0.0068 | 1.26569 | `BenchmarkPopDefault` | | `popitem` | 0.00555 | 0.00867 | 1.56145 | `BenchmarkPopitem` | | `reversed` | 0.00526 | 0.00901 | 1.71182 | `BenchmarkReversed` | | `setdefault` | 0.00539 | 0.00695 | 1.28893 | `BenchmarkSetdefault` | | `setdefault (unsuccessful search)` | 0.00541 | 0.00722 | 1.33343 | `BenchmarkSetdefaultAddItem` | | `__setitem__` (add new item) | 0.00543 | 0.00818 | 1.50767 | `BenchmarkSetitemAddNewItem` | | `__setitem__` (replace) | 0.00552 | 0.0082 | 1.48469 | `BenchmarkSetitemReplace` | | `update` | 0.00601 | 0.0086 | 1.43107 | `BenchmarkUpdate` | | `update` (many) | 0.00658 | 0.58181 | 88.43353 | `BenchmarkUpdateMany` | | `values` | 0.00532 | 0.00852 | 1.60012 | `BenchmarkValues` | approximate memory usage | subject | `builtin` | `sqlitecollections` | ratio | class | | :------ | --------: | ------------------: | ----: | :---- | | `clear` | 0.0 | 0.0 | 1.0 | `BenchmarkClear` | | `__contains__` | 0.0 | 0.0 | 1.0 | `BenchmarkContains` | | `copy` | 0.0 | 0.0 | 1.0 | `BenchmarkCopy` | | `__delitem__` | 0.0 | 0.0 | 1.0 | `BenchmarkDelitem` | | `get` | 0.0 | 0.0 | 1.0 | `BenchmarkGet` | | `get (unsuccessful search)` | 0.0 | 0.0 | 1.0 | `BenchmarkGetDefault` | | `__getitem__` | 0.0 | 0.0 | 1.0 | `BenchmarkGetitem` | | `__init__` | 0.0 | 0.0 | 1.0 | `BenchmarkInit` | | `__ior__` | 0.0 | 0.0 | 1.0 | `BenchmarkIor` | | `__ior__` (many) | 0.12891 | 0.0 | 0.0 | `BenchmarkIorMany` | | `items` | 0.0 | 0.16406 | inf | `BenchmarkItems` | | `__iter__` | 0.0 | 0.0 | 1.0 | `BenchmarkIter` | | `keys` | 0.0 | 0.0 | 1.0 | `BenchmarkKeys` | | `__len__` | 0.0 | 0.0 | 1.0 | `BenchmarkLen` | | `__contains__` (unsuccessful search) | 0.0 | 0.0 | 1.0 | `BenchmarkNotContains` | | `__or__` | 0.0 | 0.0 | 1.0 | `BenchmarkOr` | | `__or__` (many) | 0.0 | 0.0 | 1.0 | `BenchmarkOrMany` | | `pop` | 0.0 | 0.0 | 1.0 | `BenchmarkPop` | | `pop (unsuccessful search)` | 0.0 | 0.0 | 1.0 | `BenchmarkPopDefault` | | `popitem` | 0.0 | 0.0 | 1.0 | `BenchmarkPopitem` | | `reversed` | 0.0 | 0.0 | 1.0 | `BenchmarkReversed` | | `setdefault` | 0.0 | 0.0 | 1.0 | `BenchmarkSetdefault` | | `setdefault (unsuccessful search)` | 0.0 | 0.0 | 1.0 | `BenchmarkSetdefaultAddItem` | | `__setitem__` (add new item) | 0.0 | 0.0 | 1.0 | `BenchmarkSetitemAddNewItem` | | `__setitem__` (replace) | 0.0 | 0.0 | 1.0 | `BenchmarkSetitemReplace` | | `update` | 0.0 | 0.0 | 1.0 | `BenchmarkUpdate` | | `update` (many) | 0.0 | 0.0 | 1.0 | `BenchmarkUpdateMany` | | `values` | 0.0 | 0.0 | 1.0 | `BenchmarkValues` |","title":"Dict"},{"location":"benchmark_results/py39/list/","text":"timing | subject | `builtin` | `sqlitecollections` | ratio | class | | :------ | --------: | ------------------: | ----: | :---- | | `__add__` | 0.00545 | 0.01293 | 2.37167 | `BenchmarkAdd` | | `append` | 0.00537 | 0.0083 | 1.54517 | `BenchmarkAppend` | | `clear` | 0.00552 | 0.00863 | 1.56424 | `BenchmarkClear` | | `__contains__` | 0.00547 | 0.00532 | 0.972 | `BenchmarkContains` | | `copy` | 0.00548 | 0.01071 | 1.95257 | `BenchmarkCopy` | | `count` | 0.00553 | 0.00531 | 0.96043 | `BenchmarkCount` | | `__init__` | 0.00558 | 0.02198 | 3.93622 | `BenchmarkCreateWithInitialData` | | `__delitem__` | 0.00545 | 0.08419 | 15.44657 | `BenchmarkDelitem` | | `__delitem__` (slice) | 0.00555 | 0.16119 | 29.05676 | `BenchmarkDelitemSlice` | | `__delitem__` (slice with skip) | 0.00542 | 0.16181 | 29.87835 | `BenchmarkDelitemSliceSkip` | | `extend` | 0.00558 | 0.00809 | 1.4518 | `BenchmarkExtend` | | `__getitem__` | 0.00565 | 0.00536 | 0.94928 | `BenchmarkGetitem` | | `__getitem__` (slice) | 0.00546 | 0.0928 | 16.98143 | `BenchmarkGetitemSlice` | | `__getitem__` (slice with skip) | 0.00554 | 0.01369 | 2.47056 | `BenchmarkGetitemSliceSkip` | | `__iadd__` | 0.00548 | 0.00807 | 1.47361 | `BenchmarkIadd` | | `__imult__` | 0.00545 | 0.24048 | 44.1031 | `BenchmarkImult` | | `index` | 0.00556 | 0.00544 | 0.97863 | `BenchmarkIndex` | | `index` (unsuccessful search) | 0.00551 | 0.00569 | 1.03166 | `BenchmarkIndexUnsuccessfulSearch` | | `insert` | 0.00562 | 0.15866 | 28.23257 | `BenchmarkInsert` | | `__len__` | 0.00552 | 0.00523 | 0.94775 | `BenchmarkLen` | | `__mult__` | 0.00545 | 0.24582 | 45.10767 | `BenchmarkMult` | | `__contains__` (unsuccessful search) | 0.00552 | 0.00529 | 0.95764 | `BenchmarkNotContains` | | `pop` | 0.00601 | 0.08457 | 14.07374 | `BenchmarkPop` | | `remove` | 0.00581 | 0.12075 | 20.76642 | `BenchmarkRemove` | | `__setitem__` | 0.0056 | 0.0082 | 1.46575 | `BenchmarkSetitem` | | `__setitem__` (slice) | 0.00557 | 0.16401 | 29.42012 | `BenchmarkSetitemSlice` | | `__setitem__` (slice with skip) | 0.00548 | 0.01726 | 3.14904 | `BenchmarkSetitemSliceSkip` | | `sort` (balanced) | 0.00568 | 0.34154 | 60.13294 | `BenchmarkSortBalanced` | | `sort` (fastest) | 0.00578 | 0.34473 | 59.64903 | `BenchmarkSortFastest` | | `sort` (memory_saving) | 0.0058 | 3.50546 | 604.88314 | `BenchmarkSortMemorySaving` | approximate memory usage | subject | `builtin` | `sqlitecollections` | ratio | class | | :------ | --------: | ------------------: | ----: | :---- | | `__add__` | 0.0 | 0.0 | 1.0 | `BenchmarkAdd` | | `append` | 0.0 | 0.0 | 1.0 | `BenchmarkAppend` | | `clear` | 0.0 | 0.0 | 1.0 | `BenchmarkClear` | | `__contains__` | 0.0 | 0.0 | 1.0 | `BenchmarkContains` | | `copy` | 0.0 | 0.0 | 1.0 | `BenchmarkCopy` | | `count` | 0.0 | 0.0 | 1.0 | `BenchmarkCount` | | `__init__` | 0.0 | 0.0 | 1.0 | `BenchmarkCreateWithInitialData` | | `__delitem__` | 0.0 | 0.0 | 1.0 | `BenchmarkDelitem` | | `__delitem__` (slice) | 0.0 | 0.0 | 1.0 | `BenchmarkDelitemSlice` | | `__delitem__` (slice with skip) | 0.0 | 0.0 | 1.0 | `BenchmarkDelitemSliceSkip` | | `extend` | 0.0 | 0.0 | 1.0 | `BenchmarkExtend` | | `__getitem__` | 0.0 | 0.0 | 1.0 | `BenchmarkGetitem` | | `__getitem__` (slice) | 0.0 | 0.0 | 1.0 | `BenchmarkGetitemSlice` | | `__getitem__` (slice with skip) | 0.0 | 0.0 | 1.0 | `BenchmarkGetitemSliceSkip` | | `__iadd__` | 0.0 | 0.0 | 1.0 | `BenchmarkIadd` | | `__imult__` | 0.0 | 0.0 | 1.0 | `BenchmarkImult` | | `index` | 0.0 | 0.0 | 1.0 | `BenchmarkIndex` | | `index` (unsuccessful search) | 0.0 | 0.0 | 1.0 | `BenchmarkIndexUnsuccessfulSearch` | | `insert` | 0.0 | 0.0 | 1.0 | `BenchmarkInsert` | | `__len__` | 0.0 | 0.0 | 1.0 | `BenchmarkLen` | | `__mult__` | 0.0 | 0.0 | 1.0 | `BenchmarkMult` | | `__contains__` (unsuccessful search) | 0.0 | 0.0 | 1.0 | `BenchmarkNotContains` | | `pop` | 0.0 | 0.0 | 1.0 | `BenchmarkPop` | | `remove` | 0.0 | 0.0 | 1.0 | `BenchmarkRemove` | | `__setitem__` | 0.0 | 0.0 | 1.0 | `BenchmarkSetitem` | | `__setitem__` (slice) | 0.0 | 0.0 | 1.0 | `BenchmarkSetitemSlice` | | `__setitem__` (slice with skip) | 0.0 | 0.0 | 1.0 | `BenchmarkSetitemSliceSkip` | | `sort` (balanced) | 0.0 | 0.12891 | inf | `BenchmarkSortBalanced` | | `sort` (fastest) | 0.0 | 0.12109 | inf | `BenchmarkSortFastest` | | `sort` (memory_saving) | 0.0 | 0.0 | 1.0 | `BenchmarkSortMemorySaving` |","title":"List"},{"location":"benchmark_results/py39/set/","text":"timing | subject | `builtin` | `sqlitecollections` | ratio | class | | :------ | --------: | ------------------: | ----: | :---- | | `add (existing item)` | 0.0053 | 0.00668 | 1.2608 | `BenchmarkAddExistingItem` | | `add (new item)` | 0.00556 | 0.00792 | 1.4239 | `BenchmarkAddNewItem` | | `__and__` | 0.00537 | 0.01195 | 2.22521 | `BenchmarkAnd` | | `clear` | 0.00543 | 0.00757 | 1.39588 | `BenchmarkClear` | | `__contains__` | 0.00525 | 0.00537 | 1.02177 | `BenchmarkContains` | | `copy` | 0.00529 | 0.00972 | 1.83632 | `BenchmarkCopy` | | `difference` | 0.00543 | 0.01005 | 1.85214 | `BenchmarkDifference` | | `discard` | 0.00541 | 0.0078 | 1.43975 | `BenchmarkDiscard` | | `discard (no changes)` | 0.00538 | 0.00657 | 1.22064 | `BenchmarkDiscardNoChanges` | | `__ge__` | 0.00535 | 0.00508 | 0.94997 | `BenchmarkGe` | | `__ge__` (not greater than or equals to) | 0.00544 | 0.00554 | 1.01861 | `BenchmarkGeNot` | | `__gt__` | 0.00531 | 0.00779 | 1.46788 | `BenchmarkGt` | | `__gt__` (not greater than) | 0.0054 | 0.0319 | 5.90323 | `BenchmarkGtNot` | | `__iand__` | 0.00543 | 0.00979 | 1.80195 | `BenchmarkIand` | | `__init__` | 0.0058 | 0.01756 | 3.02826 | `BenchmarkInit` | | `intersection` | 0.00537 | 0.01273 | 2.37048 | `BenchmarkIntersection` | | `intersection_update` | 0.00533 | 0.00967 | 1.81509 | `BenchmarkIntersectionUpdate` | | `__ior__` | 0.00547 | 0.00954 | 1.74278 | `BenchmarkIor` | | `isdisjoint` | 0.00529 | 0.00511 | 0.96613 | `BenchmarkIsdisjoint` | | `isdisjoint` (not disjoint) | 0.00538 | 0.00511 | 0.95021 | `BenchmarkIsdisjointNot` | | `issubset` | 0.00541 | 0.03294 | 6.08942 | `BenchmarkIssubset` | | `issubset` (not subset) | 0.00537 | 0.01326 | 2.46789 | `BenchmarkIssubsetNot` | | `issuperset` | 0.00539 | 0.02508 | 4.65437 | `BenchmarkIssuperset` | | `issuperset` (not superset) | 0.00553 | 0.00566 | 1.02371 | `BenchmarkIssupersetNot` | | `__ixor__` | 0.00525 | 0.04095 | 7.79625 | `BenchmarkIxor` | | `__le__` | 0.00536 | 0.00586 | 1.09294 | `BenchmarkLe` | | `__le__` (not less than or equals to) | 0.0052 | 0.00513 | 0.98587 | `BenchmarkLeNot` | | `__len__` | 0.00539 | 0.00516 | 0.95815 | `BenchmarkLen` | | `__lt__` | 0.00541 | 0.00584 | 1.07921 | `BenchmarkLt` | | `__lt__` (not less than) | 0.0054 | 0.00508 | 0.94051 | `BenchmarkLtNot` | | `__contains__` (unsuccessful search) | 0.00542 | 0.00522 | 0.96205 | `BenchmarkNotContains` | | `__or__` | 0.00529 | 0.01248 | 2.35962 | `BenchmarkOr` | | `pop` | 0.00531 | 0.00775 | 1.4573 | `BenchmarkPop` | | `remove` | 0.00546 | 0.00772 | 1.41402 | `BenchmarkRemove` | | `__sub__` | 0.00533 | 0.00986 | 1.852 | `BenchmarkSub` | | `symmetric_difference` | 0.00546 | 0.04303 | 7.87561 | `BenchmarkSymmetricDifference` | | `symmetric_difference_update` | 0.00539 | 0.03991 | 7.40785 | `BenchmarkSymmetricDifferenceUpdate` | | `union` | 0.00543 | 0.01259 | 2.31941 | `BenchmarkUnion` | | `update` | 0.00529 | 0.00986 | 1.86365 | `BenchmarkUpdate` | | `__xor__` | 0.00531 | 0.04263 | 8.02322 | `BenchmarkXor` | approximate memory usage | subject | `builtin` | `sqlitecollections` | ratio | class | | :------ | --------: | ------------------: | ----: | :---- | | `add (existing item)` | 0.0 | 0.0 | 1.0 | `BenchmarkAddExistingItem` | | `add (new item)` | 0.0 | 0.0 | 1.0 | `BenchmarkAddNewItem` | | `__and__` | 0.0 | 0.0 | 1.0 | `BenchmarkAnd` | | `clear` | 0.0 | 0.0 | 1.0 | `BenchmarkClear` | | `__contains__` | 0.0 | 0.0 | 1.0 | `BenchmarkContains` | | `copy` | 0.0 | 0.0 | 1.0 | `BenchmarkCopy` | | `difference` | 0.0 | 0.0 | 1.0 | `BenchmarkDifference` | | `discard` | 0.0 | 0.0 | 1.0 | `BenchmarkDiscard` | | `discard (no changes)` | 0.0 | 0.0 | 1.0 | `BenchmarkDiscardNoChanges` | | `__ge__` | 0.0 | 0.0 | 1.0 | `BenchmarkGe` | | `__ge__` (not greater than or equals to) | 0.0 | 0.0 | 1.0 | `BenchmarkGeNot` | | `__gt__` | 0.0 | 0.0 | 1.0 | `BenchmarkGt` | | `__gt__` (not greater than) | 0.0 | 0.0 | 1.0 | `BenchmarkGtNot` | | `__iand__` | 0.0 | 0.0 | 1.0 | `BenchmarkIand` | | `__init__` | 0.0 | 0.0 | 1.0 | `BenchmarkInit` | | `intersection` | 0.0 | 0.0 | 1.0 | `BenchmarkIntersection` | | `intersection_update` | 0.0 | 0.0 | 1.0 | `BenchmarkIntersectionUpdate` | | `__ior__` | 0.0 | 0.0 | 1.0 | `BenchmarkIor` | | `isdisjoint` | 0.0 | 0.0 | 1.0 | `BenchmarkIsdisjoint` | | `isdisjoint` (not disjoint) | 0.0 | 0.0 | 1.0 | `BenchmarkIsdisjointNot` | | `issubset` | 0.0 | 0.0 | 1.0 | `BenchmarkIssubset` | | `issubset` (not subset) | 0.0 | 0.0 | 1.0 | `BenchmarkIssubsetNot` | | `issuperset` | 0.0 | 0.0 | 1.0 | `BenchmarkIssuperset` | | `issuperset` (not superset) | 0.0 | 0.0 | 1.0 | `BenchmarkIssupersetNot` | | `__ixor__` | 0.0 | 0.0 | 1.0 | `BenchmarkIxor` | | `__le__` | 0.0 | 0.0 | 1.0 | `BenchmarkLe` | | `__le__` (not less than or equals to) | 0.0 | 0.0 | 1.0 | `BenchmarkLeNot` | | `__len__` | 0.0 | 0.0 | 1.0 | `BenchmarkLen` | | `__lt__` | 0.0 | 0.0 | 1.0 | `BenchmarkLt` | | `__lt__` (not less than) | 0.0 | 0.0 | 1.0 | `BenchmarkLtNot` | | `__contains__` (unsuccessful search) | 0.0 | 0.0 | 1.0 | `BenchmarkNotContains` | | `__or__` | 0.0 | 0.0 | 1.0 | `BenchmarkOr` | | `pop` | 0.0 | 0.0 | 1.0 | `BenchmarkPop` | | `remove` | 0.0 | 0.0 | 1.0 | `BenchmarkRemove` | | `__sub__` | 0.0 | 0.0 | 1.0 | `BenchmarkSub` | | `symmetric_difference` | 0.0 | 0.0 | 1.0 | `BenchmarkSymmetricDifference` | | `symmetric_difference_update` | 0.0 | 0.0 | 1.0 | `BenchmarkSymmetricDifferenceUpdate` | | `union` | 0.0 | 0.0 | 1.0 | `BenchmarkUnion` | | `update` | 0.0 | 0.0 | 1.0 | `BenchmarkUpdate` | | `__xor__` | 0.0 | 0.0 | 1.0 | `BenchmarkXor` |","title":"Set"},{"location":"usage/common/","text":"Common features PicklingStrategy PicklingStrategy specifies the way how pickle serializes the sqlitecollection containers. Currently following two methods are supported: PicklingStrategy.whole_table The resulting pickle contains all the records in the collection. It dumps all the records into temporary sqlite3 database file when it is loaded. PicklingStrategy.only_file_name The resulting pickle contains only the file path of the sqlite3 database file. The file path is a relative path returned by os.path.relpath , so it must be loaded with the same structure. MetadataItem MetadataItem(...) Constructor for MetadataItem. Instances of this class are not supposed to be created directly by the user. Arguments: table_name : str ; table name. container_type : str ; container type name. schema_version : str ; schema version. table_name Read-only property for the table name. Return value: str : The table name. container_type Read-only property for the container type. Return value: str : The container type. schema_version Read-only property for the schema version Return value: str : The schema version. MetadataReader MetadataReader(...) Constructor for MetadataReader class which can iterate over all records in the given connection. Arguments: connection : str or sqlite3.Connection ; Connection to sqlite3 to get metadata. If connection is a str , it will be used as the sqlite3 database file name. You can pass a sqlite3.Connection directly. len(metadata_reader) Return the number of records in the metadata table read by metadata_reader . It coincides the number of collections in the sqlite3 database connected by metadata_reader._connection . Return value: int : The number of items in the metadata table. obj in metadata_reader Return whether if obj is in metadata_reader Arguments: obj : object ; object to be checked the membership. Return value: bool : Boolean value whether if metadata_item is in the metadata table. iter(metadata_reader) Return an iterator over the MetadataItem 's in metadata_reader It coincides the records of metadata table in the sqlite3 database connected by metadata_reader._connection . Return value: Iterator[MetadataItem] : an iterator over the MetadataItem 's in metadata_reader","title":"common features"},{"location":"usage/common/#common-features","text":"","title":"Common features"},{"location":"usage/common/#picklingstrategy","text":"PicklingStrategy specifies the way how pickle serializes the sqlitecollection containers. Currently following two methods are supported:","title":"PicklingStrategy"},{"location":"usage/common/#picklingstrategywhole_table","text":"The resulting pickle contains all the records in the collection. It dumps all the records into temporary sqlite3 database file when it is loaded.","title":"PicklingStrategy.whole_table"},{"location":"usage/common/#picklingstrategyonly_file_name","text":"The resulting pickle contains only the file path of the sqlite3 database file. The file path is a relative path returned by os.path.relpath , so it must be loaded with the same structure.","title":"PicklingStrategy.only_file_name"},{"location":"usage/common/#metadataitem","text":"","title":"MetadataItem"},{"location":"usage/common/#metadataitem_1","text":"Constructor for MetadataItem. Instances of this class are not supposed to be created directly by the user.","title":"MetadataItem(...)"},{"location":"usage/common/#arguments","text":"table_name : str ; table name. container_type : str ; container type name. schema_version : str ; schema version.","title":"Arguments:"},{"location":"usage/common/#table_name","text":"Read-only property for the table name.","title":"table_name"},{"location":"usage/common/#return-value","text":"str : The table name.","title":"Return value:"},{"location":"usage/common/#container_type","text":"Read-only property for the container type.","title":"container_type"},{"location":"usage/common/#return-value_1","text":"str : The container type.","title":"Return value:"},{"location":"usage/common/#schema_version","text":"Read-only property for the schema version","title":"schema_version"},{"location":"usage/common/#return-value_2","text":"str : The schema version.","title":"Return value:"},{"location":"usage/common/#metadatareader","text":"","title":"MetadataReader"},{"location":"usage/common/#metadatareader_1","text":"Constructor for MetadataReader class which can iterate over all records in the given connection.","title":"MetadataReader(...)"},{"location":"usage/common/#arguments_1","text":"connection : str or sqlite3.Connection ; Connection to sqlite3 to get metadata. If connection is a str , it will be used as the sqlite3 database file name. You can pass a sqlite3.Connection directly.","title":"Arguments:"},{"location":"usage/common/#lenmetadata_reader","text":"Return the number of records in the metadata table read by metadata_reader . It coincides the number of collections in the sqlite3 database connected by metadata_reader._connection .","title":"len(metadata_reader)"},{"location":"usage/common/#return-value_3","text":"int : The number of items in the metadata table.","title":"Return value:"},{"location":"usage/common/#obj-in-metadata_reader","text":"Return whether if obj is in metadata_reader","title":"obj in metadata_reader"},{"location":"usage/common/#arguments_2","text":"obj : object ; object to be checked the membership.","title":"Arguments:"},{"location":"usage/common/#return-value_4","text":"bool : Boolean value whether if metadata_item is in the metadata table.","title":"Return value:"},{"location":"usage/common/#itermetadata_reader","text":"Return an iterator over the MetadataItem 's in metadata_reader It coincides the records of metadata table in the sqlite3 database connected by metadata_reader._connection .","title":"iter(metadata_reader)"},{"location":"usage/common/#return-value_5","text":"Iterator[MetadataItem] : an iterator over the MetadataItem 's in metadata_reader","title":"Return value:"},{"location":"usage/dict/","text":"Dict Dict is a container compatible with the built-in dict , which serializes keys and values and stores them in a sqlite3 database. It preserves insertion order for all supported python versions. Dict[KT, VT](...) Constructor. Type Parameters: KT : key type VT : value type Arguments: data : Mapping[KT, VT] or Iterable[Tuple[KT, VT]] , optional, positional-only argument, defualt= None ; Initial data. If None or no argument is given, persistent data is used as is if available, otherwise persistent data in the corresponding table is cleared and given data is stored instead. connection : str or sqlite3.Connection , optional, default= None ; If None , temporary file is automatically created. If connection is a str , it will be used as the sqlite3 database file name. You can pass a sqlite3.Connection directly. table_name : str , optional, default= None ; Table name of this container. If None , an auto-generated unique name will be used. Available characters are letters, numbers, and underscores ( _ ). key_serializer : Callable[[KT], bytes] , optional, default= None ; Function to serialize key. If None , pickle.dumps is used. key_deserializer : Callable[[bytes], KT] , optional, default= None ; Function to deserialize key. If None , pickle.loads is used. value_serializer : Callable[[VT], bytes] , optional, default= None ; Function to serialize value. If None , key_serializer is used. value_deserializer : Callable[[bytes], VT] , optional, default= None ; Function to deserialize value. If None , key_deserializer is used. persist : bool , optional, default= True ; If True , table won't be deleted even when the object is deleted. If False , the table is deleted when this object is deleted. pickling_strategy : PicklingStrategy , optional, default= PicklingStrategy.whole_table ; Flag to control pickling method. See PicklingStrategy for more details. len(d) Return the number of items in d: Dict[KT, VT] Return value: int : The number of items in d d[key] Get item of d with key key . Raises a KeyError if key is not in the map. Arguments: key : KT ; Key to retrieve corresponding value Return value: VT : Item of d with key key d[key] = value Set d[key] to value . Arguments: key : KT ; Key to be set value : VT ; Value to be set Return value: None del d[key] Delete d[key] . Arguments: key : KT ; Key to be deleted Return value: None key in d Return whether if key is in d Arguments: key : KT ; Key to be checked Return value: bool : True if key is in d and False otherwise. key not in d Return whether if key is not in d Arguments: key : KT ; Key to be checked Return value: bool : True if key is not in d and False otherwise. iter(d) Return an iterator over the keys of d Return value: Iterator[KT] : an iterator over the keys of d clear() Remove all items from the dictionary Return value: None copy() Return a copy of the dictionary. The actual behavior is to create a table with a unique table name and copy the keys and the values to the new table. Therefore, unlike the built-in dict copy, the behavior is similar to deep copy. Be aware that the copied dictionary is volatile. Return value: Dict[KT, VT] : A volatile copy of the dictionary. get(key[, default]) Return the value for key if key is in the dictionary, else default . If default is not given, it defaults to None , so that this method never raises a KeyError . Arguments: key : KT ; Key to retrieve corresponding value if exists. default : VT , optional, default= None ; Default value in case that key is not in the dictionary Return value: VT : Item of the dictionary with key key if key is in the dictionary, default otherwise. items() Return a new view of the dictionary\u2019s items (key-value pairs). Return value: ItemsView : View object of the dictionary's items keys() Return a new view of the dictionary's keys. Return value: KeysView[KT] : View object of the dictionary's keys. pop(key[, default]) If key is in the dictionary, remove it and return its value, else return default . If default is not given and key is not in the dictionary, a KeyError is raised. Arguments: key : KT ; Key to retrieve corresponding value if exists. default : VT , optional, default= None ; Default value in case that key is not in the dictionary Return value: VT : Item of the dictionary with key key if key is in the dictionary, default otherwise. popitem() Remove and return a key-value pair from the dictionary. Pairs are returned in LIFO order. If the dictionary is empty, raises a KeyError . Return value: Tuple[KT, VT] : Key-value pair that were last inserted into the dictionary reversed(d) Return a reverse iterator over the keys of the dictionary. (provided only python version 3.8 and above) Return value: Iterator[KT] : Reverse iterator over the keys of the dictionary setdefault(key[, default]) If key is in the dictionary, return its value. If not, insert key with a value of default and return default . Arguments: key : KT ; Key to retrieve or set the value default : VT , optional, default= None ; Value to be set if key is not in the dictionary Return value: VT : Item of the dictionary with key key if key is in the dictionary, default otherwise. update([other, **kwargs]) Update the dictionary with the key-value pairs from other , overwriting existing keys. Arguments: other : Mapping[KT, VT] or Iterable[Tuple[KT, VT]] , optional; Key-value pairs to be added kwargs : VT , optional; values to be added Return value: None values() Return a new view of the dictionary's values. Return value: ValuesView : View object of the dictionary's values d | other Create a new dictionary with the merged keys and values of d and other , which must both be dictionaries. The values of other take priority when d and other share keys. The return value is volatile by default. (provided only python version 3.9 and above) Arguments: other : Mapping[KT, VT] or Iterable[Tuple[KT, VT]] ; Key-value pairs to be merged Return value: Dict[KT, VT] : A new volatile dictionary object. d |= other Update the dictionary d with keys and values from other . (provided only python version 3.9 and above) Arguments: other : Mapping[KT, VT] or Iterable[Tuple[KT, VT]] ; Key-value pairs to be merged Return value: Dict[KT, VT] : The dictionary object.","title":"Dict"},{"location":"usage/dict/#dict","text":"Dict is a container compatible with the built-in dict , which serializes keys and values and stores them in a sqlite3 database. It preserves insertion order for all supported python versions.","title":"Dict"},{"location":"usage/dict/#dictkt-vt","text":"Constructor.","title":"Dict[KT, VT](...)"},{"location":"usage/dict/#type-parameters","text":"KT : key type VT : value type","title":"Type Parameters:"},{"location":"usage/dict/#arguments","text":"data : Mapping[KT, VT] or Iterable[Tuple[KT, VT]] , optional, positional-only argument, defualt= None ; Initial data. If None or no argument is given, persistent data is used as is if available, otherwise persistent data in the corresponding table is cleared and given data is stored instead. connection : str or sqlite3.Connection , optional, default= None ; If None , temporary file is automatically created. If connection is a str , it will be used as the sqlite3 database file name. You can pass a sqlite3.Connection directly. table_name : str , optional, default= None ; Table name of this container. If None , an auto-generated unique name will be used. Available characters are letters, numbers, and underscores ( _ ). key_serializer : Callable[[KT], bytes] , optional, default= None ; Function to serialize key. If None , pickle.dumps is used. key_deserializer : Callable[[bytes], KT] , optional, default= None ; Function to deserialize key. If None , pickle.loads is used. value_serializer : Callable[[VT], bytes] , optional, default= None ; Function to serialize value. If None , key_serializer is used. value_deserializer : Callable[[bytes], VT] , optional, default= None ; Function to deserialize value. If None , key_deserializer is used. persist : bool , optional, default= True ; If True , table won't be deleted even when the object is deleted. If False , the table is deleted when this object is deleted. pickling_strategy : PicklingStrategy , optional, default= PicklingStrategy.whole_table ; Flag to control pickling method. See PicklingStrategy for more details.","title":"Arguments:"},{"location":"usage/dict/#lend","text":"Return the number of items in d: Dict[KT, VT]","title":"len(d)"},{"location":"usage/dict/#return-value","text":"int : The number of items in d","title":"Return value:"},{"location":"usage/dict/#dkey","text":"Get item of d with key key . Raises a KeyError if key is not in the map.","title":"d[key]"},{"location":"usage/dict/#arguments_1","text":"key : KT ; Key to retrieve corresponding value","title":"Arguments:"},{"location":"usage/dict/#return-value_1","text":"VT : Item of d with key key","title":"Return value:"},{"location":"usage/dict/#dkey-value","text":"Set d[key] to value .","title":"d[key] = value"},{"location":"usage/dict/#arguments_2","text":"key : KT ; Key to be set value : VT ; Value to be set","title":"Arguments:"},{"location":"usage/dict/#return-value_2","text":"None","title":"Return value:"},{"location":"usage/dict/#del-dkey","text":"Delete d[key] .","title":"del d[key]"},{"location":"usage/dict/#arguments_3","text":"key : KT ; Key to be deleted","title":"Arguments:"},{"location":"usage/dict/#return-value_3","text":"None","title":"Return value:"},{"location":"usage/dict/#key-in-d","text":"Return whether if key is in d","title":"key in d"},{"location":"usage/dict/#arguments_4","text":"key : KT ; Key to be checked","title":"Arguments:"},{"location":"usage/dict/#return-value_4","text":"bool : True if key is in d and False otherwise.","title":"Return value:"},{"location":"usage/dict/#key-not-in-d","text":"Return whether if key is not in d","title":"key not in d"},{"location":"usage/dict/#arguments_5","text":"key : KT ; Key to be checked","title":"Arguments:"},{"location":"usage/dict/#return-value_5","text":"bool : True if key is not in d and False otherwise.","title":"Return value:"},{"location":"usage/dict/#iterd","text":"Return an iterator over the keys of d","title":"iter(d)"},{"location":"usage/dict/#return-value_6","text":"Iterator[KT] : an iterator over the keys of d","title":"Return value:"},{"location":"usage/dict/#clear","text":"Remove all items from the dictionary","title":"clear()"},{"location":"usage/dict/#return-value_7","text":"None","title":"Return value:"},{"location":"usage/dict/#copy","text":"Return a copy of the dictionary. The actual behavior is to create a table with a unique table name and copy the keys and the values to the new table. Therefore, unlike the built-in dict copy, the behavior is similar to deep copy. Be aware that the copied dictionary is volatile.","title":"copy()"},{"location":"usage/dict/#return-value_8","text":"Dict[KT, VT] : A volatile copy of the dictionary.","title":"Return value:"},{"location":"usage/dict/#getkey-default","text":"Return the value for key if key is in the dictionary, else default . If default is not given, it defaults to None , so that this method never raises a KeyError .","title":"get(key[, default])"},{"location":"usage/dict/#arguments_6","text":"key : KT ; Key to retrieve corresponding value if exists. default : VT , optional, default= None ; Default value in case that key is not in the dictionary","title":"Arguments:"},{"location":"usage/dict/#return-value_9","text":"VT : Item of the dictionary with key key if key is in the dictionary, default otherwise.","title":"Return value:"},{"location":"usage/dict/#items","text":"Return a new view of the dictionary\u2019s items (key-value pairs).","title":"items()"},{"location":"usage/dict/#return-value_10","text":"ItemsView : View object of the dictionary's items","title":"Return value:"},{"location":"usage/dict/#keys","text":"Return a new view of the dictionary's keys.","title":"keys()"},{"location":"usage/dict/#return-value_11","text":"KeysView[KT] : View object of the dictionary's keys.","title":"Return value:"},{"location":"usage/dict/#popkey-default","text":"If key is in the dictionary, remove it and return its value, else return default . If default is not given and key is not in the dictionary, a KeyError is raised.","title":"pop(key[, default])"},{"location":"usage/dict/#arguments_7","text":"key : KT ; Key to retrieve corresponding value if exists. default : VT , optional, default= None ; Default value in case that key is not in the dictionary","title":"Arguments:"},{"location":"usage/dict/#return-value_12","text":"VT : Item of the dictionary with key key if key is in the dictionary, default otherwise.","title":"Return value:"},{"location":"usage/dict/#popitem","text":"Remove and return a key-value pair from the dictionary. Pairs are returned in LIFO order. If the dictionary is empty, raises a KeyError .","title":"popitem()"},{"location":"usage/dict/#return-value_13","text":"Tuple[KT, VT] : Key-value pair that were last inserted into the dictionary","title":"Return value:"},{"location":"usage/dict/#reversedd","text":"Return a reverse iterator over the keys of the dictionary. (provided only python version 3.8 and above)","title":"reversed(d)"},{"location":"usage/dict/#return-value_14","text":"Iterator[KT] : Reverse iterator over the keys of the dictionary","title":"Return value:"},{"location":"usage/dict/#setdefaultkey-default","text":"If key is in the dictionary, return its value. If not, insert key with a value of default and return default .","title":"setdefault(key[, default])"},{"location":"usage/dict/#arguments_8","text":"key : KT ; Key to retrieve or set the value default : VT , optional, default= None ; Value to be set if key is not in the dictionary","title":"Arguments:"},{"location":"usage/dict/#return-value_15","text":"VT : Item of the dictionary with key key if key is in the dictionary, default otherwise.","title":"Return value:"},{"location":"usage/dict/#updateother-kwargs","text":"Update the dictionary with the key-value pairs from other , overwriting existing keys.","title":"update([other, **kwargs])"},{"location":"usage/dict/#arguments_9","text":"other : Mapping[KT, VT] or Iterable[Tuple[KT, VT]] , optional; Key-value pairs to be added kwargs : VT , optional; values to be added","title":"Arguments:"},{"location":"usage/dict/#return-value_16","text":"None","title":"Return value:"},{"location":"usage/dict/#values","text":"Return a new view of the dictionary's values.","title":"values()"},{"location":"usage/dict/#return-value_17","text":"ValuesView : View object of the dictionary's values","title":"Return value:"},{"location":"usage/dict/#d-other","text":"Create a new dictionary with the merged keys and values of d and other , which must both be dictionaries. The values of other take priority when d and other share keys. The return value is volatile by default. (provided only python version 3.9 and above)","title":"d | other"},{"location":"usage/dict/#arguments_10","text":"other : Mapping[KT, VT] or Iterable[Tuple[KT, VT]] ; Key-value pairs to be merged","title":"Arguments:"},{"location":"usage/dict/#return-value_18","text":"Dict[KT, VT] : A new volatile dictionary object.","title":"Return value:"},{"location":"usage/dict/#d-other_1","text":"Update the dictionary d with keys and values from other . (provided only python version 3.9 and above)","title":"d |= other"},{"location":"usage/dict/#arguments_11","text":"other : Mapping[KT, VT] or Iterable[Tuple[KT, VT]] ; Key-value pairs to be merged","title":"Arguments:"},{"location":"usage/dict/#return-value_19","text":"Dict[KT, VT] : The dictionary object.","title":"Return value:"},{"location":"usage/factory/","text":"factory module factory module contains a factory for each container: ListFactory for List , SetFactory for Set and DictFactory for Dict . They replace constructors of each container that require extra arguments such as connection , serializer , deserializer etc., and allow users to construct a container without specifying those extra arguments. Example Basic usage The results of the following two examples are almost the same (except for the auto-generated table names). Without factory: import sqlite3 import sqlitecollections as sc conn = sqlite3.connect(\"path/to/file.db\") def encode(x: str) -> bytes: return x.encode(\"utf-8\") def decode(x: bytes) -> str: return x.decode(\"utf-8\") l1 = sc.List[str]([\"Alice\", \"Bob\", \"Carol\"], connection=conn, serializer=encode, deserializer=decode) l2 = sc.List[str]([\"Dave\"], connection=conn, serializer=encode, deserializer=decode) l3 = sc.List[str]([\"Erin\"], connection=conn, serializer=encode, deserializer=decode) With factory: import sqlite3 import sqlitecollections as sc conn = sqlite3.connect(\"path/to/file.db\") def encode(x: str) -> bytes: return x.encode(\"utf-8\") def decode(x: bytes) -> str: return x.decode(\"utf-8\") list_ = sc.ListFactory[str](connection=conn, serializer=encode, deserializer=decode) l1 = list_([\"Alice\", \"Bob\", \"Carol\"]) l2 = list_([\"Dave\"]) l3 = list_([\"Erin\"]) Specifying a table name If you want to specify table names of containers from a factory, you can do that as follows: import sqlite3 import sqlitecollections as sc conn = sqlite3.connect(\"path/to/file.db\") def encode(x: str) -> bytes: return x.encode(\"utf-8\") def decode(x: bytes) -> str: return x.decode(\"utf-8\") list_ = sc.ListFactory[str](connection=conn, serializer=encode, deserializer=decode) l1 = list_[\"first_table_name\"]([\"Alice\", \"Bob\", \"Carol\"]) assert l1.table_name == \"first_table_name\" ListFactory ListFactory[T](...) Constructor of ListFactory which constructs List . Type Parameters: T : value type of the List Arguments: connection : str or sqlite3.Connection , optional, default= None ; If None , temporary file is automatically created. If connection is a str , it will be used as the sqlite3 database file name. You can pass a sqlite3.Connection directly. table_name : str , optional, default= None ; Table name of containers from this factory. This argument is assumed not to be specified directly by users. If None , an auto-generated unique name will be used. serializer : Callable[[T], bytes] , optional, default= None ; Function to serialize value. If None , pickle.dumps is used. deserializer : Callable[[bytes], T] , optional, default= None ; Function to deserialize value. If None , pickle.loads is used. list_(data) Construct List[T] with connection, serializer and deserializer preset from ListFactory[T] list_ . Arguments: data : Iterable[T] , optional, defualt= None ; Initial data. Return value: List[T] : connection, serializer and deserializer are the same as those of the factory list_ . create(data) Construct List[T] with connection, serializer and deserializer preset from the factory. Arguments: data : Iterable[T] , optional, defualt= None ; Initial data. Return value: List[T] : connection, serializer and deserializer are the same as those of the factory. f[t] Return a copy of this factory f that creates container with table name t . Arguments: t : str ; the table name Return value: ListFactory[T] : connection, serializer and deserializer are the same as those of this factory and the table name of the List[T] from this return value will be set to t . === DictFactory DictFactory[KT, VT](...) Constructor of DictFactory which constructs Dict . Type Parameters: KT : key type of the Dict VT : value type of the Dict Arguments: connection : str or sqlite3.Connection , optional, default= None ; If None , temporary file is automatically created. If connection is a str , it will be used as the sqlite3 database file name. You can pass a sqlite3.Connection directly. table_name : str , optional, default= None ; Table name of containers from this factory. This argument is assumed not to be specified directly by users. If None , an auto-generated unique name will be used. key_serializer : Callable[[KT], bytes] , optional, default= None ; Function to serialize key. If None , pickle.dumps is used. key_deserializer : Callable[[bytes], KT] , optional, default= None ; Function to deserialize key. If None , pickle.loads is used. value_serializer : Callable[[VT], bytes] , optional, default= None ; Function to serialize value. If None , key_serializer is used. value_deserializer : Callable[[bytes], VT] , optional, default= None ; Function to deserialize value. If None , key_deserializer is used. dict_(data, **kwargs) Construct Dict[KT, VT] with connection, key*serializer, etc., preset from DictFactory[KT, VT] dict* . Arguments: data : Mapping[KT, VT] or Iterable[Tuple[KT, VT]] , optional, defualt= None ; Initial data. **kwargs : VT , optional; Appended to initial data. Return value: Dict[KT, VT] : connection, key*serializers, etc., are the same as those of the factory dict* . create(data, **kwargs) Construct Dict[KT, VT] with connection, key_serializer, etc., preset from the factory. Arguments: data : Mapping[KT, VT] or Iterable[Tuple[KT, VT]] , optional, defualt= None ; Initial data. **kwargs : VT , optional; Appended to initial data. Return value: Dict[KT, VT] : connection, key_serializers, etc., are the same as those of the factory. f[t] Return a copy of this factory f that creates container with table name t . Arguments: t : str ; the table name Return value: DictFactory[KT, VT] : connection, key_serializer, key_deserializer, value_serializer and value_deserializer are the same as those of this factory and the table name of the Dict[KT, VT] from this return value will be set to t . === SetFactory SetFactory[T](...) Constructor of SetFactory which constructs Set . Type Parameters: T : value type of the Set Arguments: connection : str or sqlite3.Connection , optional, default= None ; If None , temporary file is automatically created. If connection is a str , it will be used as the sqlite3 database file name. You can pass a sqlite3.Connection directly. table_name : str , optional, default= None ; Table name of containers from this factory. This argument is assumed not to be specified directly by users. If None , an auto-generated unique name will be used. serializer : Callable[[T], bytes] , optional, default= None ; Function to serialize value. If None , pickle.dumps is used. deserializer : Callable[[bytes], T] , optional, default= None ; Function to deserialize value. If None , pickle.loads is used. set_(data) Construct Set[T] with connection, serializer and deserializer preset from SetFactory[T] set_ . Arguments: data : Iterable[T] , optional, defualt= None ; Initial data. Return value: Set[T] : connection, serializer and deserializer are the same as those of the factory set_ . create(data) Construct Set[T] with connection, serializer and deserializer preset from the factory. Arguments: data : Iterable[T] , optional, defualt= None ; Initial data. Return value: Set[T] : connection, serializer and deserializer are the same as those of the factory. f[t] Return a copy of this factory f that creates container with table name t . Arguments: t : str ; the table name Return value: SetFactory[T] : connection, serializer and deserializer are the same as those of this factory and the table name of the Set[T] from this return value will be set to t . ===","title":"factory"},{"location":"usage/factory/#factory-module","text":"factory module contains a factory for each container: ListFactory for List , SetFactory for Set and DictFactory for Dict . They replace constructors of each container that require extra arguments such as connection , serializer , deserializer etc., and allow users to construct a container without specifying those extra arguments.","title":"factory module"},{"location":"usage/factory/#example","text":"","title":"Example"},{"location":"usage/factory/#basic-usage","text":"The results of the following two examples are almost the same (except for the auto-generated table names). Without factory: import sqlite3 import sqlitecollections as sc conn = sqlite3.connect(\"path/to/file.db\") def encode(x: str) -> bytes: return x.encode(\"utf-8\") def decode(x: bytes) -> str: return x.decode(\"utf-8\") l1 = sc.List[str]([\"Alice\", \"Bob\", \"Carol\"], connection=conn, serializer=encode, deserializer=decode) l2 = sc.List[str]([\"Dave\"], connection=conn, serializer=encode, deserializer=decode) l3 = sc.List[str]([\"Erin\"], connection=conn, serializer=encode, deserializer=decode) With factory: import sqlite3 import sqlitecollections as sc conn = sqlite3.connect(\"path/to/file.db\") def encode(x: str) -> bytes: return x.encode(\"utf-8\") def decode(x: bytes) -> str: return x.decode(\"utf-8\") list_ = sc.ListFactory[str](connection=conn, serializer=encode, deserializer=decode) l1 = list_([\"Alice\", \"Bob\", \"Carol\"]) l2 = list_([\"Dave\"]) l3 = list_([\"Erin\"])","title":"Basic usage"},{"location":"usage/factory/#specifying-a-table-name","text":"If you want to specify table names of containers from a factory, you can do that as follows: import sqlite3 import sqlitecollections as sc conn = sqlite3.connect(\"path/to/file.db\") def encode(x: str) -> bytes: return x.encode(\"utf-8\") def decode(x: bytes) -> str: return x.decode(\"utf-8\") list_ = sc.ListFactory[str](connection=conn, serializer=encode, deserializer=decode) l1 = list_[\"first_table_name\"]([\"Alice\", \"Bob\", \"Carol\"]) assert l1.table_name == \"first_table_name\"","title":"Specifying a table name"},{"location":"usage/factory/#listfactory","text":"","title":"ListFactory"},{"location":"usage/factory/#listfactoryt","text":"Constructor of ListFactory which constructs List .","title":"ListFactory[T](...)"},{"location":"usage/factory/#type-parameters","text":"T : value type of the List","title":"Type Parameters:"},{"location":"usage/factory/#arguments","text":"connection : str or sqlite3.Connection , optional, default= None ; If None , temporary file is automatically created. If connection is a str , it will be used as the sqlite3 database file name. You can pass a sqlite3.Connection directly. table_name : str , optional, default= None ; Table name of containers from this factory. This argument is assumed not to be specified directly by users. If None , an auto-generated unique name will be used. serializer : Callable[[T], bytes] , optional, default= None ; Function to serialize value. If None , pickle.dumps is used. deserializer : Callable[[bytes], T] , optional, default= None ; Function to deserialize value. If None , pickle.loads is used.","title":"Arguments:"},{"location":"usage/factory/#list_data","text":"Construct List[T] with connection, serializer and deserializer preset from ListFactory[T] list_ .","title":"list_(data)"},{"location":"usage/factory/#arguments_1","text":"data : Iterable[T] , optional, defualt= None ; Initial data.","title":"Arguments:"},{"location":"usage/factory/#return-value","text":"List[T] : connection, serializer and deserializer are the same as those of the factory list_ .","title":"Return value:"},{"location":"usage/factory/#createdata","text":"Construct List[T] with connection, serializer and deserializer preset from the factory.","title":"create(data)"},{"location":"usage/factory/#arguments_2","text":"data : Iterable[T] , optional, defualt= None ; Initial data.","title":"Arguments:"},{"location":"usage/factory/#return-value_1","text":"List[T] : connection, serializer and deserializer are the same as those of the factory.","title":"Return value:"},{"location":"usage/factory/#ft","text":"Return a copy of this factory f that creates container with table name t .","title":"f[t]"},{"location":"usage/factory/#arguments_3","text":"t : str ; the table name","title":"Arguments:"},{"location":"usage/factory/#return-value_2","text":"ListFactory[T] : connection, serializer and deserializer are the same as those of this factory and the table name of the List[T] from this return value will be set to t . ===","title":"Return value:"},{"location":"usage/factory/#dictfactory","text":"","title":"DictFactory"},{"location":"usage/factory/#dictfactorykt-vt","text":"Constructor of DictFactory which constructs Dict .","title":"DictFactory[KT, VT](...)"},{"location":"usage/factory/#type-parameters_1","text":"KT : key type of the Dict VT : value type of the Dict","title":"Type Parameters:"},{"location":"usage/factory/#arguments_4","text":"connection : str or sqlite3.Connection , optional, default= None ; If None , temporary file is automatically created. If connection is a str , it will be used as the sqlite3 database file name. You can pass a sqlite3.Connection directly. table_name : str , optional, default= None ; Table name of containers from this factory. This argument is assumed not to be specified directly by users. If None , an auto-generated unique name will be used. key_serializer : Callable[[KT], bytes] , optional, default= None ; Function to serialize key. If None , pickle.dumps is used. key_deserializer : Callable[[bytes], KT] , optional, default= None ; Function to deserialize key. If None , pickle.loads is used. value_serializer : Callable[[VT], bytes] , optional, default= None ; Function to serialize value. If None , key_serializer is used. value_deserializer : Callable[[bytes], VT] , optional, default= None ; Function to deserialize value. If None , key_deserializer is used.","title":"Arguments:"},{"location":"usage/factory/#dict_data-kwargs","text":"Construct Dict[KT, VT] with connection, key*serializer, etc., preset from DictFactory[KT, VT] dict* .","title":"dict_(data, **kwargs)"},{"location":"usage/factory/#arguments_5","text":"data : Mapping[KT, VT] or Iterable[Tuple[KT, VT]] , optional, defualt= None ; Initial data. **kwargs : VT , optional; Appended to initial data.","title":"Arguments:"},{"location":"usage/factory/#return-value_3","text":"Dict[KT, VT] : connection, key*serializers, etc., are the same as those of the factory dict* .","title":"Return value:"},{"location":"usage/factory/#createdata-kwargs","text":"Construct Dict[KT, VT] with connection, key_serializer, etc., preset from the factory.","title":"create(data, **kwargs)"},{"location":"usage/factory/#arguments_6","text":"data : Mapping[KT, VT] or Iterable[Tuple[KT, VT]] , optional, defualt= None ; Initial data. **kwargs : VT , optional; Appended to initial data.","title":"Arguments:"},{"location":"usage/factory/#return-value_4","text":"Dict[KT, VT] : connection, key_serializers, etc., are the same as those of the factory.","title":"Return value:"},{"location":"usage/factory/#ft_1","text":"Return a copy of this factory f that creates container with table name t .","title":"f[t]"},{"location":"usage/factory/#arguments_7","text":"t : str ; the table name","title":"Arguments:"},{"location":"usage/factory/#return-value_5","text":"DictFactory[KT, VT] : connection, key_serializer, key_deserializer, value_serializer and value_deserializer are the same as those of this factory and the table name of the Dict[KT, VT] from this return value will be set to t . ===","title":"Return value:"},{"location":"usage/factory/#setfactory","text":"","title":"SetFactory"},{"location":"usage/factory/#setfactoryt","text":"Constructor of SetFactory which constructs Set .","title":"SetFactory[T](...)"},{"location":"usage/factory/#type-parameters_2","text":"T : value type of the Set","title":"Type Parameters:"},{"location":"usage/factory/#arguments_8","text":"connection : str or sqlite3.Connection , optional, default= None ; If None , temporary file is automatically created. If connection is a str , it will be used as the sqlite3 database file name. You can pass a sqlite3.Connection directly. table_name : str , optional, default= None ; Table name of containers from this factory. This argument is assumed not to be specified directly by users. If None , an auto-generated unique name will be used. serializer : Callable[[T], bytes] , optional, default= None ; Function to serialize value. If None , pickle.dumps is used. deserializer : Callable[[bytes], T] , optional, default= None ; Function to deserialize value. If None , pickle.loads is used.","title":"Arguments:"},{"location":"usage/factory/#set_data","text":"Construct Set[T] with connection, serializer and deserializer preset from SetFactory[T] set_ .","title":"set_(data)"},{"location":"usage/factory/#arguments_9","text":"data : Iterable[T] , optional, defualt= None ; Initial data.","title":"Arguments:"},{"location":"usage/factory/#return-value_6","text":"Set[T] : connection, serializer and deserializer are the same as those of the factory set_ .","title":"Return value:"},{"location":"usage/factory/#createdata_1","text":"Construct Set[T] with connection, serializer and deserializer preset from the factory.","title":"create(data)"},{"location":"usage/factory/#arguments_10","text":"data : Iterable[T] , optional, defualt= None ; Initial data.","title":"Arguments:"},{"location":"usage/factory/#return-value_7","text":"Set[T] : connection, serializer and deserializer are the same as those of the factory.","title":"Return value:"},{"location":"usage/factory/#ft_2","text":"Return a copy of this factory f that creates container with table name t .","title":"f[t]"},{"location":"usage/factory/#arguments_11","text":"t : str ; the table name","title":"Arguments:"},{"location":"usage/factory/#return-value_8","text":"SetFactory[T] : connection, serializer and deserializer are the same as those of this factory and the table name of the Set[T] from this return value will be set to t . ===","title":"Return value:"},{"location":"usage/list/","text":"List List is a container compatible with the built-in list , which serializes values and stores them in a sqlite3 database. List[T](...) Constructor. Type Parameters: T : value type Arguments: data : Iterable[T] , optional, positional-only argument, defualt= None ; Initial data. If None or no argument is given, persistent data is used as is if available, otherwise persistent data in the corresponding table is cleared and given data is stored instead. connection : str or sqlite3.Connection , optional, default= None ; If None , temporary file is automatically created. If connection is a str , it will be used as the sqlite3 database file name. You can pass a sqlite3.Connection directly. table_name : str , optional, default= None ; Table name of this container. If None , an auto-generated unique name will be used. Available characters are letters, numbers, and underscores ( _ ). serializer : Callable[[T], bytes] , optional, default= None ; Function to serialize value. If None , pickle.dumps is used. deserializer : Callable[[bytes], T] , optional, default= None ; Function to deserialize value. If None , pickle.loads is used. persist : bool , optional, default= True ; If True , table won't be deleted even when the object is deleted. If False , the table is deleted when this object is deleted. pickling_strategy : PicklingStrategy , optional, default= PicklingStrategy.whole_table ; Flag to control pickling method. See PicklingStrategy for more details. sorting_strategy : SortingStrategy , optional, defualt= SortingStrategy.balanced ; Flat to control sorting method. See SortingStrategy for more details. x in s True if an item of s is equal to x , else False Arguments: x : object ; an object to be checked Return value: bool : True if x is in s and False otherwise. x not in s False if an item of s is equal to x , else True Arguments: x : object ; an object to be checked Return value: bool : False if x is in s and True otherwise. s + t The concatenation of s and t Arguments: t : Iterable[T] ; An iterable to be concatenated. Return value: List[T] : The concatenation of s and t . s * n or n * s equivalent to adding s to itself n times. Arguments: n : int ; Number of times to repeat. Return value: List[T] : a list of n times s was repeated. s[i] i -th item of s , origin 0 . Arguments: i : int ; Item index. If it is negative, it is equivalent to len(s) + i . Return value: T : i -th item of s , origin 0 . s[i:j] Slice of s from i to j . Arguments: i : int or None ; Item index where the slice starts from. If None , it is treated as 0 . j : int or None ; Item index where the slice stops at. If None , it is treated as len(s) . Return value: List[T] : Slice of s from i to j . s[i:j:k] Slice of s from i to j with step k Arguments: i : int or None ; Item index where the slice starts from. If None , it is treated as 0 . j : int or None ; Item index where the slice stops at. If None , it is treated as len(s) . k : int or None ; Step of the slice. If None , it is treated as 1 . Return value: List[T] : Slice of s from i to j with step k . len(s) Return the number of items in s: List[T] Return value: int : The number of items in s index(x[, i[, j]]]) Return index of the first occurrence of x in the list (at or after index i and before index j ). Raise ValueError if x is not in the list. Arguments: x : T ; Value to retrieve corresponding index if exists. i : int , optional, default= None ; First index to look up the value. If it is None , start from the first element of the list. j : int , optional, default= None ; Index before the last one to look for a value. If None , search to the end. Return value: int : Index of the first occurrence of x in the list. count(x) Return total number of occurrences of x in the list. Arguments: x : T ; Value that counts the number of occurrences. Return value: int : The number of occurrences of x in the list. s[i] = x Replace item i of s by x . Arguments: i : int ; Item index to be set. If it is negative, it is equivalent to len(s) + i x : T ; Value to be set. Return value: None . del s[i] Remove item i of s . Arguments: i : int ; Item index to be removed. If it is negative, it is equivalent to len(s) + i . Return value: None . s[i:j] = t Replace slice of s from i to j by the contents of the iterable t . Arguments: i : int or None ; Item index where the slice starts from. If None , it is treated as 0 . j : int or None ; Item index where the slice stops at. If None , it is treated as len(s) . t : Iterable[T] ; Iterable to be inserted. Return value: None . del s[i:j] Remove slice of s from i to j . Arguments: i : int or None ; Item index where the slice starts from. If None , it is treated as 0 . j : int or None ; Item index where the slice stops at. If None , it is treated as len(s) . Return value: None . s[i:j:k] = t Replace the elements of s[i:j:k] by those ofthe iterable t . The length must be the same. Otherwise, ValueError will be raised. Arguments: i : int or None ; Item index where the slice starts from. If None , it is treated as 0 . j : int or None ; Item index where the slice stops at. If None , it is treated as len(s) . k : int or None ; Step of the slice. If None , it is treated as 1 . t : Iterable[T] ; Iterable to be substituted. The length must be the same as that of the slice. Return value: None . del s[i:j:k] Remove the elements of s[i:j:k] from the list. Arguments: i : int or None ; Item index where the slice starts from. If None , it is treated as 0 . j : int or None ; Item index where the slice stops at. If None , it is treated as len(s) . k : int or None ; Step of the slice. If None , it is treated as 1 . Return value: None . append(x) Append x to the end of the sequence. Arguments: x : T ; Item to be appended. Return value; None . clear() Remove all items from the list. Return value: None . copy() Return a copy of the list. The actual behavior is to create a table with a unique table name and copy the items to the new table. Therefore, unlike the built-in list copy, the behavior is similar to deep copy. Be aware that the copied list is volatile. Return value: List[T] : A volatile copy of the list. extend(t) Concatenate the list and t . Arguments: t : Iterable[T] ; An iterable to be concatenated. Return value: None . s += t Concatenate s and t . Arguments: t : Iterable[T] ; An iterable to be concatenated. Return value: None . s *= n Update s with its contents repeated n times. Arguments: n : int ; Number of times to repeat. Return value: None . insert(i, x) Insert x into the list at the index i . Arguments: i : int ; Index to be inserted. x : T ; Item to be inserted. Return value: None . pop(i) Retrieve the item at i and also remove it from s. Arguments: i : int or None , optional, default= None ; Index to be retrieved and removed. If it is None , it is treated as the last index of the list. Return value: T : i -th item of s , origin 0 . remove(x) Remove the first item of s whose value is equal to x . Arguments: x : T ; Item to be removed. Return value: None . reverse() Reverse the items of the list in place. Return value: None . sort(reverse, key) Sort the items of the list in place. The value of reverse can be either True or False , resulting in descending or ascending order, respectively. key specifies a function of one argument that is used to extract a comparison key from each list element. Arguments: reverse : bool , optional, default= False ; By default, the order is ascending, but if this value is True , the order will be descending. key : Callable[[T], Any] , optional, default= None ; Function to extract a comparison key from each list element. Return value: None . sorting_strategy Read-only property for the sorting strategy. Return value: SortingStrategy : The sorting strategy. SortingStrategy Enum to control the time-memory tradeoffs of the sorting method. SortingStrategy.fastest The fastest but most memory-consuming way. This method dumps all tuples of sort keys (the return value of the key function) and indices into an on-memory list and sorts it then reorders the records with UPDATE statements. If you are sure that you have sufficient memory to hold all the sort keys (and indices), this method is the best. SortingStrategy.balanced The default strategy. This method dumps only the indices into an on-memory list and doesn't cache all the sort keys in contrast with the fastest strategy. If you have a little memory to hold an array of indexes and the cost of computing sort keys is very low, this strategy works well. SortingStrategy.memory_saving This method never caches anything during sorting. This method is very slow due to the frequent use of UPDATE statements and should only be used when memory is very limited.","title":"List"},{"location":"usage/list/#list","text":"List is a container compatible with the built-in list , which serializes values and stores them in a sqlite3 database.","title":"List"},{"location":"usage/list/#listt","text":"Constructor.","title":"List[T](...)"},{"location":"usage/list/#type-parameters","text":"T : value type","title":"Type Parameters:"},{"location":"usage/list/#arguments","text":"data : Iterable[T] , optional, positional-only argument, defualt= None ; Initial data. If None or no argument is given, persistent data is used as is if available, otherwise persistent data in the corresponding table is cleared and given data is stored instead. connection : str or sqlite3.Connection , optional, default= None ; If None , temporary file is automatically created. If connection is a str , it will be used as the sqlite3 database file name. You can pass a sqlite3.Connection directly. table_name : str , optional, default= None ; Table name of this container. If None , an auto-generated unique name will be used. Available characters are letters, numbers, and underscores ( _ ). serializer : Callable[[T], bytes] , optional, default= None ; Function to serialize value. If None , pickle.dumps is used. deserializer : Callable[[bytes], T] , optional, default= None ; Function to deserialize value. If None , pickle.loads is used. persist : bool , optional, default= True ; If True , table won't be deleted even when the object is deleted. If False , the table is deleted when this object is deleted. pickling_strategy : PicklingStrategy , optional, default= PicklingStrategy.whole_table ; Flag to control pickling method. See PicklingStrategy for more details. sorting_strategy : SortingStrategy , optional, defualt= SortingStrategy.balanced ; Flat to control sorting method. See SortingStrategy for more details.","title":"Arguments:"},{"location":"usage/list/#x-in-s","text":"True if an item of s is equal to x , else False","title":"x in s"},{"location":"usage/list/#arguments_1","text":"x : object ; an object to be checked","title":"Arguments:"},{"location":"usage/list/#return-value","text":"bool : True if x is in s and False otherwise.","title":"Return value:"},{"location":"usage/list/#x-not-in-s","text":"False if an item of s is equal to x , else True","title":"x not in s"},{"location":"usage/list/#arguments_2","text":"x : object ; an object to be checked","title":"Arguments:"},{"location":"usage/list/#return-value_1","text":"bool : False if x is in s and True otherwise.","title":"Return value:"},{"location":"usage/list/#s-t","text":"The concatenation of s and t","title":"s + t"},{"location":"usage/list/#arguments_3","text":"t : Iterable[T] ; An iterable to be concatenated.","title":"Arguments:"},{"location":"usage/list/#return-value_2","text":"List[T] : The concatenation of s and t .","title":"Return value:"},{"location":"usage/list/#s-n-or-n-s","text":"equivalent to adding s to itself n times.","title":"s * n or n * s"},{"location":"usage/list/#arguments_4","text":"n : int ; Number of times to repeat.","title":"Arguments:"},{"location":"usage/list/#return-value_3","text":"List[T] : a list of n times s was repeated.","title":"Return value:"},{"location":"usage/list/#si","text":"i -th item of s , origin 0 .","title":"s[i]"},{"location":"usage/list/#arguments_5","text":"i : int ; Item index. If it is negative, it is equivalent to len(s) + i .","title":"Arguments:"},{"location":"usage/list/#return-value_4","text":"T : i -th item of s , origin 0 .","title":"Return value:"},{"location":"usage/list/#sij","text":"Slice of s from i to j .","title":"s[i:j]"},{"location":"usage/list/#arguments_6","text":"i : int or None ; Item index where the slice starts from. If None , it is treated as 0 . j : int or None ; Item index where the slice stops at. If None , it is treated as len(s) .","title":"Arguments:"},{"location":"usage/list/#return-value_5","text":"List[T] : Slice of s from i to j .","title":"Return value:"},{"location":"usage/list/#sijk","text":"Slice of s from i to j with step k","title":"s[i:j:k]"},{"location":"usage/list/#arguments_7","text":"i : int or None ; Item index where the slice starts from. If None , it is treated as 0 . j : int or None ; Item index where the slice stops at. If None , it is treated as len(s) . k : int or None ; Step of the slice. If None , it is treated as 1 .","title":"Arguments:"},{"location":"usage/list/#return-value_6","text":"List[T] : Slice of s from i to j with step k .","title":"Return value:"},{"location":"usage/list/#lens","text":"Return the number of items in s: List[T]","title":"len(s)"},{"location":"usage/list/#return-value_7","text":"int : The number of items in s","title":"Return value:"},{"location":"usage/list/#indexx-i-j","text":"Return index of the first occurrence of x in the list (at or after index i and before index j ). Raise ValueError if x is not in the list.","title":"index(x[, i[, j]]])"},{"location":"usage/list/#arguments_8","text":"x : T ; Value to retrieve corresponding index if exists. i : int , optional, default= None ; First index to look up the value. If it is None , start from the first element of the list. j : int , optional, default= None ; Index before the last one to look for a value. If None , search to the end.","title":"Arguments:"},{"location":"usage/list/#return-value_8","text":"int : Index of the first occurrence of x in the list.","title":"Return value:"},{"location":"usage/list/#countx","text":"Return total number of occurrences of x in the list.","title":"count(x)"},{"location":"usage/list/#arguments_9","text":"x : T ; Value that counts the number of occurrences.","title":"Arguments:"},{"location":"usage/list/#return-value_9","text":"int : The number of occurrences of x in the list.","title":"Return value:"},{"location":"usage/list/#si-x","text":"Replace item i of s by x .","title":"s[i] = x"},{"location":"usage/list/#arguments_10","text":"i : int ; Item index to be set. If it is negative, it is equivalent to len(s) + i x : T ; Value to be set.","title":"Arguments:"},{"location":"usage/list/#return-value_10","text":"None .","title":"Return value:"},{"location":"usage/list/#del-si","text":"Remove item i of s .","title":"del s[i]"},{"location":"usage/list/#arguments_11","text":"i : int ; Item index to be removed. If it is negative, it is equivalent to len(s) + i .","title":"Arguments:"},{"location":"usage/list/#return-value_11","text":"None .","title":"Return value:"},{"location":"usage/list/#sij-t","text":"Replace slice of s from i to j by the contents of the iterable t .","title":"s[i:j] = t"},{"location":"usage/list/#arguments_12","text":"i : int or None ; Item index where the slice starts from. If None , it is treated as 0 . j : int or None ; Item index where the slice stops at. If None , it is treated as len(s) . t : Iterable[T] ; Iterable to be inserted.","title":"Arguments:"},{"location":"usage/list/#return-value_12","text":"None .","title":"Return value:"},{"location":"usage/list/#del-sij","text":"Remove slice of s from i to j .","title":"del s[i:j]"},{"location":"usage/list/#arguments_13","text":"i : int or None ; Item index where the slice starts from. If None , it is treated as 0 . j : int or None ; Item index where the slice stops at. If None , it is treated as len(s) .","title":"Arguments:"},{"location":"usage/list/#return-value_13","text":"None .","title":"Return value:"},{"location":"usage/list/#sijk-t","text":"Replace the elements of s[i:j:k] by those ofthe iterable t . The length must be the same. Otherwise, ValueError will be raised.","title":"s[i:j:k] = t"},{"location":"usage/list/#arguments_14","text":"i : int or None ; Item index where the slice starts from. If None , it is treated as 0 . j : int or None ; Item index where the slice stops at. If None , it is treated as len(s) . k : int or None ; Step of the slice. If None , it is treated as 1 . t : Iterable[T] ; Iterable to be substituted. The length must be the same as that of the slice.","title":"Arguments:"},{"location":"usage/list/#return-value_14","text":"None .","title":"Return value:"},{"location":"usage/list/#del-sijk","text":"Remove the elements of s[i:j:k] from the list.","title":"del s[i:j:k]"},{"location":"usage/list/#arguments_15","text":"i : int or None ; Item index where the slice starts from. If None , it is treated as 0 . j : int or None ; Item index where the slice stops at. If None , it is treated as len(s) . k : int or None ; Step of the slice. If None , it is treated as 1 .","title":"Arguments:"},{"location":"usage/list/#return-value_15","text":"None .","title":"Return value:"},{"location":"usage/list/#appendx","text":"Append x to the end of the sequence.","title":"append(x)"},{"location":"usage/list/#arguments_16","text":"x : T ; Item to be appended.","title":"Arguments:"},{"location":"usage/list/#return-value_16","text":"None .","title":"Return value;"},{"location":"usage/list/#clear","text":"Remove all items from the list.","title":"clear()"},{"location":"usage/list/#return-value_17","text":"None .","title":"Return value:"},{"location":"usage/list/#copy","text":"Return a copy of the list. The actual behavior is to create a table with a unique table name and copy the items to the new table. Therefore, unlike the built-in list copy, the behavior is similar to deep copy. Be aware that the copied list is volatile.","title":"copy()"},{"location":"usage/list/#return-value_18","text":"List[T] : A volatile copy of the list.","title":"Return value:"},{"location":"usage/list/#extendt","text":"Concatenate the list and t .","title":"extend(t)"},{"location":"usage/list/#arguments_17","text":"t : Iterable[T] ; An iterable to be concatenated.","title":"Arguments:"},{"location":"usage/list/#return-value_19","text":"None .","title":"Return value:"},{"location":"usage/list/#s-t_1","text":"Concatenate s and t .","title":"s += t"},{"location":"usage/list/#arguments_18","text":"t : Iterable[T] ; An iterable to be concatenated.","title":"Arguments:"},{"location":"usage/list/#return-value_20","text":"None .","title":"Return value:"},{"location":"usage/list/#s-n","text":"Update s with its contents repeated n times.","title":"s *= n"},{"location":"usage/list/#arguments_19","text":"n : int ; Number of times to repeat.","title":"Arguments:"},{"location":"usage/list/#return-value_21","text":"None .","title":"Return value:"},{"location":"usage/list/#inserti-x","text":"Insert x into the list at the index i .","title":"insert(i, x)"},{"location":"usage/list/#arguments_20","text":"i : int ; Index to be inserted. x : T ; Item to be inserted.","title":"Arguments:"},{"location":"usage/list/#return-value_22","text":"None .","title":"Return value:"},{"location":"usage/list/#popi","text":"Retrieve the item at i and also remove it from s.","title":"pop(i)"},{"location":"usage/list/#arguments_21","text":"i : int or None , optional, default= None ; Index to be retrieved and removed. If it is None , it is treated as the last index of the list.","title":"Arguments:"},{"location":"usage/list/#return-value_23","text":"T : i -th item of s , origin 0 .","title":"Return value:"},{"location":"usage/list/#removex","text":"Remove the first item of s whose value is equal to x .","title":"remove(x)"},{"location":"usage/list/#arguments_22","text":"x : T ; Item to be removed.","title":"Arguments:"},{"location":"usage/list/#return-value_24","text":"None .","title":"Return value:"},{"location":"usage/list/#reverse","text":"Reverse the items of the list in place.","title":"reverse()"},{"location":"usage/list/#return-value_25","text":"None .","title":"Return value:"},{"location":"usage/list/#sortreverse-key","text":"Sort the items of the list in place. The value of reverse can be either True or False , resulting in descending or ascending order, respectively. key specifies a function of one argument that is used to extract a comparison key from each list element.","title":"sort(reverse, key)"},{"location":"usage/list/#arguments_23","text":"reverse : bool , optional, default= False ; By default, the order is ascending, but if this value is True , the order will be descending. key : Callable[[T], Any] , optional, default= None ; Function to extract a comparison key from each list element.","title":"Arguments:"},{"location":"usage/list/#return-value_26","text":"None .","title":"Return value:"},{"location":"usage/list/#sorting_strategy","text":"Read-only property for the sorting strategy.","title":"sorting_strategy"},{"location":"usage/list/#return-value_27","text":"SortingStrategy : The sorting strategy.","title":"Return value:"},{"location":"usage/list/#sortingstrategy","text":"Enum to control the time-memory tradeoffs of the sorting method.","title":"SortingStrategy"},{"location":"usage/list/#sortingstrategyfastest","text":"The fastest but most memory-consuming way. This method dumps all tuples of sort keys (the return value of the key function) and indices into an on-memory list and sorts it then reorders the records with UPDATE statements. If you are sure that you have sufficient memory to hold all the sort keys (and indices), this method is the best.","title":"SortingStrategy.fastest"},{"location":"usage/list/#sortingstrategybalanced","text":"The default strategy. This method dumps only the indices into an on-memory list and doesn't cache all the sort keys in contrast with the fastest strategy. If you have a little memory to hold an array of indexes and the cost of computing sort keys is very low, this strategy works well.","title":"SortingStrategy.balanced"},{"location":"usage/list/#sortingstrategymemory_saving","text":"This method never caches anything during sorting. This method is very slow due to the frequent use of UPDATE statements and should only be used when memory is very limited.","title":"SortingStrategy.memory_saving"},{"location":"usage/set/","text":"Set Set is a container compatible with the built-in set , which serializes values and stores them in a sqlite3 database. Set[T](...) Constructor. Type Parameters: T : value type Arguments: data : Iterable[T] , optional, positional-only argument, defualt= None ; Initial data. If None or no argument is given, persistent data is used as is if available, otherwise persistent data in the corresponding table is cleared and given data is stored instead. connection : str or sqlite3.Connection , optional, default= None ; If None , temporary file is automatically created. If connection is a str , it will be used as the sqlite3 database file name. You can pass a sqlite3.Connection directly. table_name : str , optional, default= None ; Table name of this container. If None , an auto-generated unique name will be used. Available characters are letters, numbers, and underscores ( _ ). serializer : Callable[[T], bytes] , optional, default= None ; Function to serialize value. If None , pickle.dumps is used. deserializer : Callable[[bytes], T] , optional, default= None ; Function to deserialize value. If None , pickle.loads is used. persist : bool , optional, default= True ; If True , table won't be deleted even when the object is deleted. If False , the table is deleted when this object is deleted. pickling_strategy : PicklingStrategy , optional, default= PicklingStrategy.whole_table ; Flag to control pickling method. See PicklingStrategy for more details. len(s) Return the number of items in s: Set[T] Return value: int : The number of items in s x in s True if x is in s , else False Arguments: x : object ; an object to be checked Return value: bool : True if x is in s and False otherwise. x not in s False if x is in s , else True Arguments: x : object ; an object to be checked Return value: bool : False if x is in s and True otherwise. isdisjoint(other) Return True if the set has no elements in common with other . Arguments: other : Iterable[T] ; Iterable to check if disjoint. Return value: bool : True if the set is disjoint with other , False otherwise. issubset(other) Return True if every element in the set is in other . Arguments: other : Iterable[T] ; Iterable to check if this one contains the set. Return value: bool : True if the set is subset of other , False otherwise. s <= other Return True if every element in the set is in other . Argument: other : Iterable[T] ; Iterable to check if this one contains all the elements in the set. Return value: bool : True if the set is subset of other , False otherwise. s < other Return True if every element in the set is in other and s is not equal to other . Arguments: other : Iterable[T] ; Iterable to check if it contains all elements of the set and is not equal to the set. Return value: bool : True if the set is a proper subset of other , False otherwise. issuperset(other) Return True if every element in other is in the set. Arguments: other : Iterable[T] ; Iterable to check if the elements are contained. Return value: bool : True if the set is superset of other , False otherwise. s >= other Return True if every element in other is in the set. Argument: other : Iterable[T] ; Iterable to check if the elements are contained. Return value: bool : True if the set is superset of other , False otherwise. s > other Return True if every element in other is in the set and s is not equal to other . Arguments: other : Iterable[T] ; Iterable to check if it all elements are in the set and is not equal to the set. Return value: bool : True if the set is a proper superset of other , False otherwise. union(*others) Return a new set with elements from the set and all others . Arguments: others : Iterable[T] ; Iterables to take the union. Return value: Set[T] : A new set with elements from the set and all others . s | other Return a new set with elements from s and other . Arguments: other : Iterable[T] ; Iterable to take the union. Return value: Set[T] : A new set with elements from s and other . intersection(*others) Return a new set with elements common to the set and all others . Arguments: others : Iterable[T] ; Iterables to take the intersection. Return value: Set[T] : A new set with elements common to the set and all others . s & other Return a new set with elements common to s and other . Arguments: other : Iterable[T] ; Iterable to take the intersection. Return value: Set[T] : A new set with elements common to s and other . difference(*others) Return a new set with elements in the set that are not in the others . Arguments: others : Iterable[T] ; Iterables to take the difference. Return value: Set[T] : A new set with elements in the set that are not in the others . s - other Return a new set with elements in the set that are not in the other . Arguments: other : Iterable[T] ; Iterable to take the difference. Return value: Set[T] : A new set with elements in the set that are not in the other . symmetric_difference(other) Return a new set with elements in either the set or other but not both. Arguments: other : Iterable[T] ; Iterable to take the symmetric difference. Return value: Set[T] : A new set with elements in either the set or other but not both. s ^ other Return a new set with elements in either the set or other but not both. Arguments: other : Iterable[T] ; Iterable to take the symmetric difference. Return value: Set[T] : A new set with elements in either the set or other but not both. copy() Return a copy of the set. The actual behavior is to create a table with a unique table name and copy the elements to the new table. Therefore, unlike the built-in set copy, the behavior is similar to deep copy. Be aware that the copied set is volatile. Return value: Set[T] : A volatile copy of the set. update(*others) Update the set by adding elements from all others . Arguments: others : Iterable[T] ; Iterables to take the union. Return value: None . s |= other Update the set by adding elements from other . Arguments: other : Iterable[T] ; Iterable to take the union. Return value: None . intersection_update(*others) Update the set by keeping only elements found in the set and all others . Arguments: others : Iterable[T] ; Iterables to take the intersection. Return value: None . s &= other Update the set by keeping only elements found in the set and other . Arguments: other : Iterable[T] ; Iterable to take the intersection. Return value: None . symmetric_difference_update(other) Update the set by keeping only elements found in either the set or other but not both. Arguments: other : Iterable[T] ; Iterable to take the symmetric difference. Return value: None . s ^= other Update the set by keeping only elements found in either the set or other but not both. Arguments: other : Iterable[T] ; Iterable to take the symmetric difference. Return value: None . add(elem) Add an element elem to the set. Arguments: elem : T ; An element to be added. Return value: None . remove(elem) Remove an element elem from the set. Raises KeyError if elem is not contained in the set. Arguemnts: elem : T ; An element to be removed. Return value: None . discard(elem) Remove an element elem from the set if it is present. Arguments: elem : T ; An element to be removed. Return value: None . pop() Remove and return an arbitrary element from the set. Raises KeyError if the set is empty. Return value: T : An element in the set. clear() Remove all elements from the set. Return value: None .","title":"Set"},{"location":"usage/set/#set","text":"Set is a container compatible with the built-in set , which serializes values and stores them in a sqlite3 database.","title":"Set"},{"location":"usage/set/#sett","text":"Constructor.","title":"Set[T](...)"},{"location":"usage/set/#type-parameters","text":"T : value type","title":"Type Parameters:"},{"location":"usage/set/#arguments","text":"data : Iterable[T] , optional, positional-only argument, defualt= None ; Initial data. If None or no argument is given, persistent data is used as is if available, otherwise persistent data in the corresponding table is cleared and given data is stored instead. connection : str or sqlite3.Connection , optional, default= None ; If None , temporary file is automatically created. If connection is a str , it will be used as the sqlite3 database file name. You can pass a sqlite3.Connection directly. table_name : str , optional, default= None ; Table name of this container. If None , an auto-generated unique name will be used. Available characters are letters, numbers, and underscores ( _ ). serializer : Callable[[T], bytes] , optional, default= None ; Function to serialize value. If None , pickle.dumps is used. deserializer : Callable[[bytes], T] , optional, default= None ; Function to deserialize value. If None , pickle.loads is used. persist : bool , optional, default= True ; If True , table won't be deleted even when the object is deleted. If False , the table is deleted when this object is deleted. pickling_strategy : PicklingStrategy , optional, default= PicklingStrategy.whole_table ; Flag to control pickling method. See PicklingStrategy for more details.","title":"Arguments:"},{"location":"usage/set/#lens","text":"Return the number of items in s: Set[T]","title":"len(s)"},{"location":"usage/set/#return-value","text":"int : The number of items in s","title":"Return value:"},{"location":"usage/set/#x-in-s","text":"True if x is in s , else False","title":"x in s"},{"location":"usage/set/#arguments_1","text":"x : object ; an object to be checked","title":"Arguments:"},{"location":"usage/set/#return-value_1","text":"bool : True if x is in s and False otherwise.","title":"Return value:"},{"location":"usage/set/#x-not-in-s","text":"False if x is in s , else True","title":"x not in s"},{"location":"usage/set/#arguments_2","text":"x : object ; an object to be checked","title":"Arguments:"},{"location":"usage/set/#return-value_2","text":"bool : False if x is in s and True otherwise.","title":"Return value:"},{"location":"usage/set/#isdisjointother","text":"Return True if the set has no elements in common with other .","title":"isdisjoint(other)"},{"location":"usage/set/#arguments_3","text":"other : Iterable[T] ; Iterable to check if disjoint.","title":"Arguments:"},{"location":"usage/set/#return-value_3","text":"bool : True if the set is disjoint with other , False otherwise.","title":"Return value:"},{"location":"usage/set/#issubsetother","text":"Return True if every element in the set is in other .","title":"issubset(other)"},{"location":"usage/set/#arguments_4","text":"other : Iterable[T] ; Iterable to check if this one contains the set.","title":"Arguments:"},{"location":"usage/set/#return-value_4","text":"bool : True if the set is subset of other , False otherwise.","title":"Return value:"},{"location":"usage/set/#s-other","text":"Return True if every element in the set is in other .","title":"s &lt;= other"},{"location":"usage/set/#argument","text":"other : Iterable[T] ; Iterable to check if this one contains all the elements in the set.","title":"Argument:"},{"location":"usage/set/#return-value_5","text":"bool : True if the set is subset of other , False otherwise.","title":"Return value:"},{"location":"usage/set/#s-other_1","text":"Return True if every element in the set is in other and s is not equal to other .","title":"s &lt; other"},{"location":"usage/set/#arguments_5","text":"other : Iterable[T] ; Iterable to check if it contains all elements of the set and is not equal to the set.","title":"Arguments:"},{"location":"usage/set/#return-value_6","text":"bool : True if the set is a proper subset of other , False otherwise.","title":"Return value:"},{"location":"usage/set/#issupersetother","text":"Return True if every element in other is in the set.","title":"issuperset(other)"},{"location":"usage/set/#arguments_6","text":"other : Iterable[T] ; Iterable to check if the elements are contained.","title":"Arguments:"},{"location":"usage/set/#return-value_7","text":"bool : True if the set is superset of other , False otherwise.","title":"Return value:"},{"location":"usage/set/#s-other_2","text":"Return True if every element in other is in the set.","title":"s &gt;= other"},{"location":"usage/set/#argument_1","text":"other : Iterable[T] ; Iterable to check if the elements are contained.","title":"Argument:"},{"location":"usage/set/#return-value_8","text":"bool : True if the set is superset of other , False otherwise.","title":"Return value:"},{"location":"usage/set/#s-other_3","text":"Return True if every element in other is in the set and s is not equal to other .","title":"s &gt; other"},{"location":"usage/set/#arguments_7","text":"other : Iterable[T] ; Iterable to check if it all elements are in the set and is not equal to the set.","title":"Arguments:"},{"location":"usage/set/#return-value_9","text":"bool : True if the set is a proper superset of other , False otherwise.","title":"Return value:"},{"location":"usage/set/#unionothers","text":"Return a new set with elements from the set and all others .","title":"union(*others)"},{"location":"usage/set/#arguments_8","text":"others : Iterable[T] ; Iterables to take the union.","title":"Arguments:"},{"location":"usage/set/#return-value_10","text":"Set[T] : A new set with elements from the set and all others .","title":"Return value:"},{"location":"usage/set/#s-other_4","text":"Return a new set with elements from s and other .","title":"s | other"},{"location":"usage/set/#arguments_9","text":"other : Iterable[T] ; Iterable to take the union.","title":"Arguments:"},{"location":"usage/set/#return-value_11","text":"Set[T] : A new set with elements from s and other .","title":"Return value:"},{"location":"usage/set/#intersectionothers","text":"Return a new set with elements common to the set and all others .","title":"intersection(*others)"},{"location":"usage/set/#arguments_10","text":"others : Iterable[T] ; Iterables to take the intersection.","title":"Arguments:"},{"location":"usage/set/#return-value_12","text":"Set[T] : A new set with elements common to the set and all others .","title":"Return value:"},{"location":"usage/set/#s-other_5","text":"Return a new set with elements common to s and other .","title":"s &amp; other"},{"location":"usage/set/#arguments_11","text":"other : Iterable[T] ; Iterable to take the intersection.","title":"Arguments:"},{"location":"usage/set/#return-value_13","text":"Set[T] : A new set with elements common to s and other .","title":"Return value:"},{"location":"usage/set/#differenceothers","text":"Return a new set with elements in the set that are not in the others .","title":"difference(*others)"},{"location":"usage/set/#arguments_12","text":"others : Iterable[T] ; Iterables to take the difference.","title":"Arguments:"},{"location":"usage/set/#return-value_14","text":"Set[T] : A new set with elements in the set that are not in the others .","title":"Return value:"},{"location":"usage/set/#s-other_6","text":"Return a new set with elements in the set that are not in the other .","title":"s - other"},{"location":"usage/set/#arguments_13","text":"other : Iterable[T] ; Iterable to take the difference.","title":"Arguments:"},{"location":"usage/set/#return-value_15","text":"Set[T] : A new set with elements in the set that are not in the other .","title":"Return value:"},{"location":"usage/set/#symmetric_differenceother","text":"Return a new set with elements in either the set or other but not both.","title":"symmetric_difference(other)"},{"location":"usage/set/#arguments_14","text":"other : Iterable[T] ; Iterable to take the symmetric difference.","title":"Arguments:"},{"location":"usage/set/#return-value_16","text":"Set[T] : A new set with elements in either the set or other but not both.","title":"Return value:"},{"location":"usage/set/#s-other_7","text":"Return a new set with elements in either the set or other but not both.","title":"s ^ other"},{"location":"usage/set/#arguments_15","text":"other : Iterable[T] ; Iterable to take the symmetric difference.","title":"Arguments:"},{"location":"usage/set/#return-value_17","text":"Set[T] : A new set with elements in either the set or other but not both.","title":"Return value:"},{"location":"usage/set/#copy","text":"Return a copy of the set. The actual behavior is to create a table with a unique table name and copy the elements to the new table. Therefore, unlike the built-in set copy, the behavior is similar to deep copy. Be aware that the copied set is volatile.","title":"copy()"},{"location":"usage/set/#return-value_18","text":"Set[T] : A volatile copy of the set.","title":"Return value:"},{"location":"usage/set/#updateothers","text":"Update the set by adding elements from all others .","title":"update(*others)"},{"location":"usage/set/#arguments_16","text":"others : Iterable[T] ; Iterables to take the union.","title":"Arguments:"},{"location":"usage/set/#return-value_19","text":"None .","title":"Return value:"},{"location":"usage/set/#s-other_8","text":"Update the set by adding elements from other .","title":"s |= other"},{"location":"usage/set/#arguments_17","text":"other : Iterable[T] ; Iterable to take the union.","title":"Arguments:"},{"location":"usage/set/#return-value_20","text":"None .","title":"Return value:"},{"location":"usage/set/#intersection_updateothers","text":"Update the set by keeping only elements found in the set and all others .","title":"intersection_update(*others)"},{"location":"usage/set/#arguments_18","text":"others : Iterable[T] ; Iterables to take the intersection.","title":"Arguments:"},{"location":"usage/set/#return-value_21","text":"None .","title":"Return value:"},{"location":"usage/set/#s-other_9","text":"Update the set by keeping only elements found in the set and other .","title":"s &amp;= other"},{"location":"usage/set/#arguments_19","text":"other : Iterable[T] ; Iterable to take the intersection.","title":"Arguments:"},{"location":"usage/set/#return-value_22","text":"None .","title":"Return value:"},{"location":"usage/set/#symmetric_difference_updateother","text":"Update the set by keeping only elements found in either the set or other but not both.","title":"symmetric_difference_update(other)"},{"location":"usage/set/#arguments_20","text":"other : Iterable[T] ; Iterable to take the symmetric difference.","title":"Arguments:"},{"location":"usage/set/#return-value_23","text":"None .","title":"Return value:"},{"location":"usage/set/#s-other_10","text":"Update the set by keeping only elements found in either the set or other but not both.","title":"s ^= other"},{"location":"usage/set/#arguments_21","text":"other : Iterable[T] ; Iterable to take the symmetric difference.","title":"Arguments:"},{"location":"usage/set/#return-value_24","text":"None .","title":"Return value:"},{"location":"usage/set/#addelem","text":"Add an element elem to the set.","title":"add(elem)"},{"location":"usage/set/#arguments_22","text":"elem : T ; An element to be added.","title":"Arguments:"},{"location":"usage/set/#return-value_25","text":"None .","title":"Return value:"},{"location":"usage/set/#removeelem","text":"Remove an element elem from the set. Raises KeyError if elem is not contained in the set.","title":"remove(elem)"},{"location":"usage/set/#arguemnts","text":"elem : T ; An element to be removed.","title":"Arguemnts:"},{"location":"usage/set/#return-value_26","text":"None .","title":"Return value:"},{"location":"usage/set/#discardelem","text":"Remove an element elem from the set if it is present.","title":"discard(elem)"},{"location":"usage/set/#arguments_23","text":"elem : T ; An element to be removed.","title":"Arguments:"},{"location":"usage/set/#return-value_27","text":"None .","title":"Return value:"},{"location":"usage/set/#pop","text":"Remove and return an arbitrary element from the set. Raises KeyError if the set is empty.","title":"pop()"},{"location":"usage/set/#return-value_28","text":"T : An element in the set.","title":"Return value:"},{"location":"usage/set/#clear","text":"Remove all elements from the set.","title":"clear()"},{"location":"usage/set/#return-value_29","text":"None .","title":"Return value:"},{"location":"usage/dictview/itemsview/","text":"ItemsView ItemsView is a view object which is returned by dict.items() . It provides a dynamic view on the dictionary's (key, value) tuples, which means when dictionay changes, the view reflects these changes. len(itemsview) Return the number of items in the dictionary d: Dict[KT, VT] where itemsview=d.items() . Return value: int : The number of items in d iter(itemsview) Return an iterator over the (key, value) tuples in the dictionary. The order of the items is guaranteed to be inserted order. Return value: Iterable[Tuple[_KT_co, _VT_co]] : The iterator over the keys in the dictionary. item in itemsview Return whether if item is in the dictionary. Arguments: item : object ; An object to be checked Return value: bool : True if item is in the dictionary and False otherwise. reversed(itemsview) Return a reverse iterator over the (key, value) tuples of the dictionary. (provided only python version 3.8 and above) Return value: Iterator[Tuple[_KT_co, _VT_co]] : The reverse iterator over the (key, value) tuples in the dictonary. itemsview & other Return a set with elements common to itemsview and other . Arguments: other : Iterable[Any] ; Iterable to take the intersection. Return value: Set[Tuple[_KT_co, _VT_co]] : A set with elements common to itemsview and other . other & itemsview Return a set with elements common to itemsview and other . Arguments: other : Iterable[_T] ; Iterable to take the intersection. Return value: Set[_T] : A set with elements common to itemsview and other . itemsview | other Return a new set with elements from itemsview and other . Arguments: other : Iterable[_T] ; Iterable to take the union. Return value: Set[Union[Tuple[_KT_co, _VT_co], _T]] : A new set with elements from itemsview and other . other | itemsview Return a new set with elements from itemsview and other . Arguments: other : Iterable[_T] ; Iterable to take the union. Return value: Set[Union[Tuple[_KT_co, _VT_co], _T]] : A new set with elements from itemsview and other . itemsview - other Return a new set with elements in the itemsview that are not in the other . Arguments: other : Iterable[Any] ; Iterable to take the difference. Return value: Set[Tuple[_KT_co, _VT_co]] : A new set with elements in the set that are not in the other . other - itemsview Return a new set with elements in the other that are not in the itemsview . Arguments: other : Iterable[_T] ; Iterable to take the difference. Return value: Set[_T] : A new set with elements in the other that are not in the itemsview . itemsview ^ other Return a new set with elements in either the itemsview or other but not both. Arguments: other : Iterable[_T] ; Iterable to take the symmetric difference. Return value Set[Union[Tuple[_KT_co, _VT_co], _T]] : A new set with elements in either the itemsview or other but not both. other ^ itemsview Return a new set with elements in either the itemsview or other but not both. Arguments: other : Iterable[_T] ; Iterable to take the symmetric difference. Return value Set[Union[Tuple[_KT_co, _VT_co], _T]] : A new set with elements in either the itemsview or other but not both. itemsview.mapping Return a MappingProxyType that wraps the original dictionary to which the view refers. (provided only python version 3.10 and above) Return value MappingProxyType : A read-only proxy of the original dictionary.","title":"ItemsView"},{"location":"usage/dictview/itemsview/#itemsview","text":"ItemsView is a view object which is returned by dict.items() . It provides a dynamic view on the dictionary's (key, value) tuples, which means when dictionay changes, the view reflects these changes.","title":"ItemsView"},{"location":"usage/dictview/itemsview/#lenitemsview","text":"Return the number of items in the dictionary d: Dict[KT, VT] where itemsview=d.items() .","title":"len(itemsview)"},{"location":"usage/dictview/itemsview/#return-value","text":"int : The number of items in d","title":"Return value:"},{"location":"usage/dictview/itemsview/#iteritemsview","text":"Return an iterator over the (key, value) tuples in the dictionary. The order of the items is guaranteed to be inserted order.","title":"iter(itemsview)"},{"location":"usage/dictview/itemsview/#return-value_1","text":"Iterable[Tuple[_KT_co, _VT_co]] : The iterator over the keys in the dictionary.","title":"Return value:"},{"location":"usage/dictview/itemsview/#item-in-itemsview","text":"Return whether if item is in the dictionary.","title":"item in itemsview"},{"location":"usage/dictview/itemsview/#arguments","text":"item : object ; An object to be checked","title":"Arguments:"},{"location":"usage/dictview/itemsview/#return-value_2","text":"bool : True if item is in the dictionary and False otherwise.","title":"Return value:"},{"location":"usage/dictview/itemsview/#reverseditemsview","text":"Return a reverse iterator over the (key, value) tuples of the dictionary. (provided only python version 3.8 and above)","title":"reversed(itemsview)"},{"location":"usage/dictview/itemsview/#return-value_3","text":"Iterator[Tuple[_KT_co, _VT_co]] : The reverse iterator over the (key, value) tuples in the dictonary.","title":"Return value:"},{"location":"usage/dictview/itemsview/#itemsview-other","text":"Return a set with elements common to itemsview and other .","title":"itemsview &amp; other"},{"location":"usage/dictview/itemsview/#arguments_1","text":"other : Iterable[Any] ; Iterable to take the intersection.","title":"Arguments:"},{"location":"usage/dictview/itemsview/#return-value_4","text":"Set[Tuple[_KT_co, _VT_co]] : A set with elements common to itemsview and other .","title":"Return value:"},{"location":"usage/dictview/itemsview/#other-itemsview","text":"Return a set with elements common to itemsview and other .","title":"other &amp; itemsview"},{"location":"usage/dictview/itemsview/#arguments_2","text":"other : Iterable[_T] ; Iterable to take the intersection.","title":"Arguments:"},{"location":"usage/dictview/itemsview/#return-value_5","text":"Set[_T] : A set with elements common to itemsview and other .","title":"Return value:"},{"location":"usage/dictview/itemsview/#itemsview-other_1","text":"Return a new set with elements from itemsview and other .","title":"itemsview | other"},{"location":"usage/dictview/itemsview/#arguments_3","text":"other : Iterable[_T] ; Iterable to take the union.","title":"Arguments:"},{"location":"usage/dictview/itemsview/#return-value_6","text":"Set[Union[Tuple[_KT_co, _VT_co], _T]] : A new set with elements from itemsview and other .","title":"Return value:"},{"location":"usage/dictview/itemsview/#other-itemsview_1","text":"Return a new set with elements from itemsview and other .","title":"other | itemsview"},{"location":"usage/dictview/itemsview/#arguments_4","text":"other : Iterable[_T] ; Iterable to take the union.","title":"Arguments:"},{"location":"usage/dictview/itemsview/#return-value_7","text":"Set[Union[Tuple[_KT_co, _VT_co], _T]] : A new set with elements from itemsview and other .","title":"Return value:"},{"location":"usage/dictview/itemsview/#itemsview-other_2","text":"Return a new set with elements in the itemsview that are not in the other .","title":"itemsview - other"},{"location":"usage/dictview/itemsview/#arguments_5","text":"other : Iterable[Any] ; Iterable to take the difference.","title":"Arguments:"},{"location":"usage/dictview/itemsview/#return-value_8","text":"Set[Tuple[_KT_co, _VT_co]] : A new set with elements in the set that are not in the other .","title":"Return value:"},{"location":"usage/dictview/itemsview/#other-itemsview_2","text":"Return a new set with elements in the other that are not in the itemsview .","title":"other - itemsview"},{"location":"usage/dictview/itemsview/#arguments_6","text":"other : Iterable[_T] ; Iterable to take the difference.","title":"Arguments:"},{"location":"usage/dictview/itemsview/#return-value_9","text":"Set[_T] : A new set with elements in the other that are not in the itemsview .","title":"Return value:"},{"location":"usage/dictview/itemsview/#itemsview-other_3","text":"Return a new set with elements in either the itemsview or other but not both.","title":"itemsview ^ other"},{"location":"usage/dictview/itemsview/#arguments_7","text":"other : Iterable[_T] ; Iterable to take the symmetric difference.","title":"Arguments:"},{"location":"usage/dictview/itemsview/#return-value_10","text":"Set[Union[Tuple[_KT_co, _VT_co], _T]] : A new set with elements in either the itemsview or other but not both.","title":"Return value"},{"location":"usage/dictview/itemsview/#other-itemsview_3","text":"Return a new set with elements in either the itemsview or other but not both.","title":"other ^ itemsview"},{"location":"usage/dictview/itemsview/#arguments_8","text":"other : Iterable[_T] ; Iterable to take the symmetric difference.","title":"Arguments:"},{"location":"usage/dictview/itemsview/#return-value_11","text":"Set[Union[Tuple[_KT_co, _VT_co], _T]] : A new set with elements in either the itemsview or other but not both.","title":"Return value"},{"location":"usage/dictview/itemsview/#itemsviewmapping","text":"Return a MappingProxyType that wraps the original dictionary to which the view refers. (provided only python version 3.10 and above)","title":"itemsview.mapping"},{"location":"usage/dictview/itemsview/#return-value_12","text":"MappingProxyType : A read-only proxy of the original dictionary.","title":"Return value"},{"location":"usage/dictview/keysview/","text":"KeysView KeysView is a view object which is returned by dict.keys() . It provides a dynamic view on the dictionary's keys, which means when dictionay changes, the view reflects these changes. len(keysview) Return the number of items in the dictionary d: Dict[KT, VT] where keysview=d.keys() . Return value: int : The number of items in d iter(keysview) Return an iterator over the keys in the dictionary. The order of the keys is guaranteed to be inserted order. Return value: Iterator[_KT_co] : The iterator over the keys in the dictonary. key in keysview Return whether if key is in the dictionary. Arguments: key : object ; An object to be checked Return value: bool : True if key is in the dictionary and False otherwise. reversed(keysview) Return a reverse iterator over the keys of the dictionary. (provided only python version 3.8 and above) Return value: Iterator[_KT_co] : The reverse iterator over the keys in the dictonary. keysview & other Return a set with elements common to keysview and other . Arguments: other : Iterable[Any] ; Iterable to take the intersection. Return value: Set[_KT_co] : A set with elements common to keysview and other . other & keysview Return a set with elements common to keysview and other . Arguments: other : Iterable[_T] ; Iterable to take the intersection. Return value: Set[_T] : A set with elements common to keysview and other . keysview | other Return a new set with elements from keysview and other . Arguments: other : Iterable[_T] ; Iterable to take the union. Return value: Set[Union[_KT_co, _T]] : A new set with elements from keysview and other . other | keysview Return a new set with elements from keysview and other . Arguments: other : Iterable[_T] ; Iterable to take the union. Return value: Set[Union[_KT_co, _T]] : A new set with elements from keysview and other . keysview - other Return a new set with elements in the keysview that are not in the other . Arguments: other : Iterable[Any] ; Iterable to take the difference. Return value: Set[_KT_co] : A new set with elements in the set that are not in the other . other - keysview Return a new set with elements in the other that are not in the keysview . Arguments: other : Iterable[_T] ; Iterable to be taken the difference. Return value: Set[_T] : A new set with elements in other that are not in the keysview . keysview ^ other Return a new set with elements in either the keysview or other but not both. Arguments: other : Iterable[_T] ; Iterable to take the symmetric difference. Return value Set[Union[_KT_co, _T]] : A new set with elements in either the keysview or other but not both. other ^ keysview Return a new set with elements in either the keysview or other but not both. Arguments: other : Iterable[_T] ; Iterable to take the symmetric difference. Return value Set[Union[_KT_co, _T]] : A new set with elements in either the keysview or other but not both. keysview.mapping Return a MappingProxyType that wraps the original dictionary to which the view refers. (provided only python version 3.10 and above) Return value MappingProxyType : A read-only proxy of the original dictionary.","title":"KeysView"},{"location":"usage/dictview/keysview/#keysview","text":"KeysView is a view object which is returned by dict.keys() . It provides a dynamic view on the dictionary's keys, which means when dictionay changes, the view reflects these changes.","title":"KeysView"},{"location":"usage/dictview/keysview/#lenkeysview","text":"Return the number of items in the dictionary d: Dict[KT, VT] where keysview=d.keys() .","title":"len(keysview)"},{"location":"usage/dictview/keysview/#return-value","text":"int : The number of items in d","title":"Return value:"},{"location":"usage/dictview/keysview/#iterkeysview","text":"Return an iterator over the keys in the dictionary. The order of the keys is guaranteed to be inserted order.","title":"iter(keysview)"},{"location":"usage/dictview/keysview/#return-value_1","text":"Iterator[_KT_co] : The iterator over the keys in the dictonary.","title":"Return value:"},{"location":"usage/dictview/keysview/#key-in-keysview","text":"Return whether if key is in the dictionary.","title":"key in keysview"},{"location":"usage/dictview/keysview/#arguments","text":"key : object ; An object to be checked","title":"Arguments:"},{"location":"usage/dictview/keysview/#return-value_2","text":"bool : True if key is in the dictionary and False otherwise.","title":"Return value:"},{"location":"usage/dictview/keysview/#reversedkeysview","text":"Return a reverse iterator over the keys of the dictionary. (provided only python version 3.8 and above)","title":"reversed(keysview)"},{"location":"usage/dictview/keysview/#return-value_3","text":"Iterator[_KT_co] : The reverse iterator over the keys in the dictonary.","title":"Return value:"},{"location":"usage/dictview/keysview/#keysview-other","text":"Return a set with elements common to keysview and other .","title":"keysview &amp; other"},{"location":"usage/dictview/keysview/#arguments_1","text":"other : Iterable[Any] ; Iterable to take the intersection.","title":"Arguments:"},{"location":"usage/dictview/keysview/#return-value_4","text":"Set[_KT_co] : A set with elements common to keysview and other .","title":"Return value:"},{"location":"usage/dictview/keysview/#other-keysview","text":"Return a set with elements common to keysview and other .","title":"other &amp; keysview"},{"location":"usage/dictview/keysview/#arguments_2","text":"other : Iterable[_T] ; Iterable to take the intersection.","title":"Arguments:"},{"location":"usage/dictview/keysview/#return-value_5","text":"Set[_T] : A set with elements common to keysview and other .","title":"Return value:"},{"location":"usage/dictview/keysview/#keysview-other_1","text":"Return a new set with elements from keysview and other .","title":"keysview | other"},{"location":"usage/dictview/keysview/#arguments_3","text":"other : Iterable[_T] ; Iterable to take the union.","title":"Arguments:"},{"location":"usage/dictview/keysview/#return-value_6","text":"Set[Union[_KT_co, _T]] : A new set with elements from keysview and other .","title":"Return value:"},{"location":"usage/dictview/keysview/#other-keysview_1","text":"Return a new set with elements from keysview and other .","title":"other | keysview"},{"location":"usage/dictview/keysview/#arguments_4","text":"other : Iterable[_T] ; Iterable to take the union.","title":"Arguments:"},{"location":"usage/dictview/keysview/#return-value_7","text":"Set[Union[_KT_co, _T]] : A new set with elements from keysview and other .","title":"Return value:"},{"location":"usage/dictview/keysview/#keysview-other_2","text":"Return a new set with elements in the keysview that are not in the other .","title":"keysview - other"},{"location":"usage/dictview/keysview/#arguments_5","text":"other : Iterable[Any] ; Iterable to take the difference.","title":"Arguments:"},{"location":"usage/dictview/keysview/#return-value_8","text":"Set[_KT_co] : A new set with elements in the set that are not in the other .","title":"Return value:"},{"location":"usage/dictview/keysview/#other-keysview_2","text":"Return a new set with elements in the other that are not in the keysview .","title":"other - keysview"},{"location":"usage/dictview/keysview/#arguments_6","text":"other : Iterable[_T] ; Iterable to be taken the difference.","title":"Arguments:"},{"location":"usage/dictview/keysview/#return-value_9","text":"Set[_T] : A new set with elements in other that are not in the keysview .","title":"Return value:"},{"location":"usage/dictview/keysview/#keysview-other_3","text":"Return a new set with elements in either the keysview or other but not both.","title":"keysview ^ other"},{"location":"usage/dictview/keysview/#arguments_7","text":"other : Iterable[_T] ; Iterable to take the symmetric difference.","title":"Arguments:"},{"location":"usage/dictview/keysview/#return-value_10","text":"Set[Union[_KT_co, _T]] : A new set with elements in either the keysview or other but not both.","title":"Return value"},{"location":"usage/dictview/keysview/#other-keysview_3","text":"Return a new set with elements in either the keysview or other but not both.","title":"other ^ keysview"},{"location":"usage/dictview/keysview/#arguments_8","text":"other : Iterable[_T] ; Iterable to take the symmetric difference.","title":"Arguments:"},{"location":"usage/dictview/keysview/#return-value_11","text":"Set[Union[_KT_co, _T]] : A new set with elements in either the keysview or other but not both.","title":"Return value"},{"location":"usage/dictview/keysview/#keysviewmapping","text":"Return a MappingProxyType that wraps the original dictionary to which the view refers. (provided only python version 3.10 and above)","title":"keysview.mapping"},{"location":"usage/dictview/keysview/#return-value_12","text":"MappingProxyType : A read-only proxy of the original dictionary.","title":"Return value"},{"location":"usage/dictview/valuesview/","text":"ValuesView ValuesView is a view object which is returned by dict.views() . It provides a dynamic view on the dictionary's values, which means when dictionay changes, the view reflects these changes. len(valuesview) Return the number of items in the dictionay d: Dict[KT, VT] where valuesview=d.values() . Return value: int : The number of items in d iter(valuesview) Return an iterator over the values in the dictionary. The order of the values is guaranteed to be inserted order. Return value: Iterator[_VT_co] : The iterator over the values in the dictionary. value in valuesview Return whether if value is in the dictionary. Arguments: value : object ; An object to be checked Return value: bool : True if value is in the dictionary and False otherwise. reversed(valuesview) Return a reverse iterator over the values of the dictionary. (provided only python version 3.8 and above) Return value: Iterator[_VT_co] : The reverse iterator over the values in the dictonary. valuesview.mapping Return a MappingProxyType that wraps the original dictionary to which the view refers. (provided only python version 3.10 and above) Return value MappingProxyType : A read-only proxy of the original dictionary.","title":"ValuesView"},{"location":"usage/dictview/valuesview/#valuesview","text":"ValuesView is a view object which is returned by dict.views() . It provides a dynamic view on the dictionary's values, which means when dictionay changes, the view reflects these changes.","title":"ValuesView"},{"location":"usage/dictview/valuesview/#lenvaluesview","text":"Return the number of items in the dictionay d: Dict[KT, VT] where valuesview=d.values() .","title":"len(valuesview)"},{"location":"usage/dictview/valuesview/#return-value","text":"int : The number of items in d","title":"Return value:"},{"location":"usage/dictview/valuesview/#itervaluesview","text":"Return an iterator over the values in the dictionary. The order of the values is guaranteed to be inserted order.","title":"iter(valuesview)"},{"location":"usage/dictview/valuesview/#return-value_1","text":"Iterator[_VT_co] : The iterator over the values in the dictionary.","title":"Return value:"},{"location":"usage/dictview/valuesview/#value-in-valuesview","text":"Return whether if value is in the dictionary.","title":"value in valuesview"},{"location":"usage/dictview/valuesview/#arguments","text":"value : object ; An object to be checked","title":"Arguments:"},{"location":"usage/dictview/valuesview/#return-value_2","text":"bool : True if value is in the dictionary and False otherwise.","title":"Return value:"},{"location":"usage/dictview/valuesview/#reversedvaluesview","text":"Return a reverse iterator over the values of the dictionary. (provided only python version 3.8 and above)","title":"reversed(valuesview)"},{"location":"usage/dictview/valuesview/#return-value_3","text":"Iterator[_VT_co] : The reverse iterator over the values in the dictonary.","title":"Return value:"},{"location":"usage/dictview/valuesview/#valuesviewmapping","text":"Return a MappingProxyType that wraps the original dictionary to which the view refers. (provided only python version 3.10 and above)","title":"valuesview.mapping"},{"location":"usage/dictview/valuesview/#return-value_4","text":"MappingProxyType : A read-only proxy of the original dictionary.","title":"Return value"}]}